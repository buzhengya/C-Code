// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_activity.proto

#ifndef PROTOBUF_cs_5factivity_2eproto__INCLUDED
#define PROTOBUF_cs_5factivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_protoid.pb.h"
#include "cm_activitytype.pb.h"
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
#include "cs_role.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5factivity_2eproto();
void protobuf_AssignDesc_cs_5factivity_2eproto();
void protobuf_ShutdownFile_cs_5factivity_2eproto();

class game_job;
class job_all_list_ntf;
class job_update_ntf;
class job_operation_req;
class job_operation_ack;
class all_quests_ntf;
class quests_update_ntf;
class finish_quest_req;
class finish_quest_ack_rewards;
class finish_quest_ack;
class get_quest_activity_reward_req;
class get_quest_activity_reward_ack;
class shop_get_all_item_req;
class shop_get_all_item_ack;
class shop_buy_item_req;
class shop_buy_item_ack;
class shop_refresh_req;
class shop_refresh_ack;
class shop_item_opt_req;
class shop_item_opt_ack;
class shop_open_ntf;
class game_officer_apply_req;
class game_officer_apply_ack;
class officer_daily_salary_req;
class officer_daily_salary_ack;
class officer_result_ntf;
class get_officer_applicants_req;
class get_officer_applicants_ack;
class cancel_officer_apply_req;
class cancel_officer_apply_ack;
class share_officer_upgrade_req;
class share_officer_upgrade_ack;
class get_share_officer_upgrade_req;
class get_share_officer_upgrade_ack;
class update_offical_first_award_ntf;
class get_offical_first_award_req;
class get_offical_first_award_ack;
class get_offical_challenge_roles_req;
class get_offical_challenge_roles_ack;
class add_offical_challenge_num_req;
class add_offical_challenge_num_ack;
class offical_battle_report_req;
class offical_battle_report_ack;
class office_result;
class get_offical_member_req;
class get_offical_member_ack;
class get_global_offical_rank_req;
class get_global_offical_rank_ack;
class enter_tower_req;
class enter_tower_ack;
class select_tower_floor_req;
class select_tower_floor_ack;
class tower_die_req;
class tower_die_ack;
class tower_step_fini_req;
class tower_step_fini_ack;
class question_check_req;
class question_check_ack;
class update_tower_info_ntf;
class tower_raids_req;
class tower_raids_ack;
class tower_reset_req;
class tower_reset_ack;
class tower_reward_ntf;
class question_find_wrong_req;
class question_find_wrong_ack;
class enter_adv_req;
class enter_adv_ack;
class select_adv_city_req;
class select_adv_city_ack;
class adv_event_req;
class adv_event_ack;
class adv_reward_ntf;
class adv_ask_req;
class adv_ask_ack;
class adv_tujian_req;
class adv_tujian_ack;
class leave_adv_req;
class leave_adv_ack;

// ===================================================================

class game_job : public ::google::protobuf::Message {
 public:
  game_job();
  virtual ~game_job();

  game_job(const game_job& from);

  inline game_job& operator=(const game_job& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_job& default_instance();

  void Swap(game_job* other);

  // implements Message ----------------------------------------------

  game_job* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_job& from);
  void MergeFrom(const game_job& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 job_id = 1;
  inline bool has_job_id() const;
  inline void clear_job_id();
  static const int kJobIdFieldNumber = 1;
  inline ::google::protobuf::int32 job_id() const;
  inline void set_job_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool is_receive = 3;
  inline bool has_is_receive() const;
  inline void clear_is_receive();
  static const int kIsReceiveFieldNumber = 3;
  inline bool is_receive() const;
  inline void set_is_receive(bool value);

  // optional uint32 cur_step = 4;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // optional uint32 max_step = 5;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 5;
  inline ::google::protobuf::uint32 max_step() const;
  inline void set_max_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_job)
 private:
  inline void set_has_job_id();
  inline void clear_has_job_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_receive();
  inline void clear_has_is_receive();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_max_step();
  inline void clear_has_max_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 job_id_;
  ::google::protobuf::int32 type_;
  bool is_receive_;
  ::google::protobuf::uint32 cur_step_;
  ::google::protobuf::uint32 max_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static game_job* default_instance_;
};
// -------------------------------------------------------------------

class job_all_list_ntf : public ::google::protobuf::Message {
 public:
  job_all_list_ntf();
  virtual ~job_all_list_ntf();

  job_all_list_ntf(const job_all_list_ntf& from);

  inline job_all_list_ntf& operator=(const job_all_list_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const job_all_list_ntf& default_instance();

  void Swap(job_all_list_ntf* other);

  // implements Message ----------------------------------------------

  job_all_list_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const job_all_list_ntf& from);
  void MergeFrom(const job_all_list_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.game_job job_s = 2;
  inline int job_s_size() const;
  inline void clear_job_s();
  static const int kJobSFieldNumber = 2;
  inline const ::SProtoSpace::game_job& job_s(int index) const;
  inline ::SProtoSpace::game_job* mutable_job_s(int index);
  inline ::SProtoSpace::game_job* add_job_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
      job_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
      mutable_job_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.job_all_list_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job > job_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static job_all_list_ntf* default_instance_;
};
// -------------------------------------------------------------------

class job_update_ntf : public ::google::protobuf::Message {
 public:
  job_update_ntf();
  virtual ~job_update_ntf();

  job_update_ntf(const job_update_ntf& from);

  inline job_update_ntf& operator=(const job_update_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const job_update_ntf& default_instance();

  void Swap(job_update_ntf* other);

  // implements Message ----------------------------------------------

  job_update_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const job_update_ntf& from);
  void MergeFrom(const job_update_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.game_job add_job_s = 2;
  inline int add_job_s_size() const;
  inline void clear_add_job_s();
  static const int kAddJobSFieldNumber = 2;
  inline const ::SProtoSpace::game_job& add_job_s(int index) const;
  inline ::SProtoSpace::game_job* mutable_add_job_s(int index);
  inline ::SProtoSpace::game_job* add_add_job_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
      add_job_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
      mutable_add_job_s();

  // repeated .SProtoSpace.game_job del_job_s = 3;
  inline int del_job_s_size() const;
  inline void clear_del_job_s();
  static const int kDelJobSFieldNumber = 3;
  inline const ::SProtoSpace::game_job& del_job_s(int index) const;
  inline ::SProtoSpace::game_job* mutable_del_job_s(int index);
  inline ::SProtoSpace::game_job* add_del_job_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
      del_job_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
      mutable_del_job_s();

  // repeated .SProtoSpace.game_job fix_job_s = 4;
  inline int fix_job_s_size() const;
  inline void clear_fix_job_s();
  static const int kFixJobSFieldNumber = 4;
  inline const ::SProtoSpace::game_job& fix_job_s(int index) const;
  inline ::SProtoSpace::game_job* mutable_fix_job_s(int index);
  inline ::SProtoSpace::game_job* add_fix_job_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
      fix_job_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
      mutable_fix_job_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.job_update_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job > add_job_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job > del_job_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job > fix_job_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static job_update_ntf* default_instance_;
};
// -------------------------------------------------------------------

class job_operation_req : public ::google::protobuf::Message {
 public:
  job_operation_req();
  virtual ~job_operation_req();

  job_operation_req(const job_operation_req& from);

  inline job_operation_req& operator=(const job_operation_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const job_operation_req& default_instance();

  void Swap(job_operation_req* other);

  // implements Message ----------------------------------------------

  job_operation_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const job_operation_req& from);
  void MergeFrom(const job_operation_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 tpye = 2;
  inline bool has_tpye() const;
  inline void clear_tpye();
  static const int kTpyeFieldNumber = 2;
  inline ::google::protobuf::int32 tpye() const;
  inline void set_tpye(::google::protobuf::int32 value);

  // optional int32 job_id = 3;
  inline bool has_job_id() const;
  inline void clear_job_id();
  static const int kJobIdFieldNumber = 3;
  inline ::google::protobuf::int32 job_id() const;
  inline void set_job_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.job_operation_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tpye();
  inline void clear_has_tpye();
  inline void set_has_job_id();
  inline void clear_has_job_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 tpye_;
  ::google::protobuf::int32 job_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static job_operation_req* default_instance_;
};
// -------------------------------------------------------------------

class job_operation_ack : public ::google::protobuf::Message {
 public:
  job_operation_ack();
  virtual ~job_operation_ack();

  job_operation_ack(const job_operation_ack& from);

  inline job_operation_ack& operator=(const job_operation_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const job_operation_ack& default_instance();

  void Swap(job_operation_ack* other);

  // implements Message ----------------------------------------------

  job_operation_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const job_operation_ack& from);
  void MergeFrom(const job_operation_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.job_operation_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static job_operation_ack* default_instance_;
};
// -------------------------------------------------------------------

class all_quests_ntf : public ::google::protobuf::Message {
 public:
  all_quests_ntf();
  virtual ~all_quests_ntf();

  all_quests_ntf(const all_quests_ntf& from);

  inline all_quests_ntf& operator=(const all_quests_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_quests_ntf& default_instance();

  void Swap(all_quests_ntf* other);

  // implements Message ----------------------------------------------

  all_quests_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_quests_ntf& from);
  void MergeFrom(const all_quests_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.quest_data quests = 2;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 2;
  inline const ::SProtoSpace::quest_data& quests(int index) const;
  inline ::SProtoSpace::quest_data* mutable_quests(int index);
  inline ::SProtoSpace::quest_data* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >*
      mutable_quests();

  // repeated .SProtoSpace.task_activity_data activities = 3;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 3;
  inline const ::SProtoSpace::task_activity_data& activities(int index) const;
  inline ::SProtoSpace::task_activity_data* mutable_activities(int index);
  inline ::SProtoSpace::task_activity_data* add_activities();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >&
      activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >*
      mutable_activities();

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_quests_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data > quests_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data > activities_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static all_quests_ntf* default_instance_;
};
// -------------------------------------------------------------------

class quests_update_ntf : public ::google::protobuf::Message {
 public:
  quests_update_ntf();
  virtual ~quests_update_ntf();

  quests_update_ntf(const quests_update_ntf& from);

  inline quests_update_ntf& operator=(const quests_update_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quests_update_ntf& default_instance();

  void Swap(quests_update_ntf* other);

  // implements Message ----------------------------------------------

  quests_update_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quests_update_ntf& from);
  void MergeFrom(const quests_update_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.quest_data quests = 2;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 2;
  inline const ::SProtoSpace::quest_data& quests(int index) const;
  inline ::SProtoSpace::quest_data* mutable_quests(int index);
  inline ::SProtoSpace::quest_data* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >*
      mutable_quests();

  // repeated .SProtoSpace.task_activity_data activities = 3;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 3;
  inline const ::SProtoSpace::task_activity_data& activities(int index) const;
  inline ::SProtoSpace::task_activity_data* mutable_activities(int index);
  inline ::SProtoSpace::task_activity_data* add_activities();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >&
      activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >*
      mutable_activities();

  // @@protoc_insertion_point(class_scope:SProtoSpace.quests_update_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data > quests_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data > activities_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static quests_update_ntf* default_instance_;
};
// -------------------------------------------------------------------

class finish_quest_req : public ::google::protobuf::Message {
 public:
  finish_quest_req();
  virtual ~finish_quest_req();

  finish_quest_req(const finish_quest_req& from);

  inline finish_quest_req& operator=(const finish_quest_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const finish_quest_req& default_instance();

  void Swap(finish_quest_req* other);

  // implements Message ----------------------------------------------

  finish_quest_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const finish_quest_req& from);
  void MergeFrom(const finish_quest_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 config_id = 2;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.finish_quest_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static finish_quest_req* default_instance_;
};
// -------------------------------------------------------------------

class finish_quest_ack_rewards : public ::google::protobuf::Message {
 public:
  finish_quest_ack_rewards();
  virtual ~finish_quest_ack_rewards();

  finish_quest_ack_rewards(const finish_quest_ack_rewards& from);

  inline finish_quest_ack_rewards& operator=(const finish_quest_ack_rewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const finish_quest_ack_rewards& default_instance();

  void Swap(finish_quest_ack_rewards* other);

  // implements Message ----------------------------------------------

  finish_quest_ack_rewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const finish_quest_ack_rewards& from);
  void MergeFrom(const finish_quest_ack_rewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.finish_quest_ack_rewards)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static finish_quest_ack_rewards* default_instance_;
};
// -------------------------------------------------------------------

class finish_quest_ack : public ::google::protobuf::Message {
 public:
  finish_quest_ack();
  virtual ~finish_quest_ack();

  finish_quest_ack(const finish_quest_ack& from);

  inline finish_quest_ack& operator=(const finish_quest_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const finish_quest_ack& default_instance();

  void Swap(finish_quest_ack* other);

  // implements Message ----------------------------------------------

  finish_quest_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const finish_quest_ack& from);
  void MergeFrom(const finish_quest_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 config_id = 2;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
  inline int rewwards_size() const;
  inline void clear_rewwards();
  static const int kRewwardsFieldNumber = 5;
  inline const ::SProtoSpace::finish_quest_ack_rewards& rewwards(int index) const;
  inline ::SProtoSpace::finish_quest_ack_rewards* mutable_rewwards(int index);
  inline ::SProtoSpace::finish_quest_ack_rewards* add_rewwards();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::finish_quest_ack_rewards >&
      rewwards() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::finish_quest_ack_rewards >*
      mutable_rewwards();

  // @@protoc_insertion_point(class_scope:SProtoSpace.finish_quest_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::finish_quest_ack_rewards > rewwards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static finish_quest_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_quest_activity_reward_req : public ::google::protobuf::Message {
 public:
  get_quest_activity_reward_req();
  virtual ~get_quest_activity_reward_req();

  get_quest_activity_reward_req(const get_quest_activity_reward_req& from);

  inline get_quest_activity_reward_req& operator=(const get_quest_activity_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_quest_activity_reward_req& default_instance();

  void Swap(get_quest_activity_reward_req* other);

  // implements Message ----------------------------------------------

  get_quest_activity_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_quest_activity_reward_req& from);
  void MergeFrom(const get_quest_activity_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 activity_lv = 2;
  inline bool has_activity_lv() const;
  inline void clear_activity_lv();
  static const int kActivityLvFieldNumber = 2;
  inline ::google::protobuf::int32 activity_lv() const;
  inline void set_activity_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_quest_activity_reward_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_activity_lv();
  inline void clear_has_activity_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 activity_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_quest_activity_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class get_quest_activity_reward_ack : public ::google::protobuf::Message {
 public:
  get_quest_activity_reward_ack();
  virtual ~get_quest_activity_reward_ack();

  get_quest_activity_reward_ack(const get_quest_activity_reward_ack& from);

  inline get_quest_activity_reward_ack& operator=(const get_quest_activity_reward_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_quest_activity_reward_ack& default_instance();

  void Swap(get_quest_activity_reward_ack* other);

  // implements Message ----------------------------------------------

  get_quest_activity_reward_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_quest_activity_reward_ack& from);
  void MergeFrom(const get_quest_activity_reward_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 activity_lv = 2;
  inline bool has_activity_lv() const;
  inline void clear_activity_lv();
  static const int kActivityLvFieldNumber = 2;
  inline ::google::protobuf::int32 activity_lv() const;
  inline void set_activity_lv(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_quest_activity_reward_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_activity_lv();
  inline void clear_has_activity_lv();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 activity_lv_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_quest_activity_reward_ack* default_instance_;
};
// -------------------------------------------------------------------

class shop_get_all_item_req : public ::google::protobuf::Message {
 public:
  shop_get_all_item_req();
  virtual ~shop_get_all_item_req();

  shop_get_all_item_req(const shop_get_all_item_req& from);

  inline shop_get_all_item_req& operator=(const shop_get_all_item_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_get_all_item_req& default_instance();

  void Swap(shop_get_all_item_req* other);

  // implements Message ----------------------------------------------

  shop_get_all_item_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_get_all_item_req& from);
  void MergeFrom(const shop_get_all_item_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_get_all_item_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_get_all_item_req* default_instance_;
};
// -------------------------------------------------------------------

class shop_get_all_item_ack : public ::google::protobuf::Message {
 public:
  shop_get_all_item_ack();
  virtual ~shop_get_all_item_ack();

  shop_get_all_item_ack(const shop_get_all_item_ack& from);

  inline shop_get_all_item_ack& operator=(const shop_get_all_item_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_get_all_item_ack& default_instance();

  void Swap(shop_get_all_item_ack* other);

  // implements Message ----------------------------------------------

  shop_get_all_item_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_get_all_item_ack& from);
  void MergeFrom(const shop_get_all_item_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 shop_config_id = 3;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.shop_info shop_info = 4;
  inline bool has_shop_info() const;
  inline void clear_shop_info();
  static const int kShopInfoFieldNumber = 4;
  inline const ::SProtoSpace::shop_info& shop_info() const;
  inline ::SProtoSpace::shop_info* mutable_shop_info();
  inline ::SProtoSpace::shop_info* release_shop_info();
  inline void set_allocated_shop_info(::SProtoSpace::shop_info* shop_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_get_all_item_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_shop_info();
  inline void clear_has_shop_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::SProtoSpace::shop_info* shop_info_;
  ::google::protobuf::int32 shop_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_get_all_item_ack* default_instance_;
};
// -------------------------------------------------------------------

class shop_buy_item_req : public ::google::protobuf::Message {
 public:
  shop_buy_item_req();
  virtual ~shop_buy_item_req();

  shop_buy_item_req(const shop_buy_item_req& from);

  inline shop_buy_item_req& operator=(const shop_buy_item_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_buy_item_req& default_instance();

  void Swap(shop_buy_item_req* other);

  // implements Message ----------------------------------------------

  shop_buy_item_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_buy_item_req& from);
  void MergeFrom(const shop_buy_item_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional uint32 sale_config_id = 3;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::uint32 value);

  // optional uint32 buy_num = 4;
  inline bool has_buy_num() const;
  inline void clear_buy_num();
  static const int kBuyNumFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_num() const;
  inline void set_buy_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_buy_item_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_buy_num();
  inline void clear_has_buy_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::uint32 sale_config_id_;
  ::google::protobuf::uint32 buy_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_buy_item_req* default_instance_;
};
// -------------------------------------------------------------------

class shop_buy_item_ack : public ::google::protobuf::Message {
 public:
  shop_buy_item_ack();
  virtual ~shop_buy_item_ack();

  shop_buy_item_ack(const shop_buy_item_ack& from);

  inline shop_buy_item_ack& operator=(const shop_buy_item_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_buy_item_ack& default_instance();

  void Swap(shop_buy_item_ack* other);

  // implements Message ----------------------------------------------

  shop_buy_item_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_buy_item_ack& from);
  void MergeFrom(const shop_buy_item_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional uint32 sale_config_id = 3;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::uint32 value);

  // optional uint32 buy_num = 4;
  inline bool has_buy_num() const;
  inline void clear_buy_num();
  static const int kBuyNumFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_num() const;
  inline void set_buy_num(::google::protobuf::uint32 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.shop_cost_info cost_infos = 7;
  inline int cost_infos_size() const;
  inline void clear_cost_infos();
  static const int kCostInfosFieldNumber = 7;
  inline const ::SProtoSpace::shop_cost_info& cost_infos(int index) const;
  inline ::SProtoSpace::shop_cost_info* mutable_cost_infos(int index);
  inline ::SProtoSpace::shop_cost_info* add_cost_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_cost_info >&
      cost_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_cost_info >*
      mutable_cost_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_buy_item_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_buy_num();
  inline void clear_has_buy_num();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::uint32 sale_config_id_;
  ::google::protobuf::uint32 buy_num_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_cost_info > cost_infos_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_buy_item_ack* default_instance_;
};
// -------------------------------------------------------------------

class shop_refresh_req : public ::google::protobuf::Message {
 public:
  shop_refresh_req();
  virtual ~shop_refresh_req();

  shop_refresh_req(const shop_refresh_req& from);

  inline shop_refresh_req& operator=(const shop_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_refresh_req& default_instance();

  void Swap(shop_refresh_req* other);

  // implements Message ----------------------------------------------

  shop_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_refresh_req& from);
  void MergeFrom(const shop_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional int32 refresh_type = 3;
  inline bool has_refresh_type() const;
  inline void clear_refresh_type();
  static const int kRefreshTypeFieldNumber = 3;
  inline ::google::protobuf::int32 refresh_type() const;
  inline void set_refresh_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_refresh_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_refresh_type();
  inline void clear_has_refresh_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::int32 refresh_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class shop_refresh_ack : public ::google::protobuf::Message {
 public:
  shop_refresh_ack();
  virtual ~shop_refresh_ack();

  shop_refresh_ack(const shop_refresh_ack& from);

  inline shop_refresh_ack& operator=(const shop_refresh_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_refresh_ack& default_instance();

  void Swap(shop_refresh_ack* other);

  // implements Message ----------------------------------------------

  shop_refresh_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_refresh_ack& from);
  void MergeFrom(const shop_refresh_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.shop_cost_info cost_infos = 4;
  inline bool has_cost_infos() const;
  inline void clear_cost_infos();
  static const int kCostInfosFieldNumber = 4;
  inline const ::SProtoSpace::shop_cost_info& cost_infos() const;
  inline ::SProtoSpace::shop_cost_info* mutable_cost_infos();
  inline ::SProtoSpace::shop_cost_info* release_cost_infos();
  inline void set_allocated_cost_infos(::SProtoSpace::shop_cost_info* cost_infos);

  // optional .SProtoSpace.shop_info shop_info = 5;
  inline bool has_shop_info() const;
  inline void clear_shop_info();
  static const int kShopInfoFieldNumber = 5;
  inline const ::SProtoSpace::shop_info& shop_info() const;
  inline ::SProtoSpace::shop_info* mutable_shop_info();
  inline ::SProtoSpace::shop_info* release_shop_info();
  inline void set_allocated_shop_info(::SProtoSpace::shop_info* shop_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_refresh_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cost_infos();
  inline void clear_has_cost_infos();
  inline void set_has_shop_info();
  inline void clear_has_shop_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::SProtoSpace::shop_cost_info* cost_infos_;
  ::SProtoSpace::shop_info* shop_info_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_refresh_ack* default_instance_;
};
// -------------------------------------------------------------------

class shop_item_opt_req : public ::google::protobuf::Message {
 public:
  shop_item_opt_req();
  virtual ~shop_item_opt_req();

  shop_item_opt_req(const shop_item_opt_req& from);

  inline shop_item_opt_req& operator=(const shop_item_opt_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_item_opt_req& default_instance();

  void Swap(shop_item_opt_req* other);

  // implements Message ----------------------------------------------

  shop_item_opt_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_item_opt_req& from);
  void MergeFrom(const shop_item_opt_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional int32 sale_config_id = 3;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::int32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 target_id = 6;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 6;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_item_opt_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::int32 sale_config_id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_item_opt_req* default_instance_;
};
// -------------------------------------------------------------------

class shop_item_opt_ack : public ::google::protobuf::Message {
 public:
  shop_item_opt_ack();
  virtual ~shop_item_opt_ack();

  shop_item_opt_ack(const shop_item_opt_ack& from);

  inline shop_item_opt_ack& operator=(const shop_item_opt_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_item_opt_ack& default_instance();

  void Swap(shop_item_opt_ack* other);

  // implements Message ----------------------------------------------

  shop_item_opt_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_item_opt_ack& from);
  void MergeFrom(const shop_item_opt_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional int32 sale_config_id = 3;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::int32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 target_id = 6;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 6;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_item_opt_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::int32 sale_config_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_item_opt_ack* default_instance_;
};
// -------------------------------------------------------------------

class shop_open_ntf : public ::google::protobuf::Message {
 public:
  shop_open_ntf();
  virtual ~shop_open_ntf();

  shop_open_ntf(const shop_open_ntf& from);

  inline shop_open_ntf& operator=(const shop_open_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_open_ntf& default_instance();

  void Swap(shop_open_ntf* other);

  // implements Message ----------------------------------------------

  shop_open_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_open_ntf& from);
  void MergeFrom(const shop_open_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 shop_config_id = 2;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional uint32 dead_line = 3;
  inline bool has_dead_line() const;
  inline void clear_dead_line();
  static const int kDeadLineFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_line() const;
  inline void set_dead_line(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_open_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_dead_line();
  inline void clear_has_dead_line();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::uint32 dead_line_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static shop_open_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_officer_apply_req : public ::google::protobuf::Message {
 public:
  game_officer_apply_req();
  virtual ~game_officer_apply_req();

  game_officer_apply_req(const game_officer_apply_req& from);

  inline game_officer_apply_req& operator=(const game_officer_apply_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_officer_apply_req& default_instance();

  void Swap(game_officer_apply_req* other);

  // implements Message ----------------------------------------------

  game_officer_apply_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_officer_apply_req& from);
  void MergeFrom(const game_officer_apply_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_officer_apply_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static game_officer_apply_req* default_instance_;
};
// -------------------------------------------------------------------

class game_officer_apply_ack : public ::google::protobuf::Message {
 public:
  game_officer_apply_ack();
  virtual ~game_officer_apply_ack();

  game_officer_apply_ack(const game_officer_apply_ack& from);

  inline game_officer_apply_ack& operator=(const game_officer_apply_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_officer_apply_ack& default_instance();

  void Swap(game_officer_apply_ack* other);

  // implements Message ----------------------------------------------

  game_officer_apply_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_officer_apply_ack& from);
  void MergeFrom(const game_officer_apply_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_officer_apply_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static game_officer_apply_ack* default_instance_;
};
// -------------------------------------------------------------------

class officer_daily_salary_req : public ::google::protobuf::Message {
 public:
  officer_daily_salary_req();
  virtual ~officer_daily_salary_req();

  officer_daily_salary_req(const officer_daily_salary_req& from);

  inline officer_daily_salary_req& operator=(const officer_daily_salary_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_daily_salary_req& default_instance();

  void Swap(officer_daily_salary_req* other);

  // implements Message ----------------------------------------------

  officer_daily_salary_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_daily_salary_req& from);
  void MergeFrom(const officer_daily_salary_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_daily_salary_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static officer_daily_salary_req* default_instance_;
};
// -------------------------------------------------------------------

class officer_daily_salary_ack : public ::google::protobuf::Message {
 public:
  officer_daily_salary_ack();
  virtual ~officer_daily_salary_ack();

  officer_daily_salary_ack(const officer_daily_salary_ack& from);

  inline officer_daily_salary_ack& operator=(const officer_daily_salary_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_daily_salary_ack& default_instance();

  void Swap(officer_daily_salary_ack* other);

  // implements Message ----------------------------------------------

  officer_daily_salary_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_daily_salary_ack& from);
  void MergeFrom(const officer_daily_salary_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.reward_item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SProtoSpace::reward_item& items(int index) const;
  inline ::SProtoSpace::reward_item* mutable_items(int index);
  inline ::SProtoSpace::reward_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_daily_salary_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static officer_daily_salary_ack* default_instance_;
};
// -------------------------------------------------------------------

class officer_result_ntf : public ::google::protobuf::Message {
 public:
  officer_result_ntf();
  virtual ~officer_result_ntf();

  officer_result_ntf(const officer_result_ntf& from);

  inline officer_result_ntf& operator=(const officer_result_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_result_ntf& default_instance();

  void Swap(officer_result_ntf* other);

  // implements Message ----------------------------------------------

  officer_result_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_result_ntf& from);
  void MergeFrom(const officer_result_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional bool admit = 3;
  inline bool has_admit() const;
  inline void clear_admit();
  static const int kAdmitFieldNumber = 3;
  inline bool admit() const;
  inline void set_admit(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_result_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_admit();
  inline void clear_has_admit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  bool admit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static officer_result_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_officer_applicants_req : public ::google::protobuf::Message {
 public:
  get_officer_applicants_req();
  virtual ~get_officer_applicants_req();

  get_officer_applicants_req(const get_officer_applicants_req& from);

  inline get_officer_applicants_req& operator=(const get_officer_applicants_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_officer_applicants_req& default_instance();

  void Swap(get_officer_applicants_req* other);

  // implements Message ----------------------------------------------

  get_officer_applicants_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_officer_applicants_req& from);
  void MergeFrom(const get_officer_applicants_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_officer_applicants_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_officer_applicants_req* default_instance_;
};
// -------------------------------------------------------------------

class get_officer_applicants_ack : public ::google::protobuf::Message {
 public:
  get_officer_applicants_ack();
  virtual ~get_officer_applicants_ack();

  get_officer_applicants_ack(const get_officer_applicants_ack& from);

  inline get_officer_applicants_ack& operator=(const get_officer_applicants_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_officer_applicants_ack& default_instance();

  void Swap(get_officer_applicants_ack* other);

  // implements Message ----------------------------------------------

  get_officer_applicants_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_officer_applicants_ack& from);
  void MergeFrom(const get_officer_applicants_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_num = 4;
  inline bool has_apply_num() const;
  inline void clear_apply_num();
  static const int kApplyNumFieldNumber = 4;
  inline ::google::protobuf::uint32 apply_num() const;
  inline void set_apply_num(::google::protobuf::uint32 value);

  // optional uint32 posts_num = 5;
  inline bool has_posts_num() const;
  inline void clear_posts_num();
  static const int kPostsNumFieldNumber = 5;
  inline ::google::protobuf::uint32 posts_num() const;
  inline void set_posts_num(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_apply_data applys = 6;
  inline int applys_size() const;
  inline void clear_applys();
  static const int kApplysFieldNumber = 6;
  inline const ::SProtoSpace::offical_apply_data& applys(int index) const;
  inline ::SProtoSpace::offical_apply_data* mutable_applys(int index);
  inline ::SProtoSpace::offical_apply_data* add_applys();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >&
      applys() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >*
      mutable_applys();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_officer_applicants_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_apply_num();
  inline void clear_has_apply_num();
  inline void set_has_posts_num();
  inline void clear_has_posts_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 apply_num_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data > applys_;
  ::google::protobuf::uint32 posts_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_officer_applicants_ack* default_instance_;
};
// -------------------------------------------------------------------

class cancel_officer_apply_req : public ::google::protobuf::Message {
 public:
  cancel_officer_apply_req();
  virtual ~cancel_officer_apply_req();

  cancel_officer_apply_req(const cancel_officer_apply_req& from);

  inline cancel_officer_apply_req& operator=(const cancel_officer_apply_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancel_officer_apply_req& default_instance();

  void Swap(cancel_officer_apply_req* other);

  // implements Message ----------------------------------------------

  cancel_officer_apply_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancel_officer_apply_req& from);
  void MergeFrom(const cancel_officer_apply_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cancel_officer_apply_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static cancel_officer_apply_req* default_instance_;
};
// -------------------------------------------------------------------

class cancel_officer_apply_ack : public ::google::protobuf::Message {
 public:
  cancel_officer_apply_ack();
  virtual ~cancel_officer_apply_ack();

  cancel_officer_apply_ack(const cancel_officer_apply_ack& from);

  inline cancel_officer_apply_ack& operator=(const cancel_officer_apply_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancel_officer_apply_ack& default_instance();

  void Swap(cancel_officer_apply_ack* other);

  // implements Message ----------------------------------------------

  cancel_officer_apply_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancel_officer_apply_ack& from);
  void MergeFrom(const cancel_officer_apply_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cancel_officer_apply_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static cancel_officer_apply_ack* default_instance_;
};
// -------------------------------------------------------------------

class share_officer_upgrade_req : public ::google::protobuf::Message {
 public:
  share_officer_upgrade_req();
  virtual ~share_officer_upgrade_req();

  share_officer_upgrade_req(const share_officer_upgrade_req& from);

  inline share_officer_upgrade_req& operator=(const share_officer_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const share_officer_upgrade_req& default_instance();

  void Swap(share_officer_upgrade_req* other);

  // implements Message ----------------------------------------------

  share_officer_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const share_officer_upgrade_req& from);
  void MergeFrom(const share_officer_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 world_channel_id = 3;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.share_officer_upgrade_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::std::string* content_;
  ::google::protobuf::uint32 world_channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static share_officer_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class share_officer_upgrade_ack : public ::google::protobuf::Message {
 public:
  share_officer_upgrade_ack();
  virtual ~share_officer_upgrade_ack();

  share_officer_upgrade_ack(const share_officer_upgrade_ack& from);

  inline share_officer_upgrade_ack& operator=(const share_officer_upgrade_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const share_officer_upgrade_ack& default_instance();

  void Swap(share_officer_upgrade_ack* other);

  // implements Message ----------------------------------------------

  share_officer_upgrade_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const share_officer_upgrade_ack& from);
  void MergeFrom(const share_officer_upgrade_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 world_channel_id = 3;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.share_officer_upgrade_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 world_channel_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static share_officer_upgrade_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_share_officer_upgrade_req : public ::google::protobuf::Message {
 public:
  get_share_officer_upgrade_req();
  virtual ~get_share_officer_upgrade_req();

  get_share_officer_upgrade_req(const get_share_officer_upgrade_req& from);

  inline get_share_officer_upgrade_req& operator=(const get_share_officer_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_share_officer_upgrade_req& default_instance();

  void Swap(get_share_officer_upgrade_req* other);

  // implements Message ----------------------------------------------

  get_share_officer_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_share_officer_upgrade_req& from);
  void MergeFrom(const get_share_officer_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 share_id = 2;
  inline bool has_share_id() const;
  inline void clear_share_id();
  static const int kShareIdFieldNumber = 2;
  inline ::google::protobuf::uint64 share_id() const;
  inline void set_share_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_share_officer_upgrade_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_share_id();
  inline void clear_has_share_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 share_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_share_officer_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class get_share_officer_upgrade_ack : public ::google::protobuf::Message {
 public:
  get_share_officer_upgrade_ack();
  virtual ~get_share_officer_upgrade_ack();

  get_share_officer_upgrade_ack(const get_share_officer_upgrade_ack& from);

  inline get_share_officer_upgrade_ack& operator=(const get_share_officer_upgrade_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_share_officer_upgrade_ack& default_instance();

  void Swap(get_share_officer_upgrade_ack* other);

  // implements Message ----------------------------------------------

  get_share_officer_upgrade_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_share_officer_upgrade_ack& from);
  void MergeFrom(const get_share_officer_upgrade_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.share_officer_upgrade data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::share_officer_upgrade& data() const;
  inline ::SProtoSpace::share_officer_upgrade* mutable_data();
  inline ::SProtoSpace::share_officer_upgrade* release_data();
  inline void set_allocated_data(::SProtoSpace::share_officer_upgrade* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_share_officer_upgrade_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::share_officer_upgrade* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_share_officer_upgrade_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_offical_first_award_ntf : public ::google::protobuf::Message {
 public:
  update_offical_first_award_ntf();
  virtual ~update_offical_first_award_ntf();

  update_offical_first_award_ntf(const update_offical_first_award_ntf& from);

  inline update_offical_first_award_ntf& operator=(const update_offical_first_award_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_offical_first_award_ntf& default_instance();

  void Swap(update_offical_first_award_ntf* other);

  // implements Message ----------------------------------------------

  update_offical_first_award_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_offical_first_award_ntf& from);
  void MergeFrom(const update_offical_first_award_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.reward_item units = 2;
  inline int units_size() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 2;
  inline const ::SProtoSpace::reward_item& units(int index) const;
  inline ::SProtoSpace::reward_item* mutable_units(int index);
  inline ::SProtoSpace::reward_item* add_units();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      units() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_units();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_offical_first_award_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > units_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static update_offical_first_award_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_first_award_req : public ::google::protobuf::Message {
 public:
  get_offical_first_award_req();
  virtual ~get_offical_first_award_req();

  get_offical_first_award_req(const get_offical_first_award_req& from);

  inline get_offical_first_award_req& operator=(const get_offical_first_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_first_award_req& default_instance();

  void Swap(get_offical_first_award_req* other);

  // implements Message ----------------------------------------------

  get_offical_first_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_first_award_req& from);
  void MergeFrom(const get_offical_first_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_first_award_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_first_award_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_first_award_ack : public ::google::protobuf::Message {
 public:
  get_offical_first_award_ack();
  virtual ~get_offical_first_award_ack();

  get_offical_first_award_ack(const get_offical_first_award_ack& from);

  inline get_offical_first_award_ack& operator=(const get_offical_first_award_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_first_award_ack& default_instance();

  void Swap(get_offical_first_award_ack* other);

  // implements Message ----------------------------------------------

  get_offical_first_award_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_first_award_ack& from);
  void MergeFrom(const get_offical_first_award_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_first_award_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_first_award_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_challenge_roles_req : public ::google::protobuf::Message {
 public:
  get_offical_challenge_roles_req();
  virtual ~get_offical_challenge_roles_req();

  get_offical_challenge_roles_req(const get_offical_challenge_roles_req& from);

  inline get_offical_challenge_roles_req& operator=(const get_offical_challenge_roles_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_challenge_roles_req& default_instance();

  void Swap(get_offical_challenge_roles_req* other);

  // implements Message ----------------------------------------------

  get_offical_challenge_roles_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_challenge_roles_req& from);
  void MergeFrom(const get_offical_challenge_roles_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_challenge_roles_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_challenge_roles_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_challenge_roles_ack : public ::google::protobuf::Message {
 public:
  get_offical_challenge_roles_ack();
  virtual ~get_offical_challenge_roles_ack();

  get_offical_challenge_roles_ack(const get_offical_challenge_roles_ack& from);

  inline get_offical_challenge_roles_ack& operator=(const get_offical_challenge_roles_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_challenge_roles_ack& default_instance();

  void Swap(get_offical_challenge_roles_ack* other);

  // implements Message ----------------------------------------------

  get_offical_challenge_roles_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_challenge_roles_ack& from);
  void MergeFrom(const get_offical_challenge_roles_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 offical_challenge_num = 3;
  inline bool has_offical_challenge_num() const;
  inline void clear_offical_challenge_num();
  static const int kOfficalChallengeNumFieldNumber = 3;
  inline ::google::protobuf::int32 offical_challenge_num() const;
  inline void set_offical_challenge_num(::google::protobuf::int32 value);

  // optional int32 offical_challenge_buy = 4;
  inline bool has_offical_challenge_buy() const;
  inline void clear_offical_challenge_buy();
  static const int kOfficalChallengeBuyFieldNumber = 4;
  inline ::google::protobuf::int32 offical_challenge_buy() const;
  inline void set_offical_challenge_buy(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_item_data items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::SProtoSpace::offical_item_data& items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_items(int index);
  inline ::SProtoSpace::offical_item_data* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_challenge_roles_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_offical_challenge_num();
  inline void clear_has_offical_challenge_num();
  inline void set_has_offical_challenge_buy();
  inline void clear_has_offical_challenge_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 offical_challenge_num_;
  ::google::protobuf::int32 offical_challenge_buy_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_challenge_roles_ack* default_instance_;
};
// -------------------------------------------------------------------

class add_offical_challenge_num_req : public ::google::protobuf::Message {
 public:
  add_offical_challenge_num_req();
  virtual ~add_offical_challenge_num_req();

  add_offical_challenge_num_req(const add_offical_challenge_num_req& from);

  inline add_offical_challenge_num_req& operator=(const add_offical_challenge_num_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_offical_challenge_num_req& default_instance();

  void Swap(add_offical_challenge_num_req* other);

  // implements Message ----------------------------------------------

  add_offical_challenge_num_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add_offical_challenge_num_req& from);
  void MergeFrom(const add_offical_challenge_num_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.add_offical_challenge_num_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static add_offical_challenge_num_req* default_instance_;
};
// -------------------------------------------------------------------

class add_offical_challenge_num_ack : public ::google::protobuf::Message {
 public:
  add_offical_challenge_num_ack();
  virtual ~add_offical_challenge_num_ack();

  add_offical_challenge_num_ack(const add_offical_challenge_num_ack& from);

  inline add_offical_challenge_num_ack& operator=(const add_offical_challenge_num_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_offical_challenge_num_ack& default_instance();

  void Swap(add_offical_challenge_num_ack* other);

  // implements Message ----------------------------------------------

  add_offical_challenge_num_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add_offical_challenge_num_ack& from);
  void MergeFrom(const add_offical_challenge_num_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 offical_challenge_num = 3;
  inline bool has_offical_challenge_num() const;
  inline void clear_offical_challenge_num();
  static const int kOfficalChallengeNumFieldNumber = 3;
  inline ::google::protobuf::int32 offical_challenge_num() const;
  inline void set_offical_challenge_num(::google::protobuf::int32 value);

  // optional int32 offical_challenge_buy = 4;
  inline bool has_offical_challenge_buy() const;
  inline void clear_offical_challenge_buy();
  static const int kOfficalChallengeBuyFieldNumber = 4;
  inline ::google::protobuf::int32 offical_challenge_buy() const;
  inline void set_offical_challenge_buy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.add_offical_challenge_num_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_offical_challenge_num();
  inline void clear_has_offical_challenge_num();
  inline void set_has_offical_challenge_buy();
  inline void clear_has_offical_challenge_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 offical_challenge_num_;
  ::google::protobuf::int32 offical_challenge_buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static add_offical_challenge_num_ack* default_instance_;
};
// -------------------------------------------------------------------

class offical_battle_report_req : public ::google::protobuf::Message {
 public:
  offical_battle_report_req();
  virtual ~offical_battle_report_req();

  offical_battle_report_req(const offical_battle_report_req& from);

  inline offical_battle_report_req& operator=(const offical_battle_report_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_battle_report_req& default_instance();

  void Swap(offical_battle_report_req* other);

  // implements Message ----------------------------------------------

  offical_battle_report_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_battle_report_req& from);
  void MergeFrom(const offical_battle_report_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_battle_report_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static offical_battle_report_req* default_instance_;
};
// -------------------------------------------------------------------

class offical_battle_report_ack : public ::google::protobuf::Message {
 public:
  offical_battle_report_ack();
  virtual ~offical_battle_report_ack();

  offical_battle_report_ack(const offical_battle_report_ack& from);

  inline offical_battle_report_ack& operator=(const offical_battle_report_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_battle_report_ack& default_instance();

  void Swap(offical_battle_report_ack* other);

  // implements Message ----------------------------------------------

  offical_battle_report_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_battle_report_ack& from);
  void MergeFrom(const offical_battle_report_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_battle_report_unit reports = 3;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 3;
  inline const ::SProtoSpace::offical_battle_report_unit& reports(int index) const;
  inline ::SProtoSpace::offical_battle_report_unit* mutable_reports(int index);
  inline ::SProtoSpace::offical_battle_report_unit* add_reports();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >&
      reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >*
      mutable_reports();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_battle_report_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit > reports_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static offical_battle_report_ack* default_instance_;
};
// -------------------------------------------------------------------

class office_result : public ::google::protobuf::Message {
 public:
  office_result();
  virtual ~office_result();

  office_result(const office_result& from);

  inline office_result& operator=(const office_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const office_result& default_instance();

  void Swap(office_result* other);

  // implements Message ----------------------------------------------

  office_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const office_result& from);
  void MergeFrom(const office_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 battle_uuid = 1;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EBattleType battle_type = 2;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 2;
  inline ::SProtoSpace::EBattleType battle_type() const;
  inline void set_battle_type(::SProtoSpace::EBattleType value);

  // optional int64 winner_role_id = 3;
  inline bool has_winner_role_id() const;
  inline void clear_winner_role_id();
  static const int kWinnerRoleIdFieldNumber = 3;
  inline ::google::protobuf::int64 winner_role_id() const;
  inline void set_winner_role_id(::google::protobuf::int64 value);

  // optional int32 winner_camp_id = 4;
  inline bool has_winner_camp_id() const;
  inline void clear_winner_camp_id();
  static const int kWinnerCampIdFieldNumber = 4;
  inline ::google::protobuf::int32 winner_camp_id() const;
  inline void set_winner_camp_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.round_data data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::SProtoSpace::round_data& data(int index) const;
  inline ::SProtoSpace::round_data* mutable_data(int index);
  inline ::SProtoSpace::round_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.office_result)
 private:
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_winner_role_id();
  inline void clear_has_winner_role_id();
  inline void set_has_winner_camp_id();
  inline void clear_has_winner_camp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::google::protobuf::int64 winner_role_id_;
  int battle_type_;
  ::google::protobuf::int32 winner_camp_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static office_result* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_member_req : public ::google::protobuf::Message {
 public:
  get_offical_member_req();
  virtual ~get_offical_member_req();

  get_offical_member_req(const get_offical_member_req& from);

  inline get_offical_member_req& operator=(const get_offical_member_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_member_req& default_instance();

  void Swap(get_offical_member_req* other);

  // implements Message ----------------------------------------------

  get_offical_member_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_member_req& from);
  void MergeFrom(const get_offical_member_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 4;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 4;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_member_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_member_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_member_ack : public ::google::protobuf::Message {
 public:
  get_offical_member_ack();
  virtual ~get_offical_member_ack();

  get_offical_member_ack(const get_offical_member_ack& from);

  inline get_offical_member_ack& operator=(const get_offical_member_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_member_ack& default_instance();

  void Swap(get_offical_member_ack* other);

  // implements Message ----------------------------------------------

  get_offical_member_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_member_ack& from);
  void MergeFrom(const get_offical_member_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_member_data members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::SProtoSpace::offical_member_data& members(int index) const;
  inline ::SProtoSpace::offical_member_data* mutable_members(int index);
  inline ::SProtoSpace::offical_member_data* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_member_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data > members_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_offical_member_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_global_offical_rank_req : public ::google::protobuf::Message {
 public:
  get_global_offical_rank_req();
  virtual ~get_global_offical_rank_req();

  get_global_offical_rank_req(const get_global_offical_rank_req& from);

  inline get_global_offical_rank_req& operator=(const get_global_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_global_offical_rank_req& default_instance();

  void Swap(get_global_offical_rank_req* other);

  // implements Message ----------------------------------------------

  get_global_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_global_offical_rank_req& from);
  void MergeFrom(const get_global_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional int32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_global_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_global_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class get_global_offical_rank_ack : public ::google::protobuf::Message {
 public:
  get_global_offical_rank_ack();
  virtual ~get_global_offical_rank_ack();

  get_global_offical_rank_ack(const get_global_offical_rank_ack& from);

  inline get_global_offical_rank_ack& operator=(const get_global_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_global_offical_rank_ack& default_instance();

  void Swap(get_global_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  get_global_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_global_offical_rank_ack& from);
  void MergeFrom(const get_global_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_member_data members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::SProtoSpace::offical_member_data& members(int index) const;
  inline ::SProtoSpace::offical_member_data* mutable_members(int index);
  inline ::SProtoSpace::offical_member_data* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
      mutable_members();

  // optional .SProtoSpace.offical_member_data my_data = 4;
  inline bool has_my_data() const;
  inline void clear_my_data();
  static const int kMyDataFieldNumber = 4;
  inline const ::SProtoSpace::offical_member_data& my_data() const;
  inline ::SProtoSpace::offical_member_data* mutable_my_data();
  inline ::SProtoSpace::offical_member_data* release_my_data();
  inline void set_allocated_my_data(::SProtoSpace::offical_member_data* my_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_global_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_my_data();
  inline void clear_has_my_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data > members_;
  ::SProtoSpace::offical_member_data* my_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static get_global_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class enter_tower_req : public ::google::protobuf::Message {
 public:
  enter_tower_req();
  virtual ~enter_tower_req();

  enter_tower_req(const enter_tower_req& from);

  inline enter_tower_req& operator=(const enter_tower_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_tower_req& default_instance();

  void Swap(enter_tower_req* other);

  // implements Message ----------------------------------------------

  enter_tower_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_tower_req& from);
  void MergeFrom(const enter_tower_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_tower_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static enter_tower_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_tower_ack : public ::google::protobuf::Message {
 public:
  enter_tower_ack();
  virtual ~enter_tower_ack();

  enter_tower_ack(const enter_tower_ack& from);

  inline enter_tower_ack& operator=(const enter_tower_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_tower_ack& default_instance();

  void Swap(enter_tower_ack* other);

  // implements Message ----------------------------------------------

  enter_tower_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_tower_ack& from);
  void MergeFrom(const enter_tower_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.tower_base_info tower_data = 3;
  inline bool has_tower_data() const;
  inline void clear_tower_data();
  static const int kTowerDataFieldNumber = 3;
  inline const ::SProtoSpace::tower_base_info& tower_data() const;
  inline ::SProtoSpace::tower_base_info* mutable_tower_data();
  inline ::SProtoSpace::tower_base_info* release_tower_data();
  inline void set_allocated_tower_data(::SProtoSpace::tower_base_info* tower_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_tower_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_tower_data();
  inline void clear_has_tower_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::tower_base_info* tower_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static enter_tower_ack* default_instance_;
};
// -------------------------------------------------------------------

class select_tower_floor_req : public ::google::protobuf::Message {
 public:
  select_tower_floor_req();
  virtual ~select_tower_floor_req();

  select_tower_floor_req(const select_tower_floor_req& from);

  inline select_tower_floor_req& operator=(const select_tower_floor_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_tower_floor_req& default_instance();

  void Swap(select_tower_floor_req* other);

  // implements Message ----------------------------------------------

  select_tower_floor_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_tower_floor_req& from);
  void MergeFrom(const select_tower_floor_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 tower_floor = 2;
  inline bool has_tower_floor() const;
  inline void clear_tower_floor();
  static const int kTowerFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 tower_floor() const;
  inline void set_tower_floor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.select_tower_floor_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tower_floor();
  inline void clear_has_tower_floor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 tower_floor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static select_tower_floor_req* default_instance_;
};
// -------------------------------------------------------------------

class select_tower_floor_ack : public ::google::protobuf::Message {
 public:
  select_tower_floor_ack();
  virtual ~select_tower_floor_ack();

  select_tower_floor_ack(const select_tower_floor_ack& from);

  inline select_tower_floor_ack& operator=(const select_tower_floor_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_tower_floor_ack& default_instance();

  void Swap(select_tower_floor_ack* other);

  // implements Message ----------------------------------------------

  select_tower_floor_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_tower_floor_ack& from);
  void MergeFrom(const select_tower_floor_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .SProtoSpace.question_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::question_data& data() const;
  inline ::SProtoSpace::question_data* mutable_data();
  inline ::SProtoSpace::question_data* release_data();
  inline void set_allocated_data(::SProtoSpace::question_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.select_tower_floor_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::question_data* data_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static select_tower_floor_ack* default_instance_;
};
// -------------------------------------------------------------------

class tower_die_req : public ::google::protobuf::Message {
 public:
  tower_die_req();
  virtual ~tower_die_req();

  tower_die_req(const tower_die_req& from);

  inline tower_die_req& operator=(const tower_die_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_die_req& default_instance();

  void Swap(tower_die_req* other);

  // implements Message ----------------------------------------------

  tower_die_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_die_req& from);
  void MergeFrom(const tower_die_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 tower_floor = 2;
  inline bool has_tower_floor() const;
  inline void clear_tower_floor();
  static const int kTowerFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 tower_floor() const;
  inline void set_tower_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3 [default = 1];
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_die_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tower_floor();
  inline void clear_has_tower_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 tower_floor_;
  ::google::protobuf::uint32 cur_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_die_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_die_ack : public ::google::protobuf::Message {
 public:
  tower_die_ack();
  virtual ~tower_die_ack();

  tower_die_ack(const tower_die_ack& from);

  inline tower_die_ack& operator=(const tower_die_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_die_ack& default_instance();

  void Swap(tower_die_ack* other);

  // implements Message ----------------------------------------------

  tower_die_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_die_ack& from);
  void MergeFrom(const tower_die_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 tower_floor = 2;
  inline bool has_tower_floor() const;
  inline void clear_tower_floor();
  static const int kTowerFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 tower_floor() const;
  inline void set_tower_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3 [default = 1];
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .SProtoSpace.question_data data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::SProtoSpace::question_data& data() const;
  inline ::SProtoSpace::question_data* mutable_data();
  inline ::SProtoSpace::question_data* release_data();
  inline void set_allocated_data(::SProtoSpace::question_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_die_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tower_floor();
  inline void clear_has_tower_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 tower_floor_;
  ::google::protobuf::uint32 cur_step_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::question_data* data_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_die_ack* default_instance_;
};
// -------------------------------------------------------------------

class tower_step_fini_req : public ::google::protobuf::Message {
 public:
  tower_step_fini_req();
  virtual ~tower_step_fini_req();

  tower_step_fini_req(const tower_step_fini_req& from);

  inline tower_step_fini_req& operator=(const tower_step_fini_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_step_fini_req& default_instance();

  void Swap(tower_step_fini_req* other);

  // implements Message ----------------------------------------------

  tower_step_fini_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_step_fini_req& from);
  void MergeFrom(const tower_step_fini_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 tower_floor = 2;
  inline bool has_tower_floor() const;
  inline void clear_tower_floor();
  static const int kTowerFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 tower_floor() const;
  inline void set_tower_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3 [default = 1];
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_step_fini_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tower_floor();
  inline void clear_has_tower_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 tower_floor_;
  ::google::protobuf::uint32 cur_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_step_fini_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_step_fini_ack : public ::google::protobuf::Message {
 public:
  tower_step_fini_ack();
  virtual ~tower_step_fini_ack();

  tower_step_fini_ack(const tower_step_fini_ack& from);

  inline tower_step_fini_ack& operator=(const tower_step_fini_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_step_fini_ack& default_instance();

  void Swap(tower_step_fini_ack* other);

  // implements Message ----------------------------------------------

  tower_step_fini_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_step_fini_ack& from);
  void MergeFrom(const tower_step_fini_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 tower_floor = 2;
  inline bool has_tower_floor() const;
  inline void clear_tower_floor();
  static const int kTowerFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 tower_floor() const;
  inline void set_tower_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3 [default = 1];
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_step_fini_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tower_floor();
  inline void clear_has_tower_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 tower_floor_;
  ::google::protobuf::uint32 cur_step_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_step_fini_ack* default_instance_;
};
// -------------------------------------------------------------------

class question_check_req : public ::google::protobuf::Message {
 public:
  question_check_req();
  virtual ~question_check_req();

  question_check_req(const question_check_req& from);

  inline question_check_req& operator=(const question_check_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_check_req& default_instance();

  void Swap(question_check_req* other);

  // implements Message ----------------------------------------------

  question_check_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_check_req& from);
  void MergeFrom(const question_check_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 question_id = 2;
  inline bool has_question_id() const;
  inline void clear_question_id();
  static const int kQuestionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 question_id() const;
  inline void set_question_id(::google::protobuf::uint32 value);

  // optional uint32 subquestion_id = 3;
  inline bool has_subquestion_id() const;
  inline void clear_subquestion_id();
  static const int kSubquestionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 subquestion_id() const;
  inline void set_subquestion_id(::google::protobuf::uint32 value);

  // repeated uint32 answers = 4;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 4;
  inline ::google::protobuf::uint32 answers(int index) const;
  inline void set_answers(int index, ::google::protobuf::uint32 value);
  inline void add_answers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      answers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_answers();

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_check_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_question_id();
  inline void clear_has_question_id();
  inline void set_has_subquestion_id();
  inline void clear_has_subquestion_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 question_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > answers_;
  ::google::protobuf::uint32 subquestion_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static question_check_req* default_instance_;
};
// -------------------------------------------------------------------

class question_check_ack : public ::google::protobuf::Message {
 public:
  question_check_ack();
  virtual ~question_check_ack();

  question_check_ack(const question_check_ack& from);

  inline question_check_ack& operator=(const question_check_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_check_ack& default_instance();

  void Swap(question_check_ack* other);

  // implements Message ----------------------------------------------

  question_check_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_check_ack& from);
  void MergeFrom(const question_check_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 question_id = 2;
  inline bool has_question_id() const;
  inline void clear_question_id();
  static const int kQuestionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 question_id() const;
  inline void set_question_id(::google::protobuf::uint32 value);

  // repeated uint32 answers = 3;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 3;
  inline ::google::protobuf::uint32 answers(int index) const;
  inline void set_answers(int index, ::google::protobuf::uint32 value);
  inline void add_answers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      answers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_answers();

  // optional uint32 subquestion_id = 4;
  inline bool has_subquestion_id() const;
  inline void clear_subquestion_id();
  static const int kSubquestionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 subquestion_id() const;
  inline void set_subquestion_id(::google::protobuf::uint32 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_check_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_question_id();
  inline void clear_has_question_id();
  inline void set_has_subquestion_id();
  inline void clear_has_subquestion_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 question_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > answers_;
  ::google::protobuf::uint32 subquestion_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static question_check_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_tower_info_ntf : public ::google::protobuf::Message {
 public:
  update_tower_info_ntf();
  virtual ~update_tower_info_ntf();

  update_tower_info_ntf(const update_tower_info_ntf& from);

  inline update_tower_info_ntf& operator=(const update_tower_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_tower_info_ntf& default_instance();

  void Swap(update_tower_info_ntf* other);

  // implements Message ----------------------------------------------

  update_tower_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_tower_info_ntf& from);
  void MergeFrom(const update_tower_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.tower_base_info data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::tower_base_info& data() const;
  inline ::SProtoSpace::tower_base_info* mutable_data();
  inline ::SProtoSpace::tower_base_info* release_data();
  inline void set_allocated_data(::SProtoSpace::tower_base_info* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_tower_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::tower_base_info* data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static update_tower_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class tower_raids_req : public ::google::protobuf::Message {
 public:
  tower_raids_req();
  virtual ~tower_raids_req();

  tower_raids_req(const tower_raids_req& from);

  inline tower_raids_req& operator=(const tower_raids_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_raids_req& default_instance();

  void Swap(tower_raids_req* other);

  // implements Message ----------------------------------------------

  tower_raids_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_raids_req& from);
  void MergeFrom(const tower_raids_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_raids_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_raids_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_raids_ack : public ::google::protobuf::Message {
 public:
  tower_raids_ack();
  virtual ~tower_raids_ack();

  tower_raids_ack(const tower_raids_ack& from);

  inline tower_raids_ack& operator=(const tower_raids_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_raids_ack& default_instance();

  void Swap(tower_raids_ack* other);

  // implements Message ----------------------------------------------

  tower_raids_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_raids_ack& from);
  void MergeFrom(const tower_raids_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_raids_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_raids_ack* default_instance_;
};
// -------------------------------------------------------------------

class tower_reset_req : public ::google::protobuf::Message {
 public:
  tower_reset_req();
  virtual ~tower_reset_req();

  tower_reset_req(const tower_reset_req& from);

  inline tower_reset_req& operator=(const tower_reset_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_reset_req& default_instance();

  void Swap(tower_reset_req* other);

  // implements Message ----------------------------------------------

  tower_reset_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_reset_req& from);
  void MergeFrom(const tower_reset_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_reset_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_reset_req* default_instance_;
};
// -------------------------------------------------------------------

class tower_reset_ack : public ::google::protobuf::Message {
 public:
  tower_reset_ack();
  virtual ~tower_reset_ack();

  tower_reset_ack(const tower_reset_ack& from);

  inline tower_reset_ack& operator=(const tower_reset_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_reset_ack& default_instance();

  void Swap(tower_reset_ack* other);

  // implements Message ----------------------------------------------

  tower_reset_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_reset_ack& from);
  void MergeFrom(const tower_reset_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_reset_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_reset_ack* default_instance_;
};
// -------------------------------------------------------------------

class tower_reward_ntf : public ::google::protobuf::Message {
 public:
  tower_reward_ntf();
  virtual ~tower_reward_ntf();

  tower_reward_ntf(const tower_reward_ntf& from);

  inline tower_reward_ntf& operator=(const tower_reward_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_reward_ntf& default_instance();

  void Swap(tower_reward_ntf* other);

  // implements Message ----------------------------------------------

  tower_reward_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_reward_ntf& from);
  void MergeFrom(const tower_reward_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 floor_id = 2;
  inline bool has_floor_id() const;
  inline void clear_floor_id();
  static const int kFloorIdFieldNumber = 2;
  inline ::google::protobuf::uint32 floor_id() const;
  inline void set_floor_id(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional bool is_win = 5;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 5;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // repeated .SProtoSpace.item_info reward = 6;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::SProtoSpace::item_info& reward(int index) const;
  inline ::SProtoSpace::item_info* mutable_reward(int index);
  inline ::SProtoSpace::item_info* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
      mutable_reward();

  // optional int32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_reward_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_floor_id();
  inline void clear_has_floor_id();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 floor_id_;
  ::google::protobuf::uint32 cur_step_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info > reward_;
  bool is_win_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static tower_reward_ntf* default_instance_;
};
// -------------------------------------------------------------------

class question_find_wrong_req : public ::google::protobuf::Message {
 public:
  question_find_wrong_req();
  virtual ~question_find_wrong_req();

  question_find_wrong_req(const question_find_wrong_req& from);

  inline question_find_wrong_req& operator=(const question_find_wrong_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_find_wrong_req& default_instance();

  void Swap(question_find_wrong_req* other);

  // implements Message ----------------------------------------------

  question_find_wrong_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_find_wrong_req& from);
  void MergeFrom(const question_find_wrong_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 question_id = 2;
  inline bool has_question_id() const;
  inline void clear_question_id();
  static const int kQuestionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 question_id() const;
  inline void set_question_id(::google::protobuf::uint32 value);

  // optional uint32 subquestion_id = 3;
  inline bool has_subquestion_id() const;
  inline void clear_subquestion_id();
  static const int kSubquestionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 subquestion_id() const;
  inline void set_subquestion_id(::google::protobuf::uint32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_find_wrong_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_question_id();
  inline void clear_has_question_id();
  inline void set_has_subquestion_id();
  inline void clear_has_subquestion_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 question_id_;
  ::google::protobuf::uint32 subquestion_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static question_find_wrong_req* default_instance_;
};
// -------------------------------------------------------------------

class question_find_wrong_ack : public ::google::protobuf::Message {
 public:
  question_find_wrong_ack();
  virtual ~question_find_wrong_ack();

  question_find_wrong_ack(const question_find_wrong_ack& from);

  inline question_find_wrong_ack& operator=(const question_find_wrong_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_find_wrong_ack& default_instance();

  void Swap(question_find_wrong_ack* other);

  // implements Message ----------------------------------------------

  question_find_wrong_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_find_wrong_ack& from);
  void MergeFrom(const question_find_wrong_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 question_id = 2;
  inline bool has_question_id() const;
  inline void clear_question_id();
  static const int kQuestionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 question_id() const;
  inline void set_question_id(::google::protobuf::uint32 value);

  // optional uint32 error_answer = 3;
  inline bool has_error_answer() const;
  inline void clear_error_answer();
  static const int kErrorAnswerFieldNumber = 3;
  inline ::google::protobuf::uint32 error_answer() const;
  inline void set_error_answer(::google::protobuf::uint32 value);

  // optional uint32 subquestion_id = 4;
  inline bool has_subquestion_id() const;
  inline void clear_subquestion_id();
  static const int kSubquestionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 subquestion_id() const;
  inline void set_subquestion_id(::google::protobuf::uint32 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_find_wrong_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_question_id();
  inline void clear_has_question_id();
  inline void set_has_error_answer();
  inline void clear_has_error_answer();
  inline void set_has_subquestion_id();
  inline void clear_has_subquestion_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 question_id_;
  ::google::protobuf::uint32 error_answer_;
  ::google::protobuf::uint32 subquestion_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static question_find_wrong_ack* default_instance_;
};
// -------------------------------------------------------------------

class enter_adv_req : public ::google::protobuf::Message {
 public:
  enter_adv_req();
  virtual ~enter_adv_req();

  enter_adv_req(const enter_adv_req& from);

  inline enter_adv_req& operator=(const enter_adv_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_adv_req& default_instance();

  void Swap(enter_adv_req* other);

  // implements Message ----------------------------------------------

  enter_adv_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_adv_req& from);
  void MergeFrom(const enter_adv_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_adv_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static enter_adv_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_adv_ack : public ::google::protobuf::Message {
 public:
  enter_adv_ack();
  virtual ~enter_adv_ack();

  enter_adv_ack(const enter_adv_ack& from);

  inline enter_adv_ack& operator=(const enter_adv_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_adv_ack& default_instance();

  void Swap(enter_adv_ack* other);

  // implements Message ----------------------------------------------

  enter_adv_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_adv_ack& from);
  void MergeFrom(const enter_adv_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 adv_times = 2;
  inline bool has_adv_times() const;
  inline void clear_adv_times();
  static const int kAdvTimesFieldNumber = 2;
  inline ::google::protobuf::int32 adv_times() const;
  inline void set_adv_times(::google::protobuf::int32 value);

  // optional int32 adv_energy = 3;
  inline bool has_adv_energy() const;
  inline void clear_adv_energy();
  static const int kAdvEnergyFieldNumber = 3;
  inline ::google::protobuf::int32 adv_energy() const;
  inline void set_adv_energy(::google::protobuf::int32 value);

  // repeated int32 city_ids = 4;
  inline int city_ids_size() const;
  inline void clear_city_ids();
  static const int kCityIdsFieldNumber = 4;
  inline ::google::protobuf::int32 city_ids(int index) const;
  inline void set_city_ids(int index, ::google::protobuf::int32 value);
  inline void add_city_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      city_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_city_ids();

  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 ask_ids = 6;
  inline int ask_ids_size() const;
  inline void clear_ask_ids();
  static const int kAskIdsFieldNumber = 6;
  inline ::google::protobuf::int32 ask_ids(int index) const;
  inline void set_ask_ids(int index, ::google::protobuf::int32 value);
  inline void add_ask_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ask_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ask_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_adv_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_adv_times();
  inline void clear_has_adv_times();
  inline void set_has_adv_energy();
  inline void clear_has_adv_energy();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 adv_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > city_ids_;
  ::google::protobuf::int32 adv_energy_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ask_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static enter_adv_ack* default_instance_;
};
// -------------------------------------------------------------------

class select_adv_city_req : public ::google::protobuf::Message {
 public:
  select_adv_city_req();
  virtual ~select_adv_city_req();

  select_adv_city_req(const select_adv_city_req& from);

  inline select_adv_city_req& operator=(const select_adv_city_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_adv_city_req& default_instance();

  void Swap(select_adv_city_req* other);

  // implements Message ----------------------------------------------

  select_adv_city_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_adv_city_req& from);
  void MergeFrom(const select_adv_city_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.select_adv_city_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static select_adv_city_req* default_instance_;
};
// -------------------------------------------------------------------

class select_adv_city_ack : public ::google::protobuf::Message {
 public:
  select_adv_city_ack();
  virtual ~select_adv_city_ack();

  select_adv_city_ack(const select_adv_city_ack& from);

  inline select_adv_city_ack& operator=(const select_adv_city_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_adv_city_ack& default_instance();

  void Swap(select_adv_city_ack* other);

  // implements Message ----------------------------------------------

  select_adv_city_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_adv_city_ack& from);
  void MergeFrom(const select_adv_city_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.EWEATHER_TYPE weather = 3;
  inline bool has_weather() const;
  inline void clear_weather();
  static const int kWeatherFieldNumber = 3;
  inline ::SProtoSpace::EWEATHER_TYPE weather() const;
  inline void set_weather(::SProtoSpace::EWEATHER_TYPE value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_favor_info data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::SProtoSpace::hero_favor_info& data(int index) const;
  inline ::SProtoSpace::hero_favor_info* mutable_data(int index);
  inline ::SProtoSpace::hero_favor_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.select_adv_city_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_weather();
  inline void clear_has_weather();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 city_id_;
  int weather_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static select_adv_city_ack* default_instance_;
};
// -------------------------------------------------------------------

class adv_event_req : public ::google::protobuf::Message {
 public:
  adv_event_req();
  virtual ~adv_event_req();

  adv_event_req(const adv_event_req& from);

  inline adv_event_req& operator=(const adv_event_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_event_req& default_instance();

  void Swap(adv_event_req* other);

  // implements Message ----------------------------------------------

  adv_event_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_event_req& from);
  void MergeFrom(const adv_event_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional int32 slot = 3;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 3;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_event_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 city_id_;
  ::google::protobuf::int32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_event_req* default_instance_;
};
// -------------------------------------------------------------------

class adv_event_ack : public ::google::protobuf::Message {
 public:
  adv_event_ack();
  virtual ~adv_event_ack();

  adv_event_ack(const adv_event_ack& from);

  inline adv_event_ack& operator=(const adv_event_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_event_ack& default_instance();

  void Swap(adv_event_ack* other);

  // implements Message ----------------------------------------------

  adv_event_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_event_ack& from);
  void MergeFrom(const adv_event_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 city_id = 2;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 event_id = 4;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 event_type = 5;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 5;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_event_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 city_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_event_ack* default_instance_;
};
// -------------------------------------------------------------------

class adv_reward_ntf : public ::google::protobuf::Message {
 public:
  adv_reward_ntf();
  virtual ~adv_reward_ntf();

  adv_reward_ntf(const adv_reward_ntf& from);

  inline adv_reward_ntf& operator=(const adv_reward_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_reward_ntf& default_instance();

  void Swap(adv_reward_ntf* other);

  // implements Message ----------------------------------------------

  adv_reward_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_reward_ntf& from);
  void MergeFrom(const adv_reward_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 city_id = 3;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional int32 event_id = 4;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.item_info reward = 5;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::SProtoSpace::item_info& reward(int index) const;
  inline ::SProtoSpace::item_info* mutable_reward(int index);
  inline ::SProtoSpace::item_info* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_reward_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 city_id_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_reward_ntf* default_instance_;
};
// -------------------------------------------------------------------

class adv_ask_req : public ::google::protobuf::Message {
 public:
  adv_ask_req();
  virtual ~adv_ask_req();

  adv_ask_req(const adv_ask_req& from);

  inline adv_ask_req& operator=(const adv_ask_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_ask_req& default_instance();

  void Swap(adv_ask_req* other);

  // implements Message ----------------------------------------------

  adv_ask_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_ask_req& from);
  void MergeFrom(const adv_ask_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_ask_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_ask_req* default_instance_;
};
// -------------------------------------------------------------------

class adv_ask_ack : public ::google::protobuf::Message {
 public:
  adv_ask_ack();
  virtual ~adv_ask_ack();

  adv_ask_ack(const adv_ask_ack& from);

  inline adv_ask_ack& operator=(const adv_ask_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_ask_ack& default_instance();

  void Swap(adv_ask_ack* other);

  // implements Message ----------------------------------------------

  adv_ask_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_ask_ack& from);
  void MergeFrom(const adv_ask_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 ask_ids = 3;
  inline int ask_ids_size() const;
  inline void clear_ask_ids();
  static const int kAskIdsFieldNumber = 3;
  inline ::google::protobuf::int32 ask_ids(int index) const;
  inline void set_ask_ids(int index, ::google::protobuf::int32 value);
  inline void add_ask_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ask_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ask_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_ask_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ask_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_ask_ack* default_instance_;
};
// -------------------------------------------------------------------

class adv_tujian_req : public ::google::protobuf::Message {
 public:
  adv_tujian_req();
  virtual ~adv_tujian_req();

  adv_tujian_req(const adv_tujian_req& from);

  inline adv_tujian_req& operator=(const adv_tujian_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_tujian_req& default_instance();

  void Swap(adv_tujian_req* other);

  // implements Message ----------------------------------------------

  adv_tujian_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_tujian_req& from);
  void MergeFrom(const adv_tujian_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_tujian_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_tujian_req* default_instance_;
};
// -------------------------------------------------------------------

class adv_tujian_ack : public ::google::protobuf::Message {
 public:
  adv_tujian_ack();
  virtual ~adv_tujian_ack();

  adv_tujian_ack(const adv_tujian_ack& from);

  inline adv_tujian_ack& operator=(const adv_tujian_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_tujian_ack& default_instance();

  void Swap(adv_tujian_ack* other);

  // implements Message ----------------------------------------------

  adv_tujian_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_tujian_ack& from);
  void MergeFrom(const adv_tujian_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .SProtoSpace.city_events_data city_events = 3;
  inline int city_events_size() const;
  inline void clear_city_events();
  static const int kCityEventsFieldNumber = 3;
  inline const ::SProtoSpace::city_events_data& city_events(int index) const;
  inline ::SProtoSpace::city_events_data* mutable_city_events(int index);
  inline ::SProtoSpace::city_events_data* add_city_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_events_data >&
      city_events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_events_data >*
      mutable_city_events();

  // repeated .SProtoSpace.hero_events_data hero_events = 4;
  inline int hero_events_size() const;
  inline void clear_hero_events();
  static const int kHeroEventsFieldNumber = 4;
  inline const ::SProtoSpace::hero_events_data& hero_events(int index) const;
  inline ::SProtoSpace::hero_events_data* mutable_hero_events(int index);
  inline ::SProtoSpace::hero_events_data* add_hero_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_events_data >&
      hero_events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_events_data >*
      mutable_hero_events();

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_tujian_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_events_data > city_events_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_events_data > hero_events_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static adv_tujian_ack* default_instance_;
};
// -------------------------------------------------------------------

class leave_adv_req : public ::google::protobuf::Message {
 public:
  leave_adv_req();
  virtual ~leave_adv_req();

  leave_adv_req(const leave_adv_req& from);

  inline leave_adv_req& operator=(const leave_adv_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const leave_adv_req& default_instance();

  void Swap(leave_adv_req* other);

  // implements Message ----------------------------------------------

  leave_adv_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const leave_adv_req& from);
  void MergeFrom(const leave_adv_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.leave_adv_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static leave_adv_req* default_instance_;
};
// -------------------------------------------------------------------

class leave_adv_ack : public ::google::protobuf::Message {
 public:
  leave_adv_ack();
  virtual ~leave_adv_ack();

  leave_adv_ack(const leave_adv_ack& from);

  inline leave_adv_ack& operator=(const leave_adv_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const leave_adv_ack& default_instance();

  void Swap(leave_adv_ack* other);

  // implements Message ----------------------------------------------

  leave_adv_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const leave_adv_ack& from);
  void MergeFrom(const leave_adv_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.leave_adv_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5factivity_2eproto();
  friend void protobuf_AssignDesc_cs_5factivity_2eproto();
  friend void protobuf_ShutdownFile_cs_5factivity_2eproto();

  void InitAsDefaultInstance();
  static leave_adv_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// game_job

// optional int32 job_id = 1;
inline bool game_job::has_job_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_job::set_has_job_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_job::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_job::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 game_job::job_id() const {
  return job_id_;
}
inline void game_job::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional int32 type = 2;
inline bool game_job::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_job::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_job::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_job::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 game_job::type() const {
  return type_;
}
inline void game_job::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool is_receive = 3;
inline bool game_job::has_is_receive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_job::set_has_is_receive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_job::clear_has_is_receive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_job::clear_is_receive() {
  is_receive_ = false;
  clear_has_is_receive();
}
inline bool game_job::is_receive() const {
  return is_receive_;
}
inline void game_job::set_is_receive(bool value) {
  set_has_is_receive();
  is_receive_ = value;
}

// optional uint32 cur_step = 4;
inline bool game_job::has_cur_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_job::set_has_cur_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_job::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_job::clear_cur_step() {
  cur_step_ = 0u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 game_job::cur_step() const {
  return cur_step_;
}
inline void game_job::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional uint32 max_step = 5;
inline bool game_job::has_max_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_job::set_has_max_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_job::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_job::clear_max_step() {
  max_step_ = 0u;
  clear_has_max_step();
}
inline ::google::protobuf::uint32 game_job::max_step() const {
  return max_step_;
}
inline void game_job::set_max_step(::google::protobuf::uint32 value) {
  set_has_max_step();
  max_step_ = value;
}

// -------------------------------------------------------------------

// job_all_list_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
inline bool job_all_list_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void job_all_list_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void job_all_list_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void job_all_list_ntf::clear_protoid() {
  protoid_ = 5500;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID job_all_list_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void job_all_list_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.game_job job_s = 2;
inline int job_all_list_ntf::job_s_size() const {
  return job_s_.size();
}
inline void job_all_list_ntf::clear_job_s() {
  job_s_.Clear();
}
inline const ::SProtoSpace::game_job& job_all_list_ntf::job_s(int index) const {
  return job_s_.Get(index);
}
inline ::SProtoSpace::game_job* job_all_list_ntf::mutable_job_s(int index) {
  return job_s_.Mutable(index);
}
inline ::SProtoSpace::game_job* job_all_list_ntf::add_job_s() {
  return job_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
job_all_list_ntf::job_s() const {
  return job_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
job_all_list_ntf::mutable_job_s() {
  return &job_s_;
}

// -------------------------------------------------------------------

// job_update_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
inline bool job_update_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void job_update_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void job_update_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void job_update_ntf::clear_protoid() {
  protoid_ = 5501;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID job_update_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void job_update_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.game_job add_job_s = 2;
inline int job_update_ntf::add_job_s_size() const {
  return add_job_s_.size();
}
inline void job_update_ntf::clear_add_job_s() {
  add_job_s_.Clear();
}
inline const ::SProtoSpace::game_job& job_update_ntf::add_job_s(int index) const {
  return add_job_s_.Get(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::mutable_add_job_s(int index) {
  return add_job_s_.Mutable(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::add_add_job_s() {
  return add_job_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
job_update_ntf::add_job_s() const {
  return add_job_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
job_update_ntf::mutable_add_job_s() {
  return &add_job_s_;
}

// repeated .SProtoSpace.game_job del_job_s = 3;
inline int job_update_ntf::del_job_s_size() const {
  return del_job_s_.size();
}
inline void job_update_ntf::clear_del_job_s() {
  del_job_s_.Clear();
}
inline const ::SProtoSpace::game_job& job_update_ntf::del_job_s(int index) const {
  return del_job_s_.Get(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::mutable_del_job_s(int index) {
  return del_job_s_.Mutable(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::add_del_job_s() {
  return del_job_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
job_update_ntf::del_job_s() const {
  return del_job_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
job_update_ntf::mutable_del_job_s() {
  return &del_job_s_;
}

// repeated .SProtoSpace.game_job fix_job_s = 4;
inline int job_update_ntf::fix_job_s_size() const {
  return fix_job_s_.size();
}
inline void job_update_ntf::clear_fix_job_s() {
  fix_job_s_.Clear();
}
inline const ::SProtoSpace::game_job& job_update_ntf::fix_job_s(int index) const {
  return fix_job_s_.Get(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::mutable_fix_job_s(int index) {
  return fix_job_s_.Mutable(index);
}
inline ::SProtoSpace::game_job* job_update_ntf::add_fix_job_s() {
  return fix_job_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >&
job_update_ntf::fix_job_s() const {
  return fix_job_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_job >*
job_update_ntf::mutable_fix_job_s() {
  return &fix_job_s_;
}

// -------------------------------------------------------------------

// job_operation_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
inline bool job_operation_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void job_operation_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void job_operation_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void job_operation_req::clear_protoid() {
  protoid_ = 5502;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID job_operation_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void job_operation_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 tpye = 2;
inline bool job_operation_req::has_tpye() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void job_operation_req::set_has_tpye() {
  _has_bits_[0] |= 0x00000002u;
}
inline void job_operation_req::clear_has_tpye() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void job_operation_req::clear_tpye() {
  tpye_ = 0;
  clear_has_tpye();
}
inline ::google::protobuf::int32 job_operation_req::tpye() const {
  return tpye_;
}
inline void job_operation_req::set_tpye(::google::protobuf::int32 value) {
  set_has_tpye();
  tpye_ = value;
}

// optional int32 job_id = 3;
inline bool job_operation_req::has_job_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void job_operation_req::set_has_job_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void job_operation_req::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void job_operation_req::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 job_operation_req::job_id() const {
  return job_id_;
}
inline void job_operation_req::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// -------------------------------------------------------------------

// job_operation_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
inline bool job_operation_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void job_operation_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void job_operation_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void job_operation_ack::clear_protoid() {
  protoid_ = 5503;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID job_operation_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void job_operation_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2 [default = 0];
inline bool job_operation_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void job_operation_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void job_operation_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void job_operation_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 job_operation_ack::ret() const {
  return ret_;
}
inline void job_operation_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// all_quests_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
inline bool all_quests_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_quests_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_quests_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_quests_ntf::clear_protoid() {
  protoid_ = 5510;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID all_quests_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void all_quests_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.quest_data quests = 2;
inline int all_quests_ntf::quests_size() const {
  return quests_.size();
}
inline void all_quests_ntf::clear_quests() {
  quests_.Clear();
}
inline const ::SProtoSpace::quest_data& all_quests_ntf::quests(int index) const {
  return quests_.Get(index);
}
inline ::SProtoSpace::quest_data* all_quests_ntf::mutable_quests(int index) {
  return quests_.Mutable(index);
}
inline ::SProtoSpace::quest_data* all_quests_ntf::add_quests() {
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >&
all_quests_ntf::quests() const {
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >*
all_quests_ntf::mutable_quests() {
  return &quests_;
}

// repeated .SProtoSpace.task_activity_data activities = 3;
inline int all_quests_ntf::activities_size() const {
  return activities_.size();
}
inline void all_quests_ntf::clear_activities() {
  activities_.Clear();
}
inline const ::SProtoSpace::task_activity_data& all_quests_ntf::activities(int index) const {
  return activities_.Get(index);
}
inline ::SProtoSpace::task_activity_data* all_quests_ntf::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline ::SProtoSpace::task_activity_data* all_quests_ntf::add_activities() {
  return activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >&
all_quests_ntf::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >*
all_quests_ntf::mutable_activities() {
  return &activities_;
}

// -------------------------------------------------------------------

// quests_update_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
inline bool quests_update_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quests_update_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quests_update_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quests_update_ntf::clear_protoid() {
  protoid_ = 5511;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID quests_update_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void quests_update_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.quest_data quests = 2;
inline int quests_update_ntf::quests_size() const {
  return quests_.size();
}
inline void quests_update_ntf::clear_quests() {
  quests_.Clear();
}
inline const ::SProtoSpace::quest_data& quests_update_ntf::quests(int index) const {
  return quests_.Get(index);
}
inline ::SProtoSpace::quest_data* quests_update_ntf::mutable_quests(int index) {
  return quests_.Mutable(index);
}
inline ::SProtoSpace::quest_data* quests_update_ntf::add_quests() {
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >&
quests_update_ntf::quests() const {
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_data >*
quests_update_ntf::mutable_quests() {
  return &quests_;
}

// repeated .SProtoSpace.task_activity_data activities = 3;
inline int quests_update_ntf::activities_size() const {
  return activities_.size();
}
inline void quests_update_ntf::clear_activities() {
  activities_.Clear();
}
inline const ::SProtoSpace::task_activity_data& quests_update_ntf::activities(int index) const {
  return activities_.Get(index);
}
inline ::SProtoSpace::task_activity_data* quests_update_ntf::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline ::SProtoSpace::task_activity_data* quests_update_ntf::add_activities() {
  return activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >&
quests_update_ntf::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::task_activity_data >*
quests_update_ntf::mutable_activities() {
  return &activities_;
}

// -------------------------------------------------------------------

// finish_quest_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
inline bool finish_quest_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void finish_quest_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void finish_quest_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void finish_quest_req::clear_protoid() {
  protoid_ = 5512;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID finish_quest_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void finish_quest_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 config_id = 2;
inline bool finish_quest_req::has_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void finish_quest_req::set_has_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void finish_quest_req::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void finish_quest_req::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 finish_quest_req::config_id() const {
  return config_id_;
}
inline void finish_quest_req::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 type = 3;
inline bool finish_quest_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void finish_quest_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void finish_quest_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void finish_quest_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 finish_quest_req::type() const {
  return type_;
}
inline void finish_quest_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// finish_quest_ack_rewards

// optional int32 item_id = 1;
inline bool finish_quest_ack_rewards::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void finish_quest_ack_rewards::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void finish_quest_ack_rewards::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void finish_quest_ack_rewards::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 finish_quest_ack_rewards::item_id() const {
  return item_id_;
}
inline void finish_quest_ack_rewards::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 count = 2;
inline bool finish_quest_ack_rewards::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void finish_quest_ack_rewards::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void finish_quest_ack_rewards::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void finish_quest_ack_rewards::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 finish_quest_ack_rewards::count() const {
  return count_;
}
inline void finish_quest_ack_rewards::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// finish_quest_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
inline bool finish_quest_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void finish_quest_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void finish_quest_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void finish_quest_ack::clear_protoid() {
  protoid_ = 5513;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID finish_quest_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void finish_quest_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 config_id = 2;
inline bool finish_quest_ack::has_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void finish_quest_ack::set_has_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void finish_quest_ack::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void finish_quest_ack::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 finish_quest_ack::config_id() const {
  return config_id_;
}
inline void finish_quest_ack::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 type = 3;
inline bool finish_quest_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void finish_quest_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void finish_quest_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void finish_quest_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 finish_quest_ack::type() const {
  return type_;
}
inline void finish_quest_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 result = 4;
inline bool finish_quest_ack::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void finish_quest_ack::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void finish_quest_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void finish_quest_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 finish_quest_ack::result() const {
  return result_;
}
inline void finish_quest_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
inline int finish_quest_ack::rewwards_size() const {
  return rewwards_.size();
}
inline void finish_quest_ack::clear_rewwards() {
  rewwards_.Clear();
}
inline const ::SProtoSpace::finish_quest_ack_rewards& finish_quest_ack::rewwards(int index) const {
  return rewwards_.Get(index);
}
inline ::SProtoSpace::finish_quest_ack_rewards* finish_quest_ack::mutable_rewwards(int index) {
  return rewwards_.Mutable(index);
}
inline ::SProtoSpace::finish_quest_ack_rewards* finish_quest_ack::add_rewwards() {
  return rewwards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::finish_quest_ack_rewards >&
finish_quest_ack::rewwards() const {
  return rewwards_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::finish_quest_ack_rewards >*
finish_quest_ack::mutable_rewwards() {
  return &rewwards_;
}

// -------------------------------------------------------------------

// get_quest_activity_reward_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
inline bool get_quest_activity_reward_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_quest_activity_reward_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_quest_activity_reward_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_quest_activity_reward_req::clear_protoid() {
  protoid_ = 5514;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_quest_activity_reward_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_quest_activity_reward_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 activity_lv = 2;
inline bool get_quest_activity_reward_req::has_activity_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_quest_activity_reward_req::set_has_activity_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_quest_activity_reward_req::clear_has_activity_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_quest_activity_reward_req::clear_activity_lv() {
  activity_lv_ = 0;
  clear_has_activity_lv();
}
inline ::google::protobuf::int32 get_quest_activity_reward_req::activity_lv() const {
  return activity_lv_;
}
inline void get_quest_activity_reward_req::set_activity_lv(::google::protobuf::int32 value) {
  set_has_activity_lv();
  activity_lv_ = value;
}

// -------------------------------------------------------------------

// get_quest_activity_reward_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
inline bool get_quest_activity_reward_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_quest_activity_reward_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_quest_activity_reward_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_quest_activity_reward_ack::clear_protoid() {
  protoid_ = 5515;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_quest_activity_reward_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_quest_activity_reward_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 activity_lv = 2;
inline bool get_quest_activity_reward_ack::has_activity_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_quest_activity_reward_ack::set_has_activity_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_quest_activity_reward_ack::clear_has_activity_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_quest_activity_reward_ack::clear_activity_lv() {
  activity_lv_ = 0;
  clear_has_activity_lv();
}
inline ::google::protobuf::int32 get_quest_activity_reward_ack::activity_lv() const {
  return activity_lv_;
}
inline void get_quest_activity_reward_ack::set_activity_lv(::google::protobuf::int32 value) {
  set_has_activity_lv();
  activity_lv_ = value;
}

// optional int32 ret = 3;
inline bool get_quest_activity_reward_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_quest_activity_reward_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_quest_activity_reward_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_quest_activity_reward_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_quest_activity_reward_ack::ret() const {
  return ret_;
}
inline void get_quest_activity_reward_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// shop_get_all_item_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
inline bool shop_get_all_item_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_get_all_item_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_get_all_item_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_get_all_item_req::clear_protoid() {
  protoid_ = 5602;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_get_all_item_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_get_all_item_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_get_all_item_req::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_get_all_item_req::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_get_all_item_req::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_get_all_item_req::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_get_all_item_req::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_get_all_item_req::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// -------------------------------------------------------------------

// shop_get_all_item_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
inline bool shop_get_all_item_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_get_all_item_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_get_all_item_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_get_all_item_ack::clear_protoid() {
  protoid_ = 5603;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_get_all_item_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_get_all_item_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool shop_get_all_item_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_get_all_item_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_get_all_item_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_get_all_item_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 shop_get_all_item_ack::ret() const {
  return ret_;
}
inline void shop_get_all_item_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 shop_config_id = 3;
inline bool shop_get_all_item_ack::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_get_all_item_ack::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_get_all_item_ack::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_get_all_item_ack::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_get_all_item_ack::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_get_all_item_ack::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional .SProtoSpace.shop_info shop_info = 4;
inline bool shop_get_all_item_ack::has_shop_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_get_all_item_ack::set_has_shop_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_get_all_item_ack::clear_has_shop_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_get_all_item_ack::clear_shop_info() {
  if (shop_info_ != NULL) shop_info_->::SProtoSpace::shop_info::Clear();
  clear_has_shop_info();
}
inline const ::SProtoSpace::shop_info& shop_get_all_item_ack::shop_info() const {
  return shop_info_ != NULL ? *shop_info_ : *default_instance_->shop_info_;
}
inline ::SProtoSpace::shop_info* shop_get_all_item_ack::mutable_shop_info() {
  set_has_shop_info();
  if (shop_info_ == NULL) shop_info_ = new ::SProtoSpace::shop_info;
  return shop_info_;
}
inline ::SProtoSpace::shop_info* shop_get_all_item_ack::release_shop_info() {
  clear_has_shop_info();
  ::SProtoSpace::shop_info* temp = shop_info_;
  shop_info_ = NULL;
  return temp;
}
inline void shop_get_all_item_ack::set_allocated_shop_info(::SProtoSpace::shop_info* shop_info) {
  delete shop_info_;
  shop_info_ = shop_info;
  if (shop_info) {
    set_has_shop_info();
  } else {
    clear_has_shop_info();
  }
}

// -------------------------------------------------------------------

// shop_buy_item_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
inline bool shop_buy_item_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_buy_item_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_buy_item_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_buy_item_req::clear_protoid() {
  protoid_ = 5604;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_buy_item_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_buy_item_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_buy_item_req::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_buy_item_req::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_buy_item_req::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_buy_item_req::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_buy_item_req::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_buy_item_req::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional uint32 sale_config_id = 3;
inline bool shop_buy_item_req::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_buy_item_req::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_buy_item_req::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_buy_item_req::clear_sale_config_id() {
  sale_config_id_ = 0u;
  clear_has_sale_config_id();
}
inline ::google::protobuf::uint32 shop_buy_item_req::sale_config_id() const {
  return sale_config_id_;
}
inline void shop_buy_item_req::set_sale_config_id(::google::protobuf::uint32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional uint32 buy_num = 4;
inline bool shop_buy_item_req::has_buy_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_buy_item_req::set_has_buy_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_buy_item_req::clear_has_buy_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_buy_item_req::clear_buy_num() {
  buy_num_ = 0u;
  clear_has_buy_num();
}
inline ::google::protobuf::uint32 shop_buy_item_req::buy_num() const {
  return buy_num_;
}
inline void shop_buy_item_req::set_buy_num(::google::protobuf::uint32 value) {
  set_has_buy_num();
  buy_num_ = value;
}

// -------------------------------------------------------------------

// shop_buy_item_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
inline bool shop_buy_item_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_buy_item_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_buy_item_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_buy_item_ack::clear_protoid() {
  protoid_ = 5605;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_buy_item_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_buy_item_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_buy_item_ack::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_buy_item_ack::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_buy_item_ack::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_buy_item_ack::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_buy_item_ack::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_buy_item_ack::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional uint32 sale_config_id = 3;
inline bool shop_buy_item_ack::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_buy_item_ack::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_buy_item_ack::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_buy_item_ack::clear_sale_config_id() {
  sale_config_id_ = 0u;
  clear_has_sale_config_id();
}
inline ::google::protobuf::uint32 shop_buy_item_ack::sale_config_id() const {
  return sale_config_id_;
}
inline void shop_buy_item_ack::set_sale_config_id(::google::protobuf::uint32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional uint32 buy_num = 4;
inline bool shop_buy_item_ack::has_buy_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_buy_item_ack::set_has_buy_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_buy_item_ack::clear_has_buy_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_buy_item_ack::clear_buy_num() {
  buy_num_ = 0u;
  clear_has_buy_num();
}
inline ::google::protobuf::uint32 shop_buy_item_ack::buy_num() const {
  return buy_num_;
}
inline void shop_buy_item_ack::set_buy_num(::google::protobuf::uint32 value) {
  set_has_buy_num();
  buy_num_ = value;
}

// optional uint32 ret = 5;
inline bool shop_buy_item_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shop_buy_item_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shop_buy_item_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shop_buy_item_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 shop_buy_item_ack::ret() const {
  return ret_;
}
inline void shop_buy_item_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.shop_cost_info cost_infos = 7;
inline int shop_buy_item_ack::cost_infos_size() const {
  return cost_infos_.size();
}
inline void shop_buy_item_ack::clear_cost_infos() {
  cost_infos_.Clear();
}
inline const ::SProtoSpace::shop_cost_info& shop_buy_item_ack::cost_infos(int index) const {
  return cost_infos_.Get(index);
}
inline ::SProtoSpace::shop_cost_info* shop_buy_item_ack::mutable_cost_infos(int index) {
  return cost_infos_.Mutable(index);
}
inline ::SProtoSpace::shop_cost_info* shop_buy_item_ack::add_cost_infos() {
  return cost_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_cost_info >&
shop_buy_item_ack::cost_infos() const {
  return cost_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_cost_info >*
shop_buy_item_ack::mutable_cost_infos() {
  return &cost_infos_;
}

// -------------------------------------------------------------------

// shop_refresh_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
inline bool shop_refresh_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_refresh_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_refresh_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_refresh_req::clear_protoid() {
  protoid_ = 5606;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_refresh_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_refresh_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_refresh_req::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_refresh_req::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_refresh_req::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_refresh_req::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_refresh_req::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_refresh_req::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional int32 refresh_type = 3;
inline bool shop_refresh_req::has_refresh_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_refresh_req::set_has_refresh_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_refresh_req::clear_has_refresh_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_refresh_req::clear_refresh_type() {
  refresh_type_ = 0;
  clear_has_refresh_type();
}
inline ::google::protobuf::int32 shop_refresh_req::refresh_type() const {
  return refresh_type_;
}
inline void shop_refresh_req::set_refresh_type(::google::protobuf::int32 value) {
  set_has_refresh_type();
  refresh_type_ = value;
}

// -------------------------------------------------------------------

// shop_refresh_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
inline bool shop_refresh_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_refresh_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_refresh_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_refresh_ack::clear_protoid() {
  protoid_ = 5607;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_refresh_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_refresh_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_refresh_ack::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_refresh_ack::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_refresh_ack::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_refresh_ack::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_refresh_ack::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_refresh_ack::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional uint32 ret = 3;
inline bool shop_refresh_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_refresh_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_refresh_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_refresh_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 shop_refresh_ack::ret() const {
  return ret_;
}
inline void shop_refresh_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.shop_cost_info cost_infos = 4;
inline bool shop_refresh_ack::has_cost_infos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_refresh_ack::set_has_cost_infos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_refresh_ack::clear_has_cost_infos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_refresh_ack::clear_cost_infos() {
  if (cost_infos_ != NULL) cost_infos_->::SProtoSpace::shop_cost_info::Clear();
  clear_has_cost_infos();
}
inline const ::SProtoSpace::shop_cost_info& shop_refresh_ack::cost_infos() const {
  return cost_infos_ != NULL ? *cost_infos_ : *default_instance_->cost_infos_;
}
inline ::SProtoSpace::shop_cost_info* shop_refresh_ack::mutable_cost_infos() {
  set_has_cost_infos();
  if (cost_infos_ == NULL) cost_infos_ = new ::SProtoSpace::shop_cost_info;
  return cost_infos_;
}
inline ::SProtoSpace::shop_cost_info* shop_refresh_ack::release_cost_infos() {
  clear_has_cost_infos();
  ::SProtoSpace::shop_cost_info* temp = cost_infos_;
  cost_infos_ = NULL;
  return temp;
}
inline void shop_refresh_ack::set_allocated_cost_infos(::SProtoSpace::shop_cost_info* cost_infos) {
  delete cost_infos_;
  cost_infos_ = cost_infos;
  if (cost_infos) {
    set_has_cost_infos();
  } else {
    clear_has_cost_infos();
  }
}

// optional .SProtoSpace.shop_info shop_info = 5;
inline bool shop_refresh_ack::has_shop_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shop_refresh_ack::set_has_shop_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shop_refresh_ack::clear_has_shop_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shop_refresh_ack::clear_shop_info() {
  if (shop_info_ != NULL) shop_info_->::SProtoSpace::shop_info::Clear();
  clear_has_shop_info();
}
inline const ::SProtoSpace::shop_info& shop_refresh_ack::shop_info() const {
  return shop_info_ != NULL ? *shop_info_ : *default_instance_->shop_info_;
}
inline ::SProtoSpace::shop_info* shop_refresh_ack::mutable_shop_info() {
  set_has_shop_info();
  if (shop_info_ == NULL) shop_info_ = new ::SProtoSpace::shop_info;
  return shop_info_;
}
inline ::SProtoSpace::shop_info* shop_refresh_ack::release_shop_info() {
  clear_has_shop_info();
  ::SProtoSpace::shop_info* temp = shop_info_;
  shop_info_ = NULL;
  return temp;
}
inline void shop_refresh_ack::set_allocated_shop_info(::SProtoSpace::shop_info* shop_info) {
  delete shop_info_;
  shop_info_ = shop_info;
  if (shop_info) {
    set_has_shop_info();
  } else {
    clear_has_shop_info();
  }
}

// -------------------------------------------------------------------

// shop_item_opt_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
inline bool shop_item_opt_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_item_opt_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_item_opt_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_item_opt_req::clear_protoid() {
  protoid_ = 5609;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_item_opt_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_item_opt_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_item_opt_req::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_item_opt_req::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_item_opt_req::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_item_opt_req::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_item_opt_req::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_item_opt_req::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional int32 sale_config_id = 3;
inline bool shop_item_opt_req::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_item_opt_req::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_item_opt_req::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_item_opt_req::clear_sale_config_id() {
  sale_config_id_ = 0;
  clear_has_sale_config_id();
}
inline ::google::protobuf::int32 shop_item_opt_req::sale_config_id() const {
  return sale_config_id_;
}
inline void shop_item_opt_req::set_sale_config_id(::google::protobuf::int32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional int32 count = 4;
inline bool shop_item_opt_req::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_item_opt_req::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_item_opt_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_item_opt_req::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 shop_item_opt_req::count() const {
  return count_;
}
inline void shop_item_opt_req::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 type = 5;
inline bool shop_item_opt_req::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shop_item_opt_req::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shop_item_opt_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shop_item_opt_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 shop_item_opt_req::type() const {
  return type_;
}
inline void shop_item_opt_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 target_id = 6;
inline bool shop_item_opt_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void shop_item_opt_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void shop_item_opt_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void shop_item_opt_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 shop_item_opt_req::target_id() const {
  return target_id_;
}
inline void shop_item_opt_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// shop_item_opt_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
inline bool shop_item_opt_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_item_opt_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_item_opt_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_item_opt_ack::clear_protoid() {
  protoid_ = 5610;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_item_opt_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_item_opt_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_item_opt_ack::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_item_opt_ack::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_item_opt_ack::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_item_opt_ack::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_item_opt_ack::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_item_opt_ack::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional int32 sale_config_id = 3;
inline bool shop_item_opt_ack::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_item_opt_ack::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_item_opt_ack::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_item_opt_ack::clear_sale_config_id() {
  sale_config_id_ = 0;
  clear_has_sale_config_id();
}
inline ::google::protobuf::int32 shop_item_opt_ack::sale_config_id() const {
  return sale_config_id_;
}
inline void shop_item_opt_ack::set_sale_config_id(::google::protobuf::int32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional int32 ret = 4;
inline bool shop_item_opt_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_item_opt_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_item_opt_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_item_opt_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 shop_item_opt_ack::ret() const {
  return ret_;
}
inline void shop_item_opt_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 5;
inline bool shop_item_opt_ack::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shop_item_opt_ack::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shop_item_opt_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shop_item_opt_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 shop_item_opt_ack::type() const {
  return type_;
}
inline void shop_item_opt_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 target_id = 6;
inline bool shop_item_opt_ack::has_target_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void shop_item_opt_ack::set_has_target_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void shop_item_opt_ack::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void shop_item_opt_ack::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 shop_item_opt_ack::target_id() const {
  return target_id_;
}
inline void shop_item_opt_ack::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// shop_open_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
inline bool shop_open_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_open_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_open_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_open_ntf::clear_protoid() {
  protoid_ = 5608;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID shop_open_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void shop_open_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 shop_config_id = 2;
inline bool shop_open_ntf::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_open_ntf::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_open_ntf::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_open_ntf::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_open_ntf::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_open_ntf::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional uint32 dead_line = 3;
inline bool shop_open_ntf::has_dead_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_open_ntf::set_has_dead_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_open_ntf::clear_has_dead_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_open_ntf::clear_dead_line() {
  dead_line_ = 0u;
  clear_has_dead_line();
}
inline ::google::protobuf::uint32 shop_open_ntf::dead_line() const {
  return dead_line_;
}
inline void shop_open_ntf::set_dead_line(::google::protobuf::uint32 value) {
  set_has_dead_line();
  dead_line_ = value;
}

// -------------------------------------------------------------------

// game_officer_apply_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
inline bool game_officer_apply_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_officer_apply_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_officer_apply_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_officer_apply_req::clear_protoid() {
  protoid_ = 6706;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID game_officer_apply_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void game_officer_apply_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool game_officer_apply_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_officer_apply_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_officer_apply_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_officer_apply_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 game_officer_apply_req::grade() const {
  return grade_;
}
inline void game_officer_apply_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// game_officer_apply_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
inline bool game_officer_apply_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_officer_apply_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_officer_apply_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_officer_apply_ack::clear_protoid() {
  protoid_ = 6707;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID game_officer_apply_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void game_officer_apply_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool game_officer_apply_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_officer_apply_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_officer_apply_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_officer_apply_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 game_officer_apply_ack::grade() const {
  return grade_;
}
inline void game_officer_apply_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 ret = 3;
inline bool game_officer_apply_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_officer_apply_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_officer_apply_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_officer_apply_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_officer_apply_ack::ret() const {
  return ret_;
}
inline void game_officer_apply_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// officer_daily_salary_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
inline bool officer_daily_salary_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_daily_salary_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_daily_salary_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_daily_salary_req::clear_protoid() {
  protoid_ = 6710;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID officer_daily_salary_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void officer_daily_salary_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// officer_daily_salary_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
inline bool officer_daily_salary_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_daily_salary_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_daily_salary_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_daily_salary_ack::clear_protoid() {
  protoid_ = 6711;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID officer_daily_salary_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void officer_daily_salary_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool officer_daily_salary_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_daily_salary_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_daily_salary_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_daily_salary_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 officer_daily_salary_ack::ret() const {
  return ret_;
}
inline void officer_daily_salary_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.reward_item items = 3;
inline int officer_daily_salary_ack::items_size() const {
  return items_.size();
}
inline void officer_daily_salary_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::reward_item& officer_daily_salary_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::reward_item* officer_daily_salary_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::reward_item* officer_daily_salary_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
officer_daily_salary_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
officer_daily_salary_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// officer_result_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
inline bool officer_result_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_result_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_result_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_result_ntf::clear_protoid() {
  protoid_ = 6712;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID officer_result_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void officer_result_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool officer_result_ntf::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_result_ntf::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_result_ntf::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_result_ntf::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 officer_result_ntf::grade() const {
  return grade_;
}
inline void officer_result_ntf::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional bool admit = 3;
inline bool officer_result_ntf::has_admit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void officer_result_ntf::set_has_admit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void officer_result_ntf::clear_has_admit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void officer_result_ntf::clear_admit() {
  admit_ = false;
  clear_has_admit();
}
inline bool officer_result_ntf::admit() const {
  return admit_;
}
inline void officer_result_ntf::set_admit(bool value) {
  set_has_admit();
  admit_ = value;
}

// -------------------------------------------------------------------

// get_officer_applicants_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
inline bool get_officer_applicants_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_officer_applicants_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_officer_applicants_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_officer_applicants_req::clear_protoid() {
  protoid_ = 6715;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_officer_applicants_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_officer_applicants_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool get_officer_applicants_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_officer_applicants_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_officer_applicants_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_officer_applicants_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 get_officer_applicants_req::grade() const {
  return grade_;
}
inline void get_officer_applicants_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// get_officer_applicants_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
inline bool get_officer_applicants_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_officer_applicants_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_officer_applicants_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_officer_applicants_ack::clear_protoid() {
  protoid_ = 6716;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_officer_applicants_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_officer_applicants_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool get_officer_applicants_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_officer_applicants_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_officer_applicants_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_officer_applicants_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_officer_applicants_ack::ret() const {
  return ret_;
}
inline void get_officer_applicants_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 grade = 3;
inline bool get_officer_applicants_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_officer_applicants_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_officer_applicants_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_officer_applicants_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 get_officer_applicants_ack::grade() const {
  return grade_;
}
inline void get_officer_applicants_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 apply_num = 4;
inline bool get_officer_applicants_ack::has_apply_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_officer_applicants_ack::set_has_apply_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_officer_applicants_ack::clear_has_apply_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_officer_applicants_ack::clear_apply_num() {
  apply_num_ = 0u;
  clear_has_apply_num();
}
inline ::google::protobuf::uint32 get_officer_applicants_ack::apply_num() const {
  return apply_num_;
}
inline void get_officer_applicants_ack::set_apply_num(::google::protobuf::uint32 value) {
  set_has_apply_num();
  apply_num_ = value;
}

// optional uint32 posts_num = 5;
inline bool get_officer_applicants_ack::has_posts_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_officer_applicants_ack::set_has_posts_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_officer_applicants_ack::clear_has_posts_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_officer_applicants_ack::clear_posts_num() {
  posts_num_ = 0u;
  clear_has_posts_num();
}
inline ::google::protobuf::uint32 get_officer_applicants_ack::posts_num() const {
  return posts_num_;
}
inline void get_officer_applicants_ack::set_posts_num(::google::protobuf::uint32 value) {
  set_has_posts_num();
  posts_num_ = value;
}

// repeated .SProtoSpace.offical_apply_data applys = 6;
inline int get_officer_applicants_ack::applys_size() const {
  return applys_.size();
}
inline void get_officer_applicants_ack::clear_applys() {
  applys_.Clear();
}
inline const ::SProtoSpace::offical_apply_data& get_officer_applicants_ack::applys(int index) const {
  return applys_.Get(index);
}
inline ::SProtoSpace::offical_apply_data* get_officer_applicants_ack::mutable_applys(int index) {
  return applys_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_data* get_officer_applicants_ack::add_applys() {
  return applys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >&
get_officer_applicants_ack::applys() const {
  return applys_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >*
get_officer_applicants_ack::mutable_applys() {
  return &applys_;
}

// -------------------------------------------------------------------

// cancel_officer_apply_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
inline bool cancel_officer_apply_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancel_officer_apply_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancel_officer_apply_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancel_officer_apply_req::clear_protoid() {
  protoid_ = 6717;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID cancel_officer_apply_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void cancel_officer_apply_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool cancel_officer_apply_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancel_officer_apply_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancel_officer_apply_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancel_officer_apply_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 cancel_officer_apply_req::grade() const {
  return grade_;
}
inline void cancel_officer_apply_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// cancel_officer_apply_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
inline bool cancel_officer_apply_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancel_officer_apply_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancel_officer_apply_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancel_officer_apply_ack::clear_protoid() {
  protoid_ = 6718;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID cancel_officer_apply_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void cancel_officer_apply_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool cancel_officer_apply_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancel_officer_apply_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancel_officer_apply_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancel_officer_apply_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 cancel_officer_apply_ack::grade() const {
  return grade_;
}
inline void cancel_officer_apply_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 ret = 3;
inline bool cancel_officer_apply_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cancel_officer_apply_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cancel_officer_apply_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cancel_officer_apply_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 cancel_officer_apply_ack::ret() const {
  return ret_;
}
inline void cancel_officer_apply_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// share_officer_upgrade_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
inline bool share_officer_upgrade_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void share_officer_upgrade_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void share_officer_upgrade_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void share_officer_upgrade_req::clear_protoid() {
  protoid_ = 6719;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID share_officer_upgrade_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void share_officer_upgrade_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool share_officer_upgrade_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void share_officer_upgrade_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void share_officer_upgrade_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void share_officer_upgrade_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 share_officer_upgrade_req::grade() const {
  return grade_;
}
inline void share_officer_upgrade_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 world_channel_id = 3;
inline bool share_officer_upgrade_req::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void share_officer_upgrade_req::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void share_officer_upgrade_req::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void share_officer_upgrade_req::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 share_officer_upgrade_req::world_channel_id() const {
  return world_channel_id_;
}
inline void share_officer_upgrade_req::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 4;
inline bool share_officer_upgrade_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void share_officer_upgrade_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void share_officer_upgrade_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void share_officer_upgrade_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& share_officer_upgrade_req::content() const {
  return *content_;
}
inline void share_officer_upgrade_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void share_officer_upgrade_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void share_officer_upgrade_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* share_officer_upgrade_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* share_officer_upgrade_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void share_officer_upgrade_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// share_officer_upgrade_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
inline bool share_officer_upgrade_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void share_officer_upgrade_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void share_officer_upgrade_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void share_officer_upgrade_ack::clear_protoid() {
  protoid_ = 6720;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID share_officer_upgrade_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void share_officer_upgrade_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool share_officer_upgrade_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void share_officer_upgrade_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void share_officer_upgrade_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void share_officer_upgrade_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 share_officer_upgrade_ack::grade() const {
  return grade_;
}
inline void share_officer_upgrade_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 world_channel_id = 3;
inline bool share_officer_upgrade_ack::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void share_officer_upgrade_ack::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void share_officer_upgrade_ack::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void share_officer_upgrade_ack::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 share_officer_upgrade_ack::world_channel_id() const {
  return world_channel_id_;
}
inline void share_officer_upgrade_ack::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional uint32 ret = 4;
inline bool share_officer_upgrade_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void share_officer_upgrade_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void share_officer_upgrade_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void share_officer_upgrade_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 share_officer_upgrade_ack::ret() const {
  return ret_;
}
inline void share_officer_upgrade_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// get_share_officer_upgrade_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
inline bool get_share_officer_upgrade_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_share_officer_upgrade_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_share_officer_upgrade_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_share_officer_upgrade_req::clear_protoid() {
  protoid_ = 6721;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_share_officer_upgrade_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_share_officer_upgrade_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 share_id = 2;
inline bool get_share_officer_upgrade_req::has_share_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_share_officer_upgrade_req::set_has_share_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_share_officer_upgrade_req::clear_has_share_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_share_officer_upgrade_req::clear_share_id() {
  share_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_id();
}
inline ::google::protobuf::uint64 get_share_officer_upgrade_req::share_id() const {
  return share_id_;
}
inline void get_share_officer_upgrade_req::set_share_id(::google::protobuf::uint64 value) {
  set_has_share_id();
  share_id_ = value;
}

// -------------------------------------------------------------------

// get_share_officer_upgrade_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
inline bool get_share_officer_upgrade_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_share_officer_upgrade_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_share_officer_upgrade_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_share_officer_upgrade_ack::clear_protoid() {
  protoid_ = 6722;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_share_officer_upgrade_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_share_officer_upgrade_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool get_share_officer_upgrade_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_share_officer_upgrade_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_share_officer_upgrade_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_share_officer_upgrade_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_share_officer_upgrade_ack::ret() const {
  return ret_;
}
inline void get_share_officer_upgrade_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.share_officer_upgrade data = 3;
inline bool get_share_officer_upgrade_ack::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_share_officer_upgrade_ack::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_share_officer_upgrade_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_share_officer_upgrade_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::share_officer_upgrade& get_share_officer_upgrade_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::share_officer_upgrade* get_share_officer_upgrade_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::share_officer_upgrade;
  return data_;
}
inline ::SProtoSpace::share_officer_upgrade* get_share_officer_upgrade_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::share_officer_upgrade* temp = data_;
  data_ = NULL;
  return temp;
}
inline void get_share_officer_upgrade_ack::set_allocated_data(::SProtoSpace::share_officer_upgrade* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// update_offical_first_award_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
inline bool update_offical_first_award_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_offical_first_award_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_offical_first_award_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_offical_first_award_ntf::clear_protoid() {
  protoid_ = 6723;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID update_offical_first_award_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void update_offical_first_award_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.reward_item units = 2;
inline int update_offical_first_award_ntf::units_size() const {
  return units_.size();
}
inline void update_offical_first_award_ntf::clear_units() {
  units_.Clear();
}
inline const ::SProtoSpace::reward_item& update_offical_first_award_ntf::units(int index) const {
  return units_.Get(index);
}
inline ::SProtoSpace::reward_item* update_offical_first_award_ntf::mutable_units(int index) {
  return units_.Mutable(index);
}
inline ::SProtoSpace::reward_item* update_offical_first_award_ntf::add_units() {
  return units_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
update_offical_first_award_ntf::units() const {
  return units_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
update_offical_first_award_ntf::mutable_units() {
  return &units_;
}

// -------------------------------------------------------------------

// get_offical_first_award_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
inline bool get_offical_first_award_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_first_award_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_first_award_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_first_award_req::clear_protoid() {
  protoid_ = 6724;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_first_award_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_first_award_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 grade = 2;
inline bool get_offical_first_award_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_first_award_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_first_award_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_first_award_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 get_offical_first_award_req::grade() const {
  return grade_;
}
inline void get_offical_first_award_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// get_offical_first_award_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
inline bool get_offical_first_award_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_first_award_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_first_award_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_first_award_ack::clear_protoid() {
  protoid_ = 6725;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_first_award_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_first_award_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_first_award_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_first_award_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_first_award_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_first_award_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_first_award_ack::ret() const {
  return ret_;
}
inline void get_offical_first_award_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 grade = 3;
inline bool get_offical_first_award_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_first_award_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_first_award_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_first_award_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 get_offical_first_award_ack::grade() const {
  return grade_;
}
inline void get_offical_first_award_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// get_offical_challenge_roles_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
inline bool get_offical_challenge_roles_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_challenge_roles_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_challenge_roles_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_challenge_roles_req::clear_protoid() {
  protoid_ = 6726;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_challenge_roles_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_challenge_roles_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// get_offical_challenge_roles_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
inline bool get_offical_challenge_roles_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_challenge_roles_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_challenge_roles_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_challenge_roles_ack::clear_protoid() {
  protoid_ = 6727;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_challenge_roles_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_challenge_roles_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_challenge_roles_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_challenge_roles_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_challenge_roles_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_challenge_roles_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_challenge_roles_ack::ret() const {
  return ret_;
}
inline void get_offical_challenge_roles_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 offical_challenge_num = 3;
inline bool get_offical_challenge_roles_ack::has_offical_challenge_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_challenge_roles_ack::set_has_offical_challenge_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_challenge_roles_ack::clear_has_offical_challenge_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_challenge_roles_ack::clear_offical_challenge_num() {
  offical_challenge_num_ = 0;
  clear_has_offical_challenge_num();
}
inline ::google::protobuf::int32 get_offical_challenge_roles_ack::offical_challenge_num() const {
  return offical_challenge_num_;
}
inline void get_offical_challenge_roles_ack::set_offical_challenge_num(::google::protobuf::int32 value) {
  set_has_offical_challenge_num();
  offical_challenge_num_ = value;
}

// optional int32 offical_challenge_buy = 4;
inline bool get_offical_challenge_roles_ack::has_offical_challenge_buy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_challenge_roles_ack::set_has_offical_challenge_buy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_challenge_roles_ack::clear_has_offical_challenge_buy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_challenge_roles_ack::clear_offical_challenge_buy() {
  offical_challenge_buy_ = 0;
  clear_has_offical_challenge_buy();
}
inline ::google::protobuf::int32 get_offical_challenge_roles_ack::offical_challenge_buy() const {
  return offical_challenge_buy_;
}
inline void get_offical_challenge_roles_ack::set_offical_challenge_buy(::google::protobuf::int32 value) {
  set_has_offical_challenge_buy();
  offical_challenge_buy_ = value;
}

// repeated .SProtoSpace.offical_item_data items = 5;
inline int get_offical_challenge_roles_ack::items_size() const {
  return items_.size();
}
inline void get_offical_challenge_roles_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& get_offical_challenge_roles_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_challenge_roles_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_challenge_roles_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
get_offical_challenge_roles_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
get_offical_challenge_roles_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// add_offical_challenge_num_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
inline bool add_offical_challenge_num_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_offical_challenge_num_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_offical_challenge_num_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_offical_challenge_num_req::clear_protoid() {
  protoid_ = 6728;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID add_offical_challenge_num_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void add_offical_challenge_num_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// add_offical_challenge_num_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
inline bool add_offical_challenge_num_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_offical_challenge_num_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_offical_challenge_num_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_offical_challenge_num_ack::clear_protoid() {
  protoid_ = 6729;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID add_offical_challenge_num_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void add_offical_challenge_num_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool add_offical_challenge_num_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_offical_challenge_num_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_offical_challenge_num_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_offical_challenge_num_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 add_offical_challenge_num_ack::ret() const {
  return ret_;
}
inline void add_offical_challenge_num_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 offical_challenge_num = 3;
inline bool add_offical_challenge_num_ack::has_offical_challenge_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add_offical_challenge_num_ack::set_has_offical_challenge_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add_offical_challenge_num_ack::clear_has_offical_challenge_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add_offical_challenge_num_ack::clear_offical_challenge_num() {
  offical_challenge_num_ = 0;
  clear_has_offical_challenge_num();
}
inline ::google::protobuf::int32 add_offical_challenge_num_ack::offical_challenge_num() const {
  return offical_challenge_num_;
}
inline void add_offical_challenge_num_ack::set_offical_challenge_num(::google::protobuf::int32 value) {
  set_has_offical_challenge_num();
  offical_challenge_num_ = value;
}

// optional int32 offical_challenge_buy = 4;
inline bool add_offical_challenge_num_ack::has_offical_challenge_buy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void add_offical_challenge_num_ack::set_has_offical_challenge_buy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void add_offical_challenge_num_ack::clear_has_offical_challenge_buy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void add_offical_challenge_num_ack::clear_offical_challenge_buy() {
  offical_challenge_buy_ = 0;
  clear_has_offical_challenge_buy();
}
inline ::google::protobuf::int32 add_offical_challenge_num_ack::offical_challenge_buy() const {
  return offical_challenge_buy_;
}
inline void add_offical_challenge_num_ack::set_offical_challenge_buy(::google::protobuf::int32 value) {
  set_has_offical_challenge_buy();
  offical_challenge_buy_ = value;
}

// -------------------------------------------------------------------

// offical_battle_report_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
inline bool offical_battle_report_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_battle_report_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_battle_report_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_battle_report_req::clear_protoid() {
  protoid_ = 6730;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID offical_battle_report_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void offical_battle_report_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// offical_battle_report_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
inline bool offical_battle_report_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_battle_report_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_battle_report_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_battle_report_ack::clear_protoid() {
  protoid_ = 6731;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID offical_battle_report_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void offical_battle_report_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool offical_battle_report_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_battle_report_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_battle_report_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_battle_report_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 offical_battle_report_ack::ret() const {
  return ret_;
}
inline void offical_battle_report_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.offical_battle_report_unit reports = 3;
inline int offical_battle_report_ack::reports_size() const {
  return reports_.size();
}
inline void offical_battle_report_ack::clear_reports() {
  reports_.Clear();
}
inline const ::SProtoSpace::offical_battle_report_unit& offical_battle_report_ack::reports(int index) const {
  return reports_.Get(index);
}
inline ::SProtoSpace::offical_battle_report_unit* offical_battle_report_ack::mutable_reports(int index) {
  return reports_.Mutable(index);
}
inline ::SProtoSpace::offical_battle_report_unit* offical_battle_report_ack::add_reports() {
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >&
offical_battle_report_ack::reports() const {
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >*
offical_battle_report_ack::mutable_reports() {
  return &reports_;
}

// -------------------------------------------------------------------

// office_result

// optional uint64 battle_uuid = 1;
inline bool office_result::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void office_result::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void office_result::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void office_result::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 office_result::battle_uuid() const {
  return battle_uuid_;
}
inline void office_result::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional .SProtoSpace.EBattleType battle_type = 2;
inline bool office_result::has_battle_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void office_result::set_has_battle_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void office_result::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void office_result::clear_battle_type() {
  battle_type_ = 1;
  clear_has_battle_type();
}
inline ::SProtoSpace::EBattleType office_result::battle_type() const {
  return static_cast< ::SProtoSpace::EBattleType >(battle_type_);
}
inline void office_result::set_battle_type(::SProtoSpace::EBattleType value) {
  assert(::SProtoSpace::EBattleType_IsValid(value));
  set_has_battle_type();
  battle_type_ = value;
}

// optional int64 winner_role_id = 3;
inline bool office_result::has_winner_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void office_result::set_has_winner_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void office_result::clear_has_winner_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void office_result::clear_winner_role_id() {
  winner_role_id_ = GOOGLE_LONGLONG(0);
  clear_has_winner_role_id();
}
inline ::google::protobuf::int64 office_result::winner_role_id() const {
  return winner_role_id_;
}
inline void office_result::set_winner_role_id(::google::protobuf::int64 value) {
  set_has_winner_role_id();
  winner_role_id_ = value;
}

// optional int32 winner_camp_id = 4;
inline bool office_result::has_winner_camp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void office_result::set_has_winner_camp_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void office_result::clear_has_winner_camp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void office_result::clear_winner_camp_id() {
  winner_camp_id_ = 0;
  clear_has_winner_camp_id();
}
inline ::google::protobuf::int32 office_result::winner_camp_id() const {
  return winner_camp_id_;
}
inline void office_result::set_winner_camp_id(::google::protobuf::int32 value) {
  set_has_winner_camp_id();
  winner_camp_id_ = value;
}

// repeated .SProtoSpace.round_data data = 5;
inline int office_result::data_size() const {
  return data_.size();
}
inline void office_result::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::round_data& office_result::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::round_data* office_result::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::round_data* office_result::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
office_result::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
office_result::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// get_offical_member_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
inline bool get_offical_member_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_member_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_member_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_member_req::clear_protoid() {
  protoid_ = 6736;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_member_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_member_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 grade = 2;
inline bool get_offical_member_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_member_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_member_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_member_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 get_offical_member_req::grade() const {
  return grade_;
}
inline void get_offical_member_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 start_index = 3;
inline bool get_offical_member_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_member_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_member_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_member_req::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 get_offical_member_req::start_index() const {
  return start_index_;
}
inline void get_offical_member_req::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 4;
inline bool get_offical_member_req::has_end_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_member_req::set_has_end_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_member_req::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_member_req::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 get_offical_member_req::end_index() const {
  return end_index_;
}
inline void get_offical_member_req::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// -------------------------------------------------------------------

// get_offical_member_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
inline bool get_offical_member_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_member_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_member_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_member_ack::clear_protoid() {
  protoid_ = 6737;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_offical_member_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_offical_member_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool get_offical_member_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_member_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_member_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_member_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_offical_member_ack::ret() const {
  return ret_;
}
inline void get_offical_member_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 grade = 3;
inline bool get_offical_member_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_member_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_member_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_member_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 get_offical_member_ack::grade() const {
  return grade_;
}
inline void get_offical_member_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.offical_member_data members = 4;
inline int get_offical_member_ack::members_size() const {
  return members_.size();
}
inline void get_offical_member_ack::clear_members() {
  members_.Clear();
}
inline const ::SProtoSpace::offical_member_data& get_offical_member_ack::members(int index) const {
  return members_.Get(index);
}
inline ::SProtoSpace::offical_member_data* get_offical_member_ack::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::SProtoSpace::offical_member_data* get_offical_member_ack::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
get_offical_member_ack::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
get_offical_member_ack::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// get_global_offical_rank_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
inline bool get_global_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_global_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_global_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_global_offical_rank_req::clear_proto_id() {
  proto_id_ = 6738;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_global_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_global_offical_rank_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 start = 2;
inline bool get_global_offical_rank_req::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_global_offical_rank_req::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_global_offical_rank_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_global_offical_rank_req::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 get_global_offical_rank_req::start() const {
  return start_;
}
inline void get_global_offical_rank_req::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional int32 end = 3;
inline bool get_global_offical_rank_req::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_global_offical_rank_req::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_global_offical_rank_req::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_global_offical_rank_req::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 get_global_offical_rank_req::end() const {
  return end_;
}
inline void get_global_offical_rank_req::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// get_global_offical_rank_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
inline bool get_global_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_global_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_global_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_global_offical_rank_ack::clear_proto_id() {
  proto_id_ = 6739;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_global_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_global_offical_rank_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_global_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_global_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_global_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_global_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_global_offical_rank_ack::ret() const {
  return ret_;
}
inline void get_global_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.offical_member_data members = 3;
inline int get_global_offical_rank_ack::members_size() const {
  return members_.size();
}
inline void get_global_offical_rank_ack::clear_members() {
  members_.Clear();
}
inline const ::SProtoSpace::offical_member_data& get_global_offical_rank_ack::members(int index) const {
  return members_.Get(index);
}
inline ::SProtoSpace::offical_member_data* get_global_offical_rank_ack::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::SProtoSpace::offical_member_data* get_global_offical_rank_ack::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
get_global_offical_rank_ack::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
get_global_offical_rank_ack::mutable_members() {
  return &members_;
}

// optional .SProtoSpace.offical_member_data my_data = 4;
inline bool get_global_offical_rank_ack::has_my_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_global_offical_rank_ack::set_has_my_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_global_offical_rank_ack::clear_has_my_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_global_offical_rank_ack::clear_my_data() {
  if (my_data_ != NULL) my_data_->::SProtoSpace::offical_member_data::Clear();
  clear_has_my_data();
}
inline const ::SProtoSpace::offical_member_data& get_global_offical_rank_ack::my_data() const {
  return my_data_ != NULL ? *my_data_ : *default_instance_->my_data_;
}
inline ::SProtoSpace::offical_member_data* get_global_offical_rank_ack::mutable_my_data() {
  set_has_my_data();
  if (my_data_ == NULL) my_data_ = new ::SProtoSpace::offical_member_data;
  return my_data_;
}
inline ::SProtoSpace::offical_member_data* get_global_offical_rank_ack::release_my_data() {
  clear_has_my_data();
  ::SProtoSpace::offical_member_data* temp = my_data_;
  my_data_ = NULL;
  return temp;
}
inline void get_global_offical_rank_ack::set_allocated_my_data(::SProtoSpace::offical_member_data* my_data) {
  delete my_data_;
  my_data_ = my_data;
  if (my_data) {
    set_has_my_data();
  } else {
    clear_has_my_data();
  }
}

// -------------------------------------------------------------------

// enter_tower_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
inline bool enter_tower_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_tower_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_tower_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_tower_req::clear_protoid() {
  protoid_ = 7251;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_tower_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_tower_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// enter_tower_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
inline bool enter_tower_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_tower_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_tower_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_tower_ack::clear_protoid() {
  protoid_ = 7252;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_tower_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_tower_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool enter_tower_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_tower_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_tower_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_tower_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 enter_tower_ack::ret() const {
  return ret_;
}
inline void enter_tower_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.tower_base_info tower_data = 3;
inline bool enter_tower_ack::has_tower_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_tower_ack::set_has_tower_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_tower_ack::clear_has_tower_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_tower_ack::clear_tower_data() {
  if (tower_data_ != NULL) tower_data_->::SProtoSpace::tower_base_info::Clear();
  clear_has_tower_data();
}
inline const ::SProtoSpace::tower_base_info& enter_tower_ack::tower_data() const {
  return tower_data_ != NULL ? *tower_data_ : *default_instance_->tower_data_;
}
inline ::SProtoSpace::tower_base_info* enter_tower_ack::mutable_tower_data() {
  set_has_tower_data();
  if (tower_data_ == NULL) tower_data_ = new ::SProtoSpace::tower_base_info;
  return tower_data_;
}
inline ::SProtoSpace::tower_base_info* enter_tower_ack::release_tower_data() {
  clear_has_tower_data();
  ::SProtoSpace::tower_base_info* temp = tower_data_;
  tower_data_ = NULL;
  return temp;
}
inline void enter_tower_ack::set_allocated_tower_data(::SProtoSpace::tower_base_info* tower_data) {
  delete tower_data_;
  tower_data_ = tower_data;
  if (tower_data) {
    set_has_tower_data();
  } else {
    clear_has_tower_data();
  }
}

// -------------------------------------------------------------------

// select_tower_floor_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
inline bool select_tower_floor_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_tower_floor_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_tower_floor_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_tower_floor_req::clear_protoid() {
  protoid_ = 7253;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID select_tower_floor_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void select_tower_floor_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 tower_floor = 2;
inline bool select_tower_floor_req::has_tower_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_tower_floor_req::set_has_tower_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_tower_floor_req::clear_has_tower_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_tower_floor_req::clear_tower_floor() {
  tower_floor_ = 0u;
  clear_has_tower_floor();
}
inline ::google::protobuf::uint32 select_tower_floor_req::tower_floor() const {
  return tower_floor_;
}
inline void select_tower_floor_req::set_tower_floor(::google::protobuf::uint32 value) {
  set_has_tower_floor();
  tower_floor_ = value;
}

// -------------------------------------------------------------------

// select_tower_floor_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
inline bool select_tower_floor_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_tower_floor_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_tower_floor_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_tower_floor_ack::clear_protoid() {
  protoid_ = 7254;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID select_tower_floor_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void select_tower_floor_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool select_tower_floor_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_tower_floor_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_tower_floor_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_tower_floor_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 select_tower_floor_ack::ret() const {
  return ret_;
}
inline void select_tower_floor_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 type = 3;
inline bool select_tower_floor_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void select_tower_floor_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void select_tower_floor_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void select_tower_floor_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 select_tower_floor_ack::type() const {
  return type_;
}
inline void select_tower_floor_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.question_data data = 4;
inline bool select_tower_floor_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void select_tower_floor_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void select_tower_floor_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void select_tower_floor_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::question_data& select_tower_floor_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::question_data* select_tower_floor_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::question_data;
  return data_;
}
inline ::SProtoSpace::question_data* select_tower_floor_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::question_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void select_tower_floor_ack::set_allocated_data(::SProtoSpace::question_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// tower_die_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
inline bool tower_die_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_die_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_die_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_die_req::clear_protoid() {
  protoid_ = 7265;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_die_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_die_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 tower_floor = 2;
inline bool tower_die_req::has_tower_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_die_req::set_has_tower_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_die_req::clear_has_tower_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_die_req::clear_tower_floor() {
  tower_floor_ = 0u;
  clear_has_tower_floor();
}
inline ::google::protobuf::uint32 tower_die_req::tower_floor() const {
  return tower_floor_;
}
inline void tower_die_req::set_tower_floor(::google::protobuf::uint32 value) {
  set_has_tower_floor();
  tower_floor_ = value;
}

// optional uint32 cur_step = 3 [default = 1];
inline bool tower_die_req::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_die_req::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_die_req::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_die_req::clear_cur_step() {
  cur_step_ = 1u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_die_req::cur_step() const {
  return cur_step_;
}
inline void tower_die_req::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// -------------------------------------------------------------------

// tower_die_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
inline bool tower_die_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_die_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_die_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_die_ack::clear_protoid() {
  protoid_ = 7266;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_die_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_die_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 tower_floor = 2;
inline bool tower_die_ack::has_tower_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_die_ack::set_has_tower_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_die_ack::clear_has_tower_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_die_ack::clear_tower_floor() {
  tower_floor_ = 0u;
  clear_has_tower_floor();
}
inline ::google::protobuf::uint32 tower_die_ack::tower_floor() const {
  return tower_floor_;
}
inline void tower_die_ack::set_tower_floor(::google::protobuf::uint32 value) {
  set_has_tower_floor();
  tower_floor_ = value;
}

// optional uint32 cur_step = 3 [default = 1];
inline bool tower_die_ack::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_die_ack::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_die_ack::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_die_ack::clear_cur_step() {
  cur_step_ = 1u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_die_ack::cur_step() const {
  return cur_step_;
}
inline void tower_die_ack::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional uint32 ret = 4;
inline bool tower_die_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tower_die_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tower_die_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tower_die_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 tower_die_ack::ret() const {
  return ret_;
}
inline void tower_die_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 type = 5;
inline bool tower_die_ack::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tower_die_ack::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tower_die_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tower_die_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tower_die_ack::type() const {
  return type_;
}
inline void tower_die_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.question_data data = 6;
inline bool tower_die_ack::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tower_die_ack::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tower_die_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tower_die_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::question_data& tower_die_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::question_data* tower_die_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::question_data;
  return data_;
}
inline ::SProtoSpace::question_data* tower_die_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::question_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void tower_die_ack::set_allocated_data(::SProtoSpace::question_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// tower_step_fini_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
inline bool tower_step_fini_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_step_fini_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_step_fini_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_step_fini_req::clear_protoid() {
  protoid_ = 7267;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_step_fini_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_step_fini_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 tower_floor = 2;
inline bool tower_step_fini_req::has_tower_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_step_fini_req::set_has_tower_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_step_fini_req::clear_has_tower_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_step_fini_req::clear_tower_floor() {
  tower_floor_ = 0u;
  clear_has_tower_floor();
}
inline ::google::protobuf::uint32 tower_step_fini_req::tower_floor() const {
  return tower_floor_;
}
inline void tower_step_fini_req::set_tower_floor(::google::protobuf::uint32 value) {
  set_has_tower_floor();
  tower_floor_ = value;
}

// optional uint32 cur_step = 3 [default = 1];
inline bool tower_step_fini_req::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_step_fini_req::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_step_fini_req::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_step_fini_req::clear_cur_step() {
  cur_step_ = 1u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_step_fini_req::cur_step() const {
  return cur_step_;
}
inline void tower_step_fini_req::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// -------------------------------------------------------------------

// tower_step_fini_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
inline bool tower_step_fini_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_step_fini_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_step_fini_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_step_fini_ack::clear_protoid() {
  protoid_ = 7268;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_step_fini_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_step_fini_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 tower_floor = 2;
inline bool tower_step_fini_ack::has_tower_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_step_fini_ack::set_has_tower_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_step_fini_ack::clear_has_tower_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_step_fini_ack::clear_tower_floor() {
  tower_floor_ = 0u;
  clear_has_tower_floor();
}
inline ::google::protobuf::uint32 tower_step_fini_ack::tower_floor() const {
  return tower_floor_;
}
inline void tower_step_fini_ack::set_tower_floor(::google::protobuf::uint32 value) {
  set_has_tower_floor();
  tower_floor_ = value;
}

// optional uint32 cur_step = 3 [default = 1];
inline bool tower_step_fini_ack::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_step_fini_ack::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_step_fini_ack::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_step_fini_ack::clear_cur_step() {
  cur_step_ = 1u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_step_fini_ack::cur_step() const {
  return cur_step_;
}
inline void tower_step_fini_ack::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional int32 ret = 4;
inline bool tower_step_fini_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tower_step_fini_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tower_step_fini_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tower_step_fini_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 tower_step_fini_ack::ret() const {
  return ret_;
}
inline void tower_step_fini_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// question_check_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
inline bool question_check_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_check_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_check_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_check_req::clear_protoid() {
  protoid_ = 7255;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID question_check_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void question_check_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 question_id = 2;
inline bool question_check_req::has_question_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void question_check_req::set_has_question_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void question_check_req::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void question_check_req::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
inline ::google::protobuf::uint32 question_check_req::question_id() const {
  return question_id_;
}
inline void question_check_req::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
}

// optional uint32 subquestion_id = 3;
inline bool question_check_req::has_subquestion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void question_check_req::set_has_subquestion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void question_check_req::clear_has_subquestion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void question_check_req::clear_subquestion_id() {
  subquestion_id_ = 0u;
  clear_has_subquestion_id();
}
inline ::google::protobuf::uint32 question_check_req::subquestion_id() const {
  return subquestion_id_;
}
inline void question_check_req::set_subquestion_id(::google::protobuf::uint32 value) {
  set_has_subquestion_id();
  subquestion_id_ = value;
}

// repeated uint32 answers = 4;
inline int question_check_req::answers_size() const {
  return answers_.size();
}
inline void question_check_req::clear_answers() {
  answers_.Clear();
}
inline ::google::protobuf::uint32 question_check_req::answers(int index) const {
  return answers_.Get(index);
}
inline void question_check_req::set_answers(int index, ::google::protobuf::uint32 value) {
  answers_.Set(index, value);
}
inline void question_check_req::add_answers(::google::protobuf::uint32 value) {
  answers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
question_check_req::answers() const {
  return answers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
question_check_req::mutable_answers() {
  return &answers_;
}

// optional int32 type = 5;
inline bool question_check_req::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void question_check_req::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void question_check_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void question_check_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 question_check_req::type() const {
  return type_;
}
inline void question_check_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// question_check_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
inline bool question_check_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_check_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_check_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_check_ack::clear_protoid() {
  protoid_ = 7256;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID question_check_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void question_check_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 question_id = 2;
inline bool question_check_ack::has_question_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void question_check_ack::set_has_question_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void question_check_ack::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void question_check_ack::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
inline ::google::protobuf::uint32 question_check_ack::question_id() const {
  return question_id_;
}
inline void question_check_ack::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
}

// repeated uint32 answers = 3;
inline int question_check_ack::answers_size() const {
  return answers_.size();
}
inline void question_check_ack::clear_answers() {
  answers_.Clear();
}
inline ::google::protobuf::uint32 question_check_ack::answers(int index) const {
  return answers_.Get(index);
}
inline void question_check_ack::set_answers(int index, ::google::protobuf::uint32 value) {
  answers_.Set(index, value);
}
inline void question_check_ack::add_answers(::google::protobuf::uint32 value) {
  answers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
question_check_ack::answers() const {
  return answers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
question_check_ack::mutable_answers() {
  return &answers_;
}

// optional uint32 subquestion_id = 4;
inline bool question_check_ack::has_subquestion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void question_check_ack::set_has_subquestion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void question_check_ack::clear_has_subquestion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void question_check_ack::clear_subquestion_id() {
  subquestion_id_ = 0u;
  clear_has_subquestion_id();
}
inline ::google::protobuf::uint32 question_check_ack::subquestion_id() const {
  return subquestion_id_;
}
inline void question_check_ack::set_subquestion_id(::google::protobuf::uint32 value) {
  set_has_subquestion_id();
  subquestion_id_ = value;
}

// optional uint32 ret = 5;
inline bool question_check_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void question_check_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void question_check_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void question_check_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 question_check_ack::ret() const {
  return ret_;
}
inline void question_check_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 6;
inline bool question_check_ack::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void question_check_ack::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void question_check_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void question_check_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 question_check_ack::type() const {
  return type_;
}
inline void question_check_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// update_tower_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
inline bool update_tower_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_tower_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_tower_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_tower_info_ntf::clear_protoid() {
  protoid_ = 7257;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID update_tower_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void update_tower_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.tower_base_info data = 2;
inline bool update_tower_info_ntf::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_tower_info_ntf::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_tower_info_ntf::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_tower_info_ntf::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::tower_base_info::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::tower_base_info& update_tower_info_ntf::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::tower_base_info* update_tower_info_ntf::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::tower_base_info;
  return data_;
}
inline ::SProtoSpace::tower_base_info* update_tower_info_ntf::release_data() {
  clear_has_data();
  ::SProtoSpace::tower_base_info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void update_tower_info_ntf::set_allocated_data(::SProtoSpace::tower_base_info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// tower_raids_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
inline bool tower_raids_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_raids_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_raids_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_raids_req::clear_protoid() {
  protoid_ = 7258;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_raids_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_raids_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// tower_raids_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
inline bool tower_raids_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_raids_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_raids_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_raids_ack::clear_protoid() {
  protoid_ = 7259;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_raids_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_raids_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool tower_raids_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_raids_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_raids_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_raids_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 tower_raids_ack::ret() const {
  return ret_;
}
inline void tower_raids_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// tower_reset_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
inline bool tower_reset_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_reset_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_reset_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_reset_req::clear_protoid() {
  protoid_ = 7260;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_reset_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_reset_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// tower_reset_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
inline bool tower_reset_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_reset_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_reset_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_reset_ack::clear_protoid() {
  protoid_ = 7261;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_reset_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_reset_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool tower_reset_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_reset_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_reset_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_reset_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 tower_reset_ack::ret() const {
  return ret_;
}
inline void tower_reset_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// tower_reward_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
inline bool tower_reward_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_reward_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_reward_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_reward_ntf::clear_protoid() {
  protoid_ = 7262;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID tower_reward_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void tower_reward_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 floor_id = 2;
inline bool tower_reward_ntf::has_floor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_reward_ntf::set_has_floor_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_reward_ntf::clear_has_floor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_reward_ntf::clear_floor_id() {
  floor_id_ = 0u;
  clear_has_floor_id();
}
inline ::google::protobuf::uint32 tower_reward_ntf::floor_id() const {
  return floor_id_;
}
inline void tower_reward_ntf::set_floor_id(::google::protobuf::uint32 value) {
  set_has_floor_id();
  floor_id_ = value;
}

// optional uint32 cur_step = 3;
inline bool tower_reward_ntf::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_reward_ntf::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_reward_ntf::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_reward_ntf::clear_cur_step() {
  cur_step_ = 0u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_reward_ntf::cur_step() const {
  return cur_step_;
}
inline void tower_reward_ntf::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional uint32 type = 4;
inline bool tower_reward_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tower_reward_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tower_reward_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tower_reward_ntf::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tower_reward_ntf::type() const {
  return type_;
}
inline void tower_reward_ntf::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional bool is_win = 5;
inline bool tower_reward_ntf::has_is_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tower_reward_ntf::set_has_is_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tower_reward_ntf::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tower_reward_ntf::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool tower_reward_ntf::is_win() const {
  return is_win_;
}
inline void tower_reward_ntf::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// repeated .SProtoSpace.item_info reward = 6;
inline int tower_reward_ntf::reward_size() const {
  return reward_.size();
}
inline void tower_reward_ntf::clear_reward() {
  reward_.Clear();
}
inline const ::SProtoSpace::item_info& tower_reward_ntf::reward(int index) const {
  return reward_.Get(index);
}
inline ::SProtoSpace::item_info* tower_reward_ntf::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::SProtoSpace::item_info* tower_reward_ntf::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
tower_reward_ntf::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
tower_reward_ntf::mutable_reward() {
  return &reward_;
}

// optional int32 ret = 7;
inline bool tower_reward_ntf::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tower_reward_ntf::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tower_reward_ntf::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tower_reward_ntf::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 tower_reward_ntf::ret() const {
  return ret_;
}
inline void tower_reward_ntf::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// question_find_wrong_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
inline bool question_find_wrong_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_find_wrong_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_find_wrong_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_find_wrong_req::clear_protoid() {
  protoid_ = 7263;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID question_find_wrong_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void question_find_wrong_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 question_id = 2;
inline bool question_find_wrong_req::has_question_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void question_find_wrong_req::set_has_question_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void question_find_wrong_req::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void question_find_wrong_req::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
inline ::google::protobuf::uint32 question_find_wrong_req::question_id() const {
  return question_id_;
}
inline void question_find_wrong_req::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
}

// optional uint32 subquestion_id = 3;
inline bool question_find_wrong_req::has_subquestion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void question_find_wrong_req::set_has_subquestion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void question_find_wrong_req::clear_has_subquestion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void question_find_wrong_req::clear_subquestion_id() {
  subquestion_id_ = 0u;
  clear_has_subquestion_id();
}
inline ::google::protobuf::uint32 question_find_wrong_req::subquestion_id() const {
  return subquestion_id_;
}
inline void question_find_wrong_req::set_subquestion_id(::google::protobuf::uint32 value) {
  set_has_subquestion_id();
  subquestion_id_ = value;
}

// optional int32 type = 4;
inline bool question_find_wrong_req::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void question_find_wrong_req::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void question_find_wrong_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void question_find_wrong_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 question_find_wrong_req::type() const {
  return type_;
}
inline void question_find_wrong_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// question_find_wrong_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
inline bool question_find_wrong_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_find_wrong_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_find_wrong_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_find_wrong_ack::clear_protoid() {
  protoid_ = 7264;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID question_find_wrong_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void question_find_wrong_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 question_id = 2;
inline bool question_find_wrong_ack::has_question_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void question_find_wrong_ack::set_has_question_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void question_find_wrong_ack::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void question_find_wrong_ack::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
inline ::google::protobuf::uint32 question_find_wrong_ack::question_id() const {
  return question_id_;
}
inline void question_find_wrong_ack::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
}

// optional uint32 error_answer = 3;
inline bool question_find_wrong_ack::has_error_answer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void question_find_wrong_ack::set_has_error_answer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void question_find_wrong_ack::clear_has_error_answer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void question_find_wrong_ack::clear_error_answer() {
  error_answer_ = 0u;
  clear_has_error_answer();
}
inline ::google::protobuf::uint32 question_find_wrong_ack::error_answer() const {
  return error_answer_;
}
inline void question_find_wrong_ack::set_error_answer(::google::protobuf::uint32 value) {
  set_has_error_answer();
  error_answer_ = value;
}

// optional uint32 subquestion_id = 4;
inline bool question_find_wrong_ack::has_subquestion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void question_find_wrong_ack::set_has_subquestion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void question_find_wrong_ack::clear_has_subquestion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void question_find_wrong_ack::clear_subquestion_id() {
  subquestion_id_ = 0u;
  clear_has_subquestion_id();
}
inline ::google::protobuf::uint32 question_find_wrong_ack::subquestion_id() const {
  return subquestion_id_;
}
inline void question_find_wrong_ack::set_subquestion_id(::google::protobuf::uint32 value) {
  set_has_subquestion_id();
  subquestion_id_ = value;
}

// optional uint32 ret = 5;
inline bool question_find_wrong_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void question_find_wrong_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void question_find_wrong_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void question_find_wrong_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 question_find_wrong_ack::ret() const {
  return ret_;
}
inline void question_find_wrong_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 6;
inline bool question_find_wrong_ack::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void question_find_wrong_ack::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void question_find_wrong_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void question_find_wrong_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 question_find_wrong_ack::type() const {
  return type_;
}
inline void question_find_wrong_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// enter_adv_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
inline bool enter_adv_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_adv_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_adv_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_adv_req::clear_proto_id() {
  proto_id_ = 7500;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_adv_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_adv_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// enter_adv_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
inline bool enter_adv_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_adv_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_adv_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_adv_ack::clear_proto_id() {
  proto_id_ = 7501;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_adv_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_adv_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 adv_times = 2;
inline bool enter_adv_ack::has_adv_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_adv_ack::set_has_adv_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_adv_ack::clear_has_adv_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_adv_ack::clear_adv_times() {
  adv_times_ = 0;
  clear_has_adv_times();
}
inline ::google::protobuf::int32 enter_adv_ack::adv_times() const {
  return adv_times_;
}
inline void enter_adv_ack::set_adv_times(::google::protobuf::int32 value) {
  set_has_adv_times();
  adv_times_ = value;
}

// optional int32 adv_energy = 3;
inline bool enter_adv_ack::has_adv_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_adv_ack::set_has_adv_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_adv_ack::clear_has_adv_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_adv_ack::clear_adv_energy() {
  adv_energy_ = 0;
  clear_has_adv_energy();
}
inline ::google::protobuf::int32 enter_adv_ack::adv_energy() const {
  return adv_energy_;
}
inline void enter_adv_ack::set_adv_energy(::google::protobuf::int32 value) {
  set_has_adv_energy();
  adv_energy_ = value;
}

// repeated int32 city_ids = 4;
inline int enter_adv_ack::city_ids_size() const {
  return city_ids_.size();
}
inline void enter_adv_ack::clear_city_ids() {
  city_ids_.Clear();
}
inline ::google::protobuf::int32 enter_adv_ack::city_ids(int index) const {
  return city_ids_.Get(index);
}
inline void enter_adv_ack::set_city_ids(int index, ::google::protobuf::int32 value) {
  city_ids_.Set(index, value);
}
inline void enter_adv_ack::add_city_ids(::google::protobuf::int32 value) {
  city_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
enter_adv_ack::city_ids() const {
  return city_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
enter_adv_ack::mutable_city_ids() {
  return &city_ids_;
}

// optional int32 ret = 5;
inline bool enter_adv_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void enter_adv_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void enter_adv_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void enter_adv_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 enter_adv_ack::ret() const {
  return ret_;
}
inline void enter_adv_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 ask_ids = 6;
inline int enter_adv_ack::ask_ids_size() const {
  return ask_ids_.size();
}
inline void enter_adv_ack::clear_ask_ids() {
  ask_ids_.Clear();
}
inline ::google::protobuf::int32 enter_adv_ack::ask_ids(int index) const {
  return ask_ids_.Get(index);
}
inline void enter_adv_ack::set_ask_ids(int index, ::google::protobuf::int32 value) {
  ask_ids_.Set(index, value);
}
inline void enter_adv_ack::add_ask_ids(::google::protobuf::int32 value) {
  ask_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
enter_adv_ack::ask_ids() const {
  return ask_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
enter_adv_ack::mutable_ask_ids() {
  return &ask_ids_;
}

// -------------------------------------------------------------------

// select_adv_city_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
inline bool select_adv_city_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_adv_city_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_adv_city_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_adv_city_req::clear_proto_id() {
  proto_id_ = 7502;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID select_adv_city_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void select_adv_city_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 city_id = 2;
inline bool select_adv_city_req::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_adv_city_req::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_adv_city_req::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_adv_city_req::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 select_adv_city_req::city_id() const {
  return city_id_;
}
inline void select_adv_city_req::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// -------------------------------------------------------------------

// select_adv_city_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
inline bool select_adv_city_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_adv_city_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_adv_city_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_adv_city_ack::clear_proto_id() {
  proto_id_ = 7503;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID select_adv_city_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void select_adv_city_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 city_id = 2;
inline bool select_adv_city_ack::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_adv_city_ack::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_adv_city_ack::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_adv_city_ack::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 select_adv_city_ack::city_id() const {
  return city_id_;
}
inline void select_adv_city_ack::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional .SProtoSpace.EWEATHER_TYPE weather = 3;
inline bool select_adv_city_ack::has_weather() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void select_adv_city_ack::set_has_weather() {
  _has_bits_[0] |= 0x00000004u;
}
inline void select_adv_city_ack::clear_has_weather() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void select_adv_city_ack::clear_weather() {
  weather_ = 0;
  clear_has_weather();
}
inline ::SProtoSpace::EWEATHER_TYPE select_adv_city_ack::weather() const {
  return static_cast< ::SProtoSpace::EWEATHER_TYPE >(weather_);
}
inline void select_adv_city_ack::set_weather(::SProtoSpace::EWEATHER_TYPE value) {
  assert(::SProtoSpace::EWEATHER_TYPE_IsValid(value));
  set_has_weather();
  weather_ = value;
}

// optional int32 ret = 4;
inline bool select_adv_city_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void select_adv_city_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void select_adv_city_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void select_adv_city_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 select_adv_city_ack::ret() const {
  return ret_;
}
inline void select_adv_city_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.hero_favor_info data = 5;
inline int select_adv_city_ack::data_size() const {
  return data_.size();
}
inline void select_adv_city_ack::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::hero_favor_info& select_adv_city_ack::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::hero_favor_info* select_adv_city_ack::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::hero_favor_info* select_adv_city_ack::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >&
select_adv_city_ack::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >*
select_adv_city_ack::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// adv_event_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
inline bool adv_event_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_event_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_event_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_event_req::clear_proto_id() {
  proto_id_ = 7504;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_event_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_event_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 city_id = 2;
inline bool adv_event_req::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_event_req::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_event_req::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_event_req::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 adv_event_req::city_id() const {
  return city_id_;
}
inline void adv_event_req::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional int32 slot = 3;
inline bool adv_event_req::has_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void adv_event_req::set_has_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void adv_event_req::clear_has_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void adv_event_req::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 adv_event_req::slot() const {
  return slot_;
}
inline void adv_event_req::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// adv_event_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
inline bool adv_event_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_event_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_event_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_event_ack::clear_proto_id() {
  proto_id_ = 7505;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_event_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_event_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 city_id = 2;
inline bool adv_event_ack::has_city_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_event_ack::set_has_city_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_event_ack::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_event_ack::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 adv_event_ack::city_id() const {
  return city_id_;
}
inline void adv_event_ack::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional int32 ret = 3;
inline bool adv_event_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void adv_event_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void adv_event_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void adv_event_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 adv_event_ack::ret() const {
  return ret_;
}
inline void adv_event_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 event_id = 4;
inline bool adv_event_ack::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void adv_event_ack::set_has_event_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void adv_event_ack::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void adv_event_ack::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 adv_event_ack::event_id() const {
  return event_id_;
}
inline void adv_event_ack::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 event_type = 5;
inline bool adv_event_ack::has_event_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void adv_event_ack::set_has_event_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void adv_event_ack::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void adv_event_ack::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 adv_event_ack::event_type() const {
  return event_type_;
}
inline void adv_event_ack::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// adv_reward_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
inline bool adv_reward_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_reward_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_reward_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_reward_ntf::clear_proto_id() {
  proto_id_ = 7506;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_reward_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_reward_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool adv_reward_ntf::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_reward_ntf::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_reward_ntf::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_reward_ntf::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 adv_reward_ntf::ret() const {
  return ret_;
}
inline void adv_reward_ntf::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 city_id = 3;
inline bool adv_reward_ntf::has_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void adv_reward_ntf::set_has_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void adv_reward_ntf::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void adv_reward_ntf::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 adv_reward_ntf::city_id() const {
  return city_id_;
}
inline void adv_reward_ntf::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional int32 event_id = 4;
inline bool adv_reward_ntf::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void adv_reward_ntf::set_has_event_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void adv_reward_ntf::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void adv_reward_ntf::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 adv_reward_ntf::event_id() const {
  return event_id_;
}
inline void adv_reward_ntf::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// repeated .SProtoSpace.item_info reward = 5;
inline int adv_reward_ntf::reward_size() const {
  return reward_.size();
}
inline void adv_reward_ntf::clear_reward() {
  reward_.Clear();
}
inline const ::SProtoSpace::item_info& adv_reward_ntf::reward(int index) const {
  return reward_.Get(index);
}
inline ::SProtoSpace::item_info* adv_reward_ntf::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::SProtoSpace::item_info* adv_reward_ntf::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
adv_reward_ntf::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
adv_reward_ntf::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// adv_ask_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
inline bool adv_ask_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_ask_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_ask_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_ask_req::clear_proto_id() {
  proto_id_ = 7507;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_ask_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_ask_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// adv_ask_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
inline bool adv_ask_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_ask_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_ask_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_ask_ack::clear_proto_id() {
  proto_id_ = 7508;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_ask_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_ask_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool adv_ask_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_ask_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_ask_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_ask_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 adv_ask_ack::ret() const {
  return ret_;
}
inline void adv_ask_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 ask_ids = 3;
inline int adv_ask_ack::ask_ids_size() const {
  return ask_ids_.size();
}
inline void adv_ask_ack::clear_ask_ids() {
  ask_ids_.Clear();
}
inline ::google::protobuf::int32 adv_ask_ack::ask_ids(int index) const {
  return ask_ids_.Get(index);
}
inline void adv_ask_ack::set_ask_ids(int index, ::google::protobuf::int32 value) {
  ask_ids_.Set(index, value);
}
inline void adv_ask_ack::add_ask_ids(::google::protobuf::int32 value) {
  ask_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
adv_ask_ack::ask_ids() const {
  return ask_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
adv_ask_ack::mutable_ask_ids() {
  return &ask_ids_;
}

// -------------------------------------------------------------------

// adv_tujian_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
inline bool adv_tujian_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_tujian_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_tujian_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_tujian_req::clear_proto_id() {
  proto_id_ = 7509;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_tujian_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_tujian_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// adv_tujian_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
inline bool adv_tujian_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_tujian_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_tujian_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_tujian_ack::clear_proto_id() {
  proto_id_ = 7510;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID adv_tujian_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void adv_tujian_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool adv_tujian_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_tujian_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_tujian_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_tujian_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 adv_tujian_ack::ret() const {
  return ret_;
}
inline void adv_tujian_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.city_events_data city_events = 3;
inline int adv_tujian_ack::city_events_size() const {
  return city_events_.size();
}
inline void adv_tujian_ack::clear_city_events() {
  city_events_.Clear();
}
inline const ::SProtoSpace::city_events_data& adv_tujian_ack::city_events(int index) const {
  return city_events_.Get(index);
}
inline ::SProtoSpace::city_events_data* adv_tujian_ack::mutable_city_events(int index) {
  return city_events_.Mutable(index);
}
inline ::SProtoSpace::city_events_data* adv_tujian_ack::add_city_events() {
  return city_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_events_data >&
adv_tujian_ack::city_events() const {
  return city_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_events_data >*
adv_tujian_ack::mutable_city_events() {
  return &city_events_;
}

// repeated .SProtoSpace.hero_events_data hero_events = 4;
inline int adv_tujian_ack::hero_events_size() const {
  return hero_events_.size();
}
inline void adv_tujian_ack::clear_hero_events() {
  hero_events_.Clear();
}
inline const ::SProtoSpace::hero_events_data& adv_tujian_ack::hero_events(int index) const {
  return hero_events_.Get(index);
}
inline ::SProtoSpace::hero_events_data* adv_tujian_ack::mutable_hero_events(int index) {
  return hero_events_.Mutable(index);
}
inline ::SProtoSpace::hero_events_data* adv_tujian_ack::add_hero_events() {
  return hero_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_events_data >&
adv_tujian_ack::hero_events() const {
  return hero_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_events_data >*
adv_tujian_ack::mutable_hero_events() {
  return &hero_events_;
}

// -------------------------------------------------------------------

// leave_adv_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
inline bool leave_adv_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void leave_adv_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void leave_adv_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void leave_adv_req::clear_proto_id() {
  proto_id_ = 7513;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID leave_adv_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void leave_adv_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// leave_adv_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
inline bool leave_adv_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void leave_adv_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void leave_adv_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void leave_adv_ack::clear_proto_id() {
  proto_id_ = 7514;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID leave_adv_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void leave_adv_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool leave_adv_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void leave_adv_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void leave_adv_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void leave_adv_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 leave_adv_ack::ret() const {
  return ret_;
}
inline void leave_adv_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5factivity_2eproto__INCLUDED
