// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_errorcode.proto

#ifndef PROTOBUF_cs_5ferrorcode_2eproto__INCLUDED
#define PROTOBUF_cs_5ferrorcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_protoid.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5ferrorcode_2eproto();
void protobuf_AssignDesc_cs_5ferrorcode_2eproto();
void protobuf_ShutdownFile_cs_5ferrorcode_2eproto();

class game_error_ntf;

enum MsgErrorType {
  RES_ERROR_None = 0,
  Error_PWD = 1,
  Error_Jade = 2,
  Error_Summon = 3,
  Error_Gold = 4,
  Error_Power = 5,
  Error_Level = 6,
  Error_Template_Not_Exist = 7,
  Error_Hero_Level_Config_Not_Exist = 8,
  ERROR_GM_ERROR = 9,
  ERROR_OBJ_CREATE_FAILED = 10,
  ERROR_ROLE_NOT_EXIST = 11,
  Error_Hero_Not_Exist = 13,
  Error_Hero_Up_Lv_Max = 14,
  Error_Data_Error = 15,
  Error_Hero_Locked = 16,
  Error_Create_Hero_Fail = 17,
  Error_Config = 18,
  Error_Hero_Star_Max = 19,
  Error_Material_Star = 20,
  Error_Up_Star_Material = 21,
  Error_Hero_Can_Not_Awaken = 22,
  Error_Hero_Awakened = 23,
  Error_Awaken_Material_Num = 24,
  Error_Bag_OP_Fail = 25,
  Error_Hero_Item_Insufficient = 26,
  Error_Hero_No_Choice = 27,
  Error_Hero_Lv_Max = 28,
  Error_Hero_Lv_Max_Up = 29,
  Error_Hero_Skill_Lv_Max = 30,
  Error_Hero_Lv_Max_Lvup = 31,
  Error_Player_Replace = 32,
  Error_Player_Locked = 33,
  Error_Player_Change_NowIs = 34,
  Error_Player_Skin_Dress = 35,
  Error_Player_Not_Active = 36,
  Error_Skinid_Error = 37,
  Error_Skin_Active_Error = 38,
  Error_Skin_Already_Active = 39,
  Error_Skill_Level = 40,
  Error_Hero_Lock = 41,
  Error_Hero_Lock_Reminder = 42,
  Error_Hero_Deblocking_Reminder = 43,
  Error_Name_Repetition = 44,
  Error_Name_Illegality = 45,
  Error_Param_Miss = 46,
  Error_Param_Invalid = 47,
  Error_Discovery_NotOpen = 48,
  Error_Discovery_Enter_Not_Exist = 49,
  Error_Discovery_Monster_Death = 50,
  Error_Discovery_Monster_Not_Exist = 51,
  Error_Discovery_Monster_Hide = 52,
  Error_Discovery_Monster_Not_Challenged = 53,
  Error_Discovery_Boss_Hide = 54,
  Error_Cheat = 55,
  Error_Soul_Bind = 56,
  Error_Soul_Unbind = 57,
  Error_Soul_Raise = 58,
  Error_Soul_UnLock = 59,
  Error_Soul_Sell = 60,
  Error_Soul_MAX_LIMIT = 61,
  Error_Soul_Status = 62,
  Error_Hero_Star_Lv = 63,
  ERROR_HERO_MAX_LIMIT = 64,
  ERROR_HERO_NAME_LENGTH = 65,
  ERROR_PARM_REQ = 66,
  ERROR_HERO_QUALITY = 67,
  ERROR_HERO_QUALITY_MAX = 68,
  ERROR_SHOW_LIKE_SELF = 71,
  ERROR_SHOW_LIKE_ALREADY = 72,
  ERROR_POSITION_STRING_LENGTH = 73,
  ERROR_SIGNATURE_LENGTH = 74,
  ERROR_BORDER_NOT_FOUND = 75,
  ERROR_COMMENT_STRING_LENGTH = 76,
  ERROR_PLOT_NOT_OPEN = 78,
  ERROR_BRANCHE_CHOOSED = 79,
  ERROR_AGE_EXCESS_MAX_LIMT = 80,
  ERROR_AGE_LESS_MIN_LIMT = 81,
  ERROR_MONTH_FROMAT = 82,
  ERROR_STARSIGN_NOT_EXIST = 84,
  ERROR_DAY_FROMAT = 85,
  ERROR_LABEL_NOT_EXIST = 86,
  ERROR_EMOTION_FAILED = 87,
  ERROR_EMOTION_LIKE_FAILED = 88,
  ERROR_EMOTION_COMMENT_FAILED = 89,
  ERROR_EMOTION_DATA_FORMAT_ERROR = 90,
  ERROR_GET_EMOTION_DATA_FAILED = 91,
  ERROR_EMOTION_REMOVE_FAILED = 92,
  ERROR_EMOTION_CANCEL_LIKE_FAILED = 93,
  ERROR_EMOTION_CANCEL_LIKE_SUCC = 94,
  ERROR_EMOTION_REMOVE_COMMENT_FAILED = 95,
  ERROR_NOT_REACH_CONDITION = 96,
  ERROR_REPEATED_FIN_STEP = 97,
  ERROR_MAIL_NOT_EXIST = 100,
  ERROR_MAIL_HAVE_READ = 101,
  ERROR_CHEST_NOT_EXIST = 120,
  ERROR_TEAM_CREATED_FAILED = 150,
  ERROR_TEAM_NOT_EXIST = 151,
  ERROR_TEAM_NOT_MATCH = 152,
  ERROR_TEAM_IS_FULL = 153,
  ERROR_TEAM_WAIT_OLDER_MEMBER = 154,
  ERROR_TEAM_SIZE_ERROR = 155,
  ERROR_TEAM_EMPTY = 156,
  ERROR_NOT_IN_TEAM = 157,
  ERROR_TEAM_INVITE_MORE_THAN_MAX = 158,
  ERROR_TEAM_INVITE_NOT_FRIEND = 159,
  ERROR_TEAM_STATUS_NOT_READY = 160,
  ERROR_TEAM_WAIT_TM_TOO_LONG = 161,
  ERROR_NOT_IN_INVITED_LIST = 162,
  ERROR_TEAM_TYPE_NOT_EXIST = 163,
  ERROR_TEAM_WAIT_OLDER_MEMBER_TIME_OUT = 164,
  ERROR_NOT_EXIST_RANK = 200,
  ERROR_NOT_EXIST_ARENA = 201,
  ERROR_UPDATE_ARENA_ERROR = 202,
  ERROR_UPDATE_RANK_ERROR = 203,
  ERROR_OFFICE_ERROR = 204,
  ERROR_OFFICE_ROLE_NOT_EXIST = 205,
  ERROR_OFFICE_FORMATION_NOT_EXIST = 206,
  ERROR_OFFICE_FORMATION_ERROR = 207,
  ERROR_OFFICE_DAILY_CHALLENGE_LIMIT = 208,
  ERROR_OFFICE_CHALLENGE_LOCK = 209,
  ERROR_DAILY_SALARY_REPEATE = 210,
  ERROR_UPGRADE_OFFICE_NPC = 211,
  ERROR_MERIT = 212,
  ERROR_OFFICAL_APPLY_REPEATE = 213,
  ERROR_FRONT_OFFICAL_BATTLE_REPEATE = 214,
  ERROR_FRONT_OFFICAL_APPLY_LIMIT = 215,
  ERROR_OFFICAL_SHARE_FAILED = 216,
  ERROR_OFFICAL_SHARE_INVALID = 217,
  ERROR_OFFICAL_SHARE_LIMIT = 218,
  ERROR_OFFICAL_FIRST_AWARD_FINISH = 219,
  ERROR_NOT_EXIST_IN_OFFICAL_RANK = 220,
  ERROR_APPLY_EXIST = 221,
  ERROR_GET_RANK_SHOW_EQUIP = 222,
  ERROR_OFFICE_DAILY_CHALLENGE_BUY_LIMIT = 223,
  ERROR_OFFICAL_NOT_LOAD_DATA = 224,
  ERROR_OFFICAL_LIMIT_COND = 225,
  OFFICER_APPLY_TIME_ERROR = 226,
  OFFICER_APPLY_GRADE_RANGE = 227,
  ERROR_SHOP_NOT_EXIST = 251,
  ERROR_SHOP_NOT_OPEN = 252,
  ERROR_SHOP_ITEM_NOT_EXIST = 253,
  ERROR_SHOP_BUY_MAX_LIMIT = 254,
  ERROR_SHOP_BUY_NUM = 255,
  ERROR_SHOP_REFRESH_LIMIT = 256,
  ERROR_SHOP_NEED_REFRESH = 257,
  ERROR_SHOP_REFRESH_TIME = 258,
  ERROR_MONEY_NOT_ENOUGH = 260,
  ERROR_BUY_CONDI_ENOUGH = 261,
  ERROR_SHOP_CLOSED = 262,
  ERROR_ITEM_OUTDATE = 263,
  ERROR_BAG_OKAY = 281,
  ERROR_BAG_NOT_ENOUGH_CAPACITY = 282,
  ERROR_ITEM_SOLD_OKAY = 283,
  ERROR_ITEM_NOT_ENOUGH = 284,
  ERROR_ITEM_NOT_EXIST = 285,
  ERROR_ITEM_LVL_LACK = 286,
  ERROR_ITEM_COUNT_MAX = 287,
  ERROR_BAG_EXPAND_OKAY = 288,
  ERROR_BAG_EXPAND_ERROR = 289,
  ERROR_BAG_CAPACITY_REACH_MAX = 290,
  ERROR_BAG_CAPACITY_REACH_MAX_AND_MAIL = 291,
  ERROR_REWARD_FAILED = 292,
  ERROR_EQUIP_NOT_EXIST = 300,
  ERROR_EQUIP_SLOT = 301,
  ERROR_EQUIP_LEVEL_MAX = 302,
  ERROR_EQUIP_ALLREADY_EQUIPED = 303,
  ERROR_TYPE_ERROR = 304,
  ERROR_PRIVATE_MAIL_SEND = 310,
  ERROR_PRIAVET_MAIL_NO_SUCH_ROLE = 311,
  ERROR_PRIAVET_MAIL_REACH_LIMIT = 312,
  ERROR_PRIAVET_MAIL_SEND_TO_OFTEN = 313,
  ERROR_REACH_FRIEND_RECIEVE_MAIL_LIMIT = 314,
  ERROR_MAIL_ATTACHEMENTS_BUT_BAG_FULL = 315,
  ERROR_ACHIEVEMENT_ALREADY_GET = 330,
  ERROR_ACHIEVEMENT_LOCKED = 331,
  ERROR_ACHIEVEMENT_IN_PROGRESS = 332,
  ERROR_ACHIEVEMENT_ITEM_BAG_FULL = 333,
  ERROR_QUEST_STATUS = 350,
  ERROR_ACITVITY_NOT_ENOUGH = 351,
  ERROR_QUEST_LOCKED = 352,
  ERROR_QUEST_NOT_FINISH = 353,
  ERROR_QUEST_FINISH = 354,
  ERROR_HAVE_TASK_ACTIVITY = 355,
  ERROR_NOT_EXIST_ROYAL = 401,
  ERROR_NOT_EXIST_GIFT = 402,
  ERROR_ROYAL_GIFT_ZERO = 403,
  ERROR_ROYAL_REWARD_HAS_REWARD = 404,
  ERROR_ROYAL_LESS_INTIMACY_VALUE = 405,
  ERROR_ROYAL_NOT_ENOUGH = 406,
  ERROR_NOT_EXIST_ROYAL_TASK = 407,
  ERROR_NOT_EXIST_ROYAL_THIRD_SCENE = 408,
  ERROR_ROYAL_REFREASH_EXCEED_MAX = 409,
  ERROR_ROYAL_VISIT_EXCEED_MAX = 410,
  ERROR_ROYAL_NOT_EXIST_EVENT = 411,
  ERROR_FLOWER_NOT_ENOUGH = 501,
  ERROR_FLOWER_NOT_EXIST_TARGET_PLAYER = 502,
  ERROR_AS_DRAW_CARD_FREE_TIME_OUT = 531,
  ERROR_AS_DRAW_CARD_ITEMS_NOT_ENOUGH = 532,
  ERROR_NOT_EXIST_EVENT = 533,
  ERROR_AS_DRAW_REACH_BUY_TIME_LIMIT = 534,
  ERROR_REACH_BUY_POWER_LIMIT = 535,
  ERROR_DRAW_CARD_NO_FREE_TIME = 536,
  ERROR_DRAW_CARD_REACH_TIME_LIMIT = 537,
  ERROR_DRAW_CARD_PARAM = 538,
  ERROR_DRAW_CARD_CONFIG = 539,
  ERROR_DRAW_CARD_BAG_FULL = 540,
  ERROR_DRAW_CARD_INTERNAL = 541,
  ERROR_DRAW_CARD_CONSUME_NOT_ENOUGH = 542,
  ERROR_TALENT_ERROR = 580,
  ERROR_TALENT_GRADE = 581,
  ERROR_TALENT_ACTIVE = 582,
  ERROR_TALENT_NOT_EXIST = 583,
  ERROR_TALENT_NOT_CANACTIVE = 584,
  ERROR_PLAYER_SKILL_NOT_EXIST = 590,
  ERROR_PLAYER_SKILL_NOT_ACTIVE = 591,
  ERROR_PLAYER_SKILL_SELECT = 592,
  VERIFY_CFG_VERSION_SUCC = 600,
  VERIFY_CFG_VERSION_FAIL = 601,
  ERROR_PROTO_PARSE = 1000,
  ERROR_SERVER_UNKNOW = 1001,
  ERROR_PARAM = 1002,
  ERROR_CLIENT_NEED_RELOGIN = 1003,
  MOPPING_DISCOVERY_NOT_PASS = 1010,
  MOPPING_LEVEL_NOT_REACH = 1011,
  MOPPING_STAR_NOT_REACH = 1012,
  MOPPING_CONSECUTIVE_LEVEL_NOT_REACH = 1013,
  MOPPING_REWARD_BAG_FULL = 1014,
  MOPPING_COMSUMES_NOT_ENOUGH = 1017,
  MOPPING_REACH_TIME_LIMIT = 1015,
  MOPPING_PARAM_INVALID = 1016,
  MOPPING_CONFIG_ERROR = 1018,
  MOPPING_BUY_PARAM_ERROR = 1019,
  MOPPING_BUY_ITEM_NOT_ENOUGH_ERROR = 1020,
  HERO_FORMATION_PARAM_ERROR = 1031,
  HERO_FORMATION_CONFIG_ERROR = 1032,
  HERO_FORMATION_BASE_ERROR = 1033,
  HERO_FORMATION_ROLE_POSITION_ERROR = 1034,
  HERO_FORMATION_REPEATED_HERO = 1035,
  HERO_FORMATION_SIZE_ERROR = 1036,
  HERO_FORMATION_HERO_NOT_EXIST = 1037,
  ERROR_SKILL_LV_MORE_THAN_HERO = 1038,
  ERROR_SKILL_POINT_NOT_ENOUGH = 1039,
  ERROR_SKILL_IS_MAX_LV = 1040,
  ERROR_SKILL_IS_LOCK = 1041,
  ERROR_SLOT_HAVE_TALISMAN = 1043,
  ERROR_SLOT_NO_HAVE_TALISMAN = 1044,
  ERROR_TALISMAN_NOT_EXIST = 1045,
  ERROR_TALISMAN_TYPE = 1046,
  ERROR_TALISMAN_RARE = 1047,
  ERROR_TALISMAN_DEST = 1048,
  ERROR_TALISMAN_NOT_ALLOW_BREAK = 1049,
  ERROR_STARBOX_PARAM_ERROR = 1050,
  ERROR_STARBOX_CONFIG_ERROR = 1051,
  ERROR_STARBOX_ALREADY_GET = 1052,
  ERROR_STARBOX_STAR_NOT_ENGOUGH = 1053,
  ERROR_STARBOX_BAG_FULL = 1054,
  ERROR_STARBOX_BAG_SWAP = 1055,
  ERROR_BATTLE_TIMES_LIMIT = 1060,
  ERROR_SYSTEM_LOCK = 1061,
  ERROR_GET_FLOOR_DATA = 1062,
  ERROR_FLOOR_LOCK = 1063,
  ERROR_FLOOR_UNVALID = 1064,
  ERROR_QUESTIONID_UNVALID = 1065,
  ERROR_ANSWER_UNVALID = 1066,
  ERROR_QUESTION_EXIST = 1067,
  ERROR_FLOOR_TYPE = 1068,
  ERROR_RESET_NOT_ENOUGH = 1069,
  ERROR_WINE_CUP = 1070,
  ERROR_QUESTION_DEBUG = 1071,
  ERROR_WINE = 1072,
  ERROR_ADV_CITY = 1073,
  ERROR_CITY_NOT_OPEN = 1074,
  ERROR_ENERGY_NOT_ENOUGH = 1075,
  ERROR_NOT_FOUND_EVENT = 1076,
  ERROR_NOT_IN_ADV = 1077,
  ERROR_QUESTION_SYSTEM = 1078,
  ERROR_FLOOR_MORE_MAXFLOOR = 1079,
  ERROR_FLOOR_STEP_LOCK = 1080,
  ERROR_FLOOR_STEP_NOT_PASS = 1081,
  ERROR_CHAT_ROOM_POS = 1100,
  ERROR_CHAT_ROOM_ROLE_NOT_EXIST = 1101,
  ERROR_CHAT_ROOM_NOT_EXIST = 1102,
  ERROR_CHAT_ROOM_EXIST = 1103,
  ERROR_ROLE_EXIST_IN_CHAT_ROOM = 1104,
  ERROR_SCENE_EXPIRED = 1105,
  ERROR_SCENE_NOT_EXIST = 1106,
  ERROR_SCENE_PULL = 1107,
  ERROR_SCENE_SWITCH = 1108,
  ERROR_GET_CHAT_ROOM_LIST_TOO_MUCH = 1109,
  ERROR_CHAT_ROOM_TIMER_FAILED = 1110,
  ERROR_CHAT_ROOM_NOT_OWNER = 1111,
  ERROR_CHAT_ROOM_OWNER_GRADE_ERROR = 1112,
  ERROR_CHAT_ROOM_TOKEN_ERROR = 1113,
  ERROR_CHAT_ROOM_NAME_EMPTY = 1114,
  ERROR_CHAT_ROOM_CREATE_FORBIT = 1115,
  ERROR_CHAT_ROOM_EXCEED_MAX_SIZE = 1116,
  ERROR_FASHION_CONFIG = 1140,
  ERROR_FASHION_PARAM = 1141,
  ERROR_FASHION_INTERNAL = 1142,
  ERROR_FASHION_NO_SUCH_UUID = 1143,
  ERROR_FASHION_NO_SUCH_ROLE = 1144,
  ERROR_SESSION_ILLEGAL_OPERATION = 1152,
  ERROR_MAIL_NO_SUCH_MAIL = 1160,
  ERROR_MAIL_STATE_SET_INVALID = 1161,
  ERROR_MAIL_SEND_TIMEOUT = 1162,
  ERROR_MAIL_LAST_OPT_RUNNING = 1163,
  ERROR_MAIL_LEVEL_NOT_REACH = 1164,
  ERROR_MAIL_BAG_NOT_ENOUGH = 1165,
  ERROR_MAIL_FRIEND_MAIL_ERROR = 1166,
  ERROR_PLOT_LITTLE_CONFIG = 1180,
  ERROR_PET_NOT_FIND = 1190,
  ERROR_PET_NO_CFG = 1191,
  ERROR_PET_BAG_NOT_ENOUGH = 1192,
  ERROR_PET_NOT_AT_HOME = 1193,
  ERROR_PET_OUT_DAY_MAX = 1194,
  ERROR_PET_OUT_IN_CD = 1195,
  ERROR_PET_OUT_NO_SUITABLE_STORY = 1196,
  ERROR_PET_INTERNAL_ERROR = 1197,
  ERROR_PET_OUT_AWARD_NOT_DRAW = 1198,
  ERROR_PET_NO_OUT_AWARD = 1199,
  ERROR_PET_SYS_NOT_OPEN = 1200,
  ERROR_PET_STATE_OVERFLOW = 1201,
  ERROR_PET_ACTION_TYPE_ERROR = 1202,
  ERROR_PET_ITEM_CFG_ERROR = 1203,
  ERROR_PET_ITEM_NOT_ENOUGH = 1204,
  ERROR_PET_OUT_NUM_MAX = 1205,
  ERROR_PET_OUT_ONE_PLACE_NUM_MAX = 1206
};
bool MsgErrorType_IsValid(int value);
const MsgErrorType MsgErrorType_MIN = RES_ERROR_None;
const MsgErrorType MsgErrorType_MAX = ERROR_PET_OUT_ONE_PLACE_NUM_MAX;
const int MsgErrorType_ARRAYSIZE = MsgErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgErrorType_descriptor();
inline const ::std::string& MsgErrorType_Name(MsgErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgErrorType_descriptor(), value);
}
inline bool MsgErrorType_Parse(
    const ::std::string& name, MsgErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgErrorType>(
    MsgErrorType_descriptor(), name, value);
}
// ===================================================================

class game_error_ntf : public ::google::protobuf::Message {
 public:
  game_error_ntf();
  virtual ~game_error_ntf();

  game_error_ntf(const game_error_ntf& from);

  inline game_error_ntf& operator=(const game_error_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_error_ntf& default_instance();

  void Swap(game_error_ntf* other);

  // implements Message ----------------------------------------------

  game_error_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_error_ntf& from);
  void MergeFrom(const game_error_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 error_num = 2;
  inline bool has_error_num() const;
  inline void clear_error_num();
  static const int kErrorNumFieldNumber = 2;
  inline ::google::protobuf::int32 error_num() const;
  inline void set_error_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_error_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error_num();
  inline void clear_has_error_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 error_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5ferrorcode_2eproto();
  friend void protobuf_AssignDesc_cs_5ferrorcode_2eproto();
  friend void protobuf_ShutdownFile_cs_5ferrorcode_2eproto();

  void InitAsDefaultInstance();
  static game_error_ntf* default_instance_;
};
// ===================================================================


// ===================================================================

// game_error_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
inline bool game_error_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_error_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_error_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_error_ntf::clear_protoid() {
  protoid_ = 5019;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID game_error_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void game_error_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 error_num = 2;
inline bool game_error_ntf::has_error_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_error_ntf::set_has_error_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_error_ntf::clear_has_error_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_error_ntf::clear_error_num() {
  error_num_ = 0;
  clear_has_error_num();
}
inline ::google::protobuf::int32 game_error_ntf::error_num() const {
  return error_num_;
}
inline void game_error_ntf::set_error_num(::google::protobuf::int32 value) {
  set_has_error_num();
  error_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::MsgErrorType>() {
  return ::SProtoSpace::MsgErrorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5ferrorcode_2eproto__INCLUDED
