// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* listen_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  listen_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* connect_relateion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connect_relateion_reflection_ = NULL;
const ::google::protobuf::Descriptor* connect_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connect_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gateserver_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gateserver_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gameserver_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gameserver_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbserver_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbserver_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_connection_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_connection_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_connection_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_connection_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_version_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_version_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_conection_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_conection_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* register_listen_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_listen_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2manager_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2manager_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* manager2gm_status_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manager2gm_status_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2manager_area_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2manager_area_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* manager2gm_area_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manager2gm_area_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_update_config_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_update_config_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_update_config_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_update_config_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_update_config_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_update_config_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_cancel_update_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_cancel_update_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_cancel_update_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_cancel_update_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_version_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_version_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* config_version_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  config_version_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_update_config_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_update_config_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_update_config_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_update_config_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_monitor_data_reset_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_monitor_data_reset_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* assign_new_master_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  assign_new_master_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* register_master_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_master_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_send_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_send_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_send_broadcast_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_send_broadcast_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_send_bulletin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_send_bulletin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_send_shutdown_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_send_shutdown_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_open_login_whitelist_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_open_login_whitelist_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_add_login_whitelist_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_add_login_whitelist_req_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fmanager_2eproto() {
  protobuf_AddDesc_ss_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_manager.proto");
  GOOGLE_CHECK(file != NULL);
  listen_node_descriptor_ = file->message_type(0);
  static const int listen_node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listen_node, pipe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listen_node, listen_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listen_node, listen_port_),
  };
  listen_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      listen_node_descriptor_,
      listen_node::default_instance_,
      listen_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listen_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listen_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(listen_node));
  connect_relateion_descriptor_ = file->message_type(1);
  static const int connect_relateion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_relateion, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_relateion, connect_),
  };
  connect_relateion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connect_relateion_descriptor_,
      connect_relateion::default_instance_,
      connect_relateion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_relateion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_relateion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connect_relateion));
  connect_info_descriptor_ = file->message_type(2);
  static const int connect_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, send_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, recv_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, active_node_),
  };
  connect_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connect_info_descriptor_,
      connect_info::default_instance_,
      connect_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connect_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connect_info));
  gateserver_info_descriptor_ = file->message_type(3);
  static const int gateserver_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, server_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, server_area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, server_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, login_role_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, center_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, game_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, battel_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, db_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, mail_server_count_),
  };
  gateserver_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gateserver_info_descriptor_,
      gateserver_info::default_instance_,
      gateserver_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gateserver_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gateserver_info));
  gameserver_info_descriptor_ = file->message_type(4);
  static const int gameserver_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, server_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, server_area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, server_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, login_role_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, gate_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, mail_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, battel_server_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, db_server_count_),
  };
  gameserver_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gameserver_info_descriptor_,
      gameserver_info::default_instance_,
      gameserver_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameserver_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gameserver_info));
  dbserver_info_descriptor_ = file->message_type(5);
  static const int dbserver_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, server_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, server_area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, server_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, redis_role_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, redis_memory_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, sql_status_),
  };
  dbserver_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbserver_info_descriptor_,
      dbserver_info::default_instance_,
      dbserver_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbserver_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbserver_info));
  sync_connection_info_req_descriptor_ = file->message_type(6);
  static const int sync_connection_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_req, protoid_),
  };
  sync_connection_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_connection_info_req_descriptor_,
      sync_connection_info_req::default_instance_,
      sync_connection_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_connection_info_req));
  sync_connection_info_ack_descriptor_ = file->message_type(7);
  static const int sync_connection_info_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_ack, info_),
  };
  sync_connection_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_connection_info_ack_descriptor_,
      sync_connection_info_ack::default_instance_,
      sync_connection_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_connection_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_connection_info_ack));
  node_version_info_ntf_descriptor_ = file->message_type(8);
  static const int node_version_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_version_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_version_info_ntf, version_),
  };
  node_version_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_version_info_ntf_descriptor_,
      node_version_info_ntf::default_instance_,
      node_version_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_version_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_version_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node_version_info_ntf));
  sync_conection_info_ntf_descriptor_ = file->message_type(9);
  static const int sync_conection_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_conection_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_conection_info_ntf, info_),
  };
  sync_conection_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_conection_info_ntf_descriptor_,
      sync_conection_info_ntf::default_instance_,
      sync_conection_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_conection_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_conection_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_conection_info_ntf));
  register_listen_info_req_descriptor_ = file->message_type(10);
  static const int register_listen_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_listen_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_listen_info_req, listen_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_listen_info_req, listen_port_),
  };
  register_listen_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      register_listen_info_req_descriptor_,
      register_listen_info_req::default_instance_,
      register_listen_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_listen_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_listen_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(register_listen_info_req));
  gm2manager_status_req_descriptor_ = file->message_type(11);
  static const int gm2manager_status_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_status_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_status_req, info_detail_),
  };
  gm2manager_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2manager_status_req_descriptor_,
      gm2manager_status_req::default_instance_,
      gm2manager_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2manager_status_req));
  manager2gm_status_ack_descriptor_ = file->message_type(12);
  static const int manager2gm_status_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, db_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, gate_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, manager_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, overload_pipe_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, area_name_),
  };
  manager2gm_status_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manager2gm_status_ack_descriptor_,
      manager2gm_status_ack::default_instance_,
      manager2gm_status_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_status_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manager2gm_status_ack));
  gm2manager_area_info_req_descriptor_ = file->message_type(13);
  static const int gm2manager_area_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_area_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_area_info_req, info_detail_),
  };
  gm2manager_area_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2manager_area_info_req_descriptor_,
      gm2manager_area_info_req::default_instance_,
      gm2manager_area_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_area_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2manager_area_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2manager_area_info_req));
  manager2gm_area_info_ack_descriptor_ = file->message_type(14);
  static const int manager2gm_area_info_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, gameserver_this_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, dbserver_this_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, gateserver_this_area_),
  };
  manager2gm_area_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manager2gm_area_info_ack_descriptor_,
      manager2gm_area_info_ack::default_instance_,
      manager2gm_area_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manager2gm_area_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manager2gm_area_info_ack));
  gm_update_config_req_descriptor_ = file->message_type(15);
  static const int gm_update_config_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_req, update_time_),
  };
  gm_update_config_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_update_config_req_descriptor_,
      gm_update_config_req::default_instance_,
      gm_update_config_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_update_config_req));
  gm_update_config_ack_descriptor_ = file->message_type(16);
  static const int gm_update_config_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ack, ret_),
  };
  gm_update_config_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_update_config_ack_descriptor_,
      gm_update_config_ack::default_instance_,
      gm_update_config_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_update_config_ack));
  gm_update_config_ntf_descriptor_ = file->message_type(17);
  static const int gm_update_config_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, err_server_pipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, ret_debug_),
  };
  gm_update_config_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_update_config_ntf_descriptor_,
      gm_update_config_ntf::default_instance_,
      gm_update_config_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_update_config_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_update_config_ntf));
  area_cancel_update_req_descriptor_ = file->message_type(18);
  static const int area_cancel_update_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_req, protoid_),
  };
  area_cancel_update_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_cancel_update_req_descriptor_,
      area_cancel_update_req::default_instance_,
      area_cancel_update_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_cancel_update_req));
  area_cancel_update_ack_descriptor_ = file->message_type(19);
  static const int area_cancel_update_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_ack, ret_),
  };
  area_cancel_update_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_cancel_update_ack_descriptor_,
      area_cancel_update_ack::default_instance_,
      area_cancel_update_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_cancel_update_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_cancel_update_ack));
  config_version_req_descriptor_ = file->message_type(20);
  static const int config_version_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_req, protoid_),
  };
  config_version_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      config_version_req_descriptor_,
      config_version_req::default_instance_,
      config_version_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(config_version_req));
  config_version_ack_descriptor_ = file->message_type(21);
  static const int config_version_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_ack, update_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_ack, update_name_),
  };
  config_version_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      config_version_ack_descriptor_,
      config_version_ack::default_instance_,
      config_version_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(config_version_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(config_version_ack));
  area_update_config_req_descriptor_ = file->message_type(22);
  static const int area_update_config_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, update_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, update_name_),
  };
  area_update_config_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_update_config_req_descriptor_,
      area_update_config_req::default_instance_,
      area_update_config_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_update_config_req));
  area_update_config_ack_descriptor_ = file->message_type(23);
  static const int area_update_config_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_ack, ret_debug_),
  };
  area_update_config_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_update_config_ack_descriptor_,
      area_update_config_ack::default_instance_,
      area_update_config_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_update_config_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_update_config_ack));
  area_monitor_data_reset_ntf_descriptor_ = file->message_type(24);
  static const int area_monitor_data_reset_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_monitor_data_reset_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_monitor_data_reset_ntf, gate_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_monitor_data_reset_ntf, db_mem_),
  };
  area_monitor_data_reset_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_monitor_data_reset_ntf_descriptor_,
      area_monitor_data_reset_ntf::default_instance_,
      area_monitor_data_reset_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_monitor_data_reset_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_monitor_data_reset_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_monitor_data_reset_ntf));
  assign_new_master_req_descriptor_ = file->message_type(25);
  static const int assign_new_master_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assign_new_master_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assign_new_master_req, master_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assign_new_master_req, master_server_id_),
  };
  assign_new_master_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      assign_new_master_req_descriptor_,
      assign_new_master_req::default_instance_,
      assign_new_master_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assign_new_master_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assign_new_master_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(assign_new_master_req));
  register_master_info_req_descriptor_ = file->message_type(26);
  static const int register_master_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_master_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_master_info_req, master_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_master_info_req, master_server_id_),
  };
  register_master_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      register_master_info_req_descriptor_,
      register_master_info_req::default_instance_,
      register_master_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_master_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_master_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(register_master_info_req));
  mail_item_data_descriptor_ = file->message_type(27);
  static const int mail_item_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_data, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_data, item_num_),
  };
  mail_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_item_data_descriptor_,
      mail_item_data::default_instance_,
      mail_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_item_data));
  gm_send_mail_req_descriptor_ = file->message_type(28);
  static const int gm_send_mail_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, mail_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, mail_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, mail_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, to_role_id_),
  };
  gm_send_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_send_mail_req_descriptor_,
      gm_send_mail_req::default_instance_,
      gm_send_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_send_mail_req));
  gm_send_broadcast_req_descriptor_ = file->message_type(29);
  static const int gm_send_broadcast_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, content_),
  };
  gm_send_broadcast_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_send_broadcast_req_descriptor_,
      gm_send_broadcast_req::default_instance_,
      gm_send_broadcast_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_broadcast_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_send_broadcast_req));
  gm_send_bulletin_req_descriptor_ = file->message_type(30);
  static const int gm_send_bulletin_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, content_),
  };
  gm_send_bulletin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_send_bulletin_req_descriptor_,
      gm_send_bulletin_req::default_instance_,
      gm_send_bulletin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_bulletin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_send_bulletin_req));
  gm_send_shutdown_req_descriptor_ = file->message_type(31);
  static const int gm_send_shutdown_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_shutdown_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_shutdown_req, shutdown_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_shutdown_req, signal_),
  };
  gm_send_shutdown_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_send_shutdown_req_descriptor_,
      gm_send_shutdown_req::default_instance_,
      gm_send_shutdown_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_shutdown_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_send_shutdown_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_send_shutdown_req));
  gm_open_login_whitelist_req_descriptor_ = file->message_type(32);
  static const int gm_open_login_whitelist_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_open_login_whitelist_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_open_login_whitelist_req, is_open_),
  };
  gm_open_login_whitelist_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_open_login_whitelist_req_descriptor_,
      gm_open_login_whitelist_req::default_instance_,
      gm_open_login_whitelist_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_open_login_whitelist_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_open_login_whitelist_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_open_login_whitelist_req));
  gm_add_login_whitelist_req_descriptor_ = file->message_type(33);
  static const int gm_add_login_whitelist_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_add_login_whitelist_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_add_login_whitelist_req, account_),
  };
  gm_add_login_whitelist_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_add_login_whitelist_req_descriptor_,
      gm_add_login_whitelist_req::default_instance_,
      gm_add_login_whitelist_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_add_login_whitelist_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_add_login_whitelist_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_add_login_whitelist_req));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    listen_node_descriptor_, &listen_node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connect_relateion_descriptor_, &connect_relateion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connect_info_descriptor_, &connect_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gateserver_info_descriptor_, &gateserver_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gameserver_info_descriptor_, &gameserver_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbserver_info_descriptor_, &dbserver_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_connection_info_req_descriptor_, &sync_connection_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_connection_info_ack_descriptor_, &sync_connection_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_version_info_ntf_descriptor_, &node_version_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_conection_info_ntf_descriptor_, &sync_conection_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    register_listen_info_req_descriptor_, &register_listen_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2manager_status_req_descriptor_, &gm2manager_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manager2gm_status_ack_descriptor_, &manager2gm_status_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2manager_area_info_req_descriptor_, &gm2manager_area_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manager2gm_area_info_ack_descriptor_, &manager2gm_area_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_update_config_req_descriptor_, &gm_update_config_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_update_config_ack_descriptor_, &gm_update_config_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_update_config_ntf_descriptor_, &gm_update_config_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_cancel_update_req_descriptor_, &area_cancel_update_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_cancel_update_ack_descriptor_, &area_cancel_update_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    config_version_req_descriptor_, &config_version_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    config_version_ack_descriptor_, &config_version_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_update_config_req_descriptor_, &area_update_config_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_update_config_ack_descriptor_, &area_update_config_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_monitor_data_reset_ntf_descriptor_, &area_monitor_data_reset_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    assign_new_master_req_descriptor_, &assign_new_master_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    register_master_info_req_descriptor_, &register_master_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_item_data_descriptor_, &mail_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_send_mail_req_descriptor_, &gm_send_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_send_broadcast_req_descriptor_, &gm_send_broadcast_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_send_bulletin_req_descriptor_, &gm_send_bulletin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_send_shutdown_req_descriptor_, &gm_send_shutdown_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_open_login_whitelist_req_descriptor_, &gm_open_login_whitelist_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_add_login_whitelist_req_descriptor_, &gm_add_login_whitelist_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fmanager_2eproto() {
  delete listen_node::default_instance_;
  delete listen_node_reflection_;
  delete connect_relateion::default_instance_;
  delete connect_relateion_reflection_;
  delete connect_info::default_instance_;
  delete connect_info_reflection_;
  delete gateserver_info::default_instance_;
  delete gateserver_info_reflection_;
  delete gameserver_info::default_instance_;
  delete gameserver_info_reflection_;
  delete dbserver_info::default_instance_;
  delete dbserver_info_reflection_;
  delete sync_connection_info_req::default_instance_;
  delete sync_connection_info_req_reflection_;
  delete sync_connection_info_ack::default_instance_;
  delete sync_connection_info_ack_reflection_;
  delete node_version_info_ntf::default_instance_;
  delete node_version_info_ntf_reflection_;
  delete sync_conection_info_ntf::default_instance_;
  delete sync_conection_info_ntf_reflection_;
  delete register_listen_info_req::default_instance_;
  delete register_listen_info_req_reflection_;
  delete gm2manager_status_req::default_instance_;
  delete gm2manager_status_req_reflection_;
  delete manager2gm_status_ack::default_instance_;
  delete manager2gm_status_ack_reflection_;
  delete gm2manager_area_info_req::default_instance_;
  delete gm2manager_area_info_req_reflection_;
  delete manager2gm_area_info_ack::default_instance_;
  delete manager2gm_area_info_ack_reflection_;
  delete gm_update_config_req::default_instance_;
  delete gm_update_config_req_reflection_;
  delete gm_update_config_ack::default_instance_;
  delete gm_update_config_ack_reflection_;
  delete gm_update_config_ntf::default_instance_;
  delete gm_update_config_ntf_reflection_;
  delete area_cancel_update_req::default_instance_;
  delete area_cancel_update_req_reflection_;
  delete area_cancel_update_ack::default_instance_;
  delete area_cancel_update_ack_reflection_;
  delete config_version_req::default_instance_;
  delete config_version_req_reflection_;
  delete config_version_ack::default_instance_;
  delete config_version_ack_reflection_;
  delete area_update_config_req::default_instance_;
  delete area_update_config_req_reflection_;
  delete area_update_config_ack::default_instance_;
  delete area_update_config_ack_reflection_;
  delete area_monitor_data_reset_ntf::default_instance_;
  delete area_monitor_data_reset_ntf_reflection_;
  delete assign_new_master_req::default_instance_;
  delete assign_new_master_req_reflection_;
  delete register_master_info_req::default_instance_;
  delete register_master_info_req_reflection_;
  delete mail_item_data::default_instance_;
  delete mail_item_data_reflection_;
  delete gm_send_mail_req::default_instance_;
  delete gm_send_mail_req_reflection_;
  delete gm_send_broadcast_req::default_instance_;
  delete gm_send_broadcast_req_reflection_;
  delete gm_send_bulletin_req::default_instance_;
  delete gm_send_bulletin_req_reflection_;
  delete gm_send_shutdown_req::default_instance_;
  delete gm_send_shutdown_req_reflection_;
  delete gm_open_login_whitelist_req::default_instance_;
  delete gm_open_login_whitelist_req_reflection_;
  delete gm_add_login_whitelist_req::default_instance_;
  delete gm_add_login_whitelist_req_reflection_;
}

void protobuf_AddDesc_ss_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ss_manager.proto\022\013SProtoSpace\032\020ss_prot"
    "oid.proto\"F\n\013listen_node\022\017\n\007pipe_id\030\001 \001("
    "\004\022\021\n\tlisten_ip\030\002 \001(\r\022\023\n\013listen_port\030\003 \001("
    "\r\"2\n\021connect_relateion\022\014\n\004type\030\001 \001(\r\022\017\n\007"
    "connect\030\002 \003(\r\"\266\001\n\014connect_info\022\017\n\007versio"
    "n\030\001 \001(\r\022\030\n\020send_buffer_size\030\002 \001(\r\022\030\n\020rec"
    "v_buffer_size\030\003 \001(\r\0222\n\nconnection\030\004 \003(\0132"
    "\036.SProtoSpace.connect_relateion\022-\n\013activ"
    "e_node\030\005 \003(\0132\030.SProtoSpace.listen_node\"\245"
    "\002\n\017gateserver_info\022\027\n\017server_group_id\030\001 "
    "\001(\r\022\026\n\016server_area_id\030\002 \001(\r\022\024\n\014server_in"
    "dex\030\003 \001(\r\022\n\n\002ip\030\004 \001(\004\022\014\n\004port\030\005 \001(\r\022\016\n\006s"
    "tatus\030\006 \001(\r\022\030\n\020login_role_count\030\007 \001(\004\022\033\n"
    "\023center_server_count\030\010 \001(\r\022\031\n\021game_serve"
    "r_count\030\t \001(\r\022\033\n\023battel_server_count\030\n \001"
    "(\r\022\027\n\017db_server_count\030\013 \001(\r\022\031\n\021mail_serv"
    "er_count\030\014 \001(\r\"\210\002\n\017gameserver_info\022\027\n\017se"
    "rver_group_id\030\001 \001(\r\022\026\n\016server_area_id\030\002 "
    "\001(\r\022\024\n\014server_index\030\003 \001(\r\022\n\n\002ip\030\004 \001(\004\022\014\n"
    "\004port\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\022\030\n\020login_rol"
    "e_count\030\007 \001(\004\022\031\n\021gate_server_count\030\010 \001(\r"
    "\022\031\n\021mail_server_count\030\t \001(\r\022\033\n\023battel_se"
    "rver_count\030\n \001(\r\022\027\n\017db_server_count\030\013 \001("
    "\r\"\313\001\n\rdbserver_info\022\027\n\017server_group_id\030\001"
    " \001(\r\022\026\n\016server_area_id\030\002 \001(\r\022\024\n\014server_i"
    "ndex\030\003 \001(\r\022\n\n\002ip\030\004 \001(\004\022\014\n\004port\030\005 \001(\r\022\016\n\006"
    "status\030\006 \001(\r\022\031\n\021redis_role_number\030\007 \001(\004\022"
    "\032\n\022redis_memory_usage\030\010 \001(\004\022\022\n\nsql_statu"
    "s\030\t \001(\r\"a\n\030sync_connection_info_req\022E\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033s"
    "ync_connection_info_req_id\"\212\001\n\030sync_conn"
    "ection_info_ack\022E\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\033sync_connection_info_"
    "ack_id\022\'\n\004info\030\002 \001(\0132\031.SProtoSpace.conne"
    "ct_info\"l\n\025node_version_info_ntf\022B\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030node"
    "_version_info_ntf_id\022\017\n\007version\030\002 \001(\r\"\210\001"
    "\n\027sync_conection_info_ntf\022D\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\032sync_conect"
    "ion_info_ntf_id\022\'\n\004info\030\002 \001(\0132\031.SProtoSp"
    "ace.connect_info\"\211\001\n\030register_listen_inf"
    "o_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\033register_listen_info_req_id\022\021\n\t"
    "listen_ip\030\002 \001(\r\022\023\n\013listen_port\030\003 \001(\r\"p\n\025"
    "gm2manager_status_req\022B\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\030gm2manager_stat"
    "us_req_id\022\023\n\013info_detail\030\002 \001(\004\"\215\002\n\025manag"
    "er2gm_status_ack\022B\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\030manager2gm_status_ac"
    "k_id\022\016\n\006status\030\002 \001(\r\022\022\n\ngame_count\030\003 \001(\r"
    "\022\020\n\010db_count\030\004 \001(\r\022\022\n\ngate_count\030\005 \001(\r\022\025"
    "\n\rmanager_count\030\006 \001(\r\022\031\n\021overload_pipe_i"
    "ds\030\007 \003(\004\022\017\n\007area_id\030\010 \001(\r\022\020\n\010group_id\030\t "
    "\001(\r\022\021\n\tarea_name\030\n \001(\t\"v\n\030gm2manager_are"
    "a_info_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\033gm2manager_area_info_req_i"
    "d\022\023\n\013info_detail\030\002 \001(\004\"\221\002\n\030manager2gm_ar"
    "ea_info_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\033manager2gm_area_info_ack_"
    "id\022:\n\024gameserver_this_area\030\002 \003(\0132\034.SProt"
    "oSpace.gameserver_info\0226\n\022dbserver_this_"
    "area\030\003 \003(\0132\032.SProtoSpace.dbserver_info\022:"
    "\n\024gateserver_this_area\030\004 \003(\0132\034.SProtoSpa"
    "ce.gateserver_info\"n\n\024gm_update_config_r"
    "eq\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\027gm_update_config_req_id\022\023\n\013update_"
    "time\030\002 \001(\004\"f\n\024gm_update_config_ack\022A\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027gm"
    "_update_config_ack_id\022\013\n\003ret\030\002 \001(\005\"\222\001\n\024g"
    "m_update_config_ntf\022A\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\027gm_update_config_"
    "ntf_id\022\013\n\003ret\030\002 \001(\005\022\027\n\017err_server_pipe\030\003"
    " \001(\004\022\021\n\tret_debug\030\004 \001(\t\"]\n\026area_cancel_u"
    "pdate_req\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\031area_cancel_update_req_id\"j"
    "\n\026area_cancel_update_ack\022C\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:\031area_cancel_"
    "update_ack_id\022\013\n\003ret\030\002 \001(\005\"U\n\022config_ver"
    "sion_req\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\025config_version_req_id\"\202\001\n\022co"
    "nfig_version_ack\022\?\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\025config_version_ack_i"
    "d\022\026\n\016update_version\030\002 \001(\004\022\023\n\013update_name"
    "\030\003 \001(\t\"\237\001\n\026area_update_config_req\022C\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031are"
    "a_update_config_req_id\022\026\n\016update_version"
    "\030\002 \001(\004\022\023\n\013update_time\030\003 \001(\004\022\023\n\013update_na"
    "me\030\004 \001(\t\"}\n\026area_update_config_ack\022C\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031ar"
    "ea_update_config_ack_id\022\013\n\003ret\030\002 \001(\005\022\021\n\t"
    "ret_debug\030\003 \001(\t\"\211\001\n\033area_monitor_data_re"
    "set_ntf\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\036area_monitor_data_reset_ntf_i"
    "d\022\020\n\010gate_net\030\002 \001(\010\022\016\n\006db_mem\030\003 \001(\010\"\221\001\n\025"
    "assign_new_master_req\022B\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\030assign_new_mast"
    "er_req_id\022\032\n\022master_server_type\030\002 \001(\r\022\030\n"
    "\020master_server_id\030\003 \001(\004\"\227\001\n\030register_mas"
    "ter_info_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID:\033register_master_info_req"
    "_id\022\032\n\022master_server_type\030\002 \001(\r\022\030\n\020maste"
    "r_server_id\030\003 \001(\004\"3\n\016mail_item_data\022\017\n\007i"
    "tem_id\030\001 \001(\r\022\020\n\010item_num\030\002 \001(\r\"\300\001\n\020gm_se"
    "nd_mail_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\023gm_send_mail_req_id\022\022\n\nma"
    "il_title\030\002 \001(\t\022\024\n\014mail_content\030\003 \001(\t\022/\n\n"
    "mail_items\030\004 \003(\0132\033.SProtoSpace.mail_item"
    "_data\022\022\n\nto_role_id\030\005 \001(\004\"\266\001\n\025gm_send_br"
    "oadcast_req\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\030gm_send_broadcast_req_id\022"
    "\022\n\nstart_time\030\002 \001(\t\022\020\n\010end_time\030\003 \001(\t\022\017\n"
    "\007servers\030\004 \003(\r\022\021\n\tintervals\030\005 \001(\r\022\017\n\007con"
    "tent\030\006 \001(\t\"\260\001\n\024gm_send_bulletin_req\022A\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027g"
    "m_send_bulletin_req_id\022\022\n\nstart_time\030\002 \001"
    "(\t\022\020\n\010end_time\030\003 \001(\t\022\017\n\007channel\030\004 \001(\r\022\r\n"
    "\005title\030\005 \001(\t\022\017\n\007content\030\006 \001(\t\"\200\001\n\024gm_sen"
    "d_shutdown_req\022A\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:\027gm_send_shutdown_req_i"
    "d\022\025\n\rshutdown_time\030\002 \001(\t\022\016\n\006signal\030\003 \001(\005"
    "\"x\n\033gm_open_login_whitelist_req\022H\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\036gm_op"
    "en_login_whitelist_req_id\022\017\n\007is_open\030\002 \001"
    "(\010\"v\n\032gm_add_login_whitelist_req\022G\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\035gm_a"
    "dd_login_whitelist_req_id\022\017\n\007account\030\002 \003"
    "(\t", 5042);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_manager.proto", &protobuf_RegisterTypes);
  listen_node::default_instance_ = new listen_node();
  connect_relateion::default_instance_ = new connect_relateion();
  connect_info::default_instance_ = new connect_info();
  gateserver_info::default_instance_ = new gateserver_info();
  gameserver_info::default_instance_ = new gameserver_info();
  dbserver_info::default_instance_ = new dbserver_info();
  sync_connection_info_req::default_instance_ = new sync_connection_info_req();
  sync_connection_info_ack::default_instance_ = new sync_connection_info_ack();
  node_version_info_ntf::default_instance_ = new node_version_info_ntf();
  sync_conection_info_ntf::default_instance_ = new sync_conection_info_ntf();
  register_listen_info_req::default_instance_ = new register_listen_info_req();
  gm2manager_status_req::default_instance_ = new gm2manager_status_req();
  manager2gm_status_ack::default_instance_ = new manager2gm_status_ack();
  gm2manager_area_info_req::default_instance_ = new gm2manager_area_info_req();
  manager2gm_area_info_ack::default_instance_ = new manager2gm_area_info_ack();
  gm_update_config_req::default_instance_ = new gm_update_config_req();
  gm_update_config_ack::default_instance_ = new gm_update_config_ack();
  gm_update_config_ntf::default_instance_ = new gm_update_config_ntf();
  area_cancel_update_req::default_instance_ = new area_cancel_update_req();
  area_cancel_update_ack::default_instance_ = new area_cancel_update_ack();
  config_version_req::default_instance_ = new config_version_req();
  config_version_ack::default_instance_ = new config_version_ack();
  area_update_config_req::default_instance_ = new area_update_config_req();
  area_update_config_ack::default_instance_ = new area_update_config_ack();
  area_monitor_data_reset_ntf::default_instance_ = new area_monitor_data_reset_ntf();
  assign_new_master_req::default_instance_ = new assign_new_master_req();
  register_master_info_req::default_instance_ = new register_master_info_req();
  mail_item_data::default_instance_ = new mail_item_data();
  gm_send_mail_req::default_instance_ = new gm_send_mail_req();
  gm_send_broadcast_req::default_instance_ = new gm_send_broadcast_req();
  gm_send_bulletin_req::default_instance_ = new gm_send_bulletin_req();
  gm_send_shutdown_req::default_instance_ = new gm_send_shutdown_req();
  gm_open_login_whitelist_req::default_instance_ = new gm_open_login_whitelist_req();
  gm_add_login_whitelist_req::default_instance_ = new gm_add_login_whitelist_req();
  listen_node::default_instance_->InitAsDefaultInstance();
  connect_relateion::default_instance_->InitAsDefaultInstance();
  connect_info::default_instance_->InitAsDefaultInstance();
  gateserver_info::default_instance_->InitAsDefaultInstance();
  gameserver_info::default_instance_->InitAsDefaultInstance();
  dbserver_info::default_instance_->InitAsDefaultInstance();
  sync_connection_info_req::default_instance_->InitAsDefaultInstance();
  sync_connection_info_ack::default_instance_->InitAsDefaultInstance();
  node_version_info_ntf::default_instance_->InitAsDefaultInstance();
  sync_conection_info_ntf::default_instance_->InitAsDefaultInstance();
  register_listen_info_req::default_instance_->InitAsDefaultInstance();
  gm2manager_status_req::default_instance_->InitAsDefaultInstance();
  manager2gm_status_ack::default_instance_->InitAsDefaultInstance();
  gm2manager_area_info_req::default_instance_->InitAsDefaultInstance();
  manager2gm_area_info_ack::default_instance_->InitAsDefaultInstance();
  gm_update_config_req::default_instance_->InitAsDefaultInstance();
  gm_update_config_ack::default_instance_->InitAsDefaultInstance();
  gm_update_config_ntf::default_instance_->InitAsDefaultInstance();
  area_cancel_update_req::default_instance_->InitAsDefaultInstance();
  area_cancel_update_ack::default_instance_->InitAsDefaultInstance();
  config_version_req::default_instance_->InitAsDefaultInstance();
  config_version_ack::default_instance_->InitAsDefaultInstance();
  area_update_config_req::default_instance_->InitAsDefaultInstance();
  area_update_config_ack::default_instance_->InitAsDefaultInstance();
  area_monitor_data_reset_ntf::default_instance_->InitAsDefaultInstance();
  assign_new_master_req::default_instance_->InitAsDefaultInstance();
  register_master_info_req::default_instance_->InitAsDefaultInstance();
  mail_item_data::default_instance_->InitAsDefaultInstance();
  gm_send_mail_req::default_instance_->InitAsDefaultInstance();
  gm_send_broadcast_req::default_instance_->InitAsDefaultInstance();
  gm_send_bulletin_req::default_instance_->InitAsDefaultInstance();
  gm_send_shutdown_req::default_instance_->InitAsDefaultInstance();
  gm_open_login_whitelist_req::default_instance_->InitAsDefaultInstance();
  gm_add_login_whitelist_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fmanager_2eproto {
  StaticDescriptorInitializer_ss_5fmanager_2eproto() {
    protobuf_AddDesc_ss_5fmanager_2eproto();
  }
} static_descriptor_initializer_ss_5fmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int listen_node::kPipeIdFieldNumber;
const int listen_node::kListenIpFieldNumber;
const int listen_node::kListenPortFieldNumber;
#endif  // !_MSC_VER

listen_node::listen_node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void listen_node::InitAsDefaultInstance() {
}

listen_node::listen_node(const listen_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void listen_node::SharedCtor() {
  _cached_size_ = 0;
  pipe_id_ = GOOGLE_ULONGLONG(0);
  listen_ip_ = 0u;
  listen_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

listen_node::~listen_node() {
  SharedDtor();
}

void listen_node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void listen_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* listen_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return listen_node_descriptor_;
}

const listen_node& listen_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

listen_node* listen_node::default_instance_ = NULL;

listen_node* listen_node::New() const {
  return new listen_node;
}

void listen_node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pipe_id_ = GOOGLE_ULONGLONG(0);
    listen_ip_ = 0u;
    listen_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool listen_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pipe_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pipe_id_)));
          set_has_pipe_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_listen_ip;
        break;
      }

      // optional uint32 listen_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_ip_)));
          set_has_listen_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listen_port;
        break;
      }

      // optional uint32 listen_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void listen_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pipe_id = 1;
  if (has_pipe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pipe_id(), output);
  }

  // optional uint32 listen_ip = 2;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->listen_ip(), output);
  }

  // optional uint32 listen_port = 3;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->listen_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* listen_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pipe_id = 1;
  if (has_pipe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pipe_id(), target);
  }

  // optional uint32 listen_ip = 2;
  if (has_listen_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->listen_ip(), target);
  }

  // optional uint32 listen_port = 3;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->listen_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int listen_node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pipe_id = 1;
    if (has_pipe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pipe_id());
    }

    // optional uint32 listen_ip = 2;
    if (has_listen_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_ip());
    }

    // optional uint32 listen_port = 3;
    if (has_listen_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void listen_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const listen_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const listen_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void listen_node::MergeFrom(const listen_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pipe_id()) {
      set_pipe_id(from.pipe_id());
    }
    if (from.has_listen_ip()) {
      set_listen_ip(from.listen_ip());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void listen_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void listen_node::CopyFrom(const listen_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool listen_node::IsInitialized() const {

  return true;
}

void listen_node::Swap(listen_node* other) {
  if (other != this) {
    std::swap(pipe_id_, other->pipe_id_);
    std::swap(listen_ip_, other->listen_ip_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata listen_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = listen_node_descriptor_;
  metadata.reflection = listen_node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int connect_relateion::kTypeFieldNumber;
const int connect_relateion::kConnectFieldNumber;
#endif  // !_MSC_VER

connect_relateion::connect_relateion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connect_relateion::InitAsDefaultInstance() {
}

connect_relateion::connect_relateion(const connect_relateion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connect_relateion::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connect_relateion::~connect_relateion() {
  SharedDtor();
}

void connect_relateion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void connect_relateion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connect_relateion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connect_relateion_descriptor_;
}

const connect_relateion& connect_relateion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

connect_relateion* connect_relateion::default_instance_ = NULL;

connect_relateion* connect_relateion::New() const {
  return new connect_relateion;
}

void connect_relateion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  connect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connect_relateion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect;
        break;
      }

      // repeated uint32 connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_connect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_connect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connect_relateion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated uint32 connect = 2;
  for (int i = 0; i < this->connect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->connect(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connect_relateion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated uint32 connect = 2;
  for (int i = 0; i < this->connect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->connect(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connect_relateion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 connect = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->connect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->connect(i));
    }
    total_size += 1 * this->connect_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connect_relateion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connect_relateion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connect_relateion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connect_relateion::MergeFrom(const connect_relateion& from) {
  GOOGLE_CHECK_NE(&from, this);
  connect_.MergeFrom(from.connect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connect_relateion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connect_relateion::CopyFrom(const connect_relateion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connect_relateion::IsInitialized() const {

  return true;
}

void connect_relateion::Swap(connect_relateion* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    connect_.Swap(&other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connect_relateion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connect_relateion_descriptor_;
  metadata.reflection = connect_relateion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int connect_info::kVersionFieldNumber;
const int connect_info::kSendBufferSizeFieldNumber;
const int connect_info::kRecvBufferSizeFieldNumber;
const int connect_info::kConnectionFieldNumber;
const int connect_info::kActiveNodeFieldNumber;
#endif  // !_MSC_VER

connect_info::connect_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connect_info::InitAsDefaultInstance() {
}

connect_info::connect_info(const connect_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connect_info::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  send_buffer_size_ = 0u;
  recv_buffer_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connect_info::~connect_info() {
  SharedDtor();
}

void connect_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void connect_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connect_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connect_info_descriptor_;
}

const connect_info& connect_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

connect_info* connect_info::default_instance_ = NULL;

connect_info* connect_info::New() const {
  return new connect_info;
}

void connect_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    send_buffer_size_ = 0u;
    recv_buffer_size_ = 0u;
  }
  connection_.Clear();
  active_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connect_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_buffer_size;
        break;
      }

      // optional uint32 send_buffer_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_buffer_size_)));
          set_has_send_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_buffer_size;
        break;
      }

      // optional uint32 recv_buffer_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_buffer_size_)));
          set_has_recv_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connection;
        break;
      }

      // repeated .SProtoSpace.connect_relateion connection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connection;
        if (input->ExpectTag(42)) goto parse_active_node;
        break;
      }

      // repeated .SProtoSpace.listen_node active_node = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_active_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connect_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 send_buffer_size = 2;
  if (has_send_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_buffer_size(), output);
  }

  // optional uint32 recv_buffer_size = 3;
  if (has_recv_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recv_buffer_size(), output);
  }

  // repeated .SProtoSpace.connect_relateion connection = 4;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connection(i), output);
  }

  // repeated .SProtoSpace.listen_node active_node = 5;
  for (int i = 0; i < this->active_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->active_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connect_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 send_buffer_size = 2;
  if (has_send_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_buffer_size(), target);
  }

  // optional uint32 recv_buffer_size = 3;
  if (has_recv_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recv_buffer_size(), target);
  }

  // repeated .SProtoSpace.connect_relateion connection = 4;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connection(i), target);
  }

  // repeated .SProtoSpace.listen_node active_node = 5;
  for (int i = 0; i < this->active_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->active_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connect_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 send_buffer_size = 2;
    if (has_send_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_buffer_size());
    }

    // optional uint32 recv_buffer_size = 3;
    if (has_recv_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_buffer_size());
    }

  }
  // repeated .SProtoSpace.connect_relateion connection = 4;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  // repeated .SProtoSpace.listen_node active_node = 5;
  total_size += 1 * this->active_node_size();
  for (int i = 0; i < this->active_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connect_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connect_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connect_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connect_info::MergeFrom(const connect_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  connection_.MergeFrom(from.connection_);
  active_node_.MergeFrom(from.active_node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_send_buffer_size()) {
      set_send_buffer_size(from.send_buffer_size());
    }
    if (from.has_recv_buffer_size()) {
      set_recv_buffer_size(from.recv_buffer_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connect_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connect_info::CopyFrom(const connect_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connect_info::IsInitialized() const {

  return true;
}

void connect_info::Swap(connect_info* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(send_buffer_size_, other->send_buffer_size_);
    std::swap(recv_buffer_size_, other->recv_buffer_size_);
    connection_.Swap(&other->connection_);
    active_node_.Swap(&other->active_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connect_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connect_info_descriptor_;
  metadata.reflection = connect_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gateserver_info::kServerGroupIdFieldNumber;
const int gateserver_info::kServerAreaIdFieldNumber;
const int gateserver_info::kServerIndexFieldNumber;
const int gateserver_info::kIpFieldNumber;
const int gateserver_info::kPortFieldNumber;
const int gateserver_info::kStatusFieldNumber;
const int gateserver_info::kLoginRoleCountFieldNumber;
const int gateserver_info::kCenterServerCountFieldNumber;
const int gateserver_info::kGameServerCountFieldNumber;
const int gateserver_info::kBattelServerCountFieldNumber;
const int gateserver_info::kDbServerCountFieldNumber;
const int gateserver_info::kMailServerCountFieldNumber;
#endif  // !_MSC_VER

gateserver_info::gateserver_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gateserver_info::InitAsDefaultInstance() {
}

gateserver_info::gateserver_info(const gateserver_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gateserver_info::SharedCtor() {
  _cached_size_ = 0;
  server_group_id_ = 0u;
  server_area_id_ = 0u;
  server_index_ = 0u;
  ip_ = GOOGLE_ULONGLONG(0);
  port_ = 0u;
  status_ = 0u;
  login_role_count_ = GOOGLE_ULONGLONG(0);
  center_server_count_ = 0u;
  game_server_count_ = 0u;
  battel_server_count_ = 0u;
  db_server_count_ = 0u;
  mail_server_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gateserver_info::~gateserver_info() {
  SharedDtor();
}

void gateserver_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gateserver_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gateserver_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gateserver_info_descriptor_;
}

const gateserver_info& gateserver_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gateserver_info* gateserver_info::default_instance_ = NULL;

gateserver_info* gateserver_info::New() const {
  return new gateserver_info;
}

void gateserver_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_group_id_ = 0u;
    server_area_id_ = 0u;
    server_index_ = 0u;
    ip_ = GOOGLE_ULONGLONG(0);
    port_ = 0u;
    status_ = 0u;
    login_role_count_ = GOOGLE_ULONGLONG(0);
    center_server_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    game_server_count_ = 0u;
    battel_server_count_ = 0u;
    db_server_count_ = 0u;
    mail_server_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gateserver_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_group_id_)));
          set_has_server_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_area_id;
        break;
      }

      // optional uint32 server_area_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_area_id_)));
          set_has_server_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_index;
        break;
      }

      // optional uint32 server_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_index_)));
          set_has_server_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ip;
        break;
      }

      // optional uint64 ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_login_role_count;
        break;
      }

      // optional uint64 login_role_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_role_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_role_count_)));
          set_has_login_role_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_center_server_count;
        break;
      }

      // optional uint32 center_server_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_server_count_)));
          set_has_center_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_game_server_count;
        break;
      }

      // optional uint32 game_server_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_count_)));
          set_has_game_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battel_server_count;
        break;
      }

      // optional uint32 battel_server_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battel_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battel_server_count_)));
          set_has_battel_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_db_server_count;
        break;
      }

      // optional uint32 db_server_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_server_count_)));
          set_has_db_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mail_server_count;
        break;
      }

      // optional uint32 mail_server_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_server_count_)));
          set_has_mail_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gateserver_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_group_id(), output);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_area_id(), output);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_index(), output);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional uint64 login_role_count = 7;
  if (has_login_role_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->login_role_count(), output);
  }

  // optional uint32 center_server_count = 8;
  if (has_center_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->center_server_count(), output);
  }

  // optional uint32 game_server_count = 9;
  if (has_game_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_server_count(), output);
  }

  // optional uint32 battel_server_count = 10;
  if (has_battel_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->battel_server_count(), output);
  }

  // optional uint32 db_server_count = 11;
  if (has_db_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->db_server_count(), output);
  }

  // optional uint32 mail_server_count = 12;
  if (has_mail_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mail_server_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gateserver_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_group_id(), target);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_area_id(), target);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_index(), target);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional uint64 login_role_count = 7;
  if (has_login_role_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->login_role_count(), target);
  }

  // optional uint32 center_server_count = 8;
  if (has_center_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->center_server_count(), target);
  }

  // optional uint32 game_server_count = 9;
  if (has_game_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_server_count(), target);
  }

  // optional uint32 battel_server_count = 10;
  if (has_battel_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->battel_server_count(), target);
  }

  // optional uint32 db_server_count = 11;
  if (has_db_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->db_server_count(), target);
  }

  // optional uint32 mail_server_count = 12;
  if (has_mail_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mail_server_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gateserver_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_group_id = 1;
    if (has_server_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_group_id());
    }

    // optional uint32 server_area_id = 2;
    if (has_server_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_area_id());
    }

    // optional uint32 server_index = 3;
    if (has_server_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_index());
    }

    // optional uint64 ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 login_role_count = 7;
    if (has_login_role_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_role_count());
    }

    // optional uint32 center_server_count = 8;
    if (has_center_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->center_server_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 game_server_count = 9;
    if (has_game_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_count());
    }

    // optional uint32 battel_server_count = 10;
    if (has_battel_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battel_server_count());
    }

    // optional uint32 db_server_count = 11;
    if (has_db_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_server_count());
    }

    // optional uint32 mail_server_count = 12;
    if (has_mail_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_server_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gateserver_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gateserver_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gateserver_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gateserver_info::MergeFrom(const gateserver_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_group_id()) {
      set_server_group_id(from.server_group_id());
    }
    if (from.has_server_area_id()) {
      set_server_area_id(from.server_area_id());
    }
    if (from.has_server_index()) {
      set_server_index(from.server_index());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_login_role_count()) {
      set_login_role_count(from.login_role_count());
    }
    if (from.has_center_server_count()) {
      set_center_server_count(from.center_server_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_game_server_count()) {
      set_game_server_count(from.game_server_count());
    }
    if (from.has_battel_server_count()) {
      set_battel_server_count(from.battel_server_count());
    }
    if (from.has_db_server_count()) {
      set_db_server_count(from.db_server_count());
    }
    if (from.has_mail_server_count()) {
      set_mail_server_count(from.mail_server_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gateserver_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gateserver_info::CopyFrom(const gateserver_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gateserver_info::IsInitialized() const {

  return true;
}

void gateserver_info::Swap(gateserver_info* other) {
  if (other != this) {
    std::swap(server_group_id_, other->server_group_id_);
    std::swap(server_area_id_, other->server_area_id_);
    std::swap(server_index_, other->server_index_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(status_, other->status_);
    std::swap(login_role_count_, other->login_role_count_);
    std::swap(center_server_count_, other->center_server_count_);
    std::swap(game_server_count_, other->game_server_count_);
    std::swap(battel_server_count_, other->battel_server_count_);
    std::swap(db_server_count_, other->db_server_count_);
    std::swap(mail_server_count_, other->mail_server_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gateserver_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gateserver_info_descriptor_;
  metadata.reflection = gateserver_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gameserver_info::kServerGroupIdFieldNumber;
const int gameserver_info::kServerAreaIdFieldNumber;
const int gameserver_info::kServerIndexFieldNumber;
const int gameserver_info::kIpFieldNumber;
const int gameserver_info::kPortFieldNumber;
const int gameserver_info::kStatusFieldNumber;
const int gameserver_info::kLoginRoleCountFieldNumber;
const int gameserver_info::kGateServerCountFieldNumber;
const int gameserver_info::kMailServerCountFieldNumber;
const int gameserver_info::kBattelServerCountFieldNumber;
const int gameserver_info::kDbServerCountFieldNumber;
#endif  // !_MSC_VER

gameserver_info::gameserver_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gameserver_info::InitAsDefaultInstance() {
}

gameserver_info::gameserver_info(const gameserver_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gameserver_info::SharedCtor() {
  _cached_size_ = 0;
  server_group_id_ = 0u;
  server_area_id_ = 0u;
  server_index_ = 0u;
  ip_ = GOOGLE_ULONGLONG(0);
  port_ = 0u;
  status_ = 0u;
  login_role_count_ = GOOGLE_ULONGLONG(0);
  gate_server_count_ = 0u;
  mail_server_count_ = 0u;
  battel_server_count_ = 0u;
  db_server_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gameserver_info::~gameserver_info() {
  SharedDtor();
}

void gameserver_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gameserver_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gameserver_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameserver_info_descriptor_;
}

const gameserver_info& gameserver_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gameserver_info* gameserver_info::default_instance_ = NULL;

gameserver_info* gameserver_info::New() const {
  return new gameserver_info;
}

void gameserver_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_group_id_ = 0u;
    server_area_id_ = 0u;
    server_index_ = 0u;
    ip_ = GOOGLE_ULONGLONG(0);
    port_ = 0u;
    status_ = 0u;
    login_role_count_ = GOOGLE_ULONGLONG(0);
    gate_server_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mail_server_count_ = 0u;
    battel_server_count_ = 0u;
    db_server_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gameserver_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_group_id_)));
          set_has_server_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_area_id;
        break;
      }

      // optional uint32 server_area_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_area_id_)));
          set_has_server_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_index;
        break;
      }

      // optional uint32 server_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_index_)));
          set_has_server_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ip;
        break;
      }

      // optional uint64 ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_login_role_count;
        break;
      }

      // optional uint64 login_role_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_role_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_role_count_)));
          set_has_login_role_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gate_server_count;
        break;
      }

      // optional uint32 gate_server_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_server_count_)));
          set_has_gate_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mail_server_count;
        break;
      }

      // optional uint32 mail_server_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_server_count_)));
          set_has_mail_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battel_server_count;
        break;
      }

      // optional uint32 battel_server_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battel_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battel_server_count_)));
          set_has_battel_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_db_server_count;
        break;
      }

      // optional uint32 db_server_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_server_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_server_count_)));
          set_has_db_server_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gameserver_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_group_id(), output);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_area_id(), output);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_index(), output);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional uint64 login_role_count = 7;
  if (has_login_role_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->login_role_count(), output);
  }

  // optional uint32 gate_server_count = 8;
  if (has_gate_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gate_server_count(), output);
  }

  // optional uint32 mail_server_count = 9;
  if (has_mail_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mail_server_count(), output);
  }

  // optional uint32 battel_server_count = 10;
  if (has_battel_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->battel_server_count(), output);
  }

  // optional uint32 db_server_count = 11;
  if (has_db_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->db_server_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gameserver_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_group_id(), target);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_area_id(), target);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_index(), target);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional uint64 login_role_count = 7;
  if (has_login_role_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->login_role_count(), target);
  }

  // optional uint32 gate_server_count = 8;
  if (has_gate_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gate_server_count(), target);
  }

  // optional uint32 mail_server_count = 9;
  if (has_mail_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mail_server_count(), target);
  }

  // optional uint32 battel_server_count = 10;
  if (has_battel_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->battel_server_count(), target);
  }

  // optional uint32 db_server_count = 11;
  if (has_db_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->db_server_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gameserver_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_group_id = 1;
    if (has_server_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_group_id());
    }

    // optional uint32 server_area_id = 2;
    if (has_server_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_area_id());
    }

    // optional uint32 server_index = 3;
    if (has_server_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_index());
    }

    // optional uint64 ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 login_role_count = 7;
    if (has_login_role_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_role_count());
    }

    // optional uint32 gate_server_count = 8;
    if (has_gate_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_server_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mail_server_count = 9;
    if (has_mail_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_server_count());
    }

    // optional uint32 battel_server_count = 10;
    if (has_battel_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battel_server_count());
    }

    // optional uint32 db_server_count = 11;
    if (has_db_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_server_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gameserver_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gameserver_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gameserver_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gameserver_info::MergeFrom(const gameserver_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_group_id()) {
      set_server_group_id(from.server_group_id());
    }
    if (from.has_server_area_id()) {
      set_server_area_id(from.server_area_id());
    }
    if (from.has_server_index()) {
      set_server_index(from.server_index());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_login_role_count()) {
      set_login_role_count(from.login_role_count());
    }
    if (from.has_gate_server_count()) {
      set_gate_server_count(from.gate_server_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mail_server_count()) {
      set_mail_server_count(from.mail_server_count());
    }
    if (from.has_battel_server_count()) {
      set_battel_server_count(from.battel_server_count());
    }
    if (from.has_db_server_count()) {
      set_db_server_count(from.db_server_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gameserver_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gameserver_info::CopyFrom(const gameserver_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameserver_info::IsInitialized() const {

  return true;
}

void gameserver_info::Swap(gameserver_info* other) {
  if (other != this) {
    std::swap(server_group_id_, other->server_group_id_);
    std::swap(server_area_id_, other->server_area_id_);
    std::swap(server_index_, other->server_index_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(status_, other->status_);
    std::swap(login_role_count_, other->login_role_count_);
    std::swap(gate_server_count_, other->gate_server_count_);
    std::swap(mail_server_count_, other->mail_server_count_);
    std::swap(battel_server_count_, other->battel_server_count_);
    std::swap(db_server_count_, other->db_server_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gameserver_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gameserver_info_descriptor_;
  metadata.reflection = gameserver_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbserver_info::kServerGroupIdFieldNumber;
const int dbserver_info::kServerAreaIdFieldNumber;
const int dbserver_info::kServerIndexFieldNumber;
const int dbserver_info::kIpFieldNumber;
const int dbserver_info::kPortFieldNumber;
const int dbserver_info::kStatusFieldNumber;
const int dbserver_info::kRedisRoleNumberFieldNumber;
const int dbserver_info::kRedisMemoryUsageFieldNumber;
const int dbserver_info::kSqlStatusFieldNumber;
#endif  // !_MSC_VER

dbserver_info::dbserver_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbserver_info::InitAsDefaultInstance() {
}

dbserver_info::dbserver_info(const dbserver_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbserver_info::SharedCtor() {
  _cached_size_ = 0;
  server_group_id_ = 0u;
  server_area_id_ = 0u;
  server_index_ = 0u;
  ip_ = GOOGLE_ULONGLONG(0);
  port_ = 0u;
  status_ = 0u;
  redis_role_number_ = GOOGLE_ULONGLONG(0);
  redis_memory_usage_ = GOOGLE_ULONGLONG(0);
  sql_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbserver_info::~dbserver_info() {
  SharedDtor();
}

void dbserver_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbserver_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbserver_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbserver_info_descriptor_;
}

const dbserver_info& dbserver_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

dbserver_info* dbserver_info::default_instance_ = NULL;

dbserver_info* dbserver_info::New() const {
  return new dbserver_info;
}

void dbserver_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_group_id_ = 0u;
    server_area_id_ = 0u;
    server_index_ = 0u;
    ip_ = GOOGLE_ULONGLONG(0);
    port_ = 0u;
    status_ = 0u;
    redis_role_number_ = GOOGLE_ULONGLONG(0);
    redis_memory_usage_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sql_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbserver_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_group_id_)));
          set_has_server_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_area_id;
        break;
      }

      // optional uint32 server_area_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_area_id_)));
          set_has_server_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_index;
        break;
      }

      // optional uint32 server_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_index_)));
          set_has_server_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ip;
        break;
      }

      // optional uint64 ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redis_role_number;
        break;
      }

      // optional uint64 redis_role_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redis_role_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redis_role_number_)));
          set_has_redis_role_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_redis_memory_usage;
        break;
      }

      // optional uint64 redis_memory_usage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redis_memory_usage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redis_memory_usage_)));
          set_has_redis_memory_usage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sql_status;
        break;
      }

      // optional uint32 sql_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sql_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sql_status_)));
          set_has_sql_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbserver_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_group_id(), output);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_area_id(), output);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_index(), output);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional uint64 redis_role_number = 7;
  if (has_redis_role_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->redis_role_number(), output);
  }

  // optional uint64 redis_memory_usage = 8;
  if (has_redis_memory_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->redis_memory_usage(), output);
  }

  // optional uint32 sql_status = 9;
  if (has_sql_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sql_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbserver_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_group_id = 1;
  if (has_server_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_group_id(), target);
  }

  // optional uint32 server_area_id = 2;
  if (has_server_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_area_id(), target);
  }

  // optional uint32 server_index = 3;
  if (has_server_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_index(), target);
  }

  // optional uint64 ip = 4;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional uint64 redis_role_number = 7;
  if (has_redis_role_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->redis_role_number(), target);
  }

  // optional uint64 redis_memory_usage = 8;
  if (has_redis_memory_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->redis_memory_usage(), target);
  }

  // optional uint32 sql_status = 9;
  if (has_sql_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sql_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbserver_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_group_id = 1;
    if (has_server_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_group_id());
    }

    // optional uint32 server_area_id = 2;
    if (has_server_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_area_id());
    }

    // optional uint32 server_index = 3;
    if (has_server_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_index());
    }

    // optional uint64 ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 redis_role_number = 7;
    if (has_redis_role_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redis_role_number());
    }

    // optional uint64 redis_memory_usage = 8;
    if (has_redis_memory_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redis_memory_usage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sql_status = 9;
    if (has_sql_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sql_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbserver_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbserver_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbserver_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbserver_info::MergeFrom(const dbserver_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_group_id()) {
      set_server_group_id(from.server_group_id());
    }
    if (from.has_server_area_id()) {
      set_server_area_id(from.server_area_id());
    }
    if (from.has_server_index()) {
      set_server_index(from.server_index());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_redis_role_number()) {
      set_redis_role_number(from.redis_role_number());
    }
    if (from.has_redis_memory_usage()) {
      set_redis_memory_usage(from.redis_memory_usage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sql_status()) {
      set_sql_status(from.sql_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbserver_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbserver_info::CopyFrom(const dbserver_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbserver_info::IsInitialized() const {

  return true;
}

void dbserver_info::Swap(dbserver_info* other) {
  if (other != this) {
    std::swap(server_group_id_, other->server_group_id_);
    std::swap(server_area_id_, other->server_area_id_);
    std::swap(server_index_, other->server_index_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(status_, other->status_);
    std::swap(redis_role_number_, other->redis_role_number_);
    std::swap(redis_memory_usage_, other->redis_memory_usage_);
    std::swap(sql_status_, other->sql_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbserver_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbserver_info_descriptor_;
  metadata.reflection = dbserver_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_connection_info_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

sync_connection_info_req::sync_connection_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_connection_info_req::InitAsDefaultInstance() {
}

sync_connection_info_req::sync_connection_info_req(const sync_connection_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_connection_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_connection_info_req::~sync_connection_info_req() {
  SharedDtor();
}

void sync_connection_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_connection_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_connection_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_connection_info_req_descriptor_;
}

const sync_connection_info_req& sync_connection_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

sync_connection_info_req* sync_connection_info_req::default_instance_ = NULL;

sync_connection_info_req* sync_connection_info_req::New() const {
  return new sync_connection_info_req;
}

void sync_connection_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_connection_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_connection_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_connection_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_connection_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_connection_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_connection_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_connection_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_connection_info_req::MergeFrom(const sync_connection_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_connection_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_connection_info_req::CopyFrom(const sync_connection_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_connection_info_req::IsInitialized() const {

  return true;
}

void sync_connection_info_req::Swap(sync_connection_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_connection_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_connection_info_req_descriptor_;
  metadata.reflection = sync_connection_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_connection_info_ack::kProtoidFieldNumber;
const int sync_connection_info_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

sync_connection_info_ack::sync_connection_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_connection_info_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::connect_info*>(&::SProtoSpace::connect_info::default_instance());
}

sync_connection_info_ack::sync_connection_info_ack(const sync_connection_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_connection_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 101;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_connection_info_ack::~sync_connection_info_ack() {
  SharedDtor();
}

void sync_connection_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void sync_connection_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_connection_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_connection_info_ack_descriptor_;
}

const sync_connection_info_ack& sync_connection_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

sync_connection_info_ack* sync_connection_info_ack::default_instance_ = NULL;

sync_connection_info_ack* sync_connection_info_ack::New() const {
  return new sync_connection_info_ack;
}

void sync_connection_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 101;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::connect_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_connection_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.connect_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_connection_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.connect_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_connection_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.connect_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_connection_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_connection_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.connect_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_connection_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_connection_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_connection_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_connection_info_ack::MergeFrom(const sync_connection_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::connect_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_connection_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_connection_info_ack::CopyFrom(const sync_connection_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_connection_info_ack::IsInitialized() const {

  return true;
}

void sync_connection_info_ack::Swap(sync_connection_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_connection_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_connection_info_ack_descriptor_;
  metadata.reflection = sync_connection_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int node_version_info_ntf::kProtoidFieldNumber;
const int node_version_info_ntf::kVersionFieldNumber;
#endif  // !_MSC_VER

node_version_info_ntf::node_version_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node_version_info_ntf::InitAsDefaultInstance() {
}

node_version_info_ntf::node_version_info_ntf(const node_version_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node_version_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 102;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_version_info_ntf::~node_version_info_ntf() {
  SharedDtor();
}

void node_version_info_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void node_version_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_version_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_version_info_ntf_descriptor_;
}

const node_version_info_ntf& node_version_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

node_version_info_ntf* node_version_info_ntf::default_instance_ = NULL;

node_version_info_ntf* node_version_info_ntf::New() const {
  return new node_version_info_ntf;
}

void node_version_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 102;
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node_version_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = node_version_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node_version_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = node_version_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node_version_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = node_version_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node_version_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = node_version_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_version_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node_version_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node_version_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_version_info_ntf::MergeFrom(const node_version_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node_version_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_version_info_ntf::CopyFrom(const node_version_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_version_info_ntf::IsInitialized() const {

  return true;
}

void node_version_info_ntf::Swap(node_version_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node_version_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_version_info_ntf_descriptor_;
  metadata.reflection = node_version_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_conection_info_ntf::kProtoidFieldNumber;
const int sync_conection_info_ntf::kInfoFieldNumber;
#endif  // !_MSC_VER

sync_conection_info_ntf::sync_conection_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_conection_info_ntf::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::connect_info*>(&::SProtoSpace::connect_info::default_instance());
}

sync_conection_info_ntf::sync_conection_info_ntf(const sync_conection_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_conection_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 103;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_conection_info_ntf::~sync_conection_info_ntf() {
  SharedDtor();
}

void sync_conection_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void sync_conection_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_conection_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_conection_info_ntf_descriptor_;
}

const sync_conection_info_ntf& sync_conection_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

sync_conection_info_ntf* sync_conection_info_ntf::default_instance_ = NULL;

sync_conection_info_ntf* sync_conection_info_ntf::New() const {
  return new sync_conection_info_ntf;
}

void sync_conection_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 103;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::connect_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_conection_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_conection_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.connect_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_conection_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_conection_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.connect_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_conection_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_conection_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.connect_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_conection_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_conection_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.connect_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_conection_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_conection_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_conection_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_conection_info_ntf::MergeFrom(const sync_conection_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::connect_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_conection_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_conection_info_ntf::CopyFrom(const sync_conection_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_conection_info_ntf::IsInitialized() const {

  return true;
}

void sync_conection_info_ntf::Swap(sync_conection_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_conection_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_conection_info_ntf_descriptor_;
  metadata.reflection = sync_conection_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int register_listen_info_req::kProtoidFieldNumber;
const int register_listen_info_req::kListenIpFieldNumber;
const int register_listen_info_req::kListenPortFieldNumber;
#endif  // !_MSC_VER

register_listen_info_req::register_listen_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void register_listen_info_req::InitAsDefaultInstance() {
}

register_listen_info_req::register_listen_info_req(const register_listen_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void register_listen_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 104;
  listen_ip_ = 0u;
  listen_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

register_listen_info_req::~register_listen_info_req() {
  SharedDtor();
}

void register_listen_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void register_listen_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_listen_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_listen_info_req_descriptor_;
}

const register_listen_info_req& register_listen_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

register_listen_info_req* register_listen_info_req::default_instance_ = NULL;

register_listen_info_req* register_listen_info_req::New() const {
  return new register_listen_info_req;
}

void register_listen_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 104;
    listen_ip_ = 0u;
    listen_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool register_listen_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_listen_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_listen_ip;
        break;
      }

      // optional uint32 listen_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_ip_)));
          set_has_listen_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listen_port;
        break;
      }

      // optional uint32 listen_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void register_listen_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_listen_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 listen_ip = 2;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->listen_ip(), output);
  }

  // optional uint32 listen_port = 3;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->listen_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* register_listen_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_listen_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 listen_ip = 2;
  if (has_listen_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->listen_ip(), target);
  }

  // optional uint32 listen_port = 3;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->listen_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int register_listen_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_listen_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 listen_ip = 2;
    if (has_listen_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_ip());
    }

    // optional uint32 listen_port = 3;
    if (has_listen_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_listen_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const register_listen_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const register_listen_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_listen_info_req::MergeFrom(const register_listen_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_listen_ip()) {
      set_listen_ip(from.listen_ip());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void register_listen_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_listen_info_req::CopyFrom(const register_listen_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_listen_info_req::IsInitialized() const {

  return true;
}

void register_listen_info_req::Swap(register_listen_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(listen_ip_, other->listen_ip_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata register_listen_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_listen_info_req_descriptor_;
  metadata.reflection = register_listen_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2manager_status_req::kProtoidFieldNumber;
const int gm2manager_status_req::kInfoDetailFieldNumber;
#endif  // !_MSC_VER

gm2manager_status_req::gm2manager_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2manager_status_req::InitAsDefaultInstance() {
}

gm2manager_status_req::gm2manager_status_req(const gm2manager_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2manager_status_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 110;
  info_detail_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2manager_status_req::~gm2manager_status_req() {
  SharedDtor();
}

void gm2manager_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2manager_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2manager_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2manager_status_req_descriptor_;
}

const gm2manager_status_req& gm2manager_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm2manager_status_req* gm2manager_status_req::default_instance_ = NULL;

gm2manager_status_req* gm2manager_status_req::New() const {
  return new gm2manager_status_req;
}

void gm2manager_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 110;
    info_detail_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2manager_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_status_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_detail;
        break;
      }

      // optional uint64 info_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &info_detail_)));
          set_has_info_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2manager_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_status_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->info_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2manager_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_status_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->info_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2manager_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_status_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 info_detail = 2;
    if (has_info_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->info_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2manager_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2manager_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2manager_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2manager_status_req::MergeFrom(const gm2manager_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info_detail()) {
      set_info_detail(from.info_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2manager_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2manager_status_req::CopyFrom(const gm2manager_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2manager_status_req::IsInitialized() const {

  return true;
}

void gm2manager_status_req::Swap(gm2manager_status_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_detail_, other->info_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2manager_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2manager_status_req_descriptor_;
  metadata.reflection = gm2manager_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manager2gm_status_ack::kProtoidFieldNumber;
const int manager2gm_status_ack::kStatusFieldNumber;
const int manager2gm_status_ack::kGameCountFieldNumber;
const int manager2gm_status_ack::kDbCountFieldNumber;
const int manager2gm_status_ack::kGateCountFieldNumber;
const int manager2gm_status_ack::kManagerCountFieldNumber;
const int manager2gm_status_ack::kOverloadPipeIdsFieldNumber;
const int manager2gm_status_ack::kAreaIdFieldNumber;
const int manager2gm_status_ack::kGroupIdFieldNumber;
const int manager2gm_status_ack::kAreaNameFieldNumber;
#endif  // !_MSC_VER

manager2gm_status_ack::manager2gm_status_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manager2gm_status_ack::InitAsDefaultInstance() {
}

manager2gm_status_ack::manager2gm_status_ack(const manager2gm_status_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manager2gm_status_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 111;
  status_ = 0u;
  game_count_ = 0u;
  db_count_ = 0u;
  gate_count_ = 0u;
  manager_count_ = 0u;
  area_id_ = 0u;
  group_id_ = 0u;
  area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manager2gm_status_ack::~manager2gm_status_ack() {
  SharedDtor();
}

void manager2gm_status_ack::SharedDtor() {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (this != default_instance_) {
  }
}

void manager2gm_status_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manager2gm_status_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manager2gm_status_ack_descriptor_;
}

const manager2gm_status_ack& manager2gm_status_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

manager2gm_status_ack* manager2gm_status_ack::default_instance_ = NULL;

manager2gm_status_ack* manager2gm_status_ack::New() const {
  return new manager2gm_status_ack;
}

void manager2gm_status_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 111;
    status_ = 0u;
    game_count_ = 0u;
    db_count_ = 0u;
    gate_count_ = 0u;
    manager_count_ = 0u;
    area_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_id_ = 0u;
    if (has_area_name()) {
      if (area_name_ != &::google::protobuf::internal::kEmptyString) {
        area_name_->clear();
      }
    }
  }
  overload_pipe_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manager2gm_status_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_status_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_db_count;
        break;
      }

      // optional uint32 db_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_count_)));
          set_has_db_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gate_count;
        break;
      }

      // optional uint32 gate_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_count_)));
          set_has_gate_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_manager_count;
        break;
      }

      // optional uint32 manager_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manager_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manager_count_)));
          set_has_manager_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_overload_pipe_ids;
        break;
      }

      // repeated uint64 overload_pipe_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overload_pipe_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_overload_pipe_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_overload_pipe_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_overload_pipe_ids;
        if (input->ExpectTag(64)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_area_name;
        break;
      }

      // optional string area_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_name().data(), this->area_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manager2gm_status_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_status_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_count(), output);
  }

  // optional uint32 db_count = 4;
  if (has_db_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->db_count(), output);
  }

  // optional uint32 gate_count = 5;
  if (has_gate_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gate_count(), output);
  }

  // optional uint32 manager_count = 6;
  if (has_manager_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->manager_count(), output);
  }

  // repeated uint64 overload_pipe_ids = 7;
  for (int i = 0; i < this->overload_pipe_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->overload_pipe_ids(i), output);
  }

  // optional uint32 area_id = 8;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->area_id(), output);
  }

  // optional uint32 group_id = 9;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group_id(), output);
  }

  // optional string area_name = 10;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->area_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manager2gm_status_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_status_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_count(), target);
  }

  // optional uint32 db_count = 4;
  if (has_db_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->db_count(), target);
  }

  // optional uint32 gate_count = 5;
  if (has_gate_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gate_count(), target);
  }

  // optional uint32 manager_count = 6;
  if (has_manager_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->manager_count(), target);
  }

  // repeated uint64 overload_pipe_ids = 7;
  for (int i = 0; i < this->overload_pipe_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->overload_pipe_ids(i), target);
  }

  // optional uint32 area_id = 8;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->area_id(), target);
  }

  // optional uint32 group_id = 9;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group_id(), target);
  }

  // optional string area_name = 10;
  if (has_area_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_name().data(), this->area_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->area_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manager2gm_status_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_status_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 game_count = 3;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 db_count = 4;
    if (has_db_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_count());
    }

    // optional uint32 gate_count = 5;
    if (has_gate_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_count());
    }

    // optional uint32 manager_count = 6;
    if (has_manager_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manager_count());
    }

    // optional uint32 area_id = 8;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 group_id = 9;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional string area_name = 10;
    if (has_area_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_name());
    }

  }
  // repeated uint64 overload_pipe_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->overload_pipe_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->overload_pipe_ids(i));
    }
    total_size += 1 * this->overload_pipe_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manager2gm_status_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manager2gm_status_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manager2gm_status_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manager2gm_status_ack::MergeFrom(const manager2gm_status_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  overload_pipe_ids_.MergeFrom(from.overload_pipe_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_db_count()) {
      set_db_count(from.db_count());
    }
    if (from.has_gate_count()) {
      set_gate_count(from.gate_count());
    }
    if (from.has_manager_count()) {
      set_manager_count(from.manager_count());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_area_name()) {
      set_area_name(from.area_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manager2gm_status_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manager2gm_status_ack::CopyFrom(const manager2gm_status_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manager2gm_status_ack::IsInitialized() const {

  return true;
}

void manager2gm_status_ack::Swap(manager2gm_status_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(status_, other->status_);
    std::swap(game_count_, other->game_count_);
    std::swap(db_count_, other->db_count_);
    std::swap(gate_count_, other->gate_count_);
    std::swap(manager_count_, other->manager_count_);
    overload_pipe_ids_.Swap(&other->overload_pipe_ids_);
    std::swap(area_id_, other->area_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(area_name_, other->area_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manager2gm_status_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manager2gm_status_ack_descriptor_;
  metadata.reflection = manager2gm_status_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2manager_area_info_req::kProtoidFieldNumber;
const int gm2manager_area_info_req::kInfoDetailFieldNumber;
#endif  // !_MSC_VER

gm2manager_area_info_req::gm2manager_area_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2manager_area_info_req::InitAsDefaultInstance() {
}

gm2manager_area_info_req::gm2manager_area_info_req(const gm2manager_area_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2manager_area_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 112;
  info_detail_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2manager_area_info_req::~gm2manager_area_info_req() {
  SharedDtor();
}

void gm2manager_area_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2manager_area_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2manager_area_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2manager_area_info_req_descriptor_;
}

const gm2manager_area_info_req& gm2manager_area_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm2manager_area_info_req* gm2manager_area_info_req::default_instance_ = NULL;

gm2manager_area_info_req* gm2manager_area_info_req::New() const {
  return new gm2manager_area_info_req;
}

void gm2manager_area_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 112;
    info_detail_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2manager_area_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_area_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_detail;
        break;
      }

      // optional uint64 info_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &info_detail_)));
          set_has_info_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2manager_area_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_area_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->info_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2manager_area_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_area_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->info_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2manager_area_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2manager_area_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 info_detail = 2;
    if (has_info_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->info_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2manager_area_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2manager_area_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2manager_area_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2manager_area_info_req::MergeFrom(const gm2manager_area_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info_detail()) {
      set_info_detail(from.info_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2manager_area_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2manager_area_info_req::CopyFrom(const gm2manager_area_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2manager_area_info_req::IsInitialized() const {

  return true;
}

void gm2manager_area_info_req::Swap(gm2manager_area_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_detail_, other->info_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2manager_area_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2manager_area_info_req_descriptor_;
  metadata.reflection = gm2manager_area_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manager2gm_area_info_ack::kProtoidFieldNumber;
const int manager2gm_area_info_ack::kGameserverThisAreaFieldNumber;
const int manager2gm_area_info_ack::kDbserverThisAreaFieldNumber;
const int manager2gm_area_info_ack::kGateserverThisAreaFieldNumber;
#endif  // !_MSC_VER

manager2gm_area_info_ack::manager2gm_area_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manager2gm_area_info_ack::InitAsDefaultInstance() {
}

manager2gm_area_info_ack::manager2gm_area_info_ack(const manager2gm_area_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manager2gm_area_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 113;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manager2gm_area_info_ack::~manager2gm_area_info_ack() {
  SharedDtor();
}

void manager2gm_area_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manager2gm_area_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manager2gm_area_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manager2gm_area_info_ack_descriptor_;
}

const manager2gm_area_info_ack& manager2gm_area_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

manager2gm_area_info_ack* manager2gm_area_info_ack::default_instance_ = NULL;

manager2gm_area_info_ack* manager2gm_area_info_ack::New() const {
  return new manager2gm_area_info_ack;
}

void manager2gm_area_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 113;
  }
  gameserver_this_area_.Clear();
  dbserver_this_area_.Clear();
  gateserver_this_area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manager2gm_area_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_area_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameserver_this_area;
        break;
      }

      // repeated .SProtoSpace.gameserver_info gameserver_this_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserver_this_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameserver_this_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameserver_this_area;
        if (input->ExpectTag(26)) goto parse_dbserver_this_area;
        break;
      }

      // repeated .SProtoSpace.dbserver_info dbserver_this_area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbserver_this_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbserver_this_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbserver_this_area;
        if (input->ExpectTag(34)) goto parse_gateserver_this_area;
        break;
      }

      // repeated .SProtoSpace.gateserver_info gateserver_this_area = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateserver_this_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateserver_this_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gateserver_this_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manager2gm_area_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_area_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.gameserver_info gameserver_this_area = 2;
  for (int i = 0; i < this->gameserver_this_area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameserver_this_area(i), output);
  }

  // repeated .SProtoSpace.dbserver_info dbserver_this_area = 3;
  for (int i = 0; i < this->dbserver_this_area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dbserver_this_area(i), output);
  }

  // repeated .SProtoSpace.gateserver_info gateserver_this_area = 4;
  for (int i = 0; i < this->gateserver_this_area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gateserver_this_area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manager2gm_area_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_area_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.gameserver_info gameserver_this_area = 2;
  for (int i = 0; i < this->gameserver_this_area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameserver_this_area(i), target);
  }

  // repeated .SProtoSpace.dbserver_info dbserver_this_area = 3;
  for (int i = 0; i < this->dbserver_this_area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dbserver_this_area(i), target);
  }

  // repeated .SProtoSpace.gateserver_info gateserver_this_area = 4;
  for (int i = 0; i < this->gateserver_this_area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gateserver_this_area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manager2gm_area_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = manager2gm_area_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.gameserver_info gameserver_this_area = 2;
  total_size += 1 * this->gameserver_this_area_size();
  for (int i = 0; i < this->gameserver_this_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameserver_this_area(i));
  }

  // repeated .SProtoSpace.dbserver_info dbserver_this_area = 3;
  total_size += 1 * this->dbserver_this_area_size();
  for (int i = 0; i < this->dbserver_this_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbserver_this_area(i));
  }

  // repeated .SProtoSpace.gateserver_info gateserver_this_area = 4;
  total_size += 1 * this->gateserver_this_area_size();
  for (int i = 0; i < this->gateserver_this_area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateserver_this_area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manager2gm_area_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manager2gm_area_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manager2gm_area_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manager2gm_area_info_ack::MergeFrom(const manager2gm_area_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameserver_this_area_.MergeFrom(from.gameserver_this_area_);
  dbserver_this_area_.MergeFrom(from.dbserver_this_area_);
  gateserver_this_area_.MergeFrom(from.gateserver_this_area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manager2gm_area_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manager2gm_area_info_ack::CopyFrom(const manager2gm_area_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manager2gm_area_info_ack::IsInitialized() const {

  return true;
}

void manager2gm_area_info_ack::Swap(manager2gm_area_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    gameserver_this_area_.Swap(&other->gameserver_this_area_);
    dbserver_this_area_.Swap(&other->dbserver_this_area_);
    gateserver_this_area_.Swap(&other->gateserver_this_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manager2gm_area_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manager2gm_area_info_ack_descriptor_;
  metadata.reflection = manager2gm_area_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_update_config_req::kProtoidFieldNumber;
const int gm_update_config_req::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

gm_update_config_req::gm_update_config_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_update_config_req::InitAsDefaultInstance() {
}

gm_update_config_req::gm_update_config_req(const gm_update_config_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_update_config_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 114;
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_update_config_req::~gm_update_config_req() {
  SharedDtor();
}

void gm_update_config_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_update_config_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_update_config_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_update_config_req_descriptor_;
}

const gm_update_config_req& gm_update_config_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_update_config_req* gm_update_config_req::default_instance_ = NULL;

gm_update_config_req* gm_update_config_req::New() const {
  return new gm_update_config_req;
}

void gm_update_config_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 114;
    update_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_update_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // optional uint64 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_update_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_update_config_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_update_config_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_update_config_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_update_config_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_update_config_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_update_config_req::MergeFrom(const gm_update_config_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_update_config_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_update_config_req::CopyFrom(const gm_update_config_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_update_config_req::IsInitialized() const {

  return true;
}

void gm_update_config_req::Swap(gm_update_config_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_update_config_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_update_config_req_descriptor_;
  metadata.reflection = gm_update_config_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_update_config_ack::kProtoidFieldNumber;
const int gm_update_config_ack::kRetFieldNumber;
#endif  // !_MSC_VER

gm_update_config_ack::gm_update_config_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_update_config_ack::InitAsDefaultInstance() {
}

gm_update_config_ack::gm_update_config_ack(const gm_update_config_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_update_config_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 115;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_update_config_ack::~gm_update_config_ack() {
  SharedDtor();
}

void gm_update_config_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_update_config_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_update_config_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_update_config_ack_descriptor_;
}

const gm_update_config_ack& gm_update_config_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_update_config_ack* gm_update_config_ack::default_instance_ = NULL;

gm_update_config_ack* gm_update_config_ack::New() const {
  return new gm_update_config_ack;
}

void gm_update_config_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 115;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_update_config_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_update_config_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_update_config_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_update_config_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_update_config_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_update_config_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_update_config_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_update_config_ack::MergeFrom(const gm_update_config_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_update_config_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_update_config_ack::CopyFrom(const gm_update_config_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_update_config_ack::IsInitialized() const {

  return true;
}

void gm_update_config_ack::Swap(gm_update_config_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_update_config_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_update_config_ack_descriptor_;
  metadata.reflection = gm_update_config_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_update_config_ntf::kProtoidFieldNumber;
const int gm_update_config_ntf::kRetFieldNumber;
const int gm_update_config_ntf::kErrServerPipeFieldNumber;
const int gm_update_config_ntf::kRetDebugFieldNumber;
#endif  // !_MSC_VER

gm_update_config_ntf::gm_update_config_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_update_config_ntf::InitAsDefaultInstance() {
}

gm_update_config_ntf::gm_update_config_ntf(const gm_update_config_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_update_config_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 116;
  ret_ = 0;
  err_server_pipe_ = GOOGLE_ULONGLONG(0);
  ret_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_update_config_ntf::~gm_update_config_ntf() {
  SharedDtor();
}

void gm_update_config_ntf::SharedDtor() {
  if (ret_debug_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_debug_;
  }
  if (this != default_instance_) {
  }
}

void gm_update_config_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_update_config_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_update_config_ntf_descriptor_;
}

const gm_update_config_ntf& gm_update_config_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_update_config_ntf* gm_update_config_ntf::default_instance_ = NULL;

gm_update_config_ntf* gm_update_config_ntf::New() const {
  return new gm_update_config_ntf;
}

void gm_update_config_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 116;
    ret_ = 0;
    err_server_pipe_ = GOOGLE_ULONGLONG(0);
    if (has_ret_debug()) {
      if (ret_debug_ != &::google::protobuf::internal::kEmptyString) {
        ret_debug_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_update_config_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_server_pipe;
        break;
      }

      // optional uint64 err_server_pipe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_server_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &err_server_pipe_)));
          set_has_err_server_pipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ret_debug;
        break;
      }

      // optional string ret_debug = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ret_debug().data(), this->ret_debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_update_config_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 err_server_pipe = 3;
  if (has_err_server_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->err_server_pipe(), output);
  }

  // optional string ret_debug = 4;
  if (has_ret_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret_debug().data(), this->ret_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ret_debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_update_config_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 err_server_pipe = 3;
  if (has_err_server_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->err_server_pipe(), target);
  }

  // optional string ret_debug = 4;
  if (has_ret_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret_debug().data(), this->ret_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ret_debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_update_config_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_update_config_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 err_server_pipe = 3;
    if (has_err_server_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->err_server_pipe());
    }

    // optional string ret_debug = 4;
    if (has_ret_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_debug());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_update_config_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_update_config_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_update_config_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_update_config_ntf::MergeFrom(const gm_update_config_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_err_server_pipe()) {
      set_err_server_pipe(from.err_server_pipe());
    }
    if (from.has_ret_debug()) {
      set_ret_debug(from.ret_debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_update_config_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_update_config_ntf::CopyFrom(const gm_update_config_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_update_config_ntf::IsInitialized() const {

  return true;
}

void gm_update_config_ntf::Swap(gm_update_config_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(err_server_pipe_, other->err_server_pipe_);
    std::swap(ret_debug_, other->ret_debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_update_config_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_update_config_ntf_descriptor_;
  metadata.reflection = gm_update_config_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_cancel_update_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

area_cancel_update_req::area_cancel_update_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_cancel_update_req::InitAsDefaultInstance() {
}

area_cancel_update_req::area_cancel_update_req(const area_cancel_update_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_cancel_update_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 122;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_cancel_update_req::~area_cancel_update_req() {
  SharedDtor();
}

void area_cancel_update_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_cancel_update_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_cancel_update_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_cancel_update_req_descriptor_;
}

const area_cancel_update_req& area_cancel_update_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

area_cancel_update_req* area_cancel_update_req::default_instance_ = NULL;

area_cancel_update_req* area_cancel_update_req::New() const {
  return new area_cancel_update_req;
}

void area_cancel_update_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 122;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_cancel_update_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_cancel_update_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_cancel_update_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_cancel_update_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_cancel_update_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_cancel_update_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_cancel_update_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_cancel_update_req::MergeFrom(const area_cancel_update_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_cancel_update_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_cancel_update_req::CopyFrom(const area_cancel_update_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_cancel_update_req::IsInitialized() const {

  return true;
}

void area_cancel_update_req::Swap(area_cancel_update_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_cancel_update_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_cancel_update_req_descriptor_;
  metadata.reflection = area_cancel_update_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_cancel_update_ack::kProtoidFieldNumber;
const int area_cancel_update_ack::kRetFieldNumber;
#endif  // !_MSC_VER

area_cancel_update_ack::area_cancel_update_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_cancel_update_ack::InitAsDefaultInstance() {
}

area_cancel_update_ack::area_cancel_update_ack(const area_cancel_update_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_cancel_update_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 123;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_cancel_update_ack::~area_cancel_update_ack() {
  SharedDtor();
}

void area_cancel_update_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_cancel_update_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_cancel_update_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_cancel_update_ack_descriptor_;
}

const area_cancel_update_ack& area_cancel_update_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

area_cancel_update_ack* area_cancel_update_ack::default_instance_ = NULL;

area_cancel_update_ack* area_cancel_update_ack::New() const {
  return new area_cancel_update_ack;
}

void area_cancel_update_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 123;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_cancel_update_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_cancel_update_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_cancel_update_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_cancel_update_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_cancel_update_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_cancel_update_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_cancel_update_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_cancel_update_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_cancel_update_ack::MergeFrom(const area_cancel_update_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_cancel_update_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_cancel_update_ack::CopyFrom(const area_cancel_update_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_cancel_update_ack::IsInitialized() const {

  return true;
}

void area_cancel_update_ack::Swap(area_cancel_update_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_cancel_update_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_cancel_update_ack_descriptor_;
  metadata.reflection = area_cancel_update_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int config_version_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

config_version_req::config_version_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void config_version_req::InitAsDefaultInstance() {
}

config_version_req::config_version_req(const config_version_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void config_version_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 117;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

config_version_req::~config_version_req() {
  SharedDtor();
}

void config_version_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void config_version_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_version_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_version_req_descriptor_;
}

const config_version_req& config_version_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

config_version_req* config_version_req::default_instance_ = NULL;

config_version_req* config_version_req::New() const {
  return new config_version_req;
}

void config_version_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 117;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool config_version_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void config_version_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* config_version_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int config_version_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_version_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const config_version_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const config_version_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void config_version_req::MergeFrom(const config_version_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void config_version_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_version_req::CopyFrom(const config_version_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config_version_req::IsInitialized() const {

  return true;
}

void config_version_req::Swap(config_version_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata config_version_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_version_req_descriptor_;
  metadata.reflection = config_version_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int config_version_ack::kProtoidFieldNumber;
const int config_version_ack::kUpdateVersionFieldNumber;
const int config_version_ack::kUpdateNameFieldNumber;
#endif  // !_MSC_VER

config_version_ack::config_version_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void config_version_ack::InitAsDefaultInstance() {
}

config_version_ack::config_version_ack(const config_version_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void config_version_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 118;
  update_version_ = GOOGLE_ULONGLONG(0);
  update_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

config_version_ack::~config_version_ack() {
  SharedDtor();
}

void config_version_ack::SharedDtor() {
  if (update_name_ != &::google::protobuf::internal::kEmptyString) {
    delete update_name_;
  }
  if (this != default_instance_) {
  }
}

void config_version_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_version_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return config_version_ack_descriptor_;
}

const config_version_ack& config_version_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

config_version_ack* config_version_ack::default_instance_ = NULL;

config_version_ack* config_version_ack::New() const {
  return new config_version_ack;
}

void config_version_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 118;
    update_version_ = GOOGLE_ULONGLONG(0);
    if (has_update_name()) {
      if (update_name_ != &::google::protobuf::internal::kEmptyString) {
        update_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool config_version_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_version;
        break;
      }

      // optional uint64 update_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_version_)));
          set_has_update_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_name;
        break;
      }

      // optional string update_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_name().data(), this->update_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void config_version_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 update_version = 2;
  if (has_update_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_version(), output);
  }

  // optional string update_name = 3;
  if (has_update_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_name().data(), this->update_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* config_version_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 update_version = 2;
  if (has_update_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update_version(), target);
  }

  // optional string update_name = 3;
  if (has_update_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_name().data(), this->update_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int config_version_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = config_version_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 update_version = 2;
    if (has_update_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_version());
    }

    // optional string update_name = 3;
    if (has_update_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_version_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const config_version_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const config_version_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void config_version_ack::MergeFrom(const config_version_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_update_version()) {
      set_update_version(from.update_version());
    }
    if (from.has_update_name()) {
      set_update_name(from.update_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void config_version_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_version_ack::CopyFrom(const config_version_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config_version_ack::IsInitialized() const {

  return true;
}

void config_version_ack::Swap(config_version_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(update_version_, other->update_version_);
    std::swap(update_name_, other->update_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata config_version_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = config_version_ack_descriptor_;
  metadata.reflection = config_version_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_update_config_req::kProtoidFieldNumber;
const int area_update_config_req::kUpdateVersionFieldNumber;
const int area_update_config_req::kUpdateTimeFieldNumber;
const int area_update_config_req::kUpdateNameFieldNumber;
#endif  // !_MSC_VER

area_update_config_req::area_update_config_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_update_config_req::InitAsDefaultInstance() {
}

area_update_config_req::area_update_config_req(const area_update_config_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_update_config_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 119;
  update_version_ = GOOGLE_ULONGLONG(0);
  update_time_ = GOOGLE_ULONGLONG(0);
  update_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_update_config_req::~area_update_config_req() {
  SharedDtor();
}

void area_update_config_req::SharedDtor() {
  if (update_name_ != &::google::protobuf::internal::kEmptyString) {
    delete update_name_;
  }
  if (this != default_instance_) {
  }
}

void area_update_config_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_update_config_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_update_config_req_descriptor_;
}

const area_update_config_req& area_update_config_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

area_update_config_req* area_update_config_req::default_instance_ = NULL;

area_update_config_req* area_update_config_req::New() const {
  return new area_update_config_req;
}

void area_update_config_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 119;
    update_version_ = GOOGLE_ULONGLONG(0);
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_update_name()) {
      if (update_name_ != &::google::protobuf::internal::kEmptyString) {
        update_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_update_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_version;
        break;
      }

      // optional uint64 update_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_version_)));
          set_has_update_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // optional uint64 update_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_update_name;
        break;
      }

      // optional string update_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_name().data(), this->update_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_update_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 update_version = 2;
  if (has_update_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update_version(), output);
  }

  // optional uint64 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->update_time(), output);
  }

  // optional string update_name = 4;
  if (has_update_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_name().data(), this->update_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->update_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_update_config_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 update_version = 2;
  if (has_update_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update_version(), target);
  }

  // optional uint64 update_time = 3;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->update_time(), target);
  }

  // optional string update_name = 4;
  if (has_update_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_name().data(), this->update_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->update_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_update_config_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 update_version = 2;
    if (has_update_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_version());
    }

    // optional uint64 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional string update_name = 4;
    if (has_update_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_update_config_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_update_config_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_update_config_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_update_config_req::MergeFrom(const area_update_config_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_update_version()) {
      set_update_version(from.update_version());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_update_name()) {
      set_update_name(from.update_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_update_config_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_update_config_req::CopyFrom(const area_update_config_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_update_config_req::IsInitialized() const {

  return true;
}

void area_update_config_req::Swap(area_update_config_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(update_version_, other->update_version_);
    std::swap(update_time_, other->update_time_);
    std::swap(update_name_, other->update_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_update_config_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_update_config_req_descriptor_;
  metadata.reflection = area_update_config_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_update_config_ack::kProtoidFieldNumber;
const int area_update_config_ack::kRetFieldNumber;
const int area_update_config_ack::kRetDebugFieldNumber;
#endif  // !_MSC_VER

area_update_config_ack::area_update_config_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_update_config_ack::InitAsDefaultInstance() {
}

area_update_config_ack::area_update_config_ack(const area_update_config_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_update_config_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 120;
  ret_ = 0;
  ret_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_update_config_ack::~area_update_config_ack() {
  SharedDtor();
}

void area_update_config_ack::SharedDtor() {
  if (ret_debug_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_debug_;
  }
  if (this != default_instance_) {
  }
}

void area_update_config_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_update_config_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_update_config_ack_descriptor_;
}

const area_update_config_ack& area_update_config_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

area_update_config_ack* area_update_config_ack::default_instance_ = NULL;

area_update_config_ack* area_update_config_ack::New() const {
  return new area_update_config_ack;
}

void area_update_config_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 120;
    ret_ = 0;
    if (has_ret_debug()) {
      if (ret_debug_ != &::google::protobuf::internal::kEmptyString) {
        ret_debug_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_update_config_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_debug;
        break;
      }

      // optional string ret_debug = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ret_debug().data(), this->ret_debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_update_config_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional string ret_debug = 3;
  if (has_ret_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret_debug().data(), this->ret_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ret_debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_update_config_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional string ret_debug = 3;
  if (has_ret_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret_debug().data(), this->ret_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret_debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_update_config_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_update_config_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string ret_debug = 3;
    if (has_ret_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_debug());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_update_config_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_update_config_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_update_config_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_update_config_ack::MergeFrom(const area_update_config_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_ret_debug()) {
      set_ret_debug(from.ret_debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_update_config_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_update_config_ack::CopyFrom(const area_update_config_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_update_config_ack::IsInitialized() const {

  return true;
}

void area_update_config_ack::Swap(area_update_config_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(ret_debug_, other->ret_debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_update_config_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_update_config_ack_descriptor_;
  metadata.reflection = area_update_config_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_monitor_data_reset_ntf::kProtoidFieldNumber;
const int area_monitor_data_reset_ntf::kGateNetFieldNumber;
const int area_monitor_data_reset_ntf::kDbMemFieldNumber;
#endif  // !_MSC_VER

area_monitor_data_reset_ntf::area_monitor_data_reset_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_monitor_data_reset_ntf::InitAsDefaultInstance() {
}

area_monitor_data_reset_ntf::area_monitor_data_reset_ntf(const area_monitor_data_reset_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_monitor_data_reset_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 124;
  gate_net_ = false;
  db_mem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_monitor_data_reset_ntf::~area_monitor_data_reset_ntf() {
  SharedDtor();
}

void area_monitor_data_reset_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_monitor_data_reset_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_monitor_data_reset_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_monitor_data_reset_ntf_descriptor_;
}

const area_monitor_data_reset_ntf& area_monitor_data_reset_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

area_monitor_data_reset_ntf* area_monitor_data_reset_ntf::default_instance_ = NULL;

area_monitor_data_reset_ntf* area_monitor_data_reset_ntf::New() const {
  return new area_monitor_data_reset_ntf;
}

void area_monitor_data_reset_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 124;
    gate_net_ = false;
    db_mem_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_monitor_data_reset_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_monitor_data_reset_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_net;
        break;
      }

      // optional bool gate_net = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_net:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gate_net_)));
          set_has_gate_net();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_db_mem;
        break;
      }

      // optional bool db_mem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_mem_)));
          set_has_db_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_monitor_data_reset_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_monitor_data_reset_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bool gate_net = 2;
  if (has_gate_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->gate_net(), output);
  }

  // optional bool db_mem = 3;
  if (has_db_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->db_mem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_monitor_data_reset_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_monitor_data_reset_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bool gate_net = 2;
  if (has_gate_net()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->gate_net(), target);
  }

  // optional bool db_mem = 3;
  if (has_db_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->db_mem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_monitor_data_reset_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_monitor_data_reset_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool gate_net = 2;
    if (has_gate_net()) {
      total_size += 1 + 1;
    }

    // optional bool db_mem = 3;
    if (has_db_mem()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_monitor_data_reset_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_monitor_data_reset_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_monitor_data_reset_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_monitor_data_reset_ntf::MergeFrom(const area_monitor_data_reset_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_gate_net()) {
      set_gate_net(from.gate_net());
    }
    if (from.has_db_mem()) {
      set_db_mem(from.db_mem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_monitor_data_reset_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_monitor_data_reset_ntf::CopyFrom(const area_monitor_data_reset_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_monitor_data_reset_ntf::IsInitialized() const {

  return true;
}

void area_monitor_data_reset_ntf::Swap(area_monitor_data_reset_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(gate_net_, other->gate_net_);
    std::swap(db_mem_, other->db_mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_monitor_data_reset_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_monitor_data_reset_ntf_descriptor_;
  metadata.reflection = area_monitor_data_reset_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int assign_new_master_req::kProtoidFieldNumber;
const int assign_new_master_req::kMasterServerTypeFieldNumber;
const int assign_new_master_req::kMasterServerIdFieldNumber;
#endif  // !_MSC_VER

assign_new_master_req::assign_new_master_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void assign_new_master_req::InitAsDefaultInstance() {
}

assign_new_master_req::assign_new_master_req(const assign_new_master_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void assign_new_master_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 130;
  master_server_type_ = 0u;
  master_server_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

assign_new_master_req::~assign_new_master_req() {
  SharedDtor();
}

void assign_new_master_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void assign_new_master_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* assign_new_master_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return assign_new_master_req_descriptor_;
}

const assign_new_master_req& assign_new_master_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

assign_new_master_req* assign_new_master_req::default_instance_ = NULL;

assign_new_master_req* assign_new_master_req::New() const {
  return new assign_new_master_req;
}

void assign_new_master_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 130;
    master_server_type_ = 0u;
    master_server_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool assign_new_master_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = assign_new_master_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_master_server_type;
        break;
      }

      // optional uint32 master_server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_server_type_)));
          set_has_master_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_master_server_id;
        break;
      }

      // optional uint64 master_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_server_id_)));
          set_has_master_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void assign_new_master_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = assign_new_master_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 master_server_type = 2;
  if (has_master_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->master_server_type(), output);
  }

  // optional uint64 master_server_id = 3;
  if (has_master_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->master_server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* assign_new_master_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = assign_new_master_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 master_server_type = 2;
  if (has_master_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->master_server_type(), target);
  }

  // optional uint64 master_server_id = 3;
  if (has_master_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->master_server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int assign_new_master_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = assign_new_master_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 master_server_type = 2;
    if (has_master_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_server_type());
    }

    // optional uint64 master_server_id = 3;
    if (has_master_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->master_server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void assign_new_master_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const assign_new_master_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const assign_new_master_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void assign_new_master_req::MergeFrom(const assign_new_master_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_master_server_type()) {
      set_master_server_type(from.master_server_type());
    }
    if (from.has_master_server_id()) {
      set_master_server_id(from.master_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void assign_new_master_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assign_new_master_req::CopyFrom(const assign_new_master_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assign_new_master_req::IsInitialized() const {

  return true;
}

void assign_new_master_req::Swap(assign_new_master_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(master_server_type_, other->master_server_type_);
    std::swap(master_server_id_, other->master_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata assign_new_master_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = assign_new_master_req_descriptor_;
  metadata.reflection = assign_new_master_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int register_master_info_req::kProtoidFieldNumber;
const int register_master_info_req::kMasterServerTypeFieldNumber;
const int register_master_info_req::kMasterServerIdFieldNumber;
#endif  // !_MSC_VER

register_master_info_req::register_master_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void register_master_info_req::InitAsDefaultInstance() {
}

register_master_info_req::register_master_info_req(const register_master_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void register_master_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 131;
  master_server_type_ = 0u;
  master_server_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

register_master_info_req::~register_master_info_req() {
  SharedDtor();
}

void register_master_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void register_master_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_master_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_master_info_req_descriptor_;
}

const register_master_info_req& register_master_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

register_master_info_req* register_master_info_req::default_instance_ = NULL;

register_master_info_req* register_master_info_req::New() const {
  return new register_master_info_req;
}

void register_master_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 131;
    master_server_type_ = 0u;
    master_server_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool register_master_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_master_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_master_server_type;
        break;
      }

      // optional uint32 master_server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_server_type_)));
          set_has_master_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_master_server_id;
        break;
      }

      // optional uint64 master_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_server_id_)));
          set_has_master_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void register_master_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_master_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 master_server_type = 2;
  if (has_master_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->master_server_type(), output);
  }

  // optional uint64 master_server_id = 3;
  if (has_master_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->master_server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* register_master_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_master_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 master_server_type = 2;
  if (has_master_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->master_server_type(), target);
  }

  // optional uint64 master_server_id = 3;
  if (has_master_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->master_server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int register_master_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = register_master_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 master_server_type = 2;
    if (has_master_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_server_type());
    }

    // optional uint64 master_server_id = 3;
    if (has_master_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->master_server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_master_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const register_master_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const register_master_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_master_info_req::MergeFrom(const register_master_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_master_server_type()) {
      set_master_server_type(from.master_server_type());
    }
    if (from.has_master_server_id()) {
      set_master_server_id(from.master_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void register_master_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_master_info_req::CopyFrom(const register_master_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_master_info_req::IsInitialized() const {

  return true;
}

void register_master_info_req::Swap(register_master_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(master_server_type_, other->master_server_type_);
    std::swap(master_server_id_, other->master_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata register_master_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_master_info_req_descriptor_;
  metadata.reflection = register_master_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_item_data::kItemIdFieldNumber;
const int mail_item_data::kItemNumFieldNumber;
#endif  // !_MSC_VER

mail_item_data::mail_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_item_data::InitAsDefaultInstance() {
}

mail_item_data::mail_item_data(const mail_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_item_data::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_item_data::~mail_item_data() {
  SharedDtor();
}

void mail_item_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_item_data_descriptor_;
}

const mail_item_data& mail_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

mail_item_data* mail_item_data::default_instance_ = NULL;

mail_item_data* mail_item_data::New() const {
  return new mail_item_data;
}

void mail_item_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_item_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_item_data::MergeFrom(const mail_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_item_data::CopyFrom(const mail_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_item_data::IsInitialized() const {

  return true;
}

void mail_item_data::Swap(mail_item_data* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_item_data_descriptor_;
  metadata.reflection = mail_item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_send_mail_req::kProtoidFieldNumber;
const int gm_send_mail_req::kMailTitleFieldNumber;
const int gm_send_mail_req::kMailContentFieldNumber;
const int gm_send_mail_req::kMailItemsFieldNumber;
const int gm_send_mail_req::kToRoleIdFieldNumber;
#endif  // !_MSC_VER

gm_send_mail_req::gm_send_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_send_mail_req::InitAsDefaultInstance() {
}

gm_send_mail_req::gm_send_mail_req(const gm_send_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_send_mail_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 125;
  mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_send_mail_req::~gm_send_mail_req() {
  SharedDtor();
}

void gm_send_mail_req::SharedDtor() {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  if (this != default_instance_) {
  }
}

void gm_send_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_send_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_send_mail_req_descriptor_;
}

const gm_send_mail_req& gm_send_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_send_mail_req* gm_send_mail_req::default_instance_ = NULL;

gm_send_mail_req* gm_send_mail_req::New() const {
  return new gm_send_mail_req;
}

void gm_send_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 125;
    if (has_mail_title()) {
      if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
        mail_title_->clear();
      }
    }
    if (has_mail_content()) {
      if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
        mail_content_->clear();
      }
    }
    to_role_id_ = GOOGLE_ULONGLONG(0);
  }
  mail_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_send_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_title;
        break;
      }

      // optional string mail_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_title().data(), this->mail_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail_content;
        break;
      }

      // optional string mail_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_content().data(), this->mail_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mail_items;
        break;
      }

      // repeated .SProtoSpace.mail_item_data mail_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mail_items;
        if (input->ExpectTag(40)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_send_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_mail_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string mail_title = 2;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mail_title(), output);
  }

  // optional string mail_content = 3;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mail_content(), output);
  }

  // repeated .SProtoSpace.mail_item_data mail_items = 4;
  for (int i = 0; i < this->mail_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mail_items(i), output);
  }

  // optional uint64 to_role_id = 5;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->to_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_send_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_mail_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string mail_title = 2;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mail_title(), target);
  }

  // optional string mail_content = 3;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mail_content(), target);
  }

  // repeated .SProtoSpace.mail_item_data mail_items = 4;
  for (int i = 0; i < this->mail_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mail_items(i), target);
  }

  // optional uint64 to_role_id = 5;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->to_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_send_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_mail_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string mail_title = 2;
    if (has_mail_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_title());
    }

    // optional string mail_content = 3;
    if (has_mail_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_content());
    }

    // optional uint64 to_role_id = 5;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

  }
  // repeated .SProtoSpace.mail_item_data mail_items = 4;
  total_size += 1 * this->mail_items_size();
  for (int i = 0; i < this->mail_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_send_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_send_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_send_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_send_mail_req::MergeFrom(const gm_send_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_items_.MergeFrom(from.mail_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail_title()) {
      set_mail_title(from.mail_title());
    }
    if (from.has_mail_content()) {
      set_mail_content(from.mail_content());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_send_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_send_mail_req::CopyFrom(const gm_send_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_send_mail_req::IsInitialized() const {

  return true;
}

void gm_send_mail_req::Swap(gm_send_mail_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_title_, other->mail_title_);
    std::swap(mail_content_, other->mail_content_);
    mail_items_.Swap(&other->mail_items_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_send_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_send_mail_req_descriptor_;
  metadata.reflection = gm_send_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_send_broadcast_req::kProtoidFieldNumber;
const int gm_send_broadcast_req::kStartTimeFieldNumber;
const int gm_send_broadcast_req::kEndTimeFieldNumber;
const int gm_send_broadcast_req::kServersFieldNumber;
const int gm_send_broadcast_req::kIntervalsFieldNumber;
const int gm_send_broadcast_req::kContentFieldNumber;
#endif  // !_MSC_VER

gm_send_broadcast_req::gm_send_broadcast_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_send_broadcast_req::InitAsDefaultInstance() {
}

gm_send_broadcast_req::gm_send_broadcast_req(const gm_send_broadcast_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_send_broadcast_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 126;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intervals_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_send_broadcast_req::~gm_send_broadcast_req() {
  SharedDtor();
}

void gm_send_broadcast_req::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gm_send_broadcast_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_send_broadcast_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_send_broadcast_req_descriptor_;
}

const gm_send_broadcast_req& gm_send_broadcast_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_send_broadcast_req* gm_send_broadcast_req::default_instance_ = NULL;

gm_send_broadcast_req* gm_send_broadcast_req::New() const {
  return new gm_send_broadcast_req;
}

void gm_send_broadcast_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 126;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    intervals_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_send_broadcast_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_broadcast_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }

      // optional string start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_time;
        break;
      }

      // optional string end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_servers;
        break;
      }

      // repeated uint32 servers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_servers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_servers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_servers;
        if (input->ExpectTag(40)) goto parse_intervals;
        break;
      }

      // optional uint32 intervals = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intervals_)));
          set_has_intervals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_send_broadcast_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_broadcast_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->start_time(), output);
  }

  // optional string end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->end_time(), output);
  }

  // repeated uint32 servers = 4;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->servers(i), output);
  }

  // optional uint32 intervals = 5;
  if (has_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intervals(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_send_broadcast_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_broadcast_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }

  // optional string end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_time(), target);
  }

  // repeated uint32 servers = 4;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->servers(i), target);
  }

  // optional uint32 intervals = 5;
  if (has_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->intervals(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_send_broadcast_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_broadcast_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // optional string end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

    // optional uint32 intervals = 5;
    if (has_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intervals());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated uint32 servers = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->servers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->servers(i));
    }
    total_size += 1 * this->servers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_send_broadcast_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_send_broadcast_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_send_broadcast_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_send_broadcast_req::MergeFrom(const gm_send_broadcast_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_intervals()) {
      set_intervals(from.intervals());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_send_broadcast_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_send_broadcast_req::CopyFrom(const gm_send_broadcast_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_send_broadcast_req::IsInitialized() const {

  return true;
}

void gm_send_broadcast_req::Swap(gm_send_broadcast_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    servers_.Swap(&other->servers_);
    std::swap(intervals_, other->intervals_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_send_broadcast_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_send_broadcast_req_descriptor_;
  metadata.reflection = gm_send_broadcast_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_send_bulletin_req::kProtoidFieldNumber;
const int gm_send_bulletin_req::kStartTimeFieldNumber;
const int gm_send_bulletin_req::kEndTimeFieldNumber;
const int gm_send_bulletin_req::kChannelFieldNumber;
const int gm_send_bulletin_req::kTitleFieldNumber;
const int gm_send_bulletin_req::kContentFieldNumber;
#endif  // !_MSC_VER

gm_send_bulletin_req::gm_send_bulletin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_send_bulletin_req::InitAsDefaultInstance() {
}

gm_send_bulletin_req::gm_send_bulletin_req(const gm_send_bulletin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_send_bulletin_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 127;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_send_bulletin_req::~gm_send_bulletin_req() {
  SharedDtor();
}

void gm_send_bulletin_req::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gm_send_bulletin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_send_bulletin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_send_bulletin_req_descriptor_;
}

const gm_send_bulletin_req& gm_send_bulletin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_send_bulletin_req* gm_send_bulletin_req::default_instance_ = NULL;

gm_send_bulletin_req* gm_send_bulletin_req::New() const {
  return new gm_send_bulletin_req;
}

void gm_send_bulletin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 127;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    channel_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_send_bulletin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_bulletin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }

      // optional string start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_time;
        break;
      }

      // optional string end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_send_bulletin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_bulletin_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->start_time(), output);
  }

  // optional string end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->end_time(), output);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_send_bulletin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_bulletin_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }

  // optional string end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_time(), target);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_send_bulletin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_bulletin_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // optional string end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

    // optional uint32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_send_bulletin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_send_bulletin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_send_bulletin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_send_bulletin_req::MergeFrom(const gm_send_bulletin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_send_bulletin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_send_bulletin_req::CopyFrom(const gm_send_bulletin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_send_bulletin_req::IsInitialized() const {

  return true;
}

void gm_send_bulletin_req::Swap(gm_send_bulletin_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(channel_, other->channel_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_send_bulletin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_send_bulletin_req_descriptor_;
  metadata.reflection = gm_send_bulletin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_send_shutdown_req::kProtoidFieldNumber;
const int gm_send_shutdown_req::kShutdownTimeFieldNumber;
const int gm_send_shutdown_req::kSignalFieldNumber;
#endif  // !_MSC_VER

gm_send_shutdown_req::gm_send_shutdown_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_send_shutdown_req::InitAsDefaultInstance() {
}

gm_send_shutdown_req::gm_send_shutdown_req(const gm_send_shutdown_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_send_shutdown_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 128;
  shutdown_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_send_shutdown_req::~gm_send_shutdown_req() {
  SharedDtor();
}

void gm_send_shutdown_req::SharedDtor() {
  if (shutdown_time_ != &::google::protobuf::internal::kEmptyString) {
    delete shutdown_time_;
  }
  if (this != default_instance_) {
  }
}

void gm_send_shutdown_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_send_shutdown_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_send_shutdown_req_descriptor_;
}

const gm_send_shutdown_req& gm_send_shutdown_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_send_shutdown_req* gm_send_shutdown_req::default_instance_ = NULL;

gm_send_shutdown_req* gm_send_shutdown_req::New() const {
  return new gm_send_shutdown_req;
}

void gm_send_shutdown_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 128;
    if (has_shutdown_time()) {
      if (shutdown_time_ != &::google::protobuf::internal::kEmptyString) {
        shutdown_time_->clear();
      }
    }
    signal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_send_shutdown_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_shutdown_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shutdown_time;
        break;
      }

      // optional string shutdown_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shutdown_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shutdown_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shutdown_time().data(), this->shutdown_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signal;
        break;
      }

      // optional int32 signal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
          set_has_signal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_send_shutdown_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_shutdown_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string shutdown_time = 2;
  if (has_shutdown_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shutdown_time().data(), this->shutdown_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shutdown_time(), output);
  }

  // optional int32 signal = 3;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_send_shutdown_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_shutdown_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string shutdown_time = 2;
  if (has_shutdown_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shutdown_time().data(), this->shutdown_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shutdown_time(), target);
  }

  // optional int32 signal = 3;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_send_shutdown_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_send_shutdown_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string shutdown_time = 2;
    if (has_shutdown_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shutdown_time());
    }

    // optional int32 signal = 3;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_send_shutdown_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_send_shutdown_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_send_shutdown_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_send_shutdown_req::MergeFrom(const gm_send_shutdown_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shutdown_time()) {
      set_shutdown_time(from.shutdown_time());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_send_shutdown_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_send_shutdown_req::CopyFrom(const gm_send_shutdown_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_send_shutdown_req::IsInitialized() const {

  return true;
}

void gm_send_shutdown_req::Swap(gm_send_shutdown_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shutdown_time_, other->shutdown_time_);
    std::swap(signal_, other->signal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_send_shutdown_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_send_shutdown_req_descriptor_;
  metadata.reflection = gm_send_shutdown_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_open_login_whitelist_req::kProtoidFieldNumber;
const int gm_open_login_whitelist_req::kIsOpenFieldNumber;
#endif  // !_MSC_VER

gm_open_login_whitelist_req::gm_open_login_whitelist_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_open_login_whitelist_req::InitAsDefaultInstance() {
}

gm_open_login_whitelist_req::gm_open_login_whitelist_req(const gm_open_login_whitelist_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_open_login_whitelist_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 132;
  is_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_open_login_whitelist_req::~gm_open_login_whitelist_req() {
  SharedDtor();
}

void gm_open_login_whitelist_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_open_login_whitelist_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_open_login_whitelist_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_open_login_whitelist_req_descriptor_;
}

const gm_open_login_whitelist_req& gm_open_login_whitelist_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_open_login_whitelist_req* gm_open_login_whitelist_req::default_instance_ = NULL;

gm_open_login_whitelist_req* gm_open_login_whitelist_req::New() const {
  return new gm_open_login_whitelist_req;
}

void gm_open_login_whitelist_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 132;
    is_open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_open_login_whitelist_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_open_login_whitelist_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_open_login_whitelist_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_open_login_whitelist_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_open_login_whitelist_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_open_login_whitelist_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_open_login_whitelist_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_open_login_whitelist_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool is_open = 2;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_open_login_whitelist_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_open_login_whitelist_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_open_login_whitelist_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_open_login_whitelist_req::MergeFrom(const gm_open_login_whitelist_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_open_login_whitelist_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_open_login_whitelist_req::CopyFrom(const gm_open_login_whitelist_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_open_login_whitelist_req::IsInitialized() const {

  return true;
}

void gm_open_login_whitelist_req::Swap(gm_open_login_whitelist_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_open_login_whitelist_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_open_login_whitelist_req_descriptor_;
  metadata.reflection = gm_open_login_whitelist_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_add_login_whitelist_req::kProtoidFieldNumber;
const int gm_add_login_whitelist_req::kAccountFieldNumber;
#endif  // !_MSC_VER

gm_add_login_whitelist_req::gm_add_login_whitelist_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_add_login_whitelist_req::InitAsDefaultInstance() {
}

gm_add_login_whitelist_req::gm_add_login_whitelist_req(const gm_add_login_whitelist_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_add_login_whitelist_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 133;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_add_login_whitelist_req::~gm_add_login_whitelist_req() {
  SharedDtor();
}

void gm_add_login_whitelist_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_add_login_whitelist_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_add_login_whitelist_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_add_login_whitelist_req_descriptor_;
}

const gm_add_login_whitelist_req& gm_add_login_whitelist_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmanager_2eproto();
  return *default_instance_;
}

gm_add_login_whitelist_req* gm_add_login_whitelist_req::default_instance_ = NULL;

gm_add_login_whitelist_req* gm_add_login_whitelist_req::New() const {
  return new gm_add_login_whitelist_req;
}

void gm_add_login_whitelist_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 133;
  }
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_add_login_whitelist_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_add_login_whitelist_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // repeated string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account(this->account_size() - 1).data(),
            this->account(this->account_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_add_login_whitelist_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_add_login_whitelist_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated string account = 2;
  for (int i = 0; i < this->account_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->account(i).data(), this->account(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_add_login_whitelist_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_add_login_whitelist_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated string account = 2;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account(i).data(), this->account(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->account(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_add_login_whitelist_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm_add_login_whitelist_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated string account = 2;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_add_login_whitelist_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_add_login_whitelist_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_add_login_whitelist_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_add_login_whitelist_req::MergeFrom(const gm_add_login_whitelist_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_add_login_whitelist_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_add_login_whitelist_req::CopyFrom(const gm_add_login_whitelist_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_add_login_whitelist_req::IsInitialized() const {

  return true;
}

void gm_add_login_whitelist_req::Swap(gm_add_login_whitelist_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    account_.Swap(&other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_add_login_whitelist_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_add_login_whitelist_req_descriptor_;
  metadata.reflection = gm_add_login_whitelist_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
