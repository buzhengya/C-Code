// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_roletype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cm_roletype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* account_role_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_role_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_attr_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_attr_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_skill_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_skill_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* skin_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skin_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* skin_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skin_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_attr_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_attr_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_soul_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_soul_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_show_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_show_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* discover_monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discover_monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* discover_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discover_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* dischapter_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dischapter_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_discover_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_discover_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* drop_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  drop_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_attr_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_attr_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_property_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_skill_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_skill_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* talent_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talent_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_skin_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_skin_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_skin_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_skin_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_equip_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_equip_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_token_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_token_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_gate_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_gate_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_gateserver_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_gateserver_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_system_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_system_reflection_ = NULL;
const ::google::protobuf::Descriptor* chest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chest_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_chest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_chest_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_member_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_member_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_role_equipped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_role_equipped_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_my_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_my_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_base_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_base_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_common_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_common_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* public_role_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  public_role_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_base_3part_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_base_3part_reflection_ = NULL;
const ::google::protobuf::Descriptor* coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_position_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_move_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_room_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_room_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_screen_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_screen_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_character_attr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_character_attr_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_royal_value_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_royal_value_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* character_attr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  character_attr_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* itemid_and_num_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itemid_and_num_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_instance_attaches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_instance_attaches_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_from_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_from_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_template_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_template_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_offical_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_offical_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_offical_reduce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_offical_reduce_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_flower_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_flower_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_flower_send_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_flower_send_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_event_msg_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_event_msg_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* share_officer_upgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  share_officer_upgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* first_award_unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  first_award_unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_send_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_send_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_battle_report_unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_battle_report_unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* talent_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talent_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* talent_battlt_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talent_battlt_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* cli_unit_role_fashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cli_unit_role_fashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* fashions_pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fashions_pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_infos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_infos_reflection_ = NULL;
const ::google::protobuf::Descriptor* match_interval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  match_interval_reflection_ = NULL;
const ::google::protobuf::Descriptor* grade_match_conf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grade_match_conf_reflection_ = NULL;
const ::google::protobuf::Descriptor* single_plot_little_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_plot_little_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* pack_plot_little_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pack_plot_little_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_attr_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_attr_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_out_event_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_out_event_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_out_event_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_out_event_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_single_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_single_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_pack_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_pack_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCommonDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCreateResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eEnterGameAck_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuerySceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreateSceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChat3DSceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAreaState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAwardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EToyCurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQArardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemUseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemUseConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemUseGetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOperaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eKickoutReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEffect_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleSexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESoulSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHeroEquipSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHeroTalismanSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETalismanChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETalismanDestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOperatorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOperatorDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESkillCfgOptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESkinOpenType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFormtionHeroType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHeroInfoChangeTag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eItemPropertyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eItemFlagBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDBGetRedisRoleDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eChestQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMemberStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTeamSize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTeamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTeamPermission_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTeamStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eArenaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGradeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eOfficeTestProgress_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GET_PLOT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECHARACTER_ATTRIBUTE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoyalEventResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TASK_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SKILL_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TALENT_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAYER_SKILL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDiscoveryMoppingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DAILY_FORTUNE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailPriority_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailClientType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailLogicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eSendMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFashionPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFlowerRewardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eEventMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FASHION_POSITION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FASHION_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FASHION_GENDER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRedPtType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cm_5froletype_2eproto() {
  protobuf_AddDesc_cm_5froletype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cm_roletype.proto");
  GOOGLE_CHECK(file != NULL);
  account_role_data_descriptor_ = file->message_type(0);
  static const int account_role_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, db_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, lv_),
  };
  account_role_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_role_data_descriptor_,
      account_role_data::default_instance_,
      account_role_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_role_data));
  unit_attr_data_descriptor_ = file->message_type(1);
  static const int unit_attr_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_attr_data, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_attr_data, value_),
  };
  unit_attr_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_attr_data_descriptor_,
      unit_attr_data::default_instance_,
      unit_attr_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_attr_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_attr_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_attr_data));
  unit_item_data_descriptor_ = file->message_type(2);
  static const int unit_item_data_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, can_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, spawn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, bag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, attrs_),
  };
  unit_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_item_data_descriptor_,
      unit_item_data::default_instance_,
      unit_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_item_data));
  client_skill_data_descriptor_ = file->message_type(3);
  static const int client_skill_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, slot_),
  };
  client_skill_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_skill_data_descriptor_,
      client_skill_data::default_instance_,
      client_skill_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_skill_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_skill_data));
  skin_entry_descriptor_ = file->message_type(4);
  static const int skin_entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_entry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_entry, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_entry, end_time_),
  };
  skin_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skin_entry_descriptor_,
      skin_entry::default_instance_,
      skin_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skin_entry));
  skin_data_descriptor_ = file->message_type(5);
  static const int skin_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_data, active_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_data, skins_),
  };
  skin_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skin_data_descriptor_,
      skin_data::default_instance_,
      skin_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skin_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skin_data));
  hero_base_info_descriptor_ = file->message_type(6);
  static const int hero_base_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, skin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, exp_),
  };
  hero_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_base_info_descriptor_,
      hero_base_info::default_instance_,
      hero_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_base_info));
  hero_attr_value_descriptor_ = file->message_type(7);
  static const int hero_attr_value_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_attr_value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_attr_value, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_attr_value, val_ratio_),
  };
  hero_attr_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_attr_value_descriptor_,
      hero_attr_value::default_instance_,
      hero_attr_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_attr_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_attr_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_attr_value));
  client_soul_data_descriptor_ = file->message_type(8);
  static const int client_soul_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_soul_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_soul_data, slot_),
  };
  client_soul_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_soul_data_descriptor_,
      client_soul_data::default_instance_,
      client_soul_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_soul_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_soul_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_soul_data));
  hero_equip_data_descriptor_ = file->message_type(9);
  static const int hero_equip_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_data, itemtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_data, slot_),
  };
  hero_equip_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_data_descriptor_,
      hero_equip_data::default_instance_,
      hero_equip_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_data));
  talisman_data_descriptor_ = file->message_type(10);
  static const int talisman_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, itemtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, break_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, slot_),
  };
  talisman_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_data_descriptor_,
      talisman_data::default_instance_,
      talisman_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_data));
  hero_show_data_descriptor_ = file->message_type(11);
  static const int hero_show_data_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, awaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, awaken_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, skin_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, talismans_),
  };
  hero_show_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_show_data_descriptor_,
      hero_show_data::default_instance_,
      hero_show_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_show_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_show_data));
  soul_attr_descriptor_ = file->message_type(12);
  static const int soul_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_attr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_attr, value_),
  };
  soul_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_attr_descriptor_,
      soul_attr::default_instance_,
      soul_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_attr));
  soul_info_descriptor_ = file->message_type(13);
  static const int soul_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, tmp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, is_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, is_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, main_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, secondary_attr_),
  };
  soul_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_info_descriptor_,
      soul_info::default_instance_,
      soul_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_info));
  discover_monster_descriptor_ = file->message_type(14);
  static const int discover_monster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_monster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_monster, level_),
  };
  discover_monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discover_monster_descriptor_,
      discover_monster::default_instance_,
      discover_monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discover_monster));
  discover_data_descriptor_ = file->message_type(15);
  static const int discover_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, is_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, mopping_times_remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, pass_star_),
  };
  discover_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discover_data_descriptor_,
      discover_data::default_instance_,
      discover_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discover_data));
  dischapter_data_descriptor_ = file->message_type(16);
  static const int dischapter_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, is_simpleopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, is_diffopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, is_simplepass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, is_diffpass_),
  };
  dischapter_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dischapter_data_descriptor_,
      dischapter_data::default_instance_,
      dischapter_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dischapter_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dischapter_data));
  all_discover_data_descriptor_ = file->message_type(17);
  static const int all_discover_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_discover_data, last_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_discover_data, discover_s_),
  };
  all_discover_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_discover_data_descriptor_,
      all_discover_data::default_instance_,
      all_discover_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_discover_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_discover_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_discover_data));
  drop_data_descriptor_ = file->message_type(18);
  static const int drop_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_data, count_),
  };
  drop_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      drop_data_descriptor_,
      drop_data::default_instance_,
      drop_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(drop_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(drop_data));
  role_attr_pair_descriptor_ = file->message_type(19);
  static const int role_attr_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_pair, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_pair, val_),
  };
  role_attr_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_attr_pair_descriptor_,
      role_attr_pair::default_instance_,
      role_attr_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_attr_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_attr_pair));
  player_property_descriptor_ = file->message_type(20);
  static const int player_property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_property, attr_mod_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_property, attr_mod_per_),
  };
  player_property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_property_descriptor_,
      player_property::default_instance_,
      player_property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_property));
  player_skill_info_descriptor_ = file->message_type(21);
  static const int player_skill_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, skill_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, lv_),
  };
  player_skill_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_skill_info_descriptor_,
      player_skill_info::default_instance_,
      player_skill_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skill_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_skill_info));
  talent_info_descriptor_ = file->message_type(22);
  static const int talent_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_info, talent_status_),
  };
  talent_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talent_info_descriptor_,
      talent_info::default_instance_,
      talent_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talent_info));
  player_skin_info_descriptor_ = file->message_type(23);
  static const int player_skin_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_info, end_time_),
  };
  player_skin_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_skin_info_descriptor_,
      player_skin_info::default_instance_,
      player_skin_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_skin_info));
  player_skin_data_descriptor_ = file->message_type(24);
  static const int player_skin_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_data, wear_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_data, skin_list_),
  };
  player_skin_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_skin_data_descriptor_,
      player_skin_data::default_instance_,
      player_skin_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_skin_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_skin_data));
  player_equip_data_descriptor_ = file->message_type(25);
  static const int player_equip_data_offsets_[1] = {
  };
  player_equip_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_equip_data_descriptor_,
      player_equip_data::default_instance_,
      player_equip_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_equip_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_equip_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_equip_data));
  player_data_descriptor_ = file->message_type(26);
  static const int player_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, skin_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, talents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, talent_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, fight_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, talismans_),
  };
  player_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_data_descriptor_,
      player_data::default_instance_,
      player_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_data));
  account_token_data_descriptor_ = file->message_type(27);
  static const int account_token_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_token_data, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_token_data, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_token_data, lastverifytime_),
  };
  account_token_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_token_data_descriptor_,
      account_token_data::default_instance_,
      account_token_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_token_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_token_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_token_data));
  account_gate_data_descriptor_ = file->message_type(28);
  static const int account_gate_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_gate_data, gateid_),
  };
  account_gate_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_gate_data_descriptor_,
      account_gate_data::default_instance_,
      account_gate_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_gate_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_gate_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_gate_data));
  area_gateserver_info_descriptor_ = file->message_type(29);
  static const int area_gateserver_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, status_),
  };
  area_gateserver_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_gateserver_info_descriptor_,
      area_gateserver_info::default_instance_,
      area_gateserver_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_gateserver_info));
  game_system_descriptor_ = file->message_type(30);
  static const int game_system_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_system, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_system, is_open_),
  };
  game_system_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_system_descriptor_,
      game_system::default_instance_,
      game_system_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_system, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_system, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_system));
  chest_data_descriptor_ = file->message_type(31);
  static const int chest_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chest_data, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chest_data, item_count_),
  };
  chest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chest_data_descriptor_,
      chest_data::default_instance_,
      chest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chest_data));
  role_chest_descriptor_ = file->message_type(32);
  static const int role_chest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_chest, chest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_chest, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_chest, chests_),
  };
  role_chest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_chest_descriptor_,
      role_chest::default_instance_,
      role_chest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_chest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_chest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_chest));
  offical_item_data_descriptor_ = file->message_type(33);
  static const int offical_item_data_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, rank_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, gongdoupower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, fail_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, union_name_),
  };
  offical_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_item_data_descriptor_,
      offical_item_data::default_instance_,
      offical_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_item_data));
  offical_member_data_descriptor_ = file->message_type(34);
  static const int offical_member_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, gongdoupower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, union_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, grade_),
  };
  offical_member_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_member_data_descriptor_,
      offical_member_data::default_instance_,
      offical_member_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_member_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_member_data));
  role_show_role_equipped_descriptor_ = file->message_type(35);
  static const int role_show_role_equipped_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_role_equipped, show_role_id_),
  };
  role_show_role_equipped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_role_equipped_descriptor_,
      role_show_role_equipped::default_instance_,
      role_show_role_equipped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_role_equipped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_role_equipped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_role_equipped));
  offical_apply_data_descriptor_ = file->message_type(36);
  static const int offical_apply_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, rank_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, tm_),
  };
  offical_apply_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_data_descriptor_,
      offical_apply_data::default_instance_,
      offical_apply_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_data));
  offical_apply_my_battle_data_descriptor_ = file->message_type(37);
  static const int offical_apply_my_battle_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, dest_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, dest_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, level_),
  };
  offical_apply_my_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_my_battle_data_descriptor_,
      offical_apply_my_battle_data::default_instance_,
      offical_apply_my_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_my_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_my_battle_data));
  offical_apply_battle_data_descriptor_ = file->message_type(38);
  static const int offical_apply_battle_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, rank_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, failed_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, admit_),
  };
  offical_apply_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_battle_data_descriptor_,
      offical_apply_battle_data::default_instance_,
      offical_apply_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_battle_data));
  rank_base_item_descriptor_ = file->message_type(39);
  static const int rank_base_item_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, avatar_box_),
  };
  rank_base_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_base_item_descriptor_,
      rank_base_item::default_instance_,
      rank_base_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_base_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_base_item));
  rank_common_item_descriptor_ = file->message_type(40);
  static const int rank_common_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_common_item, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_common_item, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_common_item, base_data_),
  };
  rank_common_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_common_item_descriptor_,
      rank_common_item::default_instance_,
      rank_common_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_common_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_common_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_common_item));
  public_role_base_info_descriptor_ = file->message_type(41);
  static const int public_role_base_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, fight_power_),
  };
  public_role_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      public_role_base_info_descriptor_,
      public_role_base_info::default_instance_,
      public_role_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(public_role_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(public_role_base_info));
  role_base_3part_descriptor_ = file->message_type(42);
  static const int role_base_3part_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_3part, base_),
  };
  role_base_3part_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_base_3part_descriptor_,
      role_base_3part::default_instance_,
      role_base_3part_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_3part, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_3part, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_base_3part));
  coordinate_descriptor_ = file->message_type(43);
  static const int coordinate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, y_),
  };
  coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      coordinate_descriptor_,
      coordinate::default_instance_,
      coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(coordinate));
  role_position_descriptor_ = file->message_type(44);
  static const int role_position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_position, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_position, pos_),
  };
  role_position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_position_descriptor_,
      role_position::default_instance_,
      role_position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_position));
  role_move_descriptor_ = file->message_type(45);
  static const int role_move_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_move, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_move, sour_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_move, dest_pos_),
  };
  role_move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_move_descriptor_,
      role_move::default_instance_,
      role_move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_move));
  chat_room_state_descriptor_ = file->message_type(46);
  static const int chat_room_state_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, sexs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, top_),
  };
  chat_room_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_room_state_descriptor_,
      chat_room_state::default_instance_,
      chat_room_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_room_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_room_state));
  plot_screen_info_descriptor_ = file->message_type(47);
  static const int plot_screen_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_screen_info, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_screen_info, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_screen_info, section_ids_),
  };
  plot_screen_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_screen_info_descriptor_,
      plot_screen_info::default_instance_,
      plot_screen_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_screen_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_screen_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_screen_info));
  add_character_attr_info_descriptor_ = file->message_type(48);
  static const int add_character_attr_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_character_attr_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_character_attr_info, change_value_),
  };
  add_character_attr_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_character_attr_info_descriptor_,
      add_character_attr_info::default_instance_,
      add_character_attr_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_character_attr_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_character_attr_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_character_attr_info));
  add_royal_value_info_descriptor_ = file->message_type(49);
  static const int add_royal_value_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_royal_value_info, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_royal_value_info, change_value_),
  };
  add_royal_value_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_royal_value_info_descriptor_,
      add_royal_value_info::default_instance_,
      add_royal_value_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_royal_value_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_royal_value_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_royal_value_info));
  character_attr_info_descriptor_ = file->message_type(50);
  static const int character_attr_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(character_attr_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(character_attr_info, current_value_),
  };
  character_attr_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      character_attr_info_descriptor_,
      character_attr_info::default_instance_,
      character_attr_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(character_attr_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(character_attr_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(character_attr_info));
  itemid_and_num_descriptor_ = file->message_type(51);
  static const int itemid_and_num_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemid_and_num, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemid_and_num, item_count_),
  };
  itemid_and_num_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itemid_and_num_descriptor_,
      itemid_and_num::default_instance_,
      itemid_and_num_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemid_and_num, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemid_and_num, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itemid_and_num));
  mail_attach_descriptor_ = file->message_type(52);
  static const int mail_attach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attach, item_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attach, item_count_),
  };
  mail_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_attach_descriptor_,
      mail_attach::default_instance_,
      mail_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_attach));
  mail_instance_attaches_descriptor_ = file->message_type(53);
  static const int mail_instance_attaches_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance_attaches, attachments_),
  };
  mail_instance_attaches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_instance_attaches_descriptor_,
      mail_instance_attaches::default_instance_,
      mail_instance_attaches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance_attaches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance_attaches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_instance_attaches));
  mail_instance_descriptor_ = file->message_type(54);
  static const int mail_instance_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, mail_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, mail_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, priotity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, attachments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, is_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, is_get_attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, invalid_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, mail_templet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, from_role_officer_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, utc_time_generate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, utc_time_invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, time_generate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, time_invalid_),
  };
  mail_instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_instance_descriptor_,
      mail_instance::default_instance_,
      mail_instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_instance));
  mail_from_role_info_descriptor_ = file->message_type(55);
  static const int mail_from_role_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, office_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, role_id_),
  };
  mail_from_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_from_role_info_descriptor_,
      mail_from_role_info::default_instance_,
      mail_from_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_from_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_from_role_info));
  mail_descriptor_ = file->message_type(56);
  static const int mail_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, invalid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, priotity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, from_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, is_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, is_get_attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, templet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, generate_time_cli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, invalid_time_cli_),
  };
  mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_descriptor_,
      mail::default_instance_,
      mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail));
  mail_template_descriptor_ = file->message_type(57);
  static const int mail_template_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, mail_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, mail_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, priotity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, invalid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, attachment_),
  };
  mail_template_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_template_descriptor_,
      mail_template::default_instance_,
      mail_template_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_template, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_template));
  event_offical_info_descriptor_ = file->message_type(58);
  static const int event_offical_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_info, grade_),
  };
  event_offical_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_offical_info_descriptor_,
      event_offical_info::default_instance_,
      event_offical_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_offical_info));
  event_offical_reduce_descriptor_ = file->message_type(59);
  static const int event_offical_reduce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_reduce, old_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_reduce, new_grade_),
  };
  event_offical_reduce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_offical_reduce_descriptor_,
      event_offical_reduce::default_instance_,
      event_offical_reduce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_reduce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_offical_reduce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_offical_reduce));
  event_flower_info_descriptor_ = file->message_type(60);
  static const int event_flower_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, count_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, default_remark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, custom_remark_),
  };
  event_flower_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_flower_info_descriptor_,
      event_flower_info::default_instance_,
      event_flower_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_flower_info));
  event_flower_send_info_descriptor_ = file->message_type(61);
  static const int event_flower_send_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_send_info, to_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_send_info, flower_info_),
  };
  event_flower_send_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_flower_send_info_descriptor_,
      event_flower_send_info::default_instance_,
      event_flower_send_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_send_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_flower_send_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_flower_send_info));
  db_event_msg_info_descriptor_ = file->message_type(62);
  static const int db_event_msg_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, from_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, is_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, msg_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, msg_content_),
  };
  db_event_msg_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_event_msg_info_descriptor_,
      db_event_msg_info::default_instance_,
      db_event_msg_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_event_msg_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_event_msg_info));
  share_officer_upgrade_descriptor_ = file->message_type(63);
  static const int share_officer_upgrade_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, share_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, head_),
  };
  share_officer_upgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      share_officer_upgrade_descriptor_,
      share_officer_upgrade::default_instance_,
      share_officer_upgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(share_officer_upgrade));
  first_award_unit_descriptor_ = file->message_type(64);
  static const int first_award_unit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_award_unit, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_award_unit, award_),
  };
  first_award_unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      first_award_unit_descriptor_,
      first_award_unit::default_instance_,
      first_award_unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_award_unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(first_award_unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(first_award_unit));
  flower_info_descriptor_ = file->message_type(65);
  static const int flower_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_info, count_num_),
  };
  flower_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_info_descriptor_,
      flower_info::default_instance_,
      flower_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_info));
  flower_send_info_descriptor_ = file->message_type(66);
  static const int flower_send_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, send_flower_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, send_flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, default_remark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, custom_remark_),
  };
  flower_send_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_send_info_descriptor_,
      flower_send_info::default_instance_,
      flower_send_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_send_info));
  offical_battle_report_unit_descriptor_ = file->message_type(67);
  static const int offical_battle_report_unit_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_role_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_old_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, my_new_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_old_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, attacker_new_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, battle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, heros_),
  };
  offical_battle_report_unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_battle_report_unit_descriptor_,
      offical_battle_report_unit::default_instance_,
      offical_battle_report_unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_battle_report_unit));
  talent_data_descriptor_ = file->message_type(68);
  static const int talent_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_data, status_),
  };
  talent_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talent_data_descriptor_,
      talent_data::default_instance_,
      talent_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talent_data));
  talent_battlt_data_descriptor_ = file->message_type(69);
  static const int talent_battlt_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_battlt_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_battlt_data, values_),
  };
  talent_battlt_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talent_battlt_data_descriptor_,
      talent_battlt_data::default_instance_,
      talent_battlt_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_battlt_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talent_battlt_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talent_battlt_data));
  cli_unit_role_fashion_descriptor_ = file->message_type(70);
  static const int cli_unit_role_fashion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_unit_role_fashion, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_unit_role_fashion, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_unit_role_fashion, time_invalid_),
  };
  cli_unit_role_fashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cli_unit_role_fashion_descriptor_,
      cli_unit_role_fashion::default_instance_,
      cli_unit_role_fashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_unit_role_fashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cli_unit_role_fashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cli_unit_role_fashion));
  fashions_pack_descriptor_ = file->message_type(71);
  static const int fashions_pack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fashions_pack, fashions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fashions_pack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fashions_pack, role_name_),
  };
  fashions_pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fashions_pack_descriptor_,
      fashions_pack::default_instance_,
      fashions_pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fashions_pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fashions_pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fashions_pack));
  red_pt_info_descriptor_ = file->message_type(72);
  static const int red_pt_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, is_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, add_count_),
  };
  red_pt_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_info_descriptor_,
      red_pt_info::default_instance_,
      red_pt_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_info));
  red_pt_infos_descriptor_ = file->message_type(73);
  static const int red_pt_infos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_infos, infos_),
  };
  red_pt_infos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_infos_descriptor_,
      red_pt_infos::default_instance_,
      red_pt_infos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_infos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_infos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_infos));
  match_interval_descriptor_ = file->message_type(74);
  static const int match_interval_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_interval, week_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_interval, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_interval, end_time_),
  };
  match_interval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      match_interval_descriptor_,
      match_interval::default_instance_,
      match_interval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_interval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(match_interval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(match_interval));
  grade_match_conf_descriptor_ = file->message_type(75);
  static const int grade_match_conf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grade_match_conf, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grade_match_conf, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grade_match_conf, settle_),
  };
  grade_match_conf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      grade_match_conf_descriptor_,
      grade_match_conf::default_instance_,
      grade_match_conf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grade_match_conf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grade_match_conf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(grade_match_conf));
  single_plot_little_game_descriptor_ = file->message_type(76);
  static const int single_plot_little_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_plot_little_game, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_plot_little_game, state_),
  };
  single_plot_little_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_plot_little_game_descriptor_,
      single_plot_little_game::default_instance_,
      single_plot_little_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_plot_little_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_plot_little_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_plot_little_game));
  pack_plot_little_game_descriptor_ = file->message_type(77);
  static const int pack_plot_little_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pack_plot_little_game, plot_little_game_s_),
  };
  pack_plot_little_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pack_plot_little_game_descriptor_,
      pack_plot_little_game::default_instance_,
      pack_plot_little_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pack_plot_little_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pack_plot_little_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pack_plot_little_game));
  pet_attr_state_descriptor_ = file->message_type(78);
  static const int pet_attr_state_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_attr_state, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_attr_state, value_),
  };
  pet_attr_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_attr_state_descriptor_,
      pet_attr_state::default_instance_,
      pet_attr_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_attr_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_attr_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_attr_state));
  pet_out_event_item_descriptor_ = file->message_type(79);
  static const int pet_out_event_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_item, item_count_),
  };
  pet_out_event_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_out_event_item_descriptor_,
      pet_out_event_item::default_instance_,
      pet_out_event_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_out_event_item));
  pet_out_event_data_descriptor_ = file->message_type(80);
  static const int pet_out_event_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_data, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_data, done_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_data, item_s_),
  };
  pet_out_event_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_out_event_data_descriptor_,
      pet_out_event_data::default_instance_,
      pet_out_event_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_event_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_out_event_data));
  pet_single_data_descriptor_ = file->message_type(81);
  static const int pet_single_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, state_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, cur_lv_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, back_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, out_story_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, out_event_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, last_update_time_),
  };
  pet_single_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_single_data_descriptor_,
      pet_single_data::default_instance_,
      pet_single_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_single_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_single_data));
  pet_pack_data_descriptor_ = file->message_type(82);
  static const int pet_pack_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_pack_data, pet_s_),
  };
  pet_pack_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_pack_data_descriptor_,
      pet_pack_data::default_instance_,
      pet_pack_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_pack_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_pack_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_pack_data));
  UserStatus_descriptor_ = file->enum_type(0);
  eCommonDefine_descriptor_ = file->enum_type(1);
  eCreateResult_descriptor_ = file->enum_type(2);
  eEnterGameAck_descriptor_ = file->enum_type(3);
  EQuerySceneType_descriptor_ = file->enum_type(4);
  ECreateSceneType_descriptor_ = file->enum_type(5);
  ESceneType_descriptor_ = file->enum_type(6);
  EChat3DSceneType_descriptor_ = file->enum_type(7);
  EAreaState_descriptor_ = file->enum_type(8);
  EAwardType_descriptor_ = file->enum_type(9);
  EToyCurrencyType_descriptor_ = file->enum_type(10);
  EQArardType_descriptor_ = file->enum_type(11);
  EBagType_descriptor_ = file->enum_type(12);
  EItemClass_descriptor_ = file->enum_type(13);
  EItemType_descriptor_ = file->enum_type(14);
  EItemUseType_descriptor_ = file->enum_type(15);
  EItemUseConditionType_descriptor_ = file->enum_type(16);
  EItemUseGetType_descriptor_ = file->enum_type(17);
  EOperaType_descriptor_ = file->enum_type(18);
  eKickoutReason_descriptor_ = file->enum_type(19);
  EAttribute_descriptor_ = file->enum_type(20);
  EEffect_descriptor_ = file->enum_type(21);
  ERoleSexType_descriptor_ = file->enum_type(22);
  ESoulSlot_descriptor_ = file->enum_type(23);
  EHeroEquipSlot_descriptor_ = file->enum_type(24);
  EHeroTalismanSlot_descriptor_ = file->enum_type(25);
  ETalismanChangeType_descriptor_ = file->enum_type(26);
  ETalismanDestType_descriptor_ = file->enum_type(27);
  EOperatorType_descriptor_ = file->enum_type(28);
  EOperatorDataType_descriptor_ = file->enum_type(29);
  ESkillCfgOptType_descriptor_ = file->enum_type(30);
  ESkinOpenType_descriptor_ = file->enum_type(31);
  EFormtionHeroType_descriptor_ = file->enum_type(32);
  ERoleEventType_descriptor_ = file->enum_type(33);
  EHeroInfoChangeTag_descriptor_ = file->enum_type(34);
  eItemPropertyType_descriptor_ = file->enum_type(35);
  eItemFlagBits_descriptor_ = file->enum_type(36);
  eDBGetRedisRoleDataType_descriptor_ = file->enum_type(37);
  eChestQuality_descriptor_ = file->enum_type(38);
  eMemberStatus_descriptor_ = file->enum_type(39);
  eTeamSize_descriptor_ = file->enum_type(40);
  eTeamType_descriptor_ = file->enum_type(41);
  eTeamPermission_descriptor_ = file->enum_type(42);
  eTeamStatus_descriptor_ = file->enum_type(43);
  eArenaType_descriptor_ = file->enum_type(44);
  EGrade_descriptor_ = file->enum_type(45);
  EGradeType_descriptor_ = file->enum_type(46);
  eOfficeTestProgress_descriptor_ = file->enum_type(47);
  GET_PLOT_TYPE_descriptor_ = file->enum_type(48);
  ECHARACTER_ATTRIBUTE_TYPE_descriptor_ = file->enum_type(49);
  RANK_TYPE_descriptor_ = file->enum_type(50);
  ERoyalEventResult_descriptor_ = file->enum_type(51);
  TASK_TYPE_descriptor_ = file->enum_type(52);
  SKILL_STATUS_descriptor_ = file->enum_type(53);
  TALENT_STATUS_descriptor_ = file->enum_type(54);
  PLAYER_SKILL_TYPE_descriptor_ = file->enum_type(55);
  eDiscoveryMoppingType_descriptor_ = file->enum_type(56);
  CHAT_TYPE_descriptor_ = file->enum_type(57);
  DAILY_FORTUNE_TYPE_descriptor_ = file->enum_type(58);
  EItemAttrType_descriptor_ = file->enum_type(59);
  eMailPriority_descriptor_ = file->enum_type(60);
  eMailClientType_descriptor_ = file->enum_type(61);
  eMailServerType_descriptor_ = file->enum_type(62);
  eMailLogicType_descriptor_ = file->enum_type(63);
  eSendMailType_descriptor_ = file->enum_type(64);
  eFashionPos_descriptor_ = file->enum_type(65);
  eFlowerRewardType_descriptor_ = file->enum_type(66);
  eEventMsgType_descriptor_ = file->enum_type(67);
  FASHION_POSITION_descriptor_ = file->enum_type(68);
  FASHION_STATE_descriptor_ = file->enum_type(69);
  FASHION_GENDER_descriptor_ = file->enum_type(70);
  eRedPtType_descriptor_ = file->enum_type(71);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cm_5froletype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_role_data_descriptor_, &account_role_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_attr_data_descriptor_, &unit_attr_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_item_data_descriptor_, &unit_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_skill_data_descriptor_, &client_skill_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skin_entry_descriptor_, &skin_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skin_data_descriptor_, &skin_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_base_info_descriptor_, &hero_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_attr_value_descriptor_, &hero_attr_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_soul_data_descriptor_, &client_soul_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_data_descriptor_, &hero_equip_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_data_descriptor_, &talisman_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_show_data_descriptor_, &hero_show_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_attr_descriptor_, &soul_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_info_descriptor_, &soul_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discover_monster_descriptor_, &discover_monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discover_data_descriptor_, &discover_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dischapter_data_descriptor_, &dischapter_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_discover_data_descriptor_, &all_discover_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    drop_data_descriptor_, &drop_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_attr_pair_descriptor_, &role_attr_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_property_descriptor_, &player_property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_skill_info_descriptor_, &player_skill_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talent_info_descriptor_, &talent_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_skin_info_descriptor_, &player_skin_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_skin_data_descriptor_, &player_skin_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_equip_data_descriptor_, &player_equip_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_data_descriptor_, &player_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_token_data_descriptor_, &account_token_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_gate_data_descriptor_, &account_gate_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_gateserver_info_descriptor_, &area_gateserver_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_system_descriptor_, &game_system::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chest_data_descriptor_, &chest_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_chest_descriptor_, &role_chest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_item_data_descriptor_, &offical_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_member_data_descriptor_, &offical_member_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_role_equipped_descriptor_, &role_show_role_equipped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_data_descriptor_, &offical_apply_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_my_battle_data_descriptor_, &offical_apply_my_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_battle_data_descriptor_, &offical_apply_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_base_item_descriptor_, &rank_base_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_common_item_descriptor_, &rank_common_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    public_role_base_info_descriptor_, &public_role_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_base_3part_descriptor_, &role_base_3part::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    coordinate_descriptor_, &coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_position_descriptor_, &role_position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_move_descriptor_, &role_move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_room_state_descriptor_, &chat_room_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_screen_info_descriptor_, &plot_screen_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_character_attr_info_descriptor_, &add_character_attr_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_royal_value_info_descriptor_, &add_royal_value_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    character_attr_info_descriptor_, &character_attr_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itemid_and_num_descriptor_, &itemid_and_num::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_attach_descriptor_, &mail_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_instance_attaches_descriptor_, &mail_instance_attaches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_instance_descriptor_, &mail_instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_from_role_info_descriptor_, &mail_from_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_descriptor_, &mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_template_descriptor_, &mail_template::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_offical_info_descriptor_, &event_offical_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_offical_reduce_descriptor_, &event_offical_reduce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_flower_info_descriptor_, &event_flower_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_flower_send_info_descriptor_, &event_flower_send_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_event_msg_info_descriptor_, &db_event_msg_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    share_officer_upgrade_descriptor_, &share_officer_upgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    first_award_unit_descriptor_, &first_award_unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_info_descriptor_, &flower_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_send_info_descriptor_, &flower_send_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_battle_report_unit_descriptor_, &offical_battle_report_unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talent_data_descriptor_, &talent_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talent_battlt_data_descriptor_, &talent_battlt_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cli_unit_role_fashion_descriptor_, &cli_unit_role_fashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fashions_pack_descriptor_, &fashions_pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_info_descriptor_, &red_pt_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_infos_descriptor_, &red_pt_infos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    match_interval_descriptor_, &match_interval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    grade_match_conf_descriptor_, &grade_match_conf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_plot_little_game_descriptor_, &single_plot_little_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pack_plot_little_game_descriptor_, &pack_plot_little_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_attr_state_descriptor_, &pet_attr_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_out_event_item_descriptor_, &pet_out_event_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_out_event_data_descriptor_, &pet_out_event_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_single_data_descriptor_, &pet_single_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_pack_data_descriptor_, &pet_pack_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cm_5froletype_2eproto() {
  delete account_role_data::default_instance_;
  delete account_role_data_reflection_;
  delete unit_attr_data::default_instance_;
  delete unit_attr_data_reflection_;
  delete unit_item_data::default_instance_;
  delete unit_item_data_reflection_;
  delete client_skill_data::default_instance_;
  delete client_skill_data_reflection_;
  delete skin_entry::default_instance_;
  delete skin_entry_reflection_;
  delete skin_data::default_instance_;
  delete skin_data_reflection_;
  delete hero_base_info::default_instance_;
  delete hero_base_info_reflection_;
  delete hero_attr_value::default_instance_;
  delete hero_attr_value_reflection_;
  delete client_soul_data::default_instance_;
  delete client_soul_data_reflection_;
  delete hero_equip_data::default_instance_;
  delete hero_equip_data_reflection_;
  delete talisman_data::default_instance_;
  delete talisman_data_reflection_;
  delete hero_show_data::default_instance_;
  delete hero_show_data_reflection_;
  delete soul_attr::default_instance_;
  delete soul_attr_reflection_;
  delete soul_info::default_instance_;
  delete soul_info_reflection_;
  delete discover_monster::default_instance_;
  delete discover_monster_reflection_;
  delete discover_data::default_instance_;
  delete discover_data_reflection_;
  delete dischapter_data::default_instance_;
  delete dischapter_data_reflection_;
  delete all_discover_data::default_instance_;
  delete all_discover_data_reflection_;
  delete drop_data::default_instance_;
  delete drop_data_reflection_;
  delete role_attr_pair::default_instance_;
  delete role_attr_pair_reflection_;
  delete player_property::default_instance_;
  delete player_property_reflection_;
  delete player_skill_info::default_instance_;
  delete player_skill_info_reflection_;
  delete talent_info::default_instance_;
  delete talent_info_reflection_;
  delete player_skin_info::default_instance_;
  delete player_skin_info_reflection_;
  delete player_skin_data::default_instance_;
  delete player_skin_data_reflection_;
  delete player_equip_data::default_instance_;
  delete player_equip_data_reflection_;
  delete player_data::default_instance_;
  delete player_data_reflection_;
  delete account_token_data::default_instance_;
  delete account_token_data_reflection_;
  delete account_gate_data::default_instance_;
  delete account_gate_data_reflection_;
  delete area_gateserver_info::default_instance_;
  delete area_gateserver_info_reflection_;
  delete game_system::default_instance_;
  delete game_system_reflection_;
  delete chest_data::default_instance_;
  delete chest_data_reflection_;
  delete role_chest::default_instance_;
  delete role_chest_reflection_;
  delete offical_item_data::default_instance_;
  delete offical_item_data_reflection_;
  delete offical_member_data::default_instance_;
  delete offical_member_data_reflection_;
  delete role_show_role_equipped::default_instance_;
  delete role_show_role_equipped_reflection_;
  delete offical_apply_data::default_instance_;
  delete offical_apply_data_reflection_;
  delete offical_apply_my_battle_data::default_instance_;
  delete offical_apply_my_battle_data_reflection_;
  delete offical_apply_battle_data::default_instance_;
  delete offical_apply_battle_data_reflection_;
  delete rank_base_item::default_instance_;
  delete rank_base_item_reflection_;
  delete rank_common_item::default_instance_;
  delete rank_common_item_reflection_;
  delete public_role_base_info::default_instance_;
  delete public_role_base_info_reflection_;
  delete role_base_3part::default_instance_;
  delete role_base_3part_reflection_;
  delete coordinate::default_instance_;
  delete coordinate_reflection_;
  delete role_position::default_instance_;
  delete role_position_reflection_;
  delete role_move::default_instance_;
  delete role_move_reflection_;
  delete chat_room_state::default_instance_;
  delete chat_room_state_reflection_;
  delete plot_screen_info::default_instance_;
  delete plot_screen_info_reflection_;
  delete add_character_attr_info::default_instance_;
  delete add_character_attr_info_reflection_;
  delete add_royal_value_info::default_instance_;
  delete add_royal_value_info_reflection_;
  delete character_attr_info::default_instance_;
  delete character_attr_info_reflection_;
  delete itemid_and_num::default_instance_;
  delete itemid_and_num_reflection_;
  delete mail_attach::default_instance_;
  delete mail_attach_reflection_;
  delete mail_instance_attaches::default_instance_;
  delete mail_instance_attaches_reflection_;
  delete mail_instance::default_instance_;
  delete mail_instance_reflection_;
  delete mail_from_role_info::default_instance_;
  delete mail_from_role_info_reflection_;
  delete mail::default_instance_;
  delete mail_reflection_;
  delete mail_template::default_instance_;
  delete mail_template_reflection_;
  delete event_offical_info::default_instance_;
  delete event_offical_info_reflection_;
  delete event_offical_reduce::default_instance_;
  delete event_offical_reduce_reflection_;
  delete event_flower_info::default_instance_;
  delete event_flower_info_reflection_;
  delete event_flower_send_info::default_instance_;
  delete event_flower_send_info_reflection_;
  delete db_event_msg_info::default_instance_;
  delete db_event_msg_info_reflection_;
  delete share_officer_upgrade::default_instance_;
  delete share_officer_upgrade_reflection_;
  delete first_award_unit::default_instance_;
  delete first_award_unit_reflection_;
  delete flower_info::default_instance_;
  delete flower_info_reflection_;
  delete flower_send_info::default_instance_;
  delete flower_send_info_reflection_;
  delete offical_battle_report_unit::default_instance_;
  delete offical_battle_report_unit_reflection_;
  delete talent_data::default_instance_;
  delete talent_data_reflection_;
  delete talent_battlt_data::default_instance_;
  delete talent_battlt_data_reflection_;
  delete cli_unit_role_fashion::default_instance_;
  delete cli_unit_role_fashion_reflection_;
  delete fashions_pack::default_instance_;
  delete fashions_pack_reflection_;
  delete red_pt_info::default_instance_;
  delete red_pt_info_reflection_;
  delete red_pt_infos::default_instance_;
  delete red_pt_infos_reflection_;
  delete match_interval::default_instance_;
  delete match_interval_reflection_;
  delete grade_match_conf::default_instance_;
  delete grade_match_conf_reflection_;
  delete single_plot_little_game::default_instance_;
  delete single_plot_little_game_reflection_;
  delete pack_plot_little_game::default_instance_;
  delete pack_plot_little_game_reflection_;
  delete pet_attr_state::default_instance_;
  delete pet_attr_state_reflection_;
  delete pet_out_event_item::default_instance_;
  delete pet_out_event_item_reflection_;
  delete pet_out_event_data::default_instance_;
  delete pet_out_event_data_reflection_;
  delete pet_single_data::default_instance_;
  delete pet_single_data_reflection_;
  delete pet_pack_data::default_instance_;
  delete pet_pack_data_reflection_;
}

void protobuf_AddDesc_cm_5froletype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021cm_roletype.proto\022\013SProtoSpace\"c\n\021acco"
    "unt_role_data\022\017\n\007role_id\030\001 \001(\004\022\021\n\trole_n"
    "ame\030\002 \001(\t\022\021\n\tdb_svr_id\030\003 \001(\004\022\013\n\003sex\030\004 \001("
    "\r\022\n\n\002lv\030\005 \001(\r\",\n\016unit_attr_data\022\013\n\003key\030\001"
    " \001(\r\022\r\n\005value\030\002 \001(\r\"\221\002\n\016unit_item_data\022\017"
    "\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\013\n\003tid\030\003 \001"
    "(\r\022\020\n\010can_mail\030\004 \001(\010\022\014\n\004bind\030\005 \001(\010\022\014\n\004lo"
    "ck\030\006 \001(\010\022\r\n\005dirty\030\007 \001(\010\022\022\n\nspawn_time\030\010 "
    "\001(\r\022\023\n\013expire_time\030\t \001(\r\022\020\n\010bag_type\030\n \001"
    "(\r\022\017\n\007cur_num\030\013 \001(\r\022\r\n\005level\030\014 \001(\r\022\017\n\007qu"
    "ality\030\r \001(\r\022*\n\005attrs\030d \003(\0132\033.SProtoSpace"
    ".unit_attr_data\"I\n\021client_skill_data\022\n\n\002"
    "id\030\001 \001(\r\022\n\n\002lv\030\002 \001(\005\022\016\n\006unlock\030\003 \001(\005\022\014\n\004"
    "slot\030\004 \001(\005\"9\n\nskin_entry\022\n\n\002id\030\001 \001(\r\022\r\n\005"
    "valid\030\002 \001(\010\022\020\n\010end_time\030\003 \001(\004\"F\n\tskin_da"
    "ta\022\021\n\tactive_id\030\001 \001(\r\022&\n\005skins\030\002 \003(\0132\027.S"
    "ProtoSpace.skin_entry\"\220\001\n\016hero_base_info"
    "\022\017\n\007hero_id\030\001 \001(\004\022\023\n\013template_id\030\002 \001(\r\022\r"
    "\n\005level\030\003 \001(\005\022\014\n\004star\030\004 \001(\005\022\017\n\007quality\030\005"
    " \001(\005\022\014\n\004name\030\006 \001(\t\022\017\n\007skin_id\030\007 \001(\005\022\013\n\003e"
    "xp\030\010 \001(\005\"^\n\017hero_attr_value\022%\n\004type\030\001 \002("
    "\0162\027.SProtoSpace.EAttribute\022\016\n\003val\030\002 \001(\005:"
    "\0010\022\024\n\tval_ratio\030\003 \001(\005:\0010\",\n\020client_soul_"
    "data\022\n\n\002id\030\001 \001(\004\022\014\n\004slot\030\002 \001(\005\"0\n\017hero_e"
    "quip_data\022\017\n\007itemTid\030\001 \001(\r\022\014\n\004slot\030\002 \001(\r"
    "\"m\n\rtalisman_data\022\014\n\004uuid\030\001 \001(\004\022\017\n\007itemT"
    "id\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\023\n\013"
    "break_times\030\005 \001(\005\022\014\n\004slot\030\006 \001(\005\"\335\003\n\016hero"
    "_show_data\022\014\n\004uuid\030\001 \001(\004\022\023\n\013template_id\030"
    "\002 \001(\r\022\r\n\005level\030\003 \001(\005\022\014\n\004star\030\004 \001(\005\022\017\n\007qu"
    "ality\030\005 \001(\005\022-\n\005skill\030\006 \003(\0132\036.SProtoSpace"
    ".client_skill_data\022+\n\004soul\030\007 \003(\0132\035.SProt"
    "oSpace.client_soul_data\022\013\n\003exp\030\010 \001(\005\022\016\n\006"
    "awaken\030\t \001(\010\0221\n\013awaken_attr\030\n \003(\0132\034.SPro"
    "toSpace.hero_attr_value\022\016\n\006locked\030\013 \001(\010\022"
    "\023\n\013create_time\030\014 \001(\r\022)\n\tskin_info\030\r \001(\0132"
    "\026.SProtoSpace.skin_data\022\014\n\004name\030\016 \001(\t\022\023\n"
    "\013fight_power\030\017 \001(\003\022,\n\006equips\030\020 \003(\0132\034.SPr"
    "otoSpace.hero_equip_data\022-\n\ttalismans\030\021 "
    "\003(\0132\032.SProtoSpace.talisman_data\"&\n\tsoul_"
    "attr\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\322\001\n\tsoul"
    "_info\022\n\n\002id\030\001 \001(\004\022\016\n\006tmp_id\030\002 \001(\005\022\n\n\002lv\030"
    "\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\017\n\007is_lock\030\006 \001(\010\022\017\n\007i"
    "s_bind\030\007 \001(\010\022\023\n\013create_time\030\010 \001(\r\022)\n\tmai"
    "n_attr\030\t \003(\0132\026.SProtoSpace.soul_attr\022.\n\016"
    "secondary_attr\030\n \003(\0132\026.SProtoSpace.soul_"
    "attr\"-\n\020discover_monster\022\n\n\002id\030\001 \001(\005\022\r\n\005"
    "level\030\002 \001(\005\"u\n\rdiscover_data\022\021\n\tconfig_i"
    "d\030\001 \001(\005\022\017\n\007is_open\030\002 \001(\010\022\017\n\007is_pass\030\003 \001("
    "\010\022\034\n\024mopping_times_remain\030\004 \001(\005\022\021\n\tpass_"
    "star\030\005 \001(\005\"|\n\017dischapter_data\022\021\n\tconfig_"
    "id\030\001 \001(\005\022\025\n\ris_simpleopen\030\002 \001(\010\022\023\n\013is_di"
    "ffopen\030\003 \001(\010\022\025\n\ris_simplepass\030\004 \001(\010\022\023\n\013i"
    "s_diffpass\030\005 \001(\010\"T\n\021all_discover_data\022\017\n"
    "\007last_id\030\001 \001(\005\022.\n\ndiscover_s\030\002 \003(\0132\032.SPr"
    "otoSpace.discover_data\"4\n\tdrop_data\022\n\n\002i"
    "d\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\"F\n\016"
    "role_attr_pair\022$\n\004type\030\001 \001(\0162\026.SProtoSpa"
    "ce.EItemType\022\016\n\003val\030\002 \001(\005:\0010\"z\n\017player_p"
    "roperty\0223\n\rattr_mod_data\030\002 \003(\0132\034.SProtoS"
    "pace.hero_attr_value\0222\n\014attr_mod_per\030\003 \003"
    "(\0132\034.SProtoSpace.hero_attr_value\"\231\001\n\021pla"
    "yer_skill_info\022\023\n\013template_id\030\001 \001(\005\022/\n\014s"
    "kill_status\030\002 \001(\0162\031.SProtoSpace.SKILL_ST"
    "ATUS\0222\n\nskill_type\030\003 \001(\0162\036.SProtoSpace.P"
    "LAYER_SKILL_TYPE\022\n\n\002lv\030\004 \001(\005\"U\n\013talent_i"
    "nfo\022\023\n\013template_id\030\001 \001(\005\0221\n\rtalent_statu"
    "s\030\002 \001(\0162\032.SProtoSpace.TALENT_STATUS\"9\n\020p"
    "layer_skin_info\022\023\n\013template_id\030\001 \002(\r\022\020\n\010"
    "end_time\030\002 \001(\004\"U\n\020player_skin_data\022\017\n\007we"
    "ar_id\030\001 \001(\r\0220\n\tskin_list\030\002 \003(\0132\035.SProtoS"
    "pace.player_skin_info\"\023\n\021player_equip_da"
    "ta\"\301\002\n\013player_data\022\023\n\013template_id\030\001 \002(\r\022"
    "2\n\nskill_data\030\002 \003(\0132\036.SProtoSpace.player"
    "_skill_info\0220\n\tskin_data\030\003 \001(\0132\035.SProtoS"
    "pace.player_skin_data\0222\n\nequip_list\030\004 \001("
    "\0132\036.SProtoSpace.player_equip_data\022)\n\007tal"
    "ents\030\005 \003(\0132\030.SProtoSpace.talent_data\022\024\n\014"
    "talent_grade\030\006 \001(\005\022\023\n\013fight_value\030\007 \001(\005\022"
    "-\n\ttalismans\030\010 \003(\0132\032.SProtoSpace.talisma"
    "n_data\"K\n\022account_token_data\022\r\n\005token\030\001 "
    "\002(\t\022\016\n\006tempid\030\002 \002(\r\022\026\n\016lastverifytime\030\003 "
    "\002(\r\"#\n\021account_gate_data\022\016\n\006gateid\030\001 \002(\004"
    "\"Q\n\024area_gateserver_info\022\017\n\007zone_id\030\001 \001("
    "\r\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\016\n\006status\030\004 "
    "\001(\r\"1\n\013game_system\022\021\n\tsystem_id\030\001 \001(\r\022\017\n"
    "\007is_open\030\002 \001(\010\"1\n\nchest_data\022\017\n\007item_id\030"
    "\001 \001(\r\022\022\n\nitem_count\030\002 \001(\r\"t\n\nrole_chest\022"
    "\020\n\010chest_id\030\001 \001(\004\022+\n\007quality\030\002 \001(\0162\032.SPr"
    "otoSpace.eChestQuality\022\'\n\006chests\030\003 \003(\0132\027"
    ".SProtoSpace.chest_data\"\345\001\n\021offical_item"
    "_data\022$\n\007rank_lv\030\001 \001(\0162\023.SProtoSpace.EGr"
    "ade\022\017\n\007role_id\030\002 \001(\004\022\022\n\nranking_id\030\003 \001(\r"
    "\022\n\n\002lv\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\024\n\014gongdoupowe"
    "r\030\006 \001(\r\022\017\n\007win_num\030\007 \001(\005\022\020\n\010fail_num\030\010 \001"
    "(\005\022\021\n\trole_name\030\t \001(\t\022\014\n\004head\030\n \001(\t\022\022\n\nu"
    "nion_name\030\013 \001(\t\"\255\001\n\023offical_member_data\022"
    "\017\n\007role_id\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\022\022\n\nr"
    "anking_id\030\003 \001(\r\022\n\n\002lv\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r"
    "\022\014\n\004head\030\006 \001(\t\022\024\n\014gongdoupower\030\007 \001(\r\022\022\n\n"
    "union_name\030\010 \001(\t\022\r\n\005grade\030\t \001(\005\"/\n\027role_"
    "show_role_equipped\022\024\n\014show_role_id\030\001 \001(\004"
    "\"\240\001\n\022offical_apply_data\022$\n\007rank_lv\030\001 \001(\016"
    "2\023.SProtoSpace.EGrade\022\017\n\007role_id\030\002 \001(\004\022\021"
    "\n\trole_name\030\003 \001(\t\022\014\n\004head\030\004 \001(\t\022\n\n\002lv\030\005 "
    "\001(\r\022\013\n\003sex\030\006 \001(\r\022\r\n\005grade\030\007 \001(\r\022\n\n\002tm\030\010 "
    "\001(\r\"\310\001\n\034offical_apply_my_battle_data\022\024\n\014"
    "dest_role_id\030\001 \001(\004\022\021\n\tdest_name\030\002 \001(\t\022\021\n"
    "\tdest_head\030\003 \001(\t\022\013\n\003sex\030\004 \001(\r\022\r\n\005score\030\005"
    " \001(\005\022\013\n\003win\030\006 \001(\010\022\r\n\005grade\030\007 \001(\005\022\020\n\010plac"
    "e_id\030\010 \001(\005\022\023\n\013fight_power\030\t \001(\005\022\r\n\005level"
    "\030\n \001(\005\"\311\001\n\031offical_apply_battle_data\022$\n\007"
    "rank_lv\030\001 \001(\0162\023.SProtoSpace.EGrade\022\022\n\nra"
    "nking_id\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\022\013\n\003sex\030\004"
    " \001(\r\022\021\n\trole_name\030\005 \001(\t\022\017\n\007win_num\030\006 \001(\r"
    "\022\022\n\nfailed_num\030\007 \001(\r\022\r\n\005score\030\010 \001(\r\022\r\n\005a"
    "dmit\030\t \001(\010\"t\n\016rank_base_item\022\n\n\002id\030\001 \001(\004"
    "\022\014\n\004name\030\002 \001(\t\022\014\n\004head\030\003 \001(\t\022\n\n\002lv\030\004 \001(\r"
    "\022\013\n\003sex\030\005 \001(\r\022\r\n\005grade\030\006 \001(\r\022\022\n\navatar_b"
    "ox\030\007 \001(\r\"c\n\020rank_common_item\022\020\n\010place_id"
    "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022.\n\tbase_data\030\003 \001(\013"
    "2\033.SProtoSpace.rank_base_item\"\214\001\n\025public"
    "_role_base_info\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001("
    "\t\022\014\n\004head\030\003 \001(\t\022\n\n\002lv\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r"
    "\022\r\n\005grade\030\006 \001(\r\022\016\n\006border\030\007 \001(\005\022\023\n\013fight"
    "_power\030\010 \001(\004\"C\n\017role_base_3part\0220\n\004base\030"
    "\001 \001(\0132\".SProtoSpace.public_role_base_inf"
    "o\"\"\n\ncoordinate\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"A\n"
    "\rrole_position\022\n\n\002id\030\001 \001(\004\022$\n\003pos\030\002 \001(\0132"
    "\027.SProtoSpace.coordinate\"m\n\trole_move\022\n\n"
    "\002id\030\001 \001(\004\022)\n\010sour_pos\030\002 \001(\0132\027.SProtoSpac"
    "e.coordinate\022)\n\010dest_pos\030\003 \001(\0132\027.SProtoS"
    "pace.coordinate\"p\n\017chat_room_state\022\017\n\007ro"
    "om_id\030\001 \001(\005\022\021\n\troom_name\030\002 \001(\t\022\014\n\004sexs\030\003"
    " \003(\005\022\r\n\005token\030\004 \001(\010\022\017\n\007conf_id\030\005 \001(\005\022\013\n\003"
    "top\030\006 \001(\010\"N\n\020plot_screen_info\022\022\n\nchapter"
    "_id\030\001 \001(\r\022\021\n\tscreen_id\030\002 \001(\r\022\023\n\013section_"
    "ids\030\003 \003(\r\"e\n\027add_character_attr_info\0224\n\004"
    "type\030\001 \001(\0162&.SProtoSpace.ECHARACTER_ATTR"
    "IBUTE_TYPE\022\024\n\014change_value\030\002 \001(\005\"<\n\024add_"
    "royal_value_info\022\016\n\006npc_id\030\001 \001(\r\022\024\n\014chan"
    "ge_value\030\002 \001(\005\"b\n\023character_attr_info\0224\n"
    "\004type\030\001 \001(\0162&.SProtoSpace.ECHARACTER_ATT"
    "RIBUTE_TYPE\022\025\n\rcurrent_value\030\002 \001(\005\"5\n\016it"
    "emid_and_num\022\017\n\007item_id\030\001 \001(\r\022\022\n\nitem_co"
    "unt\030\002 \001(\r\"9\n\013mail_attach\022\026\n\016item_config_"
    "id\030\001 \001(\005\022\022\n\nitem_count\030\002 \001(\005\"G\n\026mail_ins"
    "tance_attaches\022-\n\013attachments\030\001 \003(\0132\030.SP"
    "rotoSpace.mail_attach\"\304\005\n\rmail_instance\022"
    "\030\n\020mail_instance_id\030\001 \001(\004\022\026\n\016mail_config"
    "_id\030\002 \001(\005\022,\n\010priotity\030\003 \001(\0162\032.SProtoSpac"
    "e.eMailPriority\022\022\n\nto_role_id\030\004 \001(\004\022\024\n\014f"
    "rom_role_id\030\005 \001(\004\022\r\n\005title\030\006 \001(\t\022\017\n\007cont"
    "ent\030\007 \001(\t\0228\n\013attachments\030\010 \001(\0132#.SProtoS"
    "pace.mail_instance_attaches\022\017\n\007is_read\030\t"
    " \001(\010\022\025\n\ris_get_attach\030\n \001(\010\022\030\n\020invalid_u"
    "tc_time\030\013 \001(\004\022\027\n\017mail_templet_id\030\014 \001(\004\0221"
    "\n\013server_type\030\r \001(\0162\034.SProtoSpace.eMailS"
    "erverType\0221\n\013client_type\030\016 \001(\0162\034.SProtoS"
    "pace.eMailClientType\022\026\n\016from_role_name\030\017"
    " \001(\t\022\034\n\024from_role_avatar_url\030\020 \001(\t\022\033\n\023fr"
    "om_role_gender_id\030\021 \001(\005\022\037\n\027from_role_ava"
    "tar_box_id\030\022 \001(\005\022\027\n\017from_role_level\030\023 \001("
    "\005\022\037\n\027from_role_officer_grade\030\024 \001(\005\022\031\n\021ut"
    "c_time_generate\030\025 \001(\r\022\030\n\020utc_time_invali"
    "d\030\026 \001(\r\022\025\n\rtime_generate\030\027 \001(\r\022\024\n\014time_i"
    "nvalid\030\030 \001(\r\"\234\001\n\023mail_from_role_info\022\021\n\t"
    "role_name\030\001 \001(\t\022\022\n\navatar_url\030\002 \001(\t\022\025\n\ra"
    "vatar_box_id\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\024\n\014off"
    "ice_grade\030\005 \001(\005\022\021\n\tgender_id\030\006 \001(\005\022\017\n\007ro"
    "le_id\030\021 \001(\004\"\377\003\n\004mail\022\n\n\002id\030\001 \001(\004\022\016\n\006cfg_"
    "id\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\017\n\007content\030\004 \001(\t"
    "\022\024\n\014invalid_time\030\005 \001(\004\0221\n\013client_type\030\006 "
    "\001(\0162\034.SProtoSpace.eMailClientType\0221\n\013ser"
    "ver_type\030\007 \001(\0162\034.SProtoSpace.eMailServer"
    "Type\0221\n\rpriotity_type\030\010 \001(\0162\032.SProtoSpac"
    "e.eMailPriority\022\022\n\nto_role_id\030\t \001(\004\022\024\n\014f"
    "rom_role_id\030\n \001(\004\0228\n\016from_role_info\030\013 \001("
    "\0132 .SProtoSpace.mail_from_role_info\0227\n\na"
    "ttachment\030\014 \001(\0132#.SProtoSpace.mail_insta"
    "nce_attaches\022\017\n\007is_read\030\r \001(\010\022\025\n\ris_get_"
    "attach\030\016 \001(\010\022\022\n\ntemplet_id\030\017 \001(\004\022\031\n\021gene"
    "rate_time_cli\030\020 \001(\r\022\030\n\020invalid_time_cli\030"
    "\021 \001(\r\"\327\002\n\rmail_template\022\030\n\020mail_template"
    "_id\030\001 \001(\004\022\026\n\016mail_config_id\030\002 \001(\005\022,\n\010pri"
    "otity\030\003 \001(\0162\032.SProtoSpace.eMailPriority\022"
    "1\n\013server_type\030\004 \001(\0162\034.SProtoSpace.eMail"
    "ServerType\0221\n\013client_type\030\005 \001(\0162\034.SProto"
    "Space.eMailClientType\022\r\n\005title\030\006 \001(\t\022\017\n\007"
    "content\030\007 \001(\t\022\021\n\tlife_time\030\010 \001(\r\022\024\n\014inva"
    "lid_time\030\t \001(\004\0227\n\nattachment\030\n \001(\0132#.SPr"
    "otoSpace.mail_instance_attaches\"#\n\022event"
    "_offical_info\022\r\n\005grade\030\001 \001(\r\"<\n\024event_of"
    "fical_reduce\022\021\n\told_grade\030\001 \001(\r\022\021\n\tnew_g"
    "rade\030\002 \001(\r\"p\n\021event_flower_info\022\023\n\013templ"
    "ate_id\030\001 \001(\005\022\021\n\tcount_num\030\002 \001(\005\022\034\n\024defau"
    "lt_remark_index\030\003 \001(\005\022\025\n\rcustom_remark\030\004"
    " \001(\t\"\207\001\n\026event_flower_send_info\0228\n\014to_ro"
    "le_info\030\001 \001(\0132\".SProtoSpace.public_role_"
    "base_info\0223\n\013flower_info\030\002 \001(\0132\036.SProtoS"
    "pace.event_flower_info\"\205\002\n\021db_event_msg_"
    "info\022\n\n\002id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\017\n\007fro"
    "m_id\030\003 \001(\004\022\021\n\tfrom_name\030\004 \001(\t\022\017\n\007from_lv"
    "\030\005 \001(\r\022\020\n\010from_sex\030\006 \001(\r\022\022\n\nfrom_grade\030\007"
    " \001(\r\022\023\n\013from_border\030\010 \001(\005\022\022\n\nevent_type\030"
    "\t \001(\r\022\020\n\010add_time\030\n \001(\004\022\017\n\007is_read\030\013 \001(\r"
    "\022\027\n\017msg_template_id\030\014 \001(\r\022\023\n\013msg_content"
    "\030\r \001(\t\"\235\001\n\025share_officer_upgrade\022\020\n\010shar"
    "e_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\021\n\trole_name"
    "\030\003 \001(\t\022\013\n\003sex\030\004 \001(\r\022\n\n\002lv\030\005 \001(\r\022\r\n\005grade"
    "\030\006 \001(\r\022\030\n\020world_channel_id\030\007 \001(\r\022\014\n\004head"
    "\030\010 \001(\t\"0\n\020first_award_unit\022\r\n\005grade\030\001 \001("
    "\005\022\r\n\005award\030\002 \001(\010\"C\n\013flower_info\022\014\n\004uuid\030"
    "\001 \001(\004\022\023\n\013template_id\030\002 \001(\005\022\021\n\tcount_num\030"
    "\003 \001(\005\"\253\001\n\020flower_send_info\022\022\n\nto_role_id"
    "\030\001 \001(\004\022\024\n\014to_role_name\030\002 \001(\t\022\037\n\027send_flo"
    "wer_template_id\030\003 \001(\005\022\027\n\017send_flower_num"
    "\030\004 \001(\005\022\034\n\024default_remark_index\030\005 \001(\005\022\025\n\r"
    "custom_remark\030\006 \001(\t\"\256\003\n\032offical_battle_r"
    "eport_unit\022\022\n\nmy_role_id\030\001 \001(\004\022\024\n\014my_rol"
    "e_name\030\002 \001(\t\022\023\n\013my_role_sex\030\003 \001(\005\022\022\n\nmy_"
    "role_lv\030\004 \001(\005\022\031\n\021my_old_ranking_id\030\005 \001(\005"
    "\022\031\n\021my_new_ranking_id\030\006 \001(\005\022\023\n\013attacker_"
    "id\030\007 \001(\004\022\025\n\rattacker_name\030\010 \001(\t\022\024\n\014attac"
    "ker_sex\030\t \001(\005\022\023\n\013attacker_lv\030\n \001(\005\022\037\n\027at"
    "tacker_old_ranking_id\030\014 \001(\005\022\037\n\027attacker_"
    "new_ranking_id\030\r \001(\005\022\013\n\003win\030\016 \001(\010\022\023\n\013bat"
    "tle_time\030\017 \001(\005\022\021\n\tbattle_id\030\020 \001(\004\022\r\n\005gra"
    "de\030\021 \001(\005\022*\n\005heros\030\022 \003(\0132\033.SProtoSpace.he"
    "ro_base_info\"E\n\013talent_data\022\n\n\002id\030\001 \001(\005\022"
    "*\n\006status\030\002 \001(\0162\032.SProtoSpace.TALENT_STA"
    "TUS\"K\n\022talent_battlt_data\022%\n\004type\030\001 \001(\0162"
    "\027.SProtoSpace.EAttribute\022\016\n\006values\030\002 \001(\002"
    "\"N\n\025cli_unit_role_fashion\022\021\n\tconfig_id\030\001"
    " \001(\005\022\014\n\004uuid\030\002 \001(\004\022\024\n\014time_invalid\030\003 \001(\r"
    "\"i\n\rfashions_pack\0224\n\010fashions\030\001 \003(\0132\".SP"
    "rotoSpace.cli_unit_role_fashion\022\017\n\007role_"
    "id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\"j\n\013red_pt_in"
    "fo\022(\n\007type_id\030\001 \001(\0162\027.SProtoSpace.eRedPt"
    "Type\022\017\n\007is_show\030\002 \001(\010\022\r\n\005count\030\003 \001(\005\022\021\n\t"
    "add_count\030\004 \001(\005\"7\n\014red_pt_infos\022\'\n\005infos"
    "\030\001 \003(\0132\030.SProtoSpace.red_pt_info\"H\n\016matc"
    "h_interval\022\020\n\010week_day\030\001 \001(\005\022\022\n\nstart_ti"
    "me\030\002 \001(\005\022\020\n\010end_time\030\003 \001(\005\"z\n\020grade_matc"
    "h_conf\022\r\n\005grade\030\001 \001(\005\022*\n\005apply\030\002 \003(\0132\033.S"
    "ProtoSpace.match_interval\022+\n\006settle\030\003 \003("
    "\0132\033.SProtoSpace.match_interval\"8\n\027single"
    "_plot_little_game\022\016\n\006cfg_id\030\001 \001(\005\022\r\n\005sta"
    "te\030\002 \001(\005\"Y\n\025pack_plot_little_game\022@\n\022plo"
    "t_little_game_s\030\001 \003(\0132$.SProtoSpace.sing"
    "le_plot_little_game\"-\n\016pet_attr_state\022\014\n"
    "\004type\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"9\n\022pet_out_ev"
    "ent_item\022\017\n\007item_id\030\001 \001(\005\022\022\n\nitem_count\030"
    "\002 \001(\005\"h\n\022pet_out_event_data\022\016\n\006cfg_id\030\001 "
    "\001(\005\022\021\n\tdone_time\030\002 \001(\005\022/\n\006item_s\030\003 \003(\0132\037"
    ".SProtoSpace.pet_out_event_item\"\210\002\n\017pet_"
    "single_data\022\016\n\006cfg_id\030\001 \001(\005\022,\n\007state_s\030\002"
    " \003(\0132\033.SProtoSpace.pet_attr_state\022\n\n\002lv\030"
    "\003 \001(\005\022\022\n\ncur_lv_exp\030\004 \001(\005\022\020\n\010out_time\030\005 "
    "\001(\r\022\021\n\tback_time\030\006 \001(\r\022\024\n\014out_story_id\030\007"
    " \001(\005\0224\n\013out_event_s\030\010 \003(\0132\037.SProtoSpace."
    "pet_out_event_data\022\014\n\004name\030\t \001(\t\022\030\n\020last"
    "_update_time\030\n \001(\r\"<\n\rpet_pack_data\022+\n\005p"
    "et_s\030\001 \003(\0132\034.SProtoSpace.pet_single_data"
    "*%\n\nUserStatus\022\013\n\007OFFLINE\020\000\022\n\n\006ONLINE\020\001*"
    "\366\005\n\reCommonDefine\022\027\n\022max_role_hero_size\020"
    "\200\001\022\026\n\021max_role_bag_size\020\200\020\022\030\n\024max_hero_s"
    "ymbol_size\020\006\022\027\n\023max_role_skill_size\020\014\022\031\n"
    "\025max_role_friends_size\0202\022\027\n\023max_hero_mod"
    "el_size\020\003\022\033\n\027max_daily_activity_size\020 \022\027"
    "\n\023max_team_heros_size\020\013\022\026\n\022max_rs_reward"
    "_size\020\n\022\032\n\025max_largemap_box_size\020\200\002\022\037\n\032m"
    "ax_sevenday_activity_size\020\274\005\022\026\n\022max_skil"
    "l_cfg_size\020\003\022\024\n\014max_gold_num\020\377\223\353\334\003\022\024\n\014ma"
    "x_jade_num\020\377\223\353\334\003\022\025\n\rmax_merit_num\020\377\223\353\334\003\022"
    "\030\n\020max_activity_num\020\377\223\353\334\003\022\035\n\025max_tailent"
    "_point_num\020\377\223\353\334\003\022\030\n\024MAX_ROLE_NAME_LENGTH"
    "\020 \022\030\n\024MAX_HERO_NAME_LENGTH\020\020\022\031\n\025MAX_GUIL"
    "D_NAME_LENGTH\020 \022\030\n\024MAX_SIGNATURE_LENGTH\020"
    " \022\026\n\022MAX_SHOW_HERO_SIZE\020\006\022\035\n\031MAX_SHOW_SI"
    "GNATURE_LENGTH\020Z\022\027\n\022MAX_COMMENT_LENGTH\020\200"
    "\002\022\027\n\023MAX_POSITION_LENGTH\020 \022\032\n\026MAX_FORMAT"
    "ION_HERO_NUM\020\004\022\020\n\014MAX_ROLE_AGE\020d\022\020\n\014MIN_"
    "ROLE_AGE\020\001\022\030\n\024MAX_HERO_QUALITY_NUM\020\024\032\002\020\001"
    "*\233\001\n\reCreateResult\022\024\n\020create_result_ok\020\000"
    "\022\026\n\022create_result_fail\020\001\022\033\n\027create_resul"
    "t_duplicate\020\002\022 \n\034create_result_sensitive"
    "_word\020\003\022\035\n\031create_result_state_error\020\004*\271"
    "\001\n\reEnterGameAck\022\023\n\017ENTER_GAME_SUCC\020\000\022 \n"
    "\034ENTER_GAME_CAN_NOT_FIND_ROLE\020\001\022\032\n\026ENTER"
    "_GAME_STATE_ERROR\020\002\022 \n\034ENTER_GAME_CAN_NO"
    "T_FIND_GAME\020\003\022\030\n\024ENTER_GAME_IN_BATTLE\020\004\022"
    "\031\n\025ENTER_GAME_LOAD_ERROR\020\005*{\n\017EQueryScen"
    "eType\022\032\n\026QUERY_SCENE_TYPE_LOGIN\020\000\022&\n\"QUE"
    "RY_SCENE_TYPE_SWITCH_SCENE_TYPE\020\001\022$\n QUE"
    "RY_SCENE_TYPE_SWITCH_SCENE_ID\020\002*K\n\020ECrea"
    "teSceneType\022\031\n\025CREATE_SCENE_TYPE_SYS\020\000\022\034"
    "\n\030CREATE_SCENE_TYPE_SWITCH\020\001*M\n\nESceneTy"
    "pe\022\026\n\022SCENE_TYPE_DEFAULT\020\001\022\022\n\016SCENE_TYPE"
    "_1V1\020\002\022\023\n\017SCENE_CHAT_ROOM\020\003*F\n\020EChat3DSc"
    "eneType\022\030\n\024CHAT3DSCENE_ORDINARY\020\000\022\030\n\024CHA"
    "T3DSCENE_ROMANTIC\020\001*h\n\nEAreaState\022\023\n\017ARE"
    "A_STATE_GOOD\020\001\022\023\n\017AREA_STATE_BUSY\020\002\022\024\n\020A"
    "REA_STATE_CROWD\020\003\022\032\n\026AREA_STATE_MAINTENA"
    "NCE\020\004*\217\001\n\nEAwardType\022\016\n\nAWARD_COIN\020\001\022\022\n\016"
    "AWARD_DIAMONDS\020\002\022\023\n\017AWARD_CORPS_EXP\020\003\022\026\n"
    "\022AWARD_TOY_CURRENCY\020\004\022\016\n\nAWARD_ITEM\020\005\022\016\n"
    "\nAWARD_HERO\020\006\022\020\n\014AWARD_ENERGY\020\007*\202\002\n\020EToy"
    "CurrencyType\022\026\n\022TOY_CURRENCY_ARENA\020\001\022\026\n\022"
    "TOY_CURRENCY_EXPED\020\002\022\025\n\021TOY_CURRENCY_MOB"
    "A\020\003\022\033\n\027TOY_CURRENCY_SOCIETYCON\020\004\022\033\n\027TOY_"
    "CURRENCY_SOCIETYEXP\020\005\022\030\n\024TOY_CURRENCY_CR"
    "YSTAL\020\006\022\027\n\023TOY_CURRENCY_VIGOUR\020\007\022\034\n\030TOY_"
    "CURRENCY_PEERAGE_EXP\020\010\022\034\n\030TOY_CURRENCY_Z"
    "ODIAC_SOUL\020\t*j\n\013EQArardType\022\023\n\017QARARDTYP"
    "E_ITEM\020\001\022\023\n\017QARARDTYPE_DROP\020\002\022\024\n\020QARARDT"
    "YPE_ROYAL\020\003\022\033\n\027QARARDTYPE_ADD_HERO_EXP\020\004"
    "*a\n\010EBagType\022\021\n\rROLE_MAIN_BAG\020\000\022\024\n\020ROLE_"
    "FASHION_BAG\020\001\022\025\n\021ROLE_TALISMAN_BAG\020\002\022\025\n\021"
    "HERO_TALISMAN_BAG\020\003*\366\002\n\nEItemClass\022\023\n\017EI"
    "temClass_None\020\000\022\024\n\020EItemClass_Money\020\001\022\023\n"
    "\017EItemClass_Hero\020\003\022\024\n\020EItemClass_Cloth\020\004"
    "\022\023\n\017EItemClass_Item\020\005\022\024\n\020EItemClass_Equi"
    "p\020\006\022\025\n\021EItemClass_Debris\020\007\022\024\n\020EItemClass"
    "_CHEST\020\010\022\025\n\021EItemClass_FLOWER\020\t\022\034\n\030EItem"
    "Class_Upgrade_Equip\020\n\022\033\n\027EItemClass_Upgr"
    "ade_Item\020\013\022\027\n\023EItemClass_Talisman\020\014\022\023\n\017E"
    "ItemClass_Gift\020\r\022\036\n\032EItemClass_Talisman_"
    "Debris\020\016\022\032\n\026EItemClass_RolePetFood\020\017*\347\007\n"
    "\tEItemType\022\022\n\016EITEMTYPE_None\020\000\022\022\n\016EITEMT"
    "YPE_GOLD\020e\022\022\n\016EITEMTYPE_JADE\020f\022\023\n\017EITEMT"
    "YPE_POWER\020g\022\024\n\020EITEMTYPE_ENERGY\020h\022\021\n\rEIT"
    "EMTYPE_EXP\020i\022\030\n\024EITEMTYPE_SKILLPOINT\020j\022\026"
    "\n\022EITEMTYPE_INTIMACY\020k\022\023\n\017EITEMTYPE_MERI"
    "T\020l\022\033\n\027EITEMTYPE_TASK_ACTIVITY\020m\022\032\n\026EITE"
    "MTYPE_TALENT_POINT\020n\022\030\n\023EITEMTYPE_HERO_C"
    "ARD\020\255\002\022\026\n\021EITEMTYPE_CLOTHES\020\221\003\022\033\n\026EITEMT"
    "YPE_FASHION_TIME\020\222\003\022\026\n\021EITEMTYPE_FASHION"
    "\020\223\003\022\032\n\025EITEMTYPE_ITEM_NORMAL\020\365\003\022\031\n\024EITEM"
    "TYPE_3DCHAT_TOP\020\366\003\022\032\n\025EITEMTYPE_3DCHAT_N"
    "AME\020\367\003\022\033\n\026EITEMTYPE_EQUIP_NORMAL\020\331\004\022\037\n\032E"
    "ITEMTYPE_FAMOUS_MAN_SHARD\020\275\005\022\033\n\026EITEMTYP"
    "E_RANDOM_CHEST\020\241\006\022\033\n\026EITEMTYPE_CHOOSE_CH"
    "EST\020\242\006\022\025\n\020EITEMTYPE_FLOWER\020\205\007\022\036\n\031EITEMTY"
    "PE_UPGRADE_EQUIP_1\020\351\007\022\036\n\031EITEMTYPE_UPGRA"
    "DE_EQUIP_2\020\352\007\022\036\n\031EITEMTYPE_UPGRADE_EQUIP"
    "_3\020\353\007\022\036\n\031EITEMTYPE_UPGRADE_EQUIP_4\020\354\007\022\036\n"
    "\031EITEMTYPE_UPGRADE_EQUIP_5\020\355\007\022\036\n\031EITEMTY"
    "PE_UPGRADE_EQUIP_6\020\356\007\022\033\n\026EITEMTYPE_UPGRA"
    "DE_ITEM\020\315\010\022\027\n\022EITEMTYPE_TALISMAN\020\261\t\022\033\n\026E"
    "ITEMTYPE_TALISMAN_EXP\020\262\t\022\032\n\025EITEMTYPE_GI"
    "FT_NOEMAL\020\225\n\022\036\n\031EITEMTYPE_GIFT_FAMOUS_MA"
    "N\020\226\n\022\026\n\022EITEMTYPE_WINE_CUP\020p\022\022\n\016EITEMTYP"
    "E_WINE\020o\022\034\n\027EITEMTYPE_ROLE_PET_FOOD\020\335\013*\236"
    "\001\n\014EItemUseType\022\033\n\027EItemUseType_NO_CAN_U"
    "SE\020\000\022\031\n\025EItemUseType_GET_ITEM\020\001\022!\n\035EItem"
    "UseType_GET_RESOURE_ITEM\020\002\022\030\n\024EItemUseTy"
    "pe_JUMP_UI\020\003\022\031\n\025EItemUseType_ADD_TIME\020\004*"
    "\242\001\n\025EItemUseConditionType\022!\n\035EITEM_USE_C"
    "ONDITION_TYPE_NONE\020\000\022\037\n\033EITEM_USE_CONDIT"
    "ION_TYPE_LV\020\001\022 \n\034EITEM_USE_CONDITION_TYP"
    "E_VIP\020\002\022#\n\037EITEM_USE_CONDITION_TYPE_OFFI"
    "CE\020\003*Q\n\017EItemUseGetType\022\037\n\033EITEM_USE_GET"
    "_TYPE_DIRECTOR\020\000\022\035\n\031EITEM_USE_GET_TYPE_C"
    "HOOSE\020\001*N\n\nEOperaType\022\022\n\016OPERA_TYPE_ADD\020"
    "\000\022\025\n\021OPERA_TYPE_DELETE\020\001\022\025\n\021OPERA_TYPE_U"
    "PDATE\020\002*)\n\016eKickoutReason\022\027\n\023KickoutReas"
    "on_login\020\001*\363\004\n\nEAttribute\022\016\n\nATTR_CURHP\020"
    "\000\022\016\n\nATTR_MAXHP\020\001\022\014\n\010ATTR_ATK\020\002\022\020\n\014ATTR_"
    "PHY_DEF\020\003\022\020\n\014ATTR_MAG_DEF\020\004\022\022\n\016ATTR_ATK_"
    "SPEED\020\005\022\r\n\tATTR_CRIT\020\006\022\r\n\tATTR_FLEX\020\007\022\021\n"
    "\rATTR_CRIT_DMG\020\010\022\025\n\021ATTR_CRIT_DMG_DEF\020\t\022"
    "\023\n\017ATTR_EFFECT_HIT\020\n\022\023\n\017ATTR_EFFECT_DEF\020"
    "\013\022\014\n\010ATTR_HIT\020\014\022\016\n\nATTR_DODGE\020\r\022\017\n\013ATTR_"
    "PIERCE\020\016\022\024\n\020ATTR_CURE_MODIFY\020\017\022\026\n\022ATTR_B"
    "ECURE_MODIFY\020\020\022\030\n\024ATTR_MAXHP_FINAL_PER\020\021"
    "\022\032\n\026ATTR_HURT_OTHER_MODIFY\020\022\022\027\n\023ATTR_BE_"
    "HURT_MODIFY\020\023\022\022\n\016ATTR_MAX_POWER\020\024\022\017\n\013ATT"
    "R_MAX_EP\020\025\022\017\n\013ATTR_MAX_SP\020\026\022\023\n\017ATTR_EXP_"
    "MODIFY\020\027\022\025\n\021ATTR_MONEY_MODIFY\020\030\022\024\n\020ATTR_"
    "DROP_MODIFY\020\031\022\013\n\007ATTR_HP\020\032\022\016\n\nATTR_POWER"
    "\020\033\022\013\n\007ATTR_EP\020\034\022\013\n\007ATTR_SP\020\035\022\017\n\013ATTR_MAX"
    "_AP\020\036\022\013\n\007ATTR_AP\020\037\022\020\n\014ATTR_INIT_SP\020 \032\002\020\001"
    "*\233\004\n\007EEffect\022\017\n\013EFF_ADD_DMG\020\001\022\017\n\013EFF_ADD"
    "_ATK\020\002\022\017\n\013EFF_ADD_DEF\020\003\022\020\n\014EFF_ADD_CRIT\020"
    "\004\022\021\n\rEFF_ADD_SPEED\020\005\022\024\n\020EFF_ADD_CRIT_DMG"
    "\020\006\022\017\n\013EFF_ADD_RES\020\007\022\017\n\013EFF_ADD_ACC\020\010\022\017\n\013"
    "EFF_GUILDER\020\t\022\022\n\016EFF_REDUCE_DMG\020\n\022\022\n\016EFF"
    "_REDUCE_ATK\020\013\022\022\n\016EFF_REDUCE_DEF\020\014\022\023\n\017EFF"
    "_REDUCE_CRIT\020\r\022\024\n\020EFF_REDUCE_SPEED\020\016\022\027\n\023"
    "EFF_REDUCE_CRIT_DMG\020\017\022\022\n\016EFF_REDUCE_RES\020"
    "\020\022\022\n\016EFF_REDUCE_ACC\020\021\022\023\n\017EFF_REDUCE_CURE"
    "\020\022\022\025\n\021EFF_REDUCE_MAX_HP\020\023\022\r\n\tEFF_TAUNT\020\024"
    "\022\021\n\rEFF_CONFUSION\020\025\022\r\n\tEFF_SLEEP\020\026\022\016\n\nEF"
    "F_FROZEN\020\027\022\017\n\013EFF_SILENCE\020\030\022\014\n\010EFF_SEAL\020"
    "\031\022\024\n\020EFF_SEAL_PASSIVE\020\032\022\021\n\rEFF_REDUCE_HP"
    "\020\033\022\022\n\016EFF_ADD_INJURE\020\034*}\n\014ERoleSexType\022\030"
    "\n\024E_ROLE_SEX_TYPE_NONE\020\000\022\030\n\024E_ROLE_SEX_T"
    "YPE_MALE\020\001\022\032\n\026E_ROLE_SEX_TYPE_FEMALE\020\002\022\035"
    "\n\031E_ROLE_SEX_TYPE_UNDEFINED\020\003*q\n\tESoulSl"
    "ot\022\017\n\013SOUL_SLOT_1\020\000\022\017\n\013SOUL_SLOT_2\020\001\022\017\n\013"
    "SOUL_SLOT_3\020\002\022\017\n\013SOUL_SLOT_4\020\003\022\017\n\013SOUL_S"
    "LOT_5\020\004\022\017\n\013SOUL_SLOT_6\020\005*\232\001\n\016EHeroEquipS"
    "lot\022\025\n\021HERO_EQUIP_SLOT_1\020\001\022\025\n\021HERO_EQUIP"
    "_SLOT_2\020\002\022\025\n\021HERO_EQUIP_SLOT_3\020\003\022\025\n\021HERO"
    "_EQUIP_SLOT_4\020\004\022\025\n\021HERO_EQUIP_SLOT_5\020\005\022\025"
    "\n\021HERO_EQUIP_SLOT_6\020\006*=\n\021EHeroTalismanSl"
    "ot\022\023\n\017TALISMAN_SLOT_1\020\000\022\023\n\017TALISMAN_SLOT"
    "_2\020\001*@\n\023ETalismanChangeType\022\023\n\017E_TALISMA"
    "N_LVUP\020\000\022\024\n\020E_TALISMAN_BREAK\020\001*T\n\021ETalis"
    "manDestType\022\023\n\017E_TALISMAN_NONE\020\000\022\025\n\021E_TA"
    "LISMAN_PLAYER\020\001\022\023\n\017E_TALISMAN_HERO\020\002*@\n\r"
    "EOperatorType\022\025\n\021OPERATOR_TYPE_ADD\020\001\022\030\n\024"
    "OPERATOR_TYPE_REDUCE\020\002*o\n\021EOperatorDataT"
    "ype\022\033\n\027OPERATOR_DATA_TYPE_DATA\020\000\022\036\n\032OPER"
    "ATOR_DATA_TYPE_PERCENT\020\001\022\035\n\031OPERATOR_DAT"
    "A_TYPE_MODIFY\020\002*M\n\020ESkillCfgOptType\022\035\n\031S"
    "KILL_CFG_OPT_TYPE_REMOVE\020\001\022\032\n\026SKILL_CFG_"
    "OPT_TYPE_SET\020\002*\270\001\n\rESkinOpenType\022\027\n\023SKIN"
    "_OPEN_TYPE_NONE\020\000\022\035\n\031SKIN_OPEN_TYPE_ROLE"
    "_LEVEL\020\001\022\034\n\030SKIN_OPEN_TYPE_VIP_LEVEL\020\002\022\030"
    "\n\024SKIN_OPEN_TYPE_GRADE\020\003\022\027\n\023SKIN_OPEN_TY"
    "PE_JADE\020\004\022\036\n\032SKIN_OPEN_TYPE_SKIN_TICKET\020"
    "\005*Q\n\021EFormtionHeroType\022\036\n\032FORMATION_HERO"
    "_TYPE_BATTLE\020\001\022\034\n\030FORMATION_HERO_TYPE_VI"
    "EW\020\002*\212\001\n\016ERoleEventType\022\030\n\024ROLE_EVENT_TY"
    "PE_NONE\020\000\022\037\n\033ROLE_EVENT_TYPE_PLAYER_OPEN"
    "\020\001\022\033\n\027ROLE_EVENT_TYPE_SKILLUP\020\002\022 \n\034ROLE_"
    "EVENT_TYPE_SKILL_UNLOCK\020\003*\256\002\n\022EHeroInfoC"
    "hangeTag\022\037\n\033E_HERO_INFO_CHANGE_UP_LEVEL\020"
    "\001\022\036\n\032E_HERO_INFO_CHANGE_UP_STAR\020\002\022\035\n\031E_H"
    "ERO_INFO_CHANGE_AWAKEN\020\003\022\037\n\033E_HERO_INFO_"
    "CHANGE_SKILL_UP\020\004\022\034\n\030E_HERO_INFO_CHANGE_"
    "EQUIP\020\005\022\036\n\032E_HERO_INFO_CHANGE_UNEQUIP\020\006\022"
    "\032\n\026E_HERO_INFO_QUALITY_UP\020\007\022\034\n\030E_HERO_IN"
    "FO_ADD_TALISMAN\020\010\022\037\n\033E_HERO_INFO_REMOVE_"
    "TALISMAN\020\t*\245\002\n\021eItemPropertyType\022\030\n\024ITEM"
    "_PROP_TP_B_BAGIN\020\000\022\027\n\023ITEM_PROP_TP_B_FLA"
    "G\020\000\022\033\n\027ITEM_PROP_TP_B_TEMPLATE\020\001\022\027\n\023ITEM"
    "_PROP_TP_B_UUID\020\002\022\032\n\026ITEM_PROP_TP_B_OVER"
    "LAP\020\003\022\035\n\031ITEM_PROP_TP_B_SPAWN_TIME\020\004\022\026\n\022"
    "ITEM_PROP_TP_B_MAX\020\005\022\030\n\024ITEM_PROP_TP_E_B"
    "EGIN\020d\022\036\n\032ITEM_PROP_TP_E_EXPIRE_TIME\020e\022\026"
    "\n\022ITEM_PROP_TP_E_MAX\020f\032\002\020\001*r\n\reItemFlagB"
    "its\022\027\n\023ITEM_FLAG_BIT_VALID\020\000\022\026\n\022ITEM_FLA"
    "G_BIT_LOCK\020\001\022\026\n\022ITEM_FLAG_BIT_BIND\020\002\022\030\n\024"
    "ITEM_FLAG_BIT_MODIFY\020\037*\343\001\n\027eDBGetRedisRo"
    "leDataType\022$\n DB_GET_REDIS_ROLE_DATA_TYP"
    "E_BASE\020\000\022$\n DB_GET_REDIS_ROLE_DATA_TYPE_"
    "SHOW\020\001\022#\n\037DB_GET_REDIS_ROLE_DATA_TYPE_JJ"
    "C\020\002\022.\n*DB_GET_REDIS_ROLE_DATA_TYPE_EQUIP"
    "PED_CLOTH\020\003\022\'\n#DB_GET_REDIS_ROLE_DATA_TY"
    "PE_FASHION\020\004*S\n\reChestQuality\022\016\n\nCHEST_W"
    "OOD\020\001\022\020\n\014CHEST_COPPER\020\002\022\020\n\014CHEST_SILVER\020"
    "\003\022\016\n\nCHEST_GOLD\020\004*9\n\reMemberStatus\022\025\n\021eM"
    "ember_NOT_Ready\020\001\022\021\n\reMember_Ready\020\002*8\n\t"
    "eTeamSize\022\014\n\010TEAM_TWO\020\001\022\016\n\nTEAM_THREE\020\002\022"
    "\r\n\tTEAM_FOUR\020\003*\036\n\teTeamType\022\021\n\rTEAM_MAIN"
    "LINE\020\001*6\n\017eTeamPermission\022\017\n\013TEAM_PUBLIC"
    "\020\001\022\022\n\016TEAM_PROTECTED\020\002*>\n\013eTeamStatus\022\016\n"
    "\nTEAM_READY\020\001\022\016\n\nTEAM_FIGHT\020\002\022\017\n\013TEAM_FI"
    "NISH\020\003*\036\n\neArenaType\022\020\n\014ARENA_OFFICE\020\001*\327"
    "\002\n\006EGrade\022\016\n\nGRADE_NONE\020\000\022\017\n\013GRADE_9_SEC"
    "\020\001\022\017\n\013GRADE_9_FIR\020\002\022\017\n\013GRADE_8_SEC\020\003\022\017\n\013"
    "GRADE_8_FIR\020\004\022\017\n\013GRADE_7_SEC\020\005\022\017\n\013GRADE_"
    "7_FIR\020\006\022\017\n\013GRADE_6_SEC\020\007\022\017\n\013GRADE_6_FIR\020"
    "\010\022\017\n\013GRADE_5_SEC\020\t\022\017\n\013GRADE_5_FIR\020\n\022\017\n\013G"
    "RADE_4_SEC\020\013\022\017\n\013GRADE_4_FIR\020\014\022\017\n\013GRADE_3"
    "_SEC\020\r\022\017\n\013GRADE_3_FIR\020\016\022\017\n\013GRADE_2_SEC\020\017"
    "\022\017\n\013GRADE_2_FIR\020\020\022\017\n\013GRADE_1_SEC\020\021\022\017\n\013GR"
    "ADE_1_FIR\020\022\022\013\n\007GRADE_0\020\023*X\n\nEGradeType\022\021"
    "\n\rGRADE_PRIMARY\020\001\022\020\n\014GRADE_MIDDLE\020\002\022\022\n\016G"
    "RADE_ADVANCED\020\003\022\021\n\rGRADE_HIGHEST\020\004*M\n\023eO"
    "fficeTestProgress\022\020\n\014OFFICE_APPLY\020\001\022\020\n\014O"
    "FFICE_CHECK\020\002\022\022\n\016OFFICE_RECRUIT\020\003*\"\n\rGET"
    "_PLOT_TYPE\022\007\n\003NEW\020\001\022\010\n\004FULL\020\002*z\n\031ECHARAC"
    "TER_ATTRIBUTE_TYPE\022\023\n\017ERROR_ATTRIBUTE\020\000\022"
    "\013\n\007TREASON\020\001\022\014\n\010SCHEMING\020\002\022\r\n\tADORKABLE\020"
    "\003\022\n\n\006TENDER\020\004\022\010\n\004GOOD\020\005\022\010\n\004WISE\020\006*\332\001\n\tRA"
    "NK_TYPE\022\022\n\rRANK_PERSONAL\020\350\007\022\027\n\022RANK_GONG"
    "DOU_FORCE\020\351\007\022\023\n\016RANK_OFFICE_LV\020\352\007\022\017\n\nRAN"
    "K_CHARM\020\353\007\022\016\n\tRANK_HERO\020\354\007\022\014\n\007RANK_LV\020\355\007"
    "\022\021\n\014RANK_COUPLES\020\320\017\022\017\n\nRANK_UNION\020\270\027\022\020\n\013"
    "RANK_PRINCE\020\240\037\022\017\n\nRANK_TOWER\020\210\'\022\025\n\020RANK_"
    "TOWER_Layer\020\211\'*s\n\021ERoyalEventResult\022\026\n\022E"
    "RoyalEventResult1\020\001\022\026\n\022ERoyalEventResult"
    "2\020\002\022\026\n\022ERoyalEventResult3\020\003\022\026\n\022ERoyalEve"
    "ntResult4\020\004*\236\010\n\tTASK_TYPE\022\031\n\025TASK_CHALLE"
    "NGE_GUANKA\020\001\022\024\n\020TASK_PASS_GUANKA\020\002\022\032\n\026TA"
    "SK_TOTAL_STAR_GUANKA\020\004\022\031\n\025TASK_PASS_DIFF"
    "_GUANKA\020\007\022\025\n\021TASK_HERO_UPGRADE\0203\022\024\n\020TASK"
    "_HERO_UPSTAR\0204\022\033\n\027TASK_HERO_SKILL_UPGRAD"
    "E\0205\022\030\n\024TASK_HERO_STAR_COUNT\0209\022\026\n\022TASK_HE"
    "RO_LV_COUNT\020:\022\023\n\017TASK_HERO_COUNT\020<\022\022\n\016TA"
    "SK_DRAW_HERO\020e\022\027\n\023TASK_DRAW_HERO_GOLD\020f\022"
    "\027\n\023TASK_DRAW_HERO_JADE\020g\022\032\n\025TASK_RESOURC"
    "E_CONSUME\020\227\001\022\023\n\016TASK_GONGDOULI\020\230\001\022\014\n\007TAS"
    "K_LV\020\231\001\022\023\n\016TASK_LOGIN_ACC\020\236\001\022\025\n\020TASK_LOG"
    "IN_DAILY\020\237\001\022\022\n\rTASK_SHOP_BUY\020\240\001\022\031\n\024TASK_"
    "KONGJIAN_LIUYAN\020\311\001\022\031\n\024TASK_KONGJIANDIANZ"
    "AN\020\312\001\022\021\n\014TASK_GUANPIN\020\373\001\022\034\n\027TASK_OFFICAL"
    "_APPLY_SIZE\020\374\001\022\036\n\031TASK_OFFICAL_ACC_WIN_S"
    "IZE\020\375\001\022\030\n\023TASK_OFFICAL_SALARY\020\377\001\022\036\n\031TASK"
    "_OFFICAL_SALARY_DAILY\020\200\002\022\036\n\031TASK_SHARE_O"
    "FFIAL_UPGRADE\020\201\002\022\026\n\021TASK_UNLOCK_ROYAL\020\255\002"
    "\022\023\n\016TASK_GIT_ROYAL\020\256\002\022\030\n\023TASK_HAOGANDU_R"
    "OYAL\020\257\002\022\034\n\027TASK_UNLOCK_ROYAL_COUNT\020\260\002\022\025\n"
    "\020TASK_FINISH_PLOT\020\337\002\022\031\n\024TASK_CHALLENGE_A"
    "RENA\020\221\003\022\035\n\030TASK_CHALLENGE_WIN_ARENA\020\222\003\022\036"
    "\n\031TASK_CHALLENGE_FAIL_ARENA\020\223\003\022\021\n\014TASK_G"
    "ONGDOU\020\303\003\022\026\n\021TASK_GONGDOU_ACCU\020\304\003\022\027\n\022TAS"
    "K_FRIENDS_COUNT\020\365\003\022\027\n\022TASK_FRIENDS_APPLY"
    "\020\366\003\022\025\n\020TASK_GIT_XIANHUA\020\331\004\022\030\n\023TASK_QUSHU"
    "ILIUSHANG\020\275\005\022\016\n\tTASK_QIYU\020\276\005*F\n\014SKILL_ST"
    "ATUS\022\022\n\016SKILL_INACTIVE\020\001\022\020\n\014SKILL_ACTIVE"
    "\020\002\022\020\n\014SKILL_SELECT\020\003*M\n\rTALENT_STATUS\022\023\n"
    "\017TALENT_INACTIVE\020\001\022\024\n\020TALENT_CANACTIVE\020\002"
    "\022\021\n\rTALENT_ACTIVE\020\003*P\n\021PLAYER_SKILL_TYPE"
    "\022\027\n\023COMMON_ATTACK_SKILL\020\001\022\017\n\013ANGER_SKILL"
    "\020\002\022\021\n\rPASSIVE_SKILL\020\003*@\n\025eDiscoveryMoppi"
    "ngType\022\n\n\006SINGLE\020\001\022\017\n\013CONSECUTIVE\020\002\022\n\n\006U"
    "NTILL\020\003*M\n\tCHAT_TYPE\022\016\n\nWORLD_CHAT\020\001\022\020\n\014"
    "PRIVATE_CHAT\020\002\022\r\n\tROOM_CHAT\020\003\022\017\n\013FAMILY_"
    "CHAT\020\004*\177\n\022DAILY_FORTUNE_TYPE\022\023\n\017XUSHIDAI"
    "FA_TYPE\020\000\022\027\n\023SHILAIYUNZHUAN_TYPE\020\001\022\021\n\rDA"
    "JIDALI_TYPE\020\002\022\022\n\016HONGYUNGAOZHAO\020\003\022\024\n\020ALL"
    "_FORTUNE_SIZE\020\004*\255\001\n\rEItemAttrType\022\030\n\024E_T"
    "ALISMAN_ATTR_NONE\020\000\022\031\n\025E_TALISMAN_ATTR_l"
    "evel\020\001\022\027\n\023E_TALISMAN_ATTR_exp\020\002\022\037\n\033E_TAL"
    "ISMAN_ATTR_break_times\020\003\022\024\n\020E_ITEM_ATTR_"
    "SLOT\020\004\022\027\n\023E_FASHION_ATTR_TIME\020\005*\361\001\n\reMai"
    "lPriority\022\026\n\022MAIL_PRIORITY_NONE\020\000\022\031\n\025MAI"
    "L_PRIORITY_HIGHEST\020\001\022\023\n\017MAIL_PRIORITY_1\020"
    "\001\022\033\n\027MAIL_PRIORITY_NOT_DELET\020\001\022\023\n\017MAIL_P"
    "RIORITY_2\020\002\022\036\n\032MAIL_PRIORITY_PRIVATE_MAI"
    "L\020\003\022\023\n\017MAIL_PRIORITY_3\020\003\022\023\n\017MAIL_PRIORIT"
    "Y_4\020\004\022\030\n\024MAIL_PRIORITY_LOWEST\020\004\032\002\020\001*\237\001\n\017"
    "eMailClientType\022\031\n\025MAIL_CLIENT_TYPE_NONE"
    "\020\000\022\030\n\024MAIL_CLIENT_TYPE_MIN\020\001\022\034\n\030MAIL_CLI"
    "ENT_TYPE_PRIVATE\020\001\022\033\n\027MAIL_CLIENT_TYPE_S"
    "YSTEM\020\002\022\030\n\024MAIL_CLIENT_TYPE_MAX\020\002\032\002\020\001*\335\001"
    "\n\017eMailServerType\022\031\n\025MAIL_SERVER_TYPE_NO"
    "NE\020\000\022\030\n\024MAIL_SERVER_TYPE_MIN\020\001\022\035\n\031MAIL_S"
    "ERVER_TYPE_INSTANCE\020\001\022\033\n\027MAIL_SERVER_TYP"
    "E_GLOBAL\020\002\022\032\n\026MAIL_SERVER_TYPE_GROUP\020\003\022\037"
    "\n\033MAIL_SERVER_TYPE_RAND_GROUP\020\004\022\030\n\024MAIL_"
    "SERVER_TYPE_MAX\020\004\032\002\020\001*\230\001\n\016eMailLogicType"
    "\022\030\n\024MAIL_LOGIC_TYPE_NONE\020\000\022\027\n\023MAIL_LOGIC"
    "_TYPE_MIN\020\001\022\032\n\026MAIL_LOGIC_TYPE_COMMON\020\001\022"
    "\032\n\026MAIL_LOGIC_TYPE_FRIEND\020\002\022\027\n\023MAIL_LOGI"
    "C_TYPE_MAX\020\002\032\002\020\001*\?\n\reSendMailType\022\025\n\021SEN"
    "D_MAIL_TYPE_ID\020\001\022\027\n\023SEND_MAIL_TYPE_NAME\020"
    "\002*V\n\013eFashionPos\022\030\n\024FASHION_SKELETON_POS"
    "\020\000\022\027\n\023FASHION_CLOTHES_POS\020\001\022\024\n\020FASHION_F"
    "ACE_POS\020\002*x\n\021eFlowerRewardType\022\026\n\022FLOWER"
    "_REWARD_NONE\020\000\022\030\n\024FLOWER_REWARD_SENDER\020\001"
    "\022\032\n\026FLOWER_REWARD_RECEIVER\020\002\022\025\n\021FLOWER_R"
    "EWARD_ALL\020\003*\202\002\n\reEventMsgType\022\030\n\024EVENT_M"
    "SG_TYPE_ERROR\020\000\022$\n EVENT_MSG_TYPE_OFFICA"
    "L_PROMOTION\020\001\022\034\n\030EVENT_MSG_TYPE_SEND_GIF"
    "T\020\002\022\036\n\032EVENT_MSG_TYPE_RECIVE_GIFT\020\003\022\027\n\023E"
    "VENT_MSG_TYPE_SLAP\020\004\022\033\n\027EVENT_MSG_TYPE_G"
    "REETING\020\005\022\032\n\026EVENT_MSG_TYPE_TRIBUTE\020\006\022!\n"
    "\035EVENT_MSG_TYPE_OFFICAL_REDUCE\020\007*h\n\020FASH"
    "ION_POSITION\022\031\n\025FASHION_POSITION_NONE\020\000\022"
    "\031\n\025FASHION_POSITION_HEAD\020\001\022\032\n\026FASHION_PO"
    "SITION_CLOTH\020\002\032\002\020\001*V\n\rFASHION_STATE\022\026\n\022F"
    "ASHION_STATE_NONE\020\000\022\023\n\017FASHION_WEARING\020\001"
    "\022\024\n\020FASHION_WARDROBE\020\002\032\002\020\001*a\n\016FASHION_GE"
    "NDER\022\027\n\023FASHION_GENDER_NONE\020\000\022\027\n\023FASHION"
    "_GENDER_MALE\020\001\022\031\n\025FASHION_GENDER_FEMALE\020"
    "\002\032\002\020\001*x\n\neRedPtType\022\017\n\013RED_PT_NONE\020\001\022\016\n\n"
    "RED_PT_MIN\020\002\022\024\n\020RED_PT_DRAW_CARD\020\002\022\017\n\013RE"
    "D_PT_MAIL\020\003\022\016\n\nRED_PT_PET\020\004\022\016\n\nRED_PT_MA"
    "X\020\004\032\002\020\001", 22967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cm_roletype.proto", &protobuf_RegisterTypes);
  account_role_data::default_instance_ = new account_role_data();
  unit_attr_data::default_instance_ = new unit_attr_data();
  unit_item_data::default_instance_ = new unit_item_data();
  client_skill_data::default_instance_ = new client_skill_data();
  skin_entry::default_instance_ = new skin_entry();
  skin_data::default_instance_ = new skin_data();
  hero_base_info::default_instance_ = new hero_base_info();
  hero_attr_value::default_instance_ = new hero_attr_value();
  client_soul_data::default_instance_ = new client_soul_data();
  hero_equip_data::default_instance_ = new hero_equip_data();
  talisman_data::default_instance_ = new talisman_data();
  hero_show_data::default_instance_ = new hero_show_data();
  soul_attr::default_instance_ = new soul_attr();
  soul_info::default_instance_ = new soul_info();
  discover_monster::default_instance_ = new discover_monster();
  discover_data::default_instance_ = new discover_data();
  dischapter_data::default_instance_ = new dischapter_data();
  all_discover_data::default_instance_ = new all_discover_data();
  drop_data::default_instance_ = new drop_data();
  role_attr_pair::default_instance_ = new role_attr_pair();
  player_property::default_instance_ = new player_property();
  player_skill_info::default_instance_ = new player_skill_info();
  talent_info::default_instance_ = new talent_info();
  player_skin_info::default_instance_ = new player_skin_info();
  player_skin_data::default_instance_ = new player_skin_data();
  player_equip_data::default_instance_ = new player_equip_data();
  player_data::default_instance_ = new player_data();
  account_token_data::default_instance_ = new account_token_data();
  account_gate_data::default_instance_ = new account_gate_data();
  area_gateserver_info::default_instance_ = new area_gateserver_info();
  game_system::default_instance_ = new game_system();
  chest_data::default_instance_ = new chest_data();
  role_chest::default_instance_ = new role_chest();
  offical_item_data::default_instance_ = new offical_item_data();
  offical_member_data::default_instance_ = new offical_member_data();
  role_show_role_equipped::default_instance_ = new role_show_role_equipped();
  offical_apply_data::default_instance_ = new offical_apply_data();
  offical_apply_my_battle_data::default_instance_ = new offical_apply_my_battle_data();
  offical_apply_battle_data::default_instance_ = new offical_apply_battle_data();
  rank_base_item::default_instance_ = new rank_base_item();
  rank_common_item::default_instance_ = new rank_common_item();
  public_role_base_info::default_instance_ = new public_role_base_info();
  role_base_3part::default_instance_ = new role_base_3part();
  coordinate::default_instance_ = new coordinate();
  role_position::default_instance_ = new role_position();
  role_move::default_instance_ = new role_move();
  chat_room_state::default_instance_ = new chat_room_state();
  plot_screen_info::default_instance_ = new plot_screen_info();
  add_character_attr_info::default_instance_ = new add_character_attr_info();
  add_royal_value_info::default_instance_ = new add_royal_value_info();
  character_attr_info::default_instance_ = new character_attr_info();
  itemid_and_num::default_instance_ = new itemid_and_num();
  mail_attach::default_instance_ = new mail_attach();
  mail_instance_attaches::default_instance_ = new mail_instance_attaches();
  mail_instance::default_instance_ = new mail_instance();
  mail_from_role_info::default_instance_ = new mail_from_role_info();
  mail::default_instance_ = new mail();
  mail_template::default_instance_ = new mail_template();
  event_offical_info::default_instance_ = new event_offical_info();
  event_offical_reduce::default_instance_ = new event_offical_reduce();
  event_flower_info::default_instance_ = new event_flower_info();
  event_flower_send_info::default_instance_ = new event_flower_send_info();
  db_event_msg_info::default_instance_ = new db_event_msg_info();
  share_officer_upgrade::default_instance_ = new share_officer_upgrade();
  first_award_unit::default_instance_ = new first_award_unit();
  flower_info::default_instance_ = new flower_info();
  flower_send_info::default_instance_ = new flower_send_info();
  offical_battle_report_unit::default_instance_ = new offical_battle_report_unit();
  talent_data::default_instance_ = new talent_data();
  talent_battlt_data::default_instance_ = new talent_battlt_data();
  cli_unit_role_fashion::default_instance_ = new cli_unit_role_fashion();
  fashions_pack::default_instance_ = new fashions_pack();
  red_pt_info::default_instance_ = new red_pt_info();
  red_pt_infos::default_instance_ = new red_pt_infos();
  match_interval::default_instance_ = new match_interval();
  grade_match_conf::default_instance_ = new grade_match_conf();
  single_plot_little_game::default_instance_ = new single_plot_little_game();
  pack_plot_little_game::default_instance_ = new pack_plot_little_game();
  pet_attr_state::default_instance_ = new pet_attr_state();
  pet_out_event_item::default_instance_ = new pet_out_event_item();
  pet_out_event_data::default_instance_ = new pet_out_event_data();
  pet_single_data::default_instance_ = new pet_single_data();
  pet_pack_data::default_instance_ = new pet_pack_data();
  account_role_data::default_instance_->InitAsDefaultInstance();
  unit_attr_data::default_instance_->InitAsDefaultInstance();
  unit_item_data::default_instance_->InitAsDefaultInstance();
  client_skill_data::default_instance_->InitAsDefaultInstance();
  skin_entry::default_instance_->InitAsDefaultInstance();
  skin_data::default_instance_->InitAsDefaultInstance();
  hero_base_info::default_instance_->InitAsDefaultInstance();
  hero_attr_value::default_instance_->InitAsDefaultInstance();
  client_soul_data::default_instance_->InitAsDefaultInstance();
  hero_equip_data::default_instance_->InitAsDefaultInstance();
  talisman_data::default_instance_->InitAsDefaultInstance();
  hero_show_data::default_instance_->InitAsDefaultInstance();
  soul_attr::default_instance_->InitAsDefaultInstance();
  soul_info::default_instance_->InitAsDefaultInstance();
  discover_monster::default_instance_->InitAsDefaultInstance();
  discover_data::default_instance_->InitAsDefaultInstance();
  dischapter_data::default_instance_->InitAsDefaultInstance();
  all_discover_data::default_instance_->InitAsDefaultInstance();
  drop_data::default_instance_->InitAsDefaultInstance();
  role_attr_pair::default_instance_->InitAsDefaultInstance();
  player_property::default_instance_->InitAsDefaultInstance();
  player_skill_info::default_instance_->InitAsDefaultInstance();
  talent_info::default_instance_->InitAsDefaultInstance();
  player_skin_info::default_instance_->InitAsDefaultInstance();
  player_skin_data::default_instance_->InitAsDefaultInstance();
  player_equip_data::default_instance_->InitAsDefaultInstance();
  player_data::default_instance_->InitAsDefaultInstance();
  account_token_data::default_instance_->InitAsDefaultInstance();
  account_gate_data::default_instance_->InitAsDefaultInstance();
  area_gateserver_info::default_instance_->InitAsDefaultInstance();
  game_system::default_instance_->InitAsDefaultInstance();
  chest_data::default_instance_->InitAsDefaultInstance();
  role_chest::default_instance_->InitAsDefaultInstance();
  offical_item_data::default_instance_->InitAsDefaultInstance();
  offical_member_data::default_instance_->InitAsDefaultInstance();
  role_show_role_equipped::default_instance_->InitAsDefaultInstance();
  offical_apply_data::default_instance_->InitAsDefaultInstance();
  offical_apply_my_battle_data::default_instance_->InitAsDefaultInstance();
  offical_apply_battle_data::default_instance_->InitAsDefaultInstance();
  rank_base_item::default_instance_->InitAsDefaultInstance();
  rank_common_item::default_instance_->InitAsDefaultInstance();
  public_role_base_info::default_instance_->InitAsDefaultInstance();
  role_base_3part::default_instance_->InitAsDefaultInstance();
  coordinate::default_instance_->InitAsDefaultInstance();
  role_position::default_instance_->InitAsDefaultInstance();
  role_move::default_instance_->InitAsDefaultInstance();
  chat_room_state::default_instance_->InitAsDefaultInstance();
  plot_screen_info::default_instance_->InitAsDefaultInstance();
  add_character_attr_info::default_instance_->InitAsDefaultInstance();
  add_royal_value_info::default_instance_->InitAsDefaultInstance();
  character_attr_info::default_instance_->InitAsDefaultInstance();
  itemid_and_num::default_instance_->InitAsDefaultInstance();
  mail_attach::default_instance_->InitAsDefaultInstance();
  mail_instance_attaches::default_instance_->InitAsDefaultInstance();
  mail_instance::default_instance_->InitAsDefaultInstance();
  mail_from_role_info::default_instance_->InitAsDefaultInstance();
  mail::default_instance_->InitAsDefaultInstance();
  mail_template::default_instance_->InitAsDefaultInstance();
  event_offical_info::default_instance_->InitAsDefaultInstance();
  event_offical_reduce::default_instance_->InitAsDefaultInstance();
  event_flower_info::default_instance_->InitAsDefaultInstance();
  event_flower_send_info::default_instance_->InitAsDefaultInstance();
  db_event_msg_info::default_instance_->InitAsDefaultInstance();
  share_officer_upgrade::default_instance_->InitAsDefaultInstance();
  first_award_unit::default_instance_->InitAsDefaultInstance();
  flower_info::default_instance_->InitAsDefaultInstance();
  flower_send_info::default_instance_->InitAsDefaultInstance();
  offical_battle_report_unit::default_instance_->InitAsDefaultInstance();
  talent_data::default_instance_->InitAsDefaultInstance();
  talent_battlt_data::default_instance_->InitAsDefaultInstance();
  cli_unit_role_fashion::default_instance_->InitAsDefaultInstance();
  fashions_pack::default_instance_->InitAsDefaultInstance();
  red_pt_info::default_instance_->InitAsDefaultInstance();
  red_pt_infos::default_instance_->InitAsDefaultInstance();
  match_interval::default_instance_->InitAsDefaultInstance();
  grade_match_conf::default_instance_->InitAsDefaultInstance();
  single_plot_little_game::default_instance_->InitAsDefaultInstance();
  pack_plot_little_game::default_instance_->InitAsDefaultInstance();
  pet_attr_state::default_instance_->InitAsDefaultInstance();
  pet_out_event_item::default_instance_->InitAsDefaultInstance();
  pet_out_event_data::default_instance_->InitAsDefaultInstance();
  pet_single_data::default_instance_->InitAsDefaultInstance();
  pet_pack_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cm_5froletype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cm_5froletype_2eproto {
  StaticDescriptorInitializer_cm_5froletype_2eproto() {
    protobuf_AddDesc_cm_5froletype_2eproto();
  }
} static_descriptor_initializer_cm_5froletype_2eproto_;
const ::google::protobuf::EnumDescriptor* UserStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}
bool UserStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCommonDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCommonDefine_descriptor_;
}
bool eCommonDefine_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 6:
    case 10:
    case 11:
    case 12:
    case 16:
    case 20:
    case 32:
    case 50:
    case 90:
    case 100:
    case 128:
    case 256:
    case 700:
    case 2048:
    case 999999999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCreateResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCreateResult_descriptor_;
}
bool eCreateResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eEnterGameAck_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eEnterGameAck_descriptor_;
}
bool eEnterGameAck_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuerySceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuerySceneType_descriptor_;
}
bool EQuerySceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreateSceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreateSceneType_descriptor_;
}
bool ECreateSceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESceneType_descriptor_;
}
bool ESceneType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChat3DSceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChat3DSceneType_descriptor_;
}
bool EChat3DSceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAreaState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAreaState_descriptor_;
}
bool EAreaState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAwardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAwardType_descriptor_;
}
bool EAwardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EToyCurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EToyCurrencyType_descriptor_;
}
bool EToyCurrencyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQArardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQArardType_descriptor_;
}
bool EQArardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBagType_descriptor_;
}
bool EBagType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemClass_descriptor_;
}
bool EItemClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 301:
    case 401:
    case 402:
    case 403:
    case 501:
    case 502:
    case 503:
    case 601:
    case 701:
    case 801:
    case 802:
    case 901:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1101:
    case 1201:
    case 1202:
    case 1301:
    case 1302:
    case 1501:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemUseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemUseType_descriptor_;
}
bool EItemUseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemUseConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemUseConditionType_descriptor_;
}
bool EItemUseConditionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemUseGetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemUseGetType_descriptor_;
}
bool EItemUseGetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOperaType_descriptor_;
}
bool EOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eKickoutReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eKickoutReason_descriptor_;
}
bool eKickoutReason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttribute_descriptor_;
}
bool EAttribute_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEffect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEffect_descriptor_;
}
bool EEffect_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleSexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleSexType_descriptor_;
}
bool ERoleSexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESoulSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESoulSlot_descriptor_;
}
bool ESoulSlot_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroEquipSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHeroEquipSlot_descriptor_;
}
bool EHeroEquipSlot_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroTalismanSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHeroTalismanSlot_descriptor_;
}
bool EHeroTalismanSlot_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETalismanChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETalismanChangeType_descriptor_;
}
bool ETalismanChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETalismanDestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETalismanDestType_descriptor_;
}
bool ETalismanDestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOperatorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOperatorType_descriptor_;
}
bool EOperatorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOperatorDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOperatorDataType_descriptor_;
}
bool EOperatorDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESkillCfgOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESkillCfgOptType_descriptor_;
}
bool ESkillCfgOptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESkinOpenType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESkinOpenType_descriptor_;
}
bool ESkinOpenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFormtionHeroType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFormtionHeroType_descriptor_;
}
bool EFormtionHeroType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleEventType_descriptor_;
}
bool ERoleEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroInfoChangeTag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHeroInfoChangeTag_descriptor_;
}
bool EHeroInfoChangeTag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eItemPropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eItemPropertyType_descriptor_;
}
bool eItemPropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eItemFlagBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eItemFlagBits_descriptor_;
}
bool eItemFlagBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDBGetRedisRoleDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDBGetRedisRoleDataType_descriptor_;
}
bool eDBGetRedisRoleDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eChestQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eChestQuality_descriptor_;
}
bool eChestQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMemberStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMemberStatus_descriptor_;
}
bool eMemberStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTeamSize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTeamSize_descriptor_;
}
bool eTeamSize_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTeamType_descriptor_;
}
bool eTeamType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTeamPermission_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTeamPermission_descriptor_;
}
bool eTeamPermission_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTeamStatus_descriptor_;
}
bool eTeamStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eArenaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eArenaType_descriptor_;
}
bool eArenaType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGrade_descriptor_;
}
bool EGrade_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGradeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGradeType_descriptor_;
}
bool EGradeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eOfficeTestProgress_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eOfficeTestProgress_descriptor_;
}
bool eOfficeTestProgress_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GET_PLOT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GET_PLOT_TYPE_descriptor_;
}
bool GET_PLOT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECHARACTER_ATTRIBUTE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECHARACTER_ATTRIBUTE_TYPE_descriptor_;
}
bool ECHARACTER_ATTRIBUTE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RANK_TYPE_descriptor_;
}
bool RANK_TYPE_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 2000:
    case 3000:
    case 4000:
    case 5000:
    case 5001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoyalEventResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoyalEventResult_descriptor_;
}
bool ERoyalEventResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TASK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_TYPE_descriptor_;
}
bool TASK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 7:
    case 51:
    case 52:
    case 53:
    case 57:
    case 58:
    case 60:
    case 101:
    case 102:
    case 103:
    case 151:
    case 152:
    case 153:
    case 158:
    case 159:
    case 160:
    case 201:
    case 202:
    case 251:
    case 252:
    case 253:
    case 255:
    case 256:
    case 257:
    case 301:
    case 302:
    case 303:
    case 304:
    case 351:
    case 401:
    case 402:
    case 403:
    case 451:
    case 452:
    case 501:
    case 502:
    case 601:
    case 701:
    case 702:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SKILL_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SKILL_STATUS_descriptor_;
}
bool SKILL_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TALENT_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TALENT_STATUS_descriptor_;
}
bool TALENT_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAYER_SKILL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAYER_SKILL_TYPE_descriptor_;
}
bool PLAYER_SKILL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDiscoveryMoppingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDiscoveryMoppingType_descriptor_;
}
bool eDiscoveryMoppingType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_TYPE_descriptor_;
}
bool CHAT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DAILY_FORTUNE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DAILY_FORTUNE_TYPE_descriptor_;
}
bool DAILY_FORTUNE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemAttrType_descriptor_;
}
bool EItemAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMailPriority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailPriority_descriptor_;
}
bool eMailPriority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMailClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailClientType_descriptor_;
}
bool eMailClientType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMailServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailServerType_descriptor_;
}
bool eMailServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMailLogicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailLogicType_descriptor_;
}
bool eMailLogicType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eSendMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eSendMailType_descriptor_;
}
bool eSendMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFashionPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFashionPos_descriptor_;
}
bool eFashionPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFlowerRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFlowerRewardType_descriptor_;
}
bool eFlowerRewardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eEventMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eEventMsgType_descriptor_;
}
bool eEventMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FASHION_POSITION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASHION_POSITION_descriptor_;
}
bool FASHION_POSITION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FASHION_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASHION_STATE_descriptor_;
}
bool FASHION_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FASHION_GENDER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASHION_GENDER_descriptor_;
}
bool FASHION_GENDER_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRedPtType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRedPtType_descriptor_;
}
bool eRedPtType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int account_role_data::kRoleIdFieldNumber;
const int account_role_data::kRoleNameFieldNumber;
const int account_role_data::kDbSvrIdFieldNumber;
const int account_role_data::kSexFieldNumber;
const int account_role_data::kLvFieldNumber;
#endif  // !_MSC_VER

account_role_data::account_role_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_role_data::InitAsDefaultInstance() {
}

account_role_data::account_role_data(const account_role_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_role_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_svr_id_ = GOOGLE_ULONGLONG(0);
  sex_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_role_data::~account_role_data() {
  SharedDtor();
}

void account_role_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void account_role_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_role_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_role_data_descriptor_;
}

const account_role_data& account_role_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

account_role_data* account_role_data::default_instance_ = NULL;

account_role_data* account_role_data::New() const {
  return new account_role_data;
}

void account_role_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    db_svr_id_ = GOOGLE_ULONGLONG(0);
    sex_ = 0u;
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_role_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_db_svr_id;
        break;
      }

      // optional uint64 db_svr_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_svr_id_)));
          set_has_db_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_role_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint64 db_svr_id = 3;
  if (has_db_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->db_svr_id(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_role_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint64 db_svr_id = 3;
  if (has_db_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->db_svr_id(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_role_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 db_svr_id = 3;
    if (has_db_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_svr_id());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_role_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_role_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_role_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_role_data::MergeFrom(const account_role_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_db_svr_id()) {
      set_db_svr_id(from.db_svr_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_role_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_role_data::CopyFrom(const account_role_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_role_data::IsInitialized() const {

  return true;
}

void account_role_data::Swap(account_role_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(db_svr_id_, other->db_svr_id_);
    std::swap(sex_, other->sex_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_role_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_role_data_descriptor_;
  metadata.reflection = account_role_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_attr_data::kKeyFieldNumber;
const int unit_attr_data::kValueFieldNumber;
#endif  // !_MSC_VER

unit_attr_data::unit_attr_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_attr_data::InitAsDefaultInstance() {
}

unit_attr_data::unit_attr_data(const unit_attr_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_attr_data::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_attr_data::~unit_attr_data() {
  SharedDtor();
}

void unit_attr_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_attr_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_attr_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_attr_data_descriptor_;
}

const unit_attr_data& unit_attr_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

unit_attr_data* unit_attr_data::default_instance_ = NULL;

unit_attr_data* unit_attr_data::New() const {
  return new unit_attr_data;
}

void unit_attr_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_attr_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_attr_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_attr_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_attr_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_attr_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_attr_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_attr_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_attr_data::MergeFrom(const unit_attr_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_attr_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_attr_data::CopyFrom(const unit_attr_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_attr_data::IsInitialized() const {

  return true;
}

void unit_attr_data::Swap(unit_attr_data* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_attr_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_attr_data_descriptor_;
  metadata.reflection = unit_attr_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_item_data::kDbModeFieldNumber;
const int unit_item_data::kUuidFieldNumber;
const int unit_item_data::kTidFieldNumber;
const int unit_item_data::kCanMailFieldNumber;
const int unit_item_data::kBindFieldNumber;
const int unit_item_data::kLockFieldNumber;
const int unit_item_data::kDirtyFieldNumber;
const int unit_item_data::kSpawnTimeFieldNumber;
const int unit_item_data::kExpireTimeFieldNumber;
const int unit_item_data::kBagTypeFieldNumber;
const int unit_item_data::kCurNumFieldNumber;
const int unit_item_data::kLevelFieldNumber;
const int unit_item_data::kQualityFieldNumber;
const int unit_item_data::kAttrsFieldNumber;
#endif  // !_MSC_VER

unit_item_data::unit_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_item_data::InitAsDefaultInstance() {
}

unit_item_data::unit_item_data(const unit_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_item_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  tid_ = 0u;
  can_mail_ = false;
  bind_ = false;
  lock_ = false;
  dirty_ = false;
  spawn_time_ = 0u;
  expire_time_ = 0u;
  bag_type_ = 0u;
  cur_num_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_item_data::~unit_item_data() {
  SharedDtor();
}

void unit_item_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_item_data_descriptor_;
}

const unit_item_data& unit_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

unit_item_data* unit_item_data::default_instance_ = NULL;

unit_item_data* unit_item_data::New() const {
  return new unit_item_data;
}

void unit_item_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    tid_ = 0u;
    can_mail_ = false;
    bind_ = false;
    lock_ = false;
    dirty_ = false;
    spawn_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    expire_time_ = 0u;
    bag_type_ = 0u;
    cur_num_ = 0u;
    level_ = 0u;
    quality_ = 0u;
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tid;
        break;
      }

      // optional uint32 tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_mail;
        break;
      }

      // optional bool can_mail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mail_)));
          set_has_can_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bind;
        break;
      }

      // optional bool bind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock;
        break;
      }

      // optional bool lock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dirty;
        break;
      }

      // optional bool dirty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_spawn_time;
        break;
      }

      // optional uint32 spawn_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_time_)));
          set_has_spawn_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bag_type;
        break;
      }

      // optional uint32 bag_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_type_)));
          set_has_bag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_num;
        break;
      }

      // optional uint32 cur_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // optional uint32 level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_attrs;
        break;
      }

      // repeated .SProtoSpace.unit_attr_data attrs = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
  }

  // optional bool can_mail = 4;
  if (has_can_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_mail(), output);
  }

  // optional bool bind = 5;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bind(), output);
  }

  // optional bool lock = 6;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->lock(), output);
  }

  // optional bool dirty = 7;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dirty(), output);
  }

  // optional uint32 spawn_time = 8;
  if (has_spawn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->spawn_time(), output);
  }

  // optional uint32 expire_time = 9;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->expire_time(), output);
  }

  // optional uint32 bag_type = 10;
  if (has_bag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bag_type(), output);
  }

  // optional uint32 cur_num = 11;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_num(), output);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  // optional uint32 quality = 13;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->quality(), output);
  }

  // repeated .SProtoSpace.unit_attr_data attrs = 100;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 tid = 3;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tid(), target);
  }

  // optional bool can_mail = 4;
  if (has_can_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_mail(), target);
  }

  // optional bool bind = 5;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bind(), target);
  }

  // optional bool lock = 6;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->lock(), target);
  }

  // optional bool dirty = 7;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->dirty(), target);
  }

  // optional uint32 spawn_time = 8;
  if (has_spawn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->spawn_time(), target);
  }

  // optional uint32 expire_time = 9;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->expire_time(), target);
  }

  // optional uint32 bag_type = 10;
  if (has_bag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bag_type(), target);
  }

  // optional uint32 cur_num = 11;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_num(), target);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  // optional uint32 quality = 13;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->quality(), target);
  }

  // repeated .SProtoSpace.unit_attr_data attrs = 100;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_item_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional bool can_mail = 4;
    if (has_can_mail()) {
      total_size += 1 + 1;
    }

    // optional bool bind = 5;
    if (has_bind()) {
      total_size += 1 + 1;
    }

    // optional bool lock = 6;
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // optional bool dirty = 7;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

    // optional uint32 spawn_time = 8;
    if (has_spawn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 expire_time = 9;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

    // optional uint32 bag_type = 10;
    if (has_bag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag_type());
    }

    // optional uint32 cur_num = 11;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_num());
    }

    // optional uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 quality = 13;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  // repeated .SProtoSpace.unit_attr_data attrs = 100;
  total_size += 2 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_item_data::MergeFrom(const unit_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_can_mail()) {
      set_can_mail(from.can_mail());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_spawn_time()) {
      set_spawn_time(from.spawn_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_bag_type()) {
      set_bag_type(from.bag_type());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_item_data::CopyFrom(const unit_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_item_data::IsInitialized() const {

  return true;
}

void unit_item_data::Swap(unit_item_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(tid_, other->tid_);
    std::swap(can_mail_, other->can_mail_);
    std::swap(bind_, other->bind_);
    std::swap(lock_, other->lock_);
    std::swap(dirty_, other->dirty_);
    std::swap(spawn_time_, other->spawn_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(bag_type_, other->bag_type_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_item_data_descriptor_;
  metadata.reflection = unit_item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_skill_data::kIdFieldNumber;
const int client_skill_data::kLvFieldNumber;
const int client_skill_data::kUnlockFieldNumber;
const int client_skill_data::kSlotFieldNumber;
#endif  // !_MSC_VER

client_skill_data::client_skill_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_skill_data::InitAsDefaultInstance() {
}

client_skill_data::client_skill_data(const client_skill_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_skill_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lv_ = 0;
  unlock_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_skill_data::~client_skill_data() {
  SharedDtor();
}

void client_skill_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_skill_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_skill_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_skill_data_descriptor_;
}

const client_skill_data& client_skill_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

client_skill_data* client_skill_data::default_instance_ = NULL;

client_skill_data* client_skill_data::New() const {
  return new client_skill_data;
}

void client_skill_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lv_ = 0;
    unlock_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_skill_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot;
        break;
      }

      // optional int32 slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_skill_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlock(), output);
  }

  // optional int32 slot = 4;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_skill_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlock(), target);
  }

  // optional int32 slot = 4;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_skill_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 unlock = 3;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

    // optional int32 slot = 4;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_skill_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_skill_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_skill_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_skill_data::MergeFrom(const client_skill_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_skill_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_skill_data::CopyFrom(const client_skill_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_skill_data::IsInitialized() const {

  return true;
}

void client_skill_data::Swap(client_skill_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(unlock_, other->unlock_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_skill_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_skill_data_descriptor_;
  metadata.reflection = client_skill_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skin_entry::kIdFieldNumber;
const int skin_entry::kValidFieldNumber;
const int skin_entry::kEndTimeFieldNumber;
#endif  // !_MSC_VER

skin_entry::skin_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skin_entry::InitAsDefaultInstance() {
}

skin_entry::skin_entry(const skin_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skin_entry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  valid_ = false;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skin_entry::~skin_entry() {
  SharedDtor();
}

void skin_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skin_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skin_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skin_entry_descriptor_;
}

const skin_entry& skin_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

skin_entry* skin_entry::default_instance_ = NULL;

skin_entry* skin_entry::New() const {
  return new skin_entry;
}

void skin_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    valid_ = false;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skin_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valid;
        break;
      }

      // optional bool valid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skin_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool valid = 2;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skin_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool valid = 2;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skin_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool valid = 2;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skin_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skin_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skin_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skin_entry::MergeFrom(const skin_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skin_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skin_entry::CopyFrom(const skin_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skin_entry::IsInitialized() const {

  return true;
}

void skin_entry::Swap(skin_entry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(valid_, other->valid_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skin_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skin_entry_descriptor_;
  metadata.reflection = skin_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skin_data::kActiveIdFieldNumber;
const int skin_data::kSkinsFieldNumber;
#endif  // !_MSC_VER

skin_data::skin_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skin_data::InitAsDefaultInstance() {
}

skin_data::skin_data(const skin_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skin_data::SharedCtor() {
  _cached_size_ = 0;
  active_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skin_data::~skin_data() {
  SharedDtor();
}

void skin_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skin_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skin_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skin_data_descriptor_;
}

const skin_data& skin_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

skin_data* skin_data::default_instance_ = NULL;

skin_data* skin_data::New() const {
  return new skin_data;
}

void skin_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_id_ = 0u;
  }
  skins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skin_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 active_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_id_)));
          set_has_active_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skins;
        break;
      }

      // repeated .SProtoSpace.skin_entry skins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skins;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skin_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_id(), output);
  }

  // repeated .SProtoSpace.skin_entry skins = 2;
  for (int i = 0; i < this->skins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skins(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skin_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 active_id = 1;
  if (has_active_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_id(), target);
  }

  // repeated .SProtoSpace.skin_entry skins = 2;
  for (int i = 0; i < this->skins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skins(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skin_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 active_id = 1;
    if (has_active_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_id());
    }

  }
  // repeated .SProtoSpace.skin_entry skins = 2;
  total_size += 1 * this->skins_size();
  for (int i = 0; i < this->skins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skins(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skin_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skin_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skin_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skin_data::MergeFrom(const skin_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skins_.MergeFrom(from.skins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_id()) {
      set_active_id(from.active_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skin_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skin_data::CopyFrom(const skin_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skin_data::IsInitialized() const {

  return true;
}

void skin_data::Swap(skin_data* other) {
  if (other != this) {
    std::swap(active_id_, other->active_id_);
    skins_.Swap(&other->skins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skin_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skin_data_descriptor_;
  metadata.reflection = skin_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_base_info::kHeroIdFieldNumber;
const int hero_base_info::kTemplateIdFieldNumber;
const int hero_base_info::kLevelFieldNumber;
const int hero_base_info::kStarFieldNumber;
const int hero_base_info::kQualityFieldNumber;
const int hero_base_info::kNameFieldNumber;
const int hero_base_info::kSkinIdFieldNumber;
const int hero_base_info::kExpFieldNumber;
#endif  // !_MSC_VER

hero_base_info::hero_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_base_info::InitAsDefaultInstance() {
}

hero_base_info::hero_base_info(const hero_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_base_info::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  level_ = 0;
  star_ = 0;
  quality_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skin_id_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_base_info::~hero_base_info() {
  SharedDtor();
}

void hero_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void hero_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_base_info_descriptor_;
}

const hero_base_info& hero_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

hero_base_info* hero_base_info::default_instance_ = NULL;

hero_base_info* hero_base_info::New() const {
  return new hero_base_info;
}

void hero_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    level_ = 0;
    star_ = 0;
    quality_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    skin_id_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skin_id;
        break;
      }

      // optional int32 skin_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hero_id(), output);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->template_id(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional int32 skin_id = 7;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skin_id(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hero_id(), target);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 skin_id = 7;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skin_id(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 skin_id = 7;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_base_info::MergeFrom(const hero_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_base_info::CopyFrom(const hero_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_base_info::IsInitialized() const {

  return true;
}

void hero_base_info::Swap(hero_base_info* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(template_id_, other->template_id_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(name_, other->name_);
    std::swap(skin_id_, other->skin_id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_base_info_descriptor_;
  metadata.reflection = hero_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_attr_value::kTypeFieldNumber;
const int hero_attr_value::kValFieldNumber;
const int hero_attr_value::kValRatioFieldNumber;
#endif  // !_MSC_VER

hero_attr_value::hero_attr_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_attr_value::InitAsDefaultInstance() {
}

hero_attr_value::hero_attr_value(const hero_attr_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_attr_value::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  val_ = 0;
  val_ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_attr_value::~hero_attr_value() {
  SharedDtor();
}

void hero_attr_value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_attr_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_attr_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_attr_value_descriptor_;
}

const hero_attr_value& hero_attr_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

hero_attr_value* hero_attr_value::default_instance_ = NULL;

hero_attr_value* hero_attr_value::New() const {
  return new hero_attr_value;
}

void hero_attr_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    val_ = 0;
    val_ratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_attr_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SProtoSpace.EAttribute type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EAttribute_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int32 val = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val_ratio;
        break;
      }

      // optional int32 val_ratio = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_ratio_)));
          set_has_val_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_attr_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SProtoSpace.EAttribute type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 val = 2 [default = 0];
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  // optional int32 val_ratio = 3 [default = 0];
  if (has_val_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->val_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_attr_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SProtoSpace.EAttribute type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 val = 2 [default = 0];
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  // optional int32 val_ratio = 3 [default = 0];
  if (has_val_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->val_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_attr_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SProtoSpace.EAttribute type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 val = 2 [default = 0];
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

    // optional int32 val_ratio = 3 [default = 0];
    if (has_val_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_ratio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_attr_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_attr_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_attr_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_attr_value::MergeFrom(const hero_attr_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_val_ratio()) {
      set_val_ratio(from.val_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_attr_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_attr_value::CopyFrom(const hero_attr_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_attr_value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void hero_attr_value::Swap(hero_attr_value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(val_ratio_, other->val_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_attr_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_attr_value_descriptor_;
  metadata.reflection = hero_attr_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_soul_data::kIdFieldNumber;
const int client_soul_data::kSlotFieldNumber;
#endif  // !_MSC_VER

client_soul_data::client_soul_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_soul_data::InitAsDefaultInstance() {
}

client_soul_data::client_soul_data(const client_soul_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_soul_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_soul_data::~client_soul_data() {
  SharedDtor();
}

void client_soul_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_soul_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_soul_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_soul_data_descriptor_;
}

const client_soul_data& client_soul_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

client_soul_data* client_soul_data::default_instance_ = NULL;

client_soul_data* client_soul_data::New() const {
  return new client_soul_data;
}

void client_soul_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_soul_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_soul_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_soul_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_soul_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_soul_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_soul_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_soul_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_soul_data::MergeFrom(const client_soul_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_soul_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_soul_data::CopyFrom(const client_soul_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_soul_data::IsInitialized() const {

  return true;
}

void client_soul_data::Swap(client_soul_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_soul_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_soul_data_descriptor_;
  metadata.reflection = client_soul_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_data::kItemTidFieldNumber;
const int hero_equip_data::kSlotFieldNumber;
#endif  // !_MSC_VER

hero_equip_data::hero_equip_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_data::InitAsDefaultInstance() {
}

hero_equip_data::hero_equip_data(const hero_equip_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_data::SharedCtor() {
  _cached_size_ = 0;
  itemtid_ = 0u;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_data::~hero_equip_data() {
  SharedDtor();
}

void hero_equip_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_data_descriptor_;
}

const hero_equip_data& hero_equip_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

hero_equip_data* hero_equip_data::default_instance_ = NULL;

hero_equip_data* hero_equip_data::New() const {
  return new hero_equip_data;
}

void hero_equip_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtid_ = 0u;
    slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemTid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional uint32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemTid = 1;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtid(), output);
  }

  // optional uint32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemTid = 1;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemtid(), target);
  }

  // optional uint32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemTid = 1;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtid());
    }

    // optional uint32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_data::MergeFrom(const hero_equip_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_data::CopyFrom(const hero_equip_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_data::IsInitialized() const {

  return true;
}

void hero_equip_data::Swap(hero_equip_data* other) {
  if (other != this) {
    std::swap(itemtid_, other->itemtid_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_data_descriptor_;
  metadata.reflection = hero_equip_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_data::kUuidFieldNumber;
const int talisman_data::kItemTidFieldNumber;
const int talisman_data::kLevelFieldNumber;
const int talisman_data::kExpFieldNumber;
const int talisman_data::kBreakTimesFieldNumber;
const int talisman_data::kSlotFieldNumber;
#endif  // !_MSC_VER

talisman_data::talisman_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_data::InitAsDefaultInstance() {
}

talisman_data::talisman_data(const talisman_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_data::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  itemtid_ = 0;
  level_ = 0;
  exp_ = 0;
  break_times_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_data::~talisman_data() {
  SharedDtor();
}

void talisman_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_data_descriptor_;
}

const talisman_data& talisman_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

talisman_data* talisman_data::default_instance_ = NULL;

talisman_data* talisman_data::New() const {
  return new talisman_data;
}

void talisman_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    itemtid_ = 0;
    level_ = 0;
    exp_ = 0;
    break_times_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemTid;
        break;
      }

      // optional int32 itemTid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_break_times;
        break;
      }

      // optional int32 break_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_times_)));
          set_has_break_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slot;
        break;
      }

      // optional int32 slot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 itemTid = 2;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtid(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 break_times = 5;
  if (has_break_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->break_times(), output);
  }

  // optional int32 slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 itemTid = 2;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemtid(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 break_times = 5;
  if (has_break_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->break_times(), target);
  }

  // optional int32 slot = 6;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 itemTid = 2;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtid());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 break_times = 5;
    if (has_break_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_times());
    }

    // optional int32 slot = 6;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_data::MergeFrom(const talisman_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_break_times()) {
      set_break_times(from.break_times());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_data::CopyFrom(const talisman_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_data::IsInitialized() const {

  return true;
}

void talisman_data::Swap(talisman_data* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(itemtid_, other->itemtid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(break_times_, other->break_times_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_data_descriptor_;
  metadata.reflection = talisman_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_show_data::kUuidFieldNumber;
const int hero_show_data::kTemplateIdFieldNumber;
const int hero_show_data::kLevelFieldNumber;
const int hero_show_data::kStarFieldNumber;
const int hero_show_data::kQualityFieldNumber;
const int hero_show_data::kSkillFieldNumber;
const int hero_show_data::kSoulFieldNumber;
const int hero_show_data::kExpFieldNumber;
const int hero_show_data::kAwakenFieldNumber;
const int hero_show_data::kAwakenAttrFieldNumber;
const int hero_show_data::kLockedFieldNumber;
const int hero_show_data::kCreateTimeFieldNumber;
const int hero_show_data::kSkinInfoFieldNumber;
const int hero_show_data::kNameFieldNumber;
const int hero_show_data::kFightPowerFieldNumber;
const int hero_show_data::kEquipsFieldNumber;
const int hero_show_data::kTalismansFieldNumber;
#endif  // !_MSC_VER

hero_show_data::hero_show_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_show_data::InitAsDefaultInstance() {
  skin_info_ = const_cast< ::SProtoSpace::skin_data*>(&::SProtoSpace::skin_data::default_instance());
}

hero_show_data::hero_show_data(const hero_show_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_show_data::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  level_ = 0;
  star_ = 0;
  quality_ = 0;
  exp_ = 0;
  awaken_ = false;
  locked_ = false;
  create_time_ = 0u;
  skin_info_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_show_data::~hero_show_data() {
  SharedDtor();
}

void hero_show_data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete skin_info_;
  }
}

void hero_show_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_show_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_show_data_descriptor_;
}

const hero_show_data& hero_show_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

hero_show_data* hero_show_data::default_instance_ = NULL;

hero_show_data* hero_show_data::New() const {
  return new hero_show_data;
}

void hero_show_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    level_ = 0;
    star_ = 0;
    quality_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awaken_ = false;
    locked_ = false;
    create_time_ = 0u;
    if (has_skin_info()) {
      if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fight_power_ = GOOGLE_LONGLONG(0);
  }
  skill_.Clear();
  soul_.Clear();
  awaken_attr_.Clear();
  equips_.Clear();
  talismans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_show_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // repeated .SProtoSpace.client_skill_data skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        if (input->ExpectTag(58)) goto parse_soul;
        break;
      }

      // repeated .SProtoSpace.client_soul_data soul = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_soul;
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_awaken;
        break;
      }

      // optional bool awaken = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awaken_)));
          set_has_awaken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_awaken_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awaken_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_awaken_attr;
        if (input->ExpectTag(88)) goto parse_locked;
        break;
      }

      // optional bool locked = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skin_info;
        break;
      }

      // optional .SProtoSpace.skin_data skin_info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skin_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_name;
        break;
      }

      // optional string name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fight_power;
        break;
      }

      // optional int64 fight_power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equips;
        if (input->ExpectTag(138)) goto parse_talismans;
        break;
      }

      // repeated .SProtoSpace.talisman_data talismans = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talismans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talismans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_talismans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_show_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->template_id(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // repeated .SProtoSpace.client_skill_data skill = 6;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill(i), output);
  }

  // repeated .SProtoSpace.client_soul_data soul = 7;
  for (int i = 0; i < this->soul_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->soul(i), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional bool awaken = 9;
  if (has_awaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->awaken(), output);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->awaken_attr(i), output);
  }

  // optional bool locked = 11;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->locked(), output);
  }

  // optional uint32 create_time = 12;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->create_time(), output);
  }

  // optional .SProtoSpace.skin_data skin_info = 13;
  if (has_skin_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skin_info(), output);
  }

  // optional string name = 14;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->name(), output);
  }

  // optional int64 fight_power = 15;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->fight_power(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->equips(i), output);
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  for (int i = 0; i < this->talismans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->talismans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_show_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // repeated .SProtoSpace.client_skill_data skill = 6;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill(i), target);
  }

  // repeated .SProtoSpace.client_soul_data soul = 7;
  for (int i = 0; i < this->soul_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->soul(i), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional bool awaken = 9;
  if (has_awaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->awaken(), target);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->awaken_attr(i), target);
  }

  // optional bool locked = 11;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->locked(), target);
  }

  // optional uint32 create_time = 12;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->create_time(), target);
  }

  // optional .SProtoSpace.skin_data skin_info = 13;
  if (has_skin_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skin_info(), target);
  }

  // optional string name = 14;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->name(), target);
  }

  // optional int64 fight_power = 15;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->fight_power(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->equips(i), target);
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  for (int i = 0; i < this->talismans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->talismans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_show_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool awaken = 9;
    if (has_awaken()) {
      total_size += 1 + 1;
    }

    // optional bool locked = 11;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional uint32 create_time = 12;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional .SProtoSpace.skin_data skin_info = 13;
    if (has_skin_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skin_info());
    }

    // optional string name = 14;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 fight_power = 15;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_power());
    }

  }
  // repeated .SProtoSpace.client_skill_data skill = 6;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  // repeated .SProtoSpace.client_soul_data soul = 7;
  total_size += 1 * this->soul_size();
  for (int i = 0; i < this->soul_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul(i));
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  total_size += 1 * this->awaken_attr_size();
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awaken_attr(i));
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  total_size += 2 * this->talismans_size();
  for (int i = 0; i < this->talismans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talismans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_show_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_show_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_show_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_show_data::MergeFrom(const hero_show_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  soul_.MergeFrom(from.soul_);
  awaken_attr_.MergeFrom(from.awaken_attr_);
  equips_.MergeFrom(from.equips_);
  talismans_.MergeFrom(from.talismans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_awaken()) {
      set_awaken(from.awaken());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_skin_info()) {
      mutable_skin_info()->::SProtoSpace::skin_data::MergeFrom(from.skin_info());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_show_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_show_data::CopyFrom(const hero_show_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_show_data::IsInitialized() const {

  for (int i = 0; i < awaken_attr_size(); i++) {
    if (!this->awaken_attr(i).IsInitialized()) return false;
  }
  return true;
}

void hero_show_data::Swap(hero_show_data* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    skill_.Swap(&other->skill_);
    soul_.Swap(&other->soul_);
    std::swap(exp_, other->exp_);
    std::swap(awaken_, other->awaken_);
    awaken_attr_.Swap(&other->awaken_attr_);
    std::swap(locked_, other->locked_);
    std::swap(create_time_, other->create_time_);
    std::swap(skin_info_, other->skin_info_);
    std::swap(name_, other->name_);
    std::swap(fight_power_, other->fight_power_);
    equips_.Swap(&other->equips_);
    talismans_.Swap(&other->talismans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_show_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_show_data_descriptor_;
  metadata.reflection = hero_show_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_attr::kIdFieldNumber;
const int soul_attr::kValueFieldNumber;
#endif  // !_MSC_VER

soul_attr::soul_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_attr::InitAsDefaultInstance() {
}

soul_attr::soul_attr(const soul_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_attr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_attr::~soul_attr() {
  SharedDtor();
}

void soul_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_attr_descriptor_;
}

const soul_attr& soul_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

soul_attr* soul_attr::default_instance_ = NULL;

soul_attr* soul_attr::New() const {
  return new soul_attr;
}

void soul_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_attr::MergeFrom(const soul_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_attr::CopyFrom(const soul_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_attr::IsInitialized() const {

  return true;
}

void soul_attr::Swap(soul_attr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_attr_descriptor_;
  metadata.reflection = soul_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_info::kIdFieldNumber;
const int soul_info::kTmpIdFieldNumber;
const int soul_info::kLvFieldNumber;
const int soul_info::kExpFieldNumber;
const int soul_info::kIsLockFieldNumber;
const int soul_info::kIsBindFieldNumber;
const int soul_info::kCreateTimeFieldNumber;
const int soul_info::kMainAttrFieldNumber;
const int soul_info::kSecondaryAttrFieldNumber;
#endif  // !_MSC_VER

soul_info::soul_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_info::InitAsDefaultInstance() {
}

soul_info::soul_info(const soul_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  tmp_id_ = 0;
  lv_ = 0;
  exp_ = 0;
  is_lock_ = false;
  is_bind_ = false;
  create_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_info::~soul_info() {
  SharedDtor();
}

void soul_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_info_descriptor_;
}

const soul_info& soul_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

soul_info* soul_info::default_instance_ = NULL;

soul_info* soul_info::New() const {
  return new soul_info;
}

void soul_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    tmp_id_ = 0;
    lv_ = 0;
    exp_ = 0;
    is_lock_ = false;
    is_bind_ = false;
    create_time_ = 0u;
  }
  main_attr_.Clear();
  secondary_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tmp_id;
        break;
      }

      // optional int32 tmp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_id_)));
          set_has_tmp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_lock;
        break;
      }

      // optional bool is_lock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lock_)));
          set_has_is_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_bind;
        break;
      }

      // optional bool is_bind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bind_)));
          set_has_is_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_main_attr;
        break;
      }

      // repeated .SProtoSpace.soul_attr main_attr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_main_attr;
        if (input->ExpectTag(82)) goto parse_secondary_attr;
        break;
      }

      // repeated .SProtoSpace.soul_attr secondary_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondary_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondary_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_secondary_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 tmp_id = 2;
  if (has_tmp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tmp_id(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional bool is_lock = 6;
  if (has_is_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_lock(), output);
  }

  // optional bool is_bind = 7;
  if (has_is_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_bind(), output);
  }

  // optional uint32 create_time = 8;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->create_time(), output);
  }

  // repeated .SProtoSpace.soul_attr main_attr = 9;
  for (int i = 0; i < this->main_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->main_attr(i), output);
  }

  // repeated .SProtoSpace.soul_attr secondary_attr = 10;
  for (int i = 0; i < this->secondary_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->secondary_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 tmp_id = 2;
  if (has_tmp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tmp_id(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional bool is_lock = 6;
  if (has_is_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_lock(), target);
  }

  // optional bool is_bind = 7;
  if (has_is_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_bind(), target);
  }

  // optional uint32 create_time = 8;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->create_time(), target);
  }

  // repeated .SProtoSpace.soul_attr main_attr = 9;
  for (int i = 0; i < this->main_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->main_attr(i), target);
  }

  // repeated .SProtoSpace.soul_attr secondary_attr = 10;
  for (int i = 0; i < this->secondary_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->secondary_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 tmp_id = 2;
    if (has_tmp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmp_id());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional bool is_lock = 6;
    if (has_is_lock()) {
      total_size += 1 + 1;
    }

    // optional bool is_bind = 7;
    if (has_is_bind()) {
      total_size += 1 + 1;
    }

    // optional uint32 create_time = 8;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

  }
  // repeated .SProtoSpace.soul_attr main_attr = 9;
  total_size += 1 * this->main_attr_size();
  for (int i = 0; i < this->main_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_attr(i));
  }

  // repeated .SProtoSpace.soul_attr secondary_attr = 10;
  total_size += 1 * this->secondary_attr_size();
  for (int i = 0; i < this->secondary_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondary_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_info::MergeFrom(const soul_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  main_attr_.MergeFrom(from.main_attr_);
  secondary_attr_.MergeFrom(from.secondary_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tmp_id()) {
      set_tmp_id(from.tmp_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_is_lock()) {
      set_is_lock(from.is_lock());
    }
    if (from.has_is_bind()) {
      set_is_bind(from.is_bind());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_info::CopyFrom(const soul_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_info::IsInitialized() const {

  return true;
}

void soul_info::Swap(soul_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tmp_id_, other->tmp_id_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(is_lock_, other->is_lock_);
    std::swap(is_bind_, other->is_bind_);
    std::swap(create_time_, other->create_time_);
    main_attr_.Swap(&other->main_attr_);
    secondary_attr_.Swap(&other->secondary_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_info_descriptor_;
  metadata.reflection = soul_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discover_monster::kIdFieldNumber;
const int discover_monster::kLevelFieldNumber;
#endif  // !_MSC_VER

discover_monster::discover_monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discover_monster::InitAsDefaultInstance() {
}

discover_monster::discover_monster(const discover_monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discover_monster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discover_monster::~discover_monster() {
  SharedDtor();
}

void discover_monster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discover_monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discover_monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discover_monster_descriptor_;
}

const discover_monster& discover_monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

discover_monster* discover_monster::default_instance_ = NULL;

discover_monster* discover_monster::New() const {
  return new discover_monster;
}

void discover_monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discover_monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discover_monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discover_monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discover_monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discover_monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discover_monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discover_monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discover_monster::MergeFrom(const discover_monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discover_monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discover_monster::CopyFrom(const discover_monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discover_monster::IsInitialized() const {

  return true;
}

void discover_monster::Swap(discover_monster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discover_monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discover_monster_descriptor_;
  metadata.reflection = discover_monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discover_data::kConfigIdFieldNumber;
const int discover_data::kIsOpenFieldNumber;
const int discover_data::kIsPassFieldNumber;
const int discover_data::kMoppingTimesRemainFieldNumber;
const int discover_data::kPassStarFieldNumber;
#endif  // !_MSC_VER

discover_data::discover_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discover_data::InitAsDefaultInstance() {
}

discover_data::discover_data(const discover_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discover_data::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  is_open_ = false;
  is_pass_ = false;
  mopping_times_remain_ = 0;
  pass_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discover_data::~discover_data() {
  SharedDtor();
}

void discover_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discover_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discover_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discover_data_descriptor_;
}

const discover_data& discover_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

discover_data* discover_data::default_instance_ = NULL;

discover_data* discover_data::New() const {
  return new discover_data;
}

void discover_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    is_open_ = false;
    is_pass_ = false;
    mopping_times_remain_ = 0;
    pass_star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discover_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_pass;
        break;
      }

      // optional bool is_pass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
          set_has_is_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mopping_times_remain;
        break;
      }

      // optional int32 mopping_times_remain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mopping_times_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopping_times_remain_)));
          set_has_mopping_times_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pass_star;
        break;
      }

      // optional int32 pass_star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_star_)));
          set_has_pass_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discover_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // optional bool is_pass = 3;
  if (has_is_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  // optional int32 mopping_times_remain = 4;
  if (has_mopping_times_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mopping_times_remain(), output);
  }

  // optional int32 pass_star = 5;
  if (has_pass_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pass_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discover_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // optional bool is_pass = 3;
  if (has_is_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  // optional int32 mopping_times_remain = 4;
  if (has_mopping_times_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mopping_times_remain(), target);
  }

  // optional int32 pass_star = 5;
  if (has_pass_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pass_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discover_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional bool is_open = 2;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_pass = 3;
    if (has_is_pass()) {
      total_size += 1 + 1;
    }

    // optional int32 mopping_times_remain = 4;
    if (has_mopping_times_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopping_times_remain());
    }

    // optional int32 pass_star = 5;
    if (has_pass_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discover_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discover_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discover_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discover_data::MergeFrom(const discover_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_is_pass()) {
      set_is_pass(from.is_pass());
    }
    if (from.has_mopping_times_remain()) {
      set_mopping_times_remain(from.mopping_times_remain());
    }
    if (from.has_pass_star()) {
      set_pass_star(from.pass_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discover_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discover_data::CopyFrom(const discover_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discover_data::IsInitialized() const {

  return true;
}

void discover_data::Swap(discover_data* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(is_open_, other->is_open_);
    std::swap(is_pass_, other->is_pass_);
    std::swap(mopping_times_remain_, other->mopping_times_remain_);
    std::swap(pass_star_, other->pass_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discover_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discover_data_descriptor_;
  metadata.reflection = discover_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dischapter_data::kConfigIdFieldNumber;
const int dischapter_data::kIsSimpleopenFieldNumber;
const int dischapter_data::kIsDiffopenFieldNumber;
const int dischapter_data::kIsSimplepassFieldNumber;
const int dischapter_data::kIsDiffpassFieldNumber;
#endif  // !_MSC_VER

dischapter_data::dischapter_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dischapter_data::InitAsDefaultInstance() {
}

dischapter_data::dischapter_data(const dischapter_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dischapter_data::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  is_simpleopen_ = false;
  is_diffopen_ = false;
  is_simplepass_ = false;
  is_diffpass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dischapter_data::~dischapter_data() {
  SharedDtor();
}

void dischapter_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dischapter_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dischapter_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dischapter_data_descriptor_;
}

const dischapter_data& dischapter_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

dischapter_data* dischapter_data::default_instance_ = NULL;

dischapter_data* dischapter_data::New() const {
  return new dischapter_data;
}

void dischapter_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    is_simpleopen_ = false;
    is_diffopen_ = false;
    is_simplepass_ = false;
    is_diffpass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dischapter_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_simpleopen;
        break;
      }

      // optional bool is_simpleopen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_simpleopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_simpleopen_)));
          set_has_is_simpleopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_diffopen;
        break;
      }

      // optional bool is_diffopen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_diffopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_diffopen_)));
          set_has_is_diffopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_simplepass;
        break;
      }

      // optional bool is_simplepass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_simplepass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_simplepass_)));
          set_has_is_simplepass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_diffpass;
        break;
      }

      // optional bool is_diffpass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_diffpass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_diffpass_)));
          set_has_is_diffpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dischapter_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional bool is_simpleopen = 2;
  if (has_is_simpleopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_simpleopen(), output);
  }

  // optional bool is_diffopen = 3;
  if (has_is_diffopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_diffopen(), output);
  }

  // optional bool is_simplepass = 4;
  if (has_is_simplepass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_simplepass(), output);
  }

  // optional bool is_diffpass = 5;
  if (has_is_diffpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_diffpass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dischapter_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional bool is_simpleopen = 2;
  if (has_is_simpleopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_simpleopen(), target);
  }

  // optional bool is_diffopen = 3;
  if (has_is_diffopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_diffopen(), target);
  }

  // optional bool is_simplepass = 4;
  if (has_is_simplepass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_simplepass(), target);
  }

  // optional bool is_diffpass = 5;
  if (has_is_diffpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_diffpass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dischapter_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional bool is_simpleopen = 2;
    if (has_is_simpleopen()) {
      total_size += 1 + 1;
    }

    // optional bool is_diffopen = 3;
    if (has_is_diffopen()) {
      total_size += 1 + 1;
    }

    // optional bool is_simplepass = 4;
    if (has_is_simplepass()) {
      total_size += 1 + 1;
    }

    // optional bool is_diffpass = 5;
    if (has_is_diffpass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dischapter_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dischapter_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dischapter_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dischapter_data::MergeFrom(const dischapter_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_is_simpleopen()) {
      set_is_simpleopen(from.is_simpleopen());
    }
    if (from.has_is_diffopen()) {
      set_is_diffopen(from.is_diffopen());
    }
    if (from.has_is_simplepass()) {
      set_is_simplepass(from.is_simplepass());
    }
    if (from.has_is_diffpass()) {
      set_is_diffpass(from.is_diffpass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dischapter_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dischapter_data::CopyFrom(const dischapter_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dischapter_data::IsInitialized() const {

  return true;
}

void dischapter_data::Swap(dischapter_data* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(is_simpleopen_, other->is_simpleopen_);
    std::swap(is_diffopen_, other->is_diffopen_);
    std::swap(is_simplepass_, other->is_simplepass_);
    std::swap(is_diffpass_, other->is_diffpass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dischapter_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dischapter_data_descriptor_;
  metadata.reflection = dischapter_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_discover_data::kLastIdFieldNumber;
const int all_discover_data::kDiscoverSFieldNumber;
#endif  // !_MSC_VER

all_discover_data::all_discover_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_discover_data::InitAsDefaultInstance() {
}

all_discover_data::all_discover_data(const all_discover_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_discover_data::SharedCtor() {
  _cached_size_ = 0;
  last_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_discover_data::~all_discover_data() {
  SharedDtor();
}

void all_discover_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_discover_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_discover_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_discover_data_descriptor_;
}

const all_discover_data& all_discover_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

all_discover_data* all_discover_data::default_instance_ = NULL;

all_discover_data* all_discover_data::New() const {
  return new all_discover_data;
}

void all_discover_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_id_ = 0;
  }
  discover_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_discover_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 last_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_id_)));
          set_has_last_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_discover_s;
        break;
      }

      // repeated .SProtoSpace.discover_data discover_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discover_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discover_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_discover_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_discover_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 last_id = 1;
  if (has_last_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->last_id(), output);
  }

  // repeated .SProtoSpace.discover_data discover_s = 2;
  for (int i = 0; i < this->discover_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->discover_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_discover_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 last_id = 1;
  if (has_last_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->last_id(), target);
  }

  // repeated .SProtoSpace.discover_data discover_s = 2;
  for (int i = 0; i < this->discover_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->discover_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_discover_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 last_id = 1;
    if (has_last_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_id());
    }

  }
  // repeated .SProtoSpace.discover_data discover_s = 2;
  total_size += 1 * this->discover_s_size();
  for (int i = 0; i < this->discover_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discover_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_discover_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_discover_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_discover_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_discover_data::MergeFrom(const all_discover_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  discover_s_.MergeFrom(from.discover_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_id()) {
      set_last_id(from.last_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_discover_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_discover_data::CopyFrom(const all_discover_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_discover_data::IsInitialized() const {

  return true;
}

void all_discover_data::Swap(all_discover_data* other) {
  if (other != this) {
    std::swap(last_id_, other->last_id_);
    discover_s_.Swap(&other->discover_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_discover_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_discover_data_descriptor_;
  metadata.reflection = all_discover_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int drop_data::kIdFieldNumber;
const int drop_data::kTypeFieldNumber;
const int drop_data::kCountFieldNumber;
#endif  // !_MSC_VER

drop_data::drop_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void drop_data::InitAsDefaultInstance() {
}

drop_data::drop_data(const drop_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void drop_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

drop_data::~drop_data() {
  SharedDtor();
}

void drop_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void drop_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* drop_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return drop_data_descriptor_;
}

const drop_data& drop_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

drop_data* drop_data::default_instance_ = NULL;

drop_data* drop_data::New() const {
  return new drop_data;
}

void drop_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool drop_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void drop_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* drop_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int drop_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void drop_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const drop_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const drop_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void drop_data::MergeFrom(const drop_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void drop_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_data::CopyFrom(const drop_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void drop_data::Swap(drop_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata drop_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = drop_data_descriptor_;
  metadata.reflection = drop_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_attr_pair::kTypeFieldNumber;
const int role_attr_pair::kValFieldNumber;
#endif  // !_MSC_VER

role_attr_pair::role_attr_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_attr_pair::InitAsDefaultInstance() {
}

role_attr_pair::role_attr_pair(const role_attr_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_attr_pair::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_attr_pair::~role_attr_pair() {
  SharedDtor();
}

void role_attr_pair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_attr_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_attr_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_attr_pair_descriptor_;
}

const role_attr_pair& role_attr_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_attr_pair* role_attr_pair::default_instance_ = NULL;

role_attr_pair* role_attr_pair::New() const {
  return new role_attr_pair;
}

void role_attr_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_attr_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EItemType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EItemType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int32 val = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_attr_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EItemType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 val = 2 [default = 0];
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_attr_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EItemType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 val = 2 [default = 0];
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_attr_pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EItemType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 val = 2 [default = 0];
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_attr_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_attr_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_attr_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_attr_pair::MergeFrom(const role_attr_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_attr_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_attr_pair::CopyFrom(const role_attr_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_attr_pair::IsInitialized() const {

  return true;
}

void role_attr_pair::Swap(role_attr_pair* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_attr_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_attr_pair_descriptor_;
  metadata.reflection = role_attr_pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_property::kAttrModDataFieldNumber;
const int player_property::kAttrModPerFieldNumber;
#endif  // !_MSC_VER

player_property::player_property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_property::InitAsDefaultInstance() {
}

player_property::player_property(const player_property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_property::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_property::~player_property() {
  SharedDtor();
}

void player_property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_property_descriptor_;
}

const player_property& player_property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_property* player_property::default_instance_ = NULL;

player_property* player_property::New() const {
  return new player_property;
}

void player_property::Clear() {
  attr_mod_data_.Clear();
  attr_mod_per_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_mod_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_mod_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_mod_data;
        if (input->ExpectTag(26)) goto parse_attr_mod_per;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_mod_per:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_mod_per()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr_mod_per;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
  for (int i = 0; i < this->attr_mod_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr_mod_data(i), output);
  }

  // repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
  for (int i = 0; i < this->attr_mod_per_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr_mod_per(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
  for (int i = 0; i < this->attr_mod_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr_mod_data(i), target);
  }

  // repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
  for (int i = 0; i < this->attr_mod_per_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr_mod_per(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_property::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
  total_size += 1 * this->attr_mod_data_size();
  for (int i = 0; i < this->attr_mod_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_mod_data(i));
  }

  // repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
  total_size += 1 * this->attr_mod_per_size();
  for (int i = 0; i < this->attr_mod_per_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_mod_per(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_property::MergeFrom(const player_property& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_mod_data_.MergeFrom(from.attr_mod_data_);
  attr_mod_per_.MergeFrom(from.attr_mod_per_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_property::CopyFrom(const player_property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_property::IsInitialized() const {

  for (int i = 0; i < attr_mod_data_size(); i++) {
    if (!this->attr_mod_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attr_mod_per_size(); i++) {
    if (!this->attr_mod_per(i).IsInitialized()) return false;
  }
  return true;
}

void player_property::Swap(player_property* other) {
  if (other != this) {
    attr_mod_data_.Swap(&other->attr_mod_data_);
    attr_mod_per_.Swap(&other->attr_mod_per_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_property_descriptor_;
  metadata.reflection = player_property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_skill_info::kTemplateIdFieldNumber;
const int player_skill_info::kSkillStatusFieldNumber;
const int player_skill_info::kSkillTypeFieldNumber;
const int player_skill_info::kLvFieldNumber;
#endif  // !_MSC_VER

player_skill_info::player_skill_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_skill_info::InitAsDefaultInstance() {
}

player_skill_info::player_skill_info(const player_skill_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_skill_info::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  skill_status_ = 1;
  skill_type_ = 1;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_skill_info::~player_skill_info() {
  SharedDtor();
}

void player_skill_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_skill_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_skill_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_skill_info_descriptor_;
}

const player_skill_info& player_skill_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_skill_info* player_skill_info::default_instance_ = NULL;

player_skill_info* player_skill_info::New() const {
  return new player_skill_info;
}

void player_skill_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    skill_status_ = 1;
    skill_type_ = 1;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_skill_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_status;
        break;
      }

      // optional .SProtoSpace.SKILL_STATUS skill_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::SKILL_STATUS_IsValid(value)) {
            set_skill_status(static_cast< ::SProtoSpace::SKILL_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_type;
        break;
      }

      // optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::PLAYER_SKILL_TYPE_IsValid(value)) {
            set_skill_type(static_cast< ::SProtoSpace::PLAYER_SKILL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_skill_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional .SProtoSpace.SKILL_STATUS skill_status = 2;
  if (has_skill_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->skill_status(), output);
  }

  // optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->skill_type(), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_skill_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional .SProtoSpace.SKILL_STATUS skill_status = 2;
  if (has_skill_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->skill_status(), target);
  }

  // optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->skill_type(), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_skill_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .SProtoSpace.SKILL_STATUS skill_status = 2;
    if (has_skill_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_status());
    }

    // optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_type());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_skill_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_skill_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_skill_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_skill_info::MergeFrom(const player_skill_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_skill_status()) {
      set_skill_status(from.skill_status());
    }
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_skill_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_skill_info::CopyFrom(const player_skill_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_skill_info::IsInitialized() const {

  return true;
}

void player_skill_info::Swap(player_skill_info* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(skill_status_, other->skill_status_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_skill_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_skill_info_descriptor_;
  metadata.reflection = player_skill_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talent_info::kTemplateIdFieldNumber;
const int talent_info::kTalentStatusFieldNumber;
#endif  // !_MSC_VER

talent_info::talent_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talent_info::InitAsDefaultInstance() {
}

talent_info::talent_info(const talent_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talent_info::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  talent_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talent_info::~talent_info() {
  SharedDtor();
}

void talent_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talent_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talent_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talent_info_descriptor_;
}

const talent_info& talent_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

talent_info* talent_info::default_instance_ = NULL;

talent_info* talent_info::New() const {
  return new talent_info;
}

void talent_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    talent_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talent_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_talent_status;
        break;
      }

      // optional .SProtoSpace.TALENT_STATUS talent_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::TALENT_STATUS_IsValid(value)) {
            set_talent_status(static_cast< ::SProtoSpace::TALENT_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talent_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional .SProtoSpace.TALENT_STATUS talent_status = 2;
  if (has_talent_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->talent_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talent_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional .SProtoSpace.TALENT_STATUS talent_status = 2;
  if (has_talent_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->talent_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talent_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional .SProtoSpace.TALENT_STATUS talent_status = 2;
    if (has_talent_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->talent_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talent_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talent_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talent_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talent_info::MergeFrom(const talent_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_talent_status()) {
      set_talent_status(from.talent_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talent_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talent_info::CopyFrom(const talent_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talent_info::IsInitialized() const {

  return true;
}

void talent_info::Swap(talent_info* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(talent_status_, other->talent_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talent_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talent_info_descriptor_;
  metadata.reflection = talent_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_skin_info::kTemplateIdFieldNumber;
const int player_skin_info::kEndTimeFieldNumber;
#endif  // !_MSC_VER

player_skin_info::player_skin_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_skin_info::InitAsDefaultInstance() {
}

player_skin_info::player_skin_info(const player_skin_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_skin_info::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_skin_info::~player_skin_info() {
  SharedDtor();
}

void player_skin_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_skin_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_skin_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_skin_info_descriptor_;
}

const player_skin_info& player_skin_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_skin_info* player_skin_info::default_instance_ = NULL;

player_skin_info* player_skin_info::New() const {
  return new player_skin_info;
}

void player_skin_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_skin_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_skin_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_skin_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_skin_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_skin_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_skin_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_skin_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_skin_info::MergeFrom(const player_skin_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_skin_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_skin_info::CopyFrom(const player_skin_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_skin_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void player_skin_info::Swap(player_skin_info* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_skin_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_skin_info_descriptor_;
  metadata.reflection = player_skin_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_skin_data::kWearIdFieldNumber;
const int player_skin_data::kSkinListFieldNumber;
#endif  // !_MSC_VER

player_skin_data::player_skin_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_skin_data::InitAsDefaultInstance() {
}

player_skin_data::player_skin_data(const player_skin_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_skin_data::SharedCtor() {
  _cached_size_ = 0;
  wear_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_skin_data::~player_skin_data() {
  SharedDtor();
}

void player_skin_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_skin_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_skin_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_skin_data_descriptor_;
}

const player_skin_data& player_skin_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_skin_data* player_skin_data::default_instance_ = NULL;

player_skin_data* player_skin_data::New() const {
  return new player_skin_data;
}

void player_skin_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wear_id_ = 0u;
  }
  skin_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_skin_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wear_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wear_id_)));
          set_has_wear_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skin_list;
        break;
      }

      // repeated .SProtoSpace.player_skin_info skin_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skin_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skin_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_skin_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wear_id = 1;
  if (has_wear_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wear_id(), output);
  }

  // repeated .SProtoSpace.player_skin_info skin_list = 2;
  for (int i = 0; i < this->skin_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skin_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_skin_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wear_id = 1;
  if (has_wear_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wear_id(), target);
  }

  // repeated .SProtoSpace.player_skin_info skin_list = 2;
  for (int i = 0; i < this->skin_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skin_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_skin_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wear_id = 1;
    if (has_wear_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wear_id());
    }

  }
  // repeated .SProtoSpace.player_skin_info skin_list = 2;
  total_size += 1 * this->skin_list_size();
  for (int i = 0; i < this->skin_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skin_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_skin_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_skin_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_skin_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_skin_data::MergeFrom(const player_skin_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skin_list_.MergeFrom(from.skin_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wear_id()) {
      set_wear_id(from.wear_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_skin_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_skin_data::CopyFrom(const player_skin_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_skin_data::IsInitialized() const {

  for (int i = 0; i < skin_list_size(); i++) {
    if (!this->skin_list(i).IsInitialized()) return false;
  }
  return true;
}

void player_skin_data::Swap(player_skin_data* other) {
  if (other != this) {
    std::swap(wear_id_, other->wear_id_);
    skin_list_.Swap(&other->skin_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_skin_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_skin_data_descriptor_;
  metadata.reflection = player_skin_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

player_equip_data::player_equip_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_equip_data::InitAsDefaultInstance() {
}

player_equip_data::player_equip_data(const player_equip_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_equip_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_equip_data::~player_equip_data() {
  SharedDtor();
}

void player_equip_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_equip_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_equip_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_equip_data_descriptor_;
}

const player_equip_data& player_equip_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_equip_data* player_equip_data::default_instance_ = NULL;

player_equip_data* player_equip_data::New() const {
  return new player_equip_data;
}

void player_equip_data::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_equip_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void player_equip_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_equip_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_equip_data::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_equip_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_equip_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_equip_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_equip_data::MergeFrom(const player_equip_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_equip_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_equip_data::CopyFrom(const player_equip_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_equip_data::IsInitialized() const {

  return true;
}

void player_equip_data::Swap(player_equip_data* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_equip_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_equip_data_descriptor_;
  metadata.reflection = player_equip_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_data::kTemplateIdFieldNumber;
const int player_data::kSkillDataFieldNumber;
const int player_data::kSkinDataFieldNumber;
const int player_data::kEquipListFieldNumber;
const int player_data::kTalentsFieldNumber;
const int player_data::kTalentGradeFieldNumber;
const int player_data::kFightValueFieldNumber;
const int player_data::kTalismansFieldNumber;
#endif  // !_MSC_VER

player_data::player_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_data::InitAsDefaultInstance() {
  skin_data_ = const_cast< ::SProtoSpace::player_skin_data*>(&::SProtoSpace::player_skin_data::default_instance());
  equip_list_ = const_cast< ::SProtoSpace::player_equip_data*>(&::SProtoSpace::player_equip_data::default_instance());
}

player_data::player_data(const player_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_data::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  skin_data_ = NULL;
  equip_list_ = NULL;
  talent_grade_ = 0;
  fight_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_data::~player_data() {
  SharedDtor();
}

void player_data::SharedDtor() {
  if (this != default_instance_) {
    delete skin_data_;
    delete equip_list_;
  }
}

void player_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_data_descriptor_;
}

const player_data& player_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

player_data* player_data::default_instance_ = NULL;

player_data* player_data::New() const {
  return new player_data;
}

void player_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
    if (has_skin_data()) {
      if (skin_data_ != NULL) skin_data_->::SProtoSpace::player_skin_data::Clear();
    }
    if (has_equip_list()) {
      if (equip_list_ != NULL) equip_list_->::SProtoSpace::player_equip_data::Clear();
    }
    talent_grade_ = 0;
    fight_value_ = 0;
  }
  skill_data_.Clear();
  talents_.Clear();
  talismans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_data;
        break;
      }

      // repeated .SProtoSpace.player_skill_info skill_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_data;
        if (input->ExpectTag(26)) goto parse_skin_data;
        break;
      }

      // optional .SProtoSpace.player_skin_data skin_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skin_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_list;
        break;
      }

      // optional .SProtoSpace.player_equip_data equip_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talents;
        break;
      }

      // repeated .SProtoSpace.talent_data talents = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talents;
        if (input->ExpectTag(48)) goto parse_talent_grade;
        break;
      }

      // optional int32 talent_grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_grade_)));
          set_has_talent_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_value;
        break;
      }

      // optional int32 fight_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_talismans;
        break;
      }

      // repeated .SProtoSpace.talisman_data talismans = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talismans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talismans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_talismans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // repeated .SProtoSpace.player_skill_info skill_data = 2;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_data(i), output);
  }

  // optional .SProtoSpace.player_skin_data skin_data = 3;
  if (has_skin_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skin_data(), output);
  }

  // optional .SProtoSpace.player_equip_data equip_list = 4;
  if (has_equip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip_list(), output);
  }

  // repeated .SProtoSpace.talent_data talents = 5;
  for (int i = 0; i < this->talents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->talents(i), output);
  }

  // optional int32 talent_grade = 6;
  if (has_talent_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->talent_grade(), output);
  }

  // optional int32 fight_value = 7;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fight_value(), output);
  }

  // repeated .SProtoSpace.talisman_data talismans = 8;
  for (int i = 0; i < this->talismans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->talismans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // repeated .SProtoSpace.player_skill_info skill_data = 2;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_data(i), target);
  }

  // optional .SProtoSpace.player_skin_data skin_data = 3;
  if (has_skin_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skin_data(), target);
  }

  // optional .SProtoSpace.player_equip_data equip_list = 4;
  if (has_equip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip_list(), target);
  }

  // repeated .SProtoSpace.talent_data talents = 5;
  for (int i = 0; i < this->talents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->talents(i), target);
  }

  // optional int32 talent_grade = 6;
  if (has_talent_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->talent_grade(), target);
  }

  // optional int32 fight_value = 7;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fight_value(), target);
  }

  // repeated .SProtoSpace.talisman_data talismans = 8;
  for (int i = 0; i < this->talismans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->talismans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional .SProtoSpace.player_skin_data skin_data = 3;
    if (has_skin_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skin_data());
    }

    // optional .SProtoSpace.player_equip_data equip_list = 4;
    if (has_equip_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_list());
    }

    // optional int32 talent_grade = 6;
    if (has_talent_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_grade());
    }

    // optional int32 fight_value = 7;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_value());
    }

  }
  // repeated .SProtoSpace.player_skill_info skill_data = 2;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .SProtoSpace.talent_data talents = 5;
  total_size += 1 * this->talents_size();
  for (int i = 0; i < this->talents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talents(i));
  }

  // repeated .SProtoSpace.talisman_data talismans = 8;
  total_size += 1 * this->talismans_size();
  for (int i = 0; i < this->talismans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talismans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_data::MergeFrom(const player_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_data_.MergeFrom(from.skill_data_);
  talents_.MergeFrom(from.talents_);
  talismans_.MergeFrom(from.talismans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_skin_data()) {
      mutable_skin_data()->::SProtoSpace::player_skin_data::MergeFrom(from.skin_data());
    }
    if (from.has_equip_list()) {
      mutable_equip_list()->::SProtoSpace::player_equip_data::MergeFrom(from.equip_list());
    }
    if (from.has_talent_grade()) {
      set_talent_grade(from.talent_grade());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_data::CopyFrom(const player_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_skin_data()) {
    if (!this->skin_data().IsInitialized()) return false;
  }
  return true;
}

void player_data::Swap(player_data* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(skin_data_, other->skin_data_);
    std::swap(equip_list_, other->equip_list_);
    talents_.Swap(&other->talents_);
    std::swap(talent_grade_, other->talent_grade_);
    std::swap(fight_value_, other->fight_value_);
    talismans_.Swap(&other->talismans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_data_descriptor_;
  metadata.reflection = player_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_token_data::kTokenFieldNumber;
const int account_token_data::kTempidFieldNumber;
const int account_token_data::kLastverifytimeFieldNumber;
#endif  // !_MSC_VER

account_token_data::account_token_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_token_data::InitAsDefaultInstance() {
}

account_token_data::account_token_data(const account_token_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_token_data::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tempid_ = 0u;
  lastverifytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_token_data::~account_token_data() {
  SharedDtor();
}

void account_token_data::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void account_token_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_token_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_token_data_descriptor_;
}

const account_token_data& account_token_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

account_token_data* account_token_data::default_instance_ = NULL;

account_token_data* account_token_data::New() const {
  return new account_token_data;
}

void account_token_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    tempid_ = 0u;
    lastverifytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_token_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tempid;
        break;
      }

      // required uint32 tempid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastverifytime;
        break;
      }

      // required uint32 lastverifytime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastverifytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastverifytime_)));
          set_has_lastverifytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_token_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 tempid = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tempid(), output);
  }

  // required uint32 lastverifytime = 3;
  if (has_lastverifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastverifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_token_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 tempid = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tempid(), target);
  }

  // required uint32 lastverifytime = 3;
  if (has_lastverifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastverifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_token_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 tempid = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // required uint32 lastverifytime = 3;
    if (has_lastverifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastverifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_token_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_token_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_token_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_token_data::MergeFrom(const account_token_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_lastverifytime()) {
      set_lastverifytime(from.lastverifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_token_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_token_data::CopyFrom(const account_token_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_token_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void account_token_data::Swap(account_token_data* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(tempid_, other->tempid_);
    std::swap(lastverifytime_, other->lastverifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_token_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_token_data_descriptor_;
  metadata.reflection = account_token_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_gate_data::kGateidFieldNumber;
#endif  // !_MSC_VER

account_gate_data::account_gate_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_gate_data::InitAsDefaultInstance() {
}

account_gate_data::account_gate_data(const account_gate_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_gate_data::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_gate_data::~account_gate_data() {
  SharedDtor();
}

void account_gate_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void account_gate_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_gate_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_gate_data_descriptor_;
}

const account_gate_data& account_gate_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

account_gate_data* account_gate_data::default_instance_ = NULL;

account_gate_data* account_gate_data::New() const {
  return new account_gate_data;
}

void account_gate_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_gate_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_gate_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_gate_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_gate_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_gate_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_gate_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_gate_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_gate_data::MergeFrom(const account_gate_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_gate_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_gate_data::CopyFrom(const account_gate_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_gate_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void account_gate_data::Swap(account_gate_data* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_gate_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_gate_data_descriptor_;
  metadata.reflection = account_gate_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_gateserver_info::kZoneIdFieldNumber;
const int area_gateserver_info::kIpFieldNumber;
const int area_gateserver_info::kPortFieldNumber;
const int area_gateserver_info::kStatusFieldNumber;
#endif  // !_MSC_VER

area_gateserver_info::area_gateserver_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_gateserver_info::InitAsDefaultInstance() {
}

area_gateserver_info::area_gateserver_info(const area_gateserver_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_gateserver_info::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_gateserver_info::~area_gateserver_info() {
  SharedDtor();
}

void area_gateserver_info::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void area_gateserver_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_gateserver_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_gateserver_info_descriptor_;
}

const area_gateserver_info& area_gateserver_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

area_gateserver_info* area_gateserver_info::default_instance_ = NULL;

area_gateserver_info* area_gateserver_info::New() const {
  return new area_gateserver_info;
}

void area_gateserver_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_gateserver_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_gateserver_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_gateserver_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_gateserver_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_gateserver_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_gateserver_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_gateserver_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_gateserver_info::MergeFrom(const area_gateserver_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_gateserver_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_gateserver_info::CopyFrom(const area_gateserver_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_gateserver_info::IsInitialized() const {

  return true;
}

void area_gateserver_info::Swap(area_gateserver_info* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_gateserver_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_gateserver_info_descriptor_;
  metadata.reflection = area_gateserver_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_system::kSystemIdFieldNumber;
const int game_system::kIsOpenFieldNumber;
#endif  // !_MSC_VER

game_system::game_system()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_system::InitAsDefaultInstance() {
}

game_system::game_system(const game_system& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_system::SharedCtor() {
  _cached_size_ = 0;
  system_id_ = 0u;
  is_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_system::~game_system() {
  SharedDtor();
}

void game_system::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_system::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_system::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_system_descriptor_;
}

const game_system& game_system::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

game_system* game_system::default_instance_ = NULL;

game_system* game_system::New() const {
  return new game_system;
}

void game_system::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    system_id_ = 0u;
    is_open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_system::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 system_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_id_)));
          set_has_system_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_system::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 system_id = 1;
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->system_id(), output);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_system::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 system_id = 1;
  if (has_system_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->system_id(), target);
  }

  // optional bool is_open = 2;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_system::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 system_id = 1;
    if (has_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_id());
    }

    // optional bool is_open = 2;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_system::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_system* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_system*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_system::MergeFrom(const game_system& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_id()) {
      set_system_id(from.system_id());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_system::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_system::CopyFrom(const game_system& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_system::IsInitialized() const {

  return true;
}

void game_system::Swap(game_system* other) {
  if (other != this) {
    std::swap(system_id_, other->system_id_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_system::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_system_descriptor_;
  metadata.reflection = game_system_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chest_data::kItemIdFieldNumber;
const int chest_data::kItemCountFieldNumber;
#endif  // !_MSC_VER

chest_data::chest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chest_data::InitAsDefaultInstance() {
}

chest_data::chest_data(const chest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chest_data::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chest_data::~chest_data() {
  SharedDtor();
}

void chest_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chest_data_descriptor_;
}

const chest_data& chest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

chest_data* chest_data::default_instance_ = NULL;

chest_data* chest_data::New() const {
  return new chest_data;
}

void chest_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chest_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chest_data::MergeFrom(const chest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chest_data::CopyFrom(const chest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chest_data::IsInitialized() const {

  return true;
}

void chest_data::Swap(chest_data* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chest_data_descriptor_;
  metadata.reflection = chest_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_chest::kChestIdFieldNumber;
const int role_chest::kQualityFieldNumber;
const int role_chest::kChestsFieldNumber;
#endif  // !_MSC_VER

role_chest::role_chest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_chest::InitAsDefaultInstance() {
}

role_chest::role_chest(const role_chest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_chest::SharedCtor() {
  _cached_size_ = 0;
  chest_id_ = GOOGLE_ULONGLONG(0);
  quality_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_chest::~role_chest() {
  SharedDtor();
}

void role_chest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_chest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_chest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_chest_descriptor_;
}

const role_chest& role_chest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_chest* role_chest::default_instance_ = NULL;

role_chest* role_chest::New() const {
  return new role_chest;
}

void role_chest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chest_id_ = GOOGLE_ULONGLONG(0);
    quality_ = 1;
  }
  chests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_chest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chest_id_)));
          set_has_chest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional .SProtoSpace.eChestQuality quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eChestQuality_IsValid(value)) {
            set_quality(static_cast< ::SProtoSpace::eChestQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chests;
        break;
      }

      // repeated .SProtoSpace.chest_data chests = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_chest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 chest_id = 1;
  if (has_chest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chest_id(), output);
  }

  // optional .SProtoSpace.eChestQuality quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->quality(), output);
  }

  // repeated .SProtoSpace.chest_data chests = 3;
  for (int i = 0; i < this->chests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_chest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 chest_id = 1;
  if (has_chest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chest_id(), target);
  }

  // optional .SProtoSpace.eChestQuality quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->quality(), target);
  }

  // repeated .SProtoSpace.chest_data chests = 3;
  for (int i = 0; i < this->chests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_chest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 chest_id = 1;
    if (has_chest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chest_id());
    }

    // optional .SProtoSpace.eChestQuality quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  // repeated .SProtoSpace.chest_data chests = 3;
  total_size += 1 * this->chests_size();
  for (int i = 0; i < this->chests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_chest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_chest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_chest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_chest::MergeFrom(const role_chest& from) {
  GOOGLE_CHECK_NE(&from, this);
  chests_.MergeFrom(from.chests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chest_id()) {
      set_chest_id(from.chest_id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_chest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_chest::CopyFrom(const role_chest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_chest::IsInitialized() const {

  return true;
}

void role_chest::Swap(role_chest* other) {
  if (other != this) {
    std::swap(chest_id_, other->chest_id_);
    std::swap(quality_, other->quality_);
    chests_.Swap(&other->chests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_chest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_chest_descriptor_;
  metadata.reflection = role_chest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_item_data::kRankLvFieldNumber;
const int offical_item_data::kRoleIdFieldNumber;
const int offical_item_data::kRankingIdFieldNumber;
const int offical_item_data::kLvFieldNumber;
const int offical_item_data::kSexFieldNumber;
const int offical_item_data::kGongdoupowerFieldNumber;
const int offical_item_data::kWinNumFieldNumber;
const int offical_item_data::kFailNumFieldNumber;
const int offical_item_data::kRoleNameFieldNumber;
const int offical_item_data::kHeadFieldNumber;
const int offical_item_data::kUnionNameFieldNumber;
#endif  // !_MSC_VER

offical_item_data::offical_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_item_data::InitAsDefaultInstance() {
}

offical_item_data::offical_item_data(const offical_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_item_data::SharedCtor() {
  _cached_size_ = 0;
  rank_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ranking_id_ = 0u;
  lv_ = 0u;
  sex_ = 0u;
  gongdoupower_ = 0u;
  win_num_ = 0;
  fail_num_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_item_data::~offical_item_data() {
  SharedDtor();
}

void offical_item_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    delete union_name_;
  }
  if (this != default_instance_) {
  }
}

void offical_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_item_data_descriptor_;
}

const offical_item_data& offical_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_item_data* offical_item_data::default_instance_ = NULL;

offical_item_data* offical_item_data::New() const {
  return new offical_item_data;
}

void offical_item_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    ranking_id_ = 0u;
    lv_ = 0u;
    sex_ = 0u;
    gongdoupower_ = 0u;
    win_num_ = 0;
    fail_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_union_name()) {
      if (union_name_ != &::google::protobuf::internal::kEmptyString) {
        union_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EGrade rank_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_rank_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking_id;
        break;
      }

      // optional uint32 ranking_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gongdoupower;
        break;
      }

      // optional uint32 gongdoupower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gongdoupower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gongdoupower_)));
          set_has_gongdoupower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fail_num;
        break;
      }

      // optional int32 fail_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_num_)));
          set_has_fail_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_name;
        break;
      }

      // optional string role_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_head;
        break;
      }

      // optional string head = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_union_name;
        break;
      }

      // optional string union_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_union_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_union_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->union_name().data(), this->union_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_lv(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 ranking_id = 3;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ranking_id(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 gongdoupower = 6;
  if (has_gongdoupower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gongdoupower(), output);
  }

  // optional int32 win_num = 7;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_num(), output);
  }

  // optional int32 fail_num = 8;
  if (has_fail_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fail_num(), output);
  }

  // optional string role_name = 9;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->role_name(), output);
  }

  // optional string head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->head(), output);
  }

  // optional string union_name = 11;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->union_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_lv(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 ranking_id = 3;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ranking_id(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 gongdoupower = 6;
  if (has_gongdoupower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gongdoupower(), target);
  }

  // optional int32 win_num = 7;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_num(), target);
  }

  // optional int32 fail_num = 8;
  if (has_fail_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fail_num(), target);
  }

  // optional string role_name = 9;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->role_name(), target);
  }

  // optional string head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->head(), target);
  }

  // optional string union_name = 11;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->union_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_item_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EGrade rank_lv = 1;
    if (has_rank_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_lv());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ranking_id = 3;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking_id());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 gongdoupower = 6;
    if (has_gongdoupower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gongdoupower());
    }

    // optional int32 win_num = 7;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 fail_num = 8;
    if (has_fail_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string role_name = 9;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional string union_name = 11;
    if (has_union_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->union_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_item_data::MergeFrom(const offical_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_lv()) {
      set_rank_lv(from.rank_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_gongdoupower()) {
      set_gongdoupower(from.gongdoupower());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_fail_num()) {
      set_fail_num(from.fail_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_union_name()) {
      set_union_name(from.union_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_item_data::CopyFrom(const offical_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_item_data::IsInitialized() const {

  return true;
}

void offical_item_data::Swap(offical_item_data* other) {
  if (other != this) {
    std::swap(rank_lv_, other->rank_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(ranking_id_, other->ranking_id_);
    std::swap(lv_, other->lv_);
    std::swap(sex_, other->sex_);
    std::swap(gongdoupower_, other->gongdoupower_);
    std::swap(win_num_, other->win_num_);
    std::swap(fail_num_, other->fail_num_);
    std::swap(role_name_, other->role_name_);
    std::swap(head_, other->head_);
    std::swap(union_name_, other->union_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_item_data_descriptor_;
  metadata.reflection = offical_item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_member_data::kRoleIdFieldNumber;
const int offical_member_data::kRoleNameFieldNumber;
const int offical_member_data::kRankingIdFieldNumber;
const int offical_member_data::kLvFieldNumber;
const int offical_member_data::kSexFieldNumber;
const int offical_member_data::kHeadFieldNumber;
const int offical_member_data::kGongdoupowerFieldNumber;
const int offical_member_data::kUnionNameFieldNumber;
const int offical_member_data::kGradeFieldNumber;
#endif  // !_MSC_VER

offical_member_data::offical_member_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_member_data::InitAsDefaultInstance() {
}

offical_member_data::offical_member_data(const offical_member_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_member_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranking_id_ = 0u;
  lv_ = 0u;
  sex_ = 0u;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gongdoupower_ = 0u;
  union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_member_data::~offical_member_data() {
  SharedDtor();
}

void offical_member_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    delete union_name_;
  }
  if (this != default_instance_) {
  }
}

void offical_member_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_member_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_member_data_descriptor_;
}

const offical_member_data& offical_member_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_member_data* offical_member_data::default_instance_ = NULL;

offical_member_data* offical_member_data::New() const {
  return new offical_member_data;
}

void offical_member_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    ranking_id_ = 0u;
    lv_ = 0u;
    sex_ = 0u;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    gongdoupower_ = 0u;
    if (has_union_name()) {
      if (union_name_ != &::google::protobuf::internal::kEmptyString) {
        union_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_member_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranking_id;
        break;
      }

      // optional uint32 ranking_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_head;
        break;
      }

      // optional string head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gongdoupower;
        break;
      }

      // optional uint32 gongdoupower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gongdoupower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gongdoupower_)));
          set_has_gongdoupower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_union_name;
        break;
      }

      // optional string union_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_union_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_union_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->union_name().data(), this->union_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_grade;
        break;
      }

      // optional int32 grade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_member_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 ranking_id = 3;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ranking_id(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->head(), output);
  }

  // optional uint32 gongdoupower = 7;
  if (has_gongdoupower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gongdoupower(), output);
  }

  // optional string union_name = 8;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->union_name(), output);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_member_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 ranking_id = 3;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ranking_id(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->head(), target);
  }

  // optional uint32 gongdoupower = 7;
  if (has_gongdoupower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gongdoupower(), target);
  }

  // optional string union_name = 8;
  if (has_union_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->union_name().data(), this->union_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->union_name(), target);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_member_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 ranking_id = 3;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking_id());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional uint32 gongdoupower = 7;
    if (has_gongdoupower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gongdoupower());
    }

    // optional string union_name = 8;
    if (has_union_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->union_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grade = 9;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_member_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_member_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_member_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_member_data::MergeFrom(const offical_member_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_gongdoupower()) {
      set_gongdoupower(from.gongdoupower());
    }
    if (from.has_union_name()) {
      set_union_name(from.union_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_member_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_member_data::CopyFrom(const offical_member_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_member_data::IsInitialized() const {

  return true;
}

void offical_member_data::Swap(offical_member_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(ranking_id_, other->ranking_id_);
    std::swap(lv_, other->lv_);
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(gongdoupower_, other->gongdoupower_);
    std::swap(union_name_, other->union_name_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_member_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_member_data_descriptor_;
  metadata.reflection = offical_member_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_role_equipped::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_role_equipped::role_show_role_equipped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_role_equipped::InitAsDefaultInstance() {
}

role_show_role_equipped::role_show_role_equipped(const role_show_role_equipped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_role_equipped::SharedCtor() {
  _cached_size_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_role_equipped::~role_show_role_equipped() {
  SharedDtor();
}

void role_show_role_equipped::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_role_equipped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_role_equipped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_role_equipped_descriptor_;
}

const role_show_role_equipped& role_show_role_equipped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_show_role_equipped* role_show_role_equipped::default_instance_ = NULL;

role_show_role_equipped* role_show_role_equipped::New() const {
  return new role_show_role_equipped;
}

void role_show_role_equipped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_role_equipped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 show_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_role_equipped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 show_role_id = 1;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_role_equipped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 show_role_id = 1;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_role_equipped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 show_role_id = 1;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_role_equipped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_role_equipped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_role_equipped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_role_equipped::MergeFrom(const role_show_role_equipped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_role_equipped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_role_equipped::CopyFrom(const role_show_role_equipped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_role_equipped::IsInitialized() const {

  return true;
}

void role_show_role_equipped::Swap(role_show_role_equipped* other) {
  if (other != this) {
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_role_equipped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_role_equipped_descriptor_;
  metadata.reflection = role_show_role_equipped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_data::kRankLvFieldNumber;
const int offical_apply_data::kRoleIdFieldNumber;
const int offical_apply_data::kRoleNameFieldNumber;
const int offical_apply_data::kHeadFieldNumber;
const int offical_apply_data::kLvFieldNumber;
const int offical_apply_data::kSexFieldNumber;
const int offical_apply_data::kGradeFieldNumber;
const int offical_apply_data::kTmFieldNumber;
#endif  // !_MSC_VER

offical_apply_data::offical_apply_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_data::InitAsDefaultInstance() {
}

offical_apply_data::offical_apply_data(const offical_apply_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_data::SharedCtor() {
  _cached_size_ = 0;
  rank_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  sex_ = 0u;
  grade_ = 0u;
  tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_data::~offical_apply_data() {
  SharedDtor();
}

void offical_apply_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void offical_apply_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_data_descriptor_;
}

const offical_apply_data& offical_apply_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_apply_data* offical_apply_data::default_instance_ = NULL;

offical_apply_data* offical_apply_data::New() const {
  return new offical_apply_data;
}

void offical_apply_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    lv_ = 0u;
    sex_ = 0u;
    grade_ = 0u;
    tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EGrade rank_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_rank_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }

      // optional string head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tm;
        break;
      }

      // optional uint32 tm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_lv(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head(), output);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->grade(), output);
  }

  // optional uint32 tm = 8;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_lv(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head(), target);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->grade(), target);
  }

  // optional uint32 tm = 8;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EGrade rank_lv = 1;
    if (has_rank_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_lv());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 tm = 8;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_data::MergeFrom(const offical_apply_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_lv()) {
      set_rank_lv(from.rank_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_data::CopyFrom(const offical_apply_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_data::IsInitialized() const {

  return true;
}

void offical_apply_data::Swap(offical_apply_data* other) {
  if (other != this) {
    std::swap(rank_lv_, other->rank_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(head_, other->head_);
    std::swap(lv_, other->lv_);
    std::swap(sex_, other->sex_);
    std::swap(grade_, other->grade_);
    std::swap(tm_, other->tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_data_descriptor_;
  metadata.reflection = offical_apply_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_my_battle_data::kDestRoleIdFieldNumber;
const int offical_apply_my_battle_data::kDestNameFieldNumber;
const int offical_apply_my_battle_data::kDestHeadFieldNumber;
const int offical_apply_my_battle_data::kSexFieldNumber;
const int offical_apply_my_battle_data::kScoreFieldNumber;
const int offical_apply_my_battle_data::kWinFieldNumber;
const int offical_apply_my_battle_data::kGradeFieldNumber;
const int offical_apply_my_battle_data::kPlaceIdFieldNumber;
const int offical_apply_my_battle_data::kFightPowerFieldNumber;
const int offical_apply_my_battle_data::kLevelFieldNumber;
#endif  // !_MSC_VER

offical_apply_my_battle_data::offical_apply_my_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_my_battle_data::InitAsDefaultInstance() {
}

offical_apply_my_battle_data::offical_apply_my_battle_data(const offical_apply_my_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_my_battle_data::SharedCtor() {
  _cached_size_ = 0;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  dest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  score_ = 0;
  win_ = false;
  grade_ = 0;
  place_id_ = 0;
  fight_power_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_my_battle_data::~offical_apply_my_battle_data() {
  SharedDtor();
}

void offical_apply_my_battle_data::SharedDtor() {
  if (dest_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_name_;
  }
  if (dest_head_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_head_;
  }
  if (this != default_instance_) {
  }
}

void offical_apply_my_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_my_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_my_battle_data_descriptor_;
}

const offical_apply_my_battle_data& offical_apply_my_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_apply_my_battle_data* offical_apply_my_battle_data::default_instance_ = NULL;

offical_apply_my_battle_data* offical_apply_my_battle_data::New() const {
  return new offical_apply_my_battle_data;
}

void offical_apply_my_battle_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_dest_name()) {
      if (dest_name_ != &::google::protobuf::internal::kEmptyString) {
        dest_name_->clear();
      }
    }
    if (has_dest_head()) {
      if (dest_head_ != &::google::protobuf::internal::kEmptyString) {
        dest_head_->clear();
      }
    }
    sex_ = 0u;
    score_ = 0;
    win_ = false;
    grade_ = 0;
    place_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fight_power_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_my_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dest_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest_name;
        break;
      }

      // optional string dest_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_name().data(), this->dest_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dest_head;
        break;
      }

      // optional string dest_head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_head().data(), this->dest_head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }

      // optional bool win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // optional int32 grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_place_id;
        break;
      }

      // optional int32 place_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fight_power;
        break;
      }

      // optional int32 fight_power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_my_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dest_role_id = 1;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dest_role_id(), output);
  }

  // optional string dest_name = 2;
  if (has_dest_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_name().data(), this->dest_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest_name(), output);
  }

  // optional string dest_head = 3;
  if (has_dest_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_head().data(), this->dest_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dest_head(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional bool win = 6;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->win(), output);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }

  // optional int32 place_id = 8;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->place_id(), output);
  }

  // optional int32 fight_power = 9;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fight_power(), output);
  }

  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_my_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dest_role_id = 1;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dest_role_id(), target);
  }

  // optional string dest_name = 2;
  if (has_dest_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_name().data(), this->dest_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_name(), target);
  }

  // optional string dest_head = 3;
  if (has_dest_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_head().data(), this->dest_head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest_head(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional bool win = 6;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->win(), target);
  }

  // optional int32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }

  // optional int32 place_id = 8;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->place_id(), target);
  }

  // optional int32 fight_power = 9;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fight_power(), target);
  }

  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_my_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dest_role_id = 1;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional string dest_name = 2;
    if (has_dest_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_name());
    }

    // optional string dest_head = 3;
    if (has_dest_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_head());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool win = 6;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional int32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 place_id = 8;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->place_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fight_power = 9;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_power());
    }

    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_my_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_my_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_my_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_my_battle_data::MergeFrom(const offical_apply_my_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_dest_name()) {
      set_dest_name(from.dest_name());
    }
    if (from.has_dest_head()) {
      set_dest_head(from.dest_head());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_my_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_my_battle_data::CopyFrom(const offical_apply_my_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_my_battle_data::IsInitialized() const {

  return true;
}

void offical_apply_my_battle_data::Swap(offical_apply_my_battle_data* other) {
  if (other != this) {
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(dest_name_, other->dest_name_);
    std::swap(dest_head_, other->dest_head_);
    std::swap(sex_, other->sex_);
    std::swap(score_, other->score_);
    std::swap(win_, other->win_);
    std::swap(grade_, other->grade_);
    std::swap(place_id_, other->place_id_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_my_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_my_battle_data_descriptor_;
  metadata.reflection = offical_apply_my_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_battle_data::kRankLvFieldNumber;
const int offical_apply_battle_data::kRankingIdFieldNumber;
const int offical_apply_battle_data::kRoleIdFieldNumber;
const int offical_apply_battle_data::kSexFieldNumber;
const int offical_apply_battle_data::kRoleNameFieldNumber;
const int offical_apply_battle_data::kWinNumFieldNumber;
const int offical_apply_battle_data::kFailedNumFieldNumber;
const int offical_apply_battle_data::kScoreFieldNumber;
const int offical_apply_battle_data::kAdmitFieldNumber;
#endif  // !_MSC_VER

offical_apply_battle_data::offical_apply_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_battle_data::InitAsDefaultInstance() {
}

offical_apply_battle_data::offical_apply_battle_data(const offical_apply_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_battle_data::SharedCtor() {
  _cached_size_ = 0;
  rank_lv_ = 0;
  ranking_id_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  sex_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_num_ = 0u;
  failed_num_ = 0u;
  score_ = 0u;
  admit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_battle_data::~offical_apply_battle_data() {
  SharedDtor();
}

void offical_apply_battle_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void offical_apply_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_battle_data_descriptor_;
}

const offical_apply_battle_data& offical_apply_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_apply_battle_data* offical_apply_battle_data::default_instance_ = NULL;

offical_apply_battle_data* offical_apply_battle_data::New() const {
  return new offical_apply_battle_data;
}

void offical_apply_battle_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_lv_ = 0;
    ranking_id_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    sex_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    win_num_ = 0u;
    failed_num_ = 0u;
    score_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    admit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EGrade rank_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_rank_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking_id;
        break;
      }

      // optional uint32 ranking_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_name;
        break;
      }

      // optional string role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_num;
        break;
      }

      // optional uint32 win_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_failed_num;
        break;
      }

      // optional uint32 failed_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failed_num_)));
          set_has_failed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_score;
        break;
      }

      // optional uint32 score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_admit;
        break;
      }

      // optional bool admit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admit_)));
          set_has_admit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_lv(), output);
  }

  // optional uint32 ranking_id = 2;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ranking_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role_name(), output);
  }

  // optional uint32 win_num = 6;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_num(), output);
  }

  // optional uint32 failed_num = 7;
  if (has_failed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->failed_num(), output);
  }

  // optional uint32 score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // optional bool admit = 9;
  if (has_admit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->admit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EGrade rank_lv = 1;
  if (has_rank_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_lv(), target);
  }

  // optional uint32 ranking_id = 2;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ranking_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role_name(), target);
  }

  // optional uint32 win_num = 6;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_num(), target);
  }

  // optional uint32 failed_num = 7;
  if (has_failed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->failed_num(), target);
  }

  // optional uint32 score = 8;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->score(), target);
  }

  // optional bool admit = 9;
  if (has_admit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->admit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EGrade rank_lv = 1;
    if (has_rank_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_lv());
    }

    // optional uint32 ranking_id = 2;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional string role_name = 5;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 win_num = 6;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_num());
    }

    // optional uint32 failed_num = 7;
    if (has_failed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failed_num());
    }

    // optional uint32 score = 8;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool admit = 9;
    if (has_admit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_battle_data::MergeFrom(const offical_apply_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_lv()) {
      set_rank_lv(from.rank_lv());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_failed_num()) {
      set_failed_num(from.failed_num());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_admit()) {
      set_admit(from.admit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_battle_data::CopyFrom(const offical_apply_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_battle_data::IsInitialized() const {

  return true;
}

void offical_apply_battle_data::Swap(offical_apply_battle_data* other) {
  if (other != this) {
    std::swap(rank_lv_, other->rank_lv_);
    std::swap(ranking_id_, other->ranking_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(sex_, other->sex_);
    std::swap(role_name_, other->role_name_);
    std::swap(win_num_, other->win_num_);
    std::swap(failed_num_, other->failed_num_);
    std::swap(score_, other->score_);
    std::swap(admit_, other->admit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_battle_data_descriptor_;
  metadata.reflection = offical_apply_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_base_item::kIdFieldNumber;
const int rank_base_item::kNameFieldNumber;
const int rank_base_item::kHeadFieldNumber;
const int rank_base_item::kLvFieldNumber;
const int rank_base_item::kSexFieldNumber;
const int rank_base_item::kGradeFieldNumber;
const int rank_base_item::kAvatarBoxFieldNumber;
#endif  // !_MSC_VER

rank_base_item::rank_base_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_base_item::InitAsDefaultInstance() {
}

rank_base_item::rank_base_item(const rank_base_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_base_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  sex_ = 0u;
  grade_ = 0u;
  avatar_box_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_base_item::~rank_base_item() {
  SharedDtor();
}

void rank_base_item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void rank_base_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_base_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_base_item_descriptor_;
}

const rank_base_item& rank_base_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

rank_base_item* rank_base_item::default_instance_ = NULL;

rank_base_item* rank_base_item::New() const {
  return new rank_base_item;
}

void rank_base_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    lv_ = 0u;
    sex_ = 0u;
    grade_ = 0u;
    avatar_box_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_base_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }

      // optional string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_avatar_box;
        break;
      }

      // optional uint32 avatar_box = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_)));
          set_has_avatar_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_base_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grade(), output);
  }

  // optional uint32 avatar_box = 7;
  if (has_avatar_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avatar_box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_base_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grade(), target);
  }

  // optional uint32 avatar_box = 7;
  if (has_avatar_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avatar_box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_base_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 avatar_box = 7;
    if (has_avatar_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_base_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_base_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_base_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_base_item::MergeFrom(const rank_base_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_avatar_box()) {
      set_avatar_box(from.avatar_box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_base_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_base_item::CopyFrom(const rank_base_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_base_item::IsInitialized() const {

  return true;
}

void rank_base_item::Swap(rank_base_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(lv_, other->lv_);
    std::swap(sex_, other->sex_);
    std::swap(grade_, other->grade_);
    std::swap(avatar_box_, other->avatar_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_base_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_base_item_descriptor_;
  metadata.reflection = rank_base_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_common_item::kPlaceIdFieldNumber;
const int rank_common_item::kValueFieldNumber;
const int rank_common_item::kBaseDataFieldNumber;
#endif  // !_MSC_VER

rank_common_item::rank_common_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_common_item::InitAsDefaultInstance() {
  base_data_ = const_cast< ::SProtoSpace::rank_base_item*>(&::SProtoSpace::rank_base_item::default_instance());
}

rank_common_item::rank_common_item(const rank_common_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_common_item::SharedCtor() {
  _cached_size_ = 0;
  place_id_ = 0u;
  value_ = 0u;
  base_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_common_item::~rank_common_item() {
  SharedDtor();
}

void rank_common_item::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void rank_common_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_common_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_common_item_descriptor_;
}

const rank_common_item& rank_common_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

rank_common_item* rank_common_item::default_instance_ = NULL;

rank_common_item* rank_common_item::New() const {
  return new rank_common_item;
}

void rank_common_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_id_ = 0u;
    value_ = 0u;
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::SProtoSpace::rank_base_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_common_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 place_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_data;
        break;
      }

      // optional .SProtoSpace.rank_base_item base_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_common_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 place_id = 1;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->place_id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional .SProtoSpace.rank_base_item base_data = 3;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_common_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 place_id = 1;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->place_id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional .SProtoSpace.rank_base_item base_data = 3;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_common_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 place_id = 1;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional .SProtoSpace.rank_base_item base_data = 3;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_common_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_common_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_common_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_common_item::MergeFrom(const rank_common_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_base_data()) {
      mutable_base_data()->::SProtoSpace::rank_base_item::MergeFrom(from.base_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_common_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_common_item::CopyFrom(const rank_common_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_common_item::IsInitialized() const {

  return true;
}

void rank_common_item::Swap(rank_common_item* other) {
  if (other != this) {
    std::swap(place_id_, other->place_id_);
    std::swap(value_, other->value_);
    std::swap(base_data_, other->base_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_common_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_common_item_descriptor_;
  metadata.reflection = rank_common_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int public_role_base_info::kIdFieldNumber;
const int public_role_base_info::kNameFieldNumber;
const int public_role_base_info::kHeadFieldNumber;
const int public_role_base_info::kLvFieldNumber;
const int public_role_base_info::kSexFieldNumber;
const int public_role_base_info::kGradeFieldNumber;
const int public_role_base_info::kBorderFieldNumber;
const int public_role_base_info::kFightPowerFieldNumber;
#endif  // !_MSC_VER

public_role_base_info::public_role_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void public_role_base_info::InitAsDefaultInstance() {
}

public_role_base_info::public_role_base_info(const public_role_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void public_role_base_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  sex_ = 0u;
  grade_ = 0u;
  border_ = 0;
  fight_power_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

public_role_base_info::~public_role_base_info() {
  SharedDtor();
}

void public_role_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void public_role_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* public_role_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return public_role_base_info_descriptor_;
}

const public_role_base_info& public_role_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

public_role_base_info* public_role_base_info::default_instance_ = NULL;

public_role_base_info* public_role_base_info::New() const {
  return new public_role_base_info;
}

void public_role_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    lv_ = 0u;
    sex_ = 0u;
    grade_ = 0u;
    border_ = 0;
    fight_power_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool public_role_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }

      // optional string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_border;
        break;
      }

      // optional int32 border = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_power;
        break;
      }

      // optional uint64 fight_power = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void public_role_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grade(), output);
  }

  // optional int32 border = 7;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->border(), output);
  }

  // optional uint64 fight_power = 8;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* public_role_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grade(), target);
  }

  // optional int32 border = 7;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->border(), target);
  }

  // optional uint64 fight_power = 8;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int public_role_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional int32 border = 7;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border());
    }

    // optional uint64 fight_power = 8;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void public_role_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const public_role_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const public_role_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void public_role_base_info::MergeFrom(const public_role_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void public_role_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void public_role_base_info::CopyFrom(const public_role_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool public_role_base_info::IsInitialized() const {

  return true;
}

void public_role_base_info::Swap(public_role_base_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(lv_, other->lv_);
    std::swap(sex_, other->sex_);
    std::swap(grade_, other->grade_);
    std::swap(border_, other->border_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata public_role_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = public_role_base_info_descriptor_;
  metadata.reflection = public_role_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_base_3part::kBaseFieldNumber;
#endif  // !_MSC_VER

role_base_3part::role_base_3part()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_base_3part::InitAsDefaultInstance() {
  base_ = const_cast< ::SProtoSpace::public_role_base_info*>(&::SProtoSpace::public_role_base_info::default_instance());
}

role_base_3part::role_base_3part(const role_base_3part& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_base_3part::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_base_3part::~role_base_3part() {
  SharedDtor();
}

void role_base_3part::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void role_base_3part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_base_3part::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_base_3part_descriptor_;
}

const role_base_3part& role_base_3part::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_base_3part* role_base_3part::default_instance_ = NULL;

role_base_3part* role_base_3part::New() const {
  return new role_base_3part;
}

void role_base_3part::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::SProtoSpace::public_role_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_base_3part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.public_role_base_info base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_base_3part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.public_role_base_info base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_base_3part::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.public_role_base_info base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_base_3part::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.public_role_base_info base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_base_3part::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_base_3part* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_base_3part*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_base_3part::MergeFrom(const role_base_3part& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::SProtoSpace::public_role_base_info::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_base_3part::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_base_3part::CopyFrom(const role_base_3part& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_base_3part::IsInitialized() const {

  return true;
}

void role_base_3part::Swap(role_base_3part* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_base_3part::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_base_3part_descriptor_;
  metadata.reflection = role_base_3part_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int coordinate::kXFieldNumber;
const int coordinate::kYFieldNumber;
#endif  // !_MSC_VER

coordinate::coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void coordinate::InitAsDefaultInstance() {
}

coordinate::coordinate(const coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void coordinate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

coordinate::~coordinate() {
  SharedDtor();
}

void coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return coordinate_descriptor_;
}

const coordinate& coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

coordinate* coordinate::default_instance_ = NULL;

coordinate* coordinate::New() const {
  return new coordinate;
}

void coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void coordinate::MergeFrom(const coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void coordinate::CopyFrom(const coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool coordinate::IsInitialized() const {

  return true;
}

void coordinate::Swap(coordinate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = coordinate_descriptor_;
  metadata.reflection = coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_position::kIdFieldNumber;
const int role_position::kPosFieldNumber;
#endif  // !_MSC_VER

role_position::role_position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_position::InitAsDefaultInstance() {
  pos_ = const_cast< ::SProtoSpace::coordinate*>(&::SProtoSpace::coordinate::default_instance());
}

role_position::role_position(const role_position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_position::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_position::~role_position() {
  SharedDtor();
}

void role_position::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void role_position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_position_descriptor_;
}

const role_position& role_position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_position* role_position::default_instance_ = NULL;

role_position* role_position::New() const {
  return new role_position;
}

void role_position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SProtoSpace::coordinate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .SProtoSpace.coordinate pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .SProtoSpace.coordinate pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .SProtoSpace.coordinate pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .SProtoSpace.coordinate pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_position::MergeFrom(const role_position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::SProtoSpace::coordinate::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_position::CopyFrom(const role_position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_position::IsInitialized() const {

  return true;
}

void role_position::Swap(role_position* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_position_descriptor_;
  metadata.reflection = role_position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_move::kIdFieldNumber;
const int role_move::kSourPosFieldNumber;
const int role_move::kDestPosFieldNumber;
#endif  // !_MSC_VER

role_move::role_move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_move::InitAsDefaultInstance() {
  sour_pos_ = const_cast< ::SProtoSpace::coordinate*>(&::SProtoSpace::coordinate::default_instance());
  dest_pos_ = const_cast< ::SProtoSpace::coordinate*>(&::SProtoSpace::coordinate::default_instance());
}

role_move::role_move(const role_move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_move::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  sour_pos_ = NULL;
  dest_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_move::~role_move() {
  SharedDtor();
}

void role_move::SharedDtor() {
  if (this != default_instance_) {
    delete sour_pos_;
    delete dest_pos_;
  }
}

void role_move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_move_descriptor_;
}

const role_move& role_move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

role_move* role_move::default_instance_ = NULL;

role_move* role_move::New() const {
  return new role_move;
}

void role_move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_sour_pos()) {
      if (sour_pos_ != NULL) sour_pos_->::SProtoSpace::coordinate::Clear();
    }
    if (has_dest_pos()) {
      if (dest_pos_ != NULL) dest_pos_->::SProtoSpace::coordinate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sour_pos;
        break;
      }

      // optional .SProtoSpace.coordinate sour_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sour_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dest_pos;
        break;
      }

      // optional .SProtoSpace.coordinate dest_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .SProtoSpace.coordinate sour_pos = 2;
  if (has_sour_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sour_pos(), output);
  }

  // optional .SProtoSpace.coordinate dest_pos = 3;
  if (has_dest_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dest_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .SProtoSpace.coordinate sour_pos = 2;
  if (has_sour_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sour_pos(), target);
  }

  // optional .SProtoSpace.coordinate dest_pos = 3;
  if (has_dest_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dest_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .SProtoSpace.coordinate sour_pos = 2;
    if (has_sour_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sour_pos());
    }

    // optional .SProtoSpace.coordinate dest_pos = 3;
    if (has_dest_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_move::MergeFrom(const role_move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sour_pos()) {
      mutable_sour_pos()->::SProtoSpace::coordinate::MergeFrom(from.sour_pos());
    }
    if (from.has_dest_pos()) {
      mutable_dest_pos()->::SProtoSpace::coordinate::MergeFrom(from.dest_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_move::CopyFrom(const role_move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_move::IsInitialized() const {

  return true;
}

void role_move::Swap(role_move* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sour_pos_, other->sour_pos_);
    std::swap(dest_pos_, other->dest_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_move_descriptor_;
  metadata.reflection = role_move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_room_state::kRoomIdFieldNumber;
const int chat_room_state::kRoomNameFieldNumber;
const int chat_room_state::kSexsFieldNumber;
const int chat_room_state::kTokenFieldNumber;
const int chat_room_state::kConfIdFieldNumber;
const int chat_room_state::kTopFieldNumber;
#endif  // !_MSC_VER

chat_room_state::chat_room_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_room_state::InitAsDefaultInstance() {
}

chat_room_state::chat_room_state(const chat_room_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_room_state::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = false;
  conf_id_ = 0;
  top_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_room_state::~chat_room_state() {
  SharedDtor();
}

void chat_room_state::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void chat_room_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_room_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_room_state_descriptor_;
}

const chat_room_state& chat_room_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

chat_room_state* chat_room_state::default_instance_ = NULL;

chat_room_state* chat_room_state::New() const {
  return new chat_room_state;
}

void chat_room_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    token_ = false;
    conf_id_ = 0;
    top_ = false;
  }
  sexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_room_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // optional string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sexs;
        break;
      }

      // repeated int32 sexs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_sexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sexs;
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }

      // optional bool token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_conf_id;
        break;
      }

      // optional int32 conf_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conf_id_)));
          set_has_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_top;
        break;
      }

      // optional bool top = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_room_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }

  // repeated int32 sexs = 3;
  for (int i = 0; i < this->sexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sexs(i), output);
  }

  // optional bool token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->token(), output);
  }

  // optional int32 conf_id = 5;
  if (has_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->conf_id(), output);
  }

  // optional bool top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->top(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_room_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // repeated int32 sexs = 3;
  for (int i = 0; i < this->sexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->sexs(i), target);
  }

  // optional bool token = 4;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->token(), target);
  }

  // optional int32 conf_id = 5;
  if (has_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->conf_id(), target);
  }

  // optional bool top = 6;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->top(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_room_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional bool token = 4;
    if (has_token()) {
      total_size += 1 + 1;
    }

    // optional int32 conf_id = 5;
    if (has_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conf_id());
    }

    // optional bool top = 6;
    if (has_top()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 sexs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sexs(i));
    }
    total_size += 1 * this->sexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_room_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_room_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_room_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_room_state::MergeFrom(const chat_room_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  sexs_.MergeFrom(from.sexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_conf_id()) {
      set_conf_id(from.conf_id());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_room_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_room_state::CopyFrom(const chat_room_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_room_state::IsInitialized() const {

  return true;
}

void chat_room_state::Swap(chat_room_state* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    sexs_.Swap(&other->sexs_);
    std::swap(token_, other->token_);
    std::swap(conf_id_, other->conf_id_);
    std::swap(top_, other->top_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_room_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_room_state_descriptor_;
  metadata.reflection = chat_room_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_screen_info::kChapterIdFieldNumber;
const int plot_screen_info::kScreenIdFieldNumber;
const int plot_screen_info::kSectionIdsFieldNumber;
#endif  // !_MSC_VER

plot_screen_info::plot_screen_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_screen_info::InitAsDefaultInstance() {
}

plot_screen_info::plot_screen_info(const plot_screen_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_screen_info::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_screen_info::~plot_screen_info() {
  SharedDtor();
}

void plot_screen_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_screen_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_screen_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_screen_info_descriptor_;
}

const plot_screen_info& plot_screen_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

plot_screen_info* plot_screen_info::default_instance_ = NULL;

plot_screen_info* plot_screen_info::New() const {
  return new plot_screen_info;
}

void plot_screen_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0u;
    screen_id_ = 0u;
  }
  section_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_screen_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_section_ids;
        break;
      }

      // repeated uint32 section_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_section_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_section_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_section_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_screen_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 2;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->screen_id(), output);
  }

  // repeated uint32 section_ids = 3;
  for (int i = 0; i < this->section_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->section_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_screen_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 2;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->screen_id(), target);
  }

  // repeated uint32 section_ids = 3;
  for (int i = 0; i < this->section_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->section_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_screen_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 2;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

  }
  // repeated uint32 section_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->section_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->section_ids(i));
    }
    total_size += 1 * this->section_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_screen_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_screen_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_screen_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_screen_info::MergeFrom(const plot_screen_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  section_ids_.MergeFrom(from.section_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_screen_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_screen_info::CopyFrom(const plot_screen_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_screen_info::IsInitialized() const {

  return true;
}

void plot_screen_info::Swap(plot_screen_info* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    section_ids_.Swap(&other->section_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_screen_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_screen_info_descriptor_;
  metadata.reflection = plot_screen_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_character_attr_info::kTypeFieldNumber;
const int add_character_attr_info::kChangeValueFieldNumber;
#endif  // !_MSC_VER

add_character_attr_info::add_character_attr_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add_character_attr_info::InitAsDefaultInstance() {
}

add_character_attr_info::add_character_attr_info(const add_character_attr_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add_character_attr_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  change_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_character_attr_info::~add_character_attr_info() {
  SharedDtor();
}

void add_character_attr_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void add_character_attr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_character_attr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_character_attr_info_descriptor_;
}

const add_character_attr_info& add_character_attr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

add_character_attr_info* add_character_attr_info::default_instance_ = NULL;

add_character_attr_info* add_character_attr_info::New() const {
  return new add_character_attr_info;
}

void add_character_attr_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    change_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_character_attr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_value;
        break;
      }

      // optional int32 change_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add_character_attr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 change_value = 2;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add_character_attr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 change_value = 2;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add_character_attr_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 change_value = 2;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_character_attr_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_character_attr_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_character_attr_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_character_attr_info::MergeFrom(const add_character_attr_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_character_attr_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_character_attr_info::CopyFrom(const add_character_attr_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_character_attr_info::IsInitialized() const {

  return true;
}

void add_character_attr_info::Swap(add_character_attr_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(change_value_, other->change_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_character_attr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_character_attr_info_descriptor_;
  metadata.reflection = add_character_attr_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_royal_value_info::kNpcIdFieldNumber;
const int add_royal_value_info::kChangeValueFieldNumber;
#endif  // !_MSC_VER

add_royal_value_info::add_royal_value_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add_royal_value_info::InitAsDefaultInstance() {
}

add_royal_value_info::add_royal_value_info(const add_royal_value_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add_royal_value_info::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0u;
  change_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_royal_value_info::~add_royal_value_info() {
  SharedDtor();
}

void add_royal_value_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void add_royal_value_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_royal_value_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_royal_value_info_descriptor_;
}

const add_royal_value_info& add_royal_value_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

add_royal_value_info* add_royal_value_info::default_instance_ = NULL;

add_royal_value_info* add_royal_value_info::New() const {
  return new add_royal_value_info;
}

void add_royal_value_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0u;
    change_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_royal_value_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_value;
        break;
      }

      // optional int32 change_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add_royal_value_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_id(), output);
  }

  // optional int32 change_value = 2;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add_royal_value_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_id(), target);
  }

  // optional int32 change_value = 2;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add_royal_value_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_id());
    }

    // optional int32 change_value = 2;
    if (has_change_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_royal_value_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_royal_value_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_royal_value_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_royal_value_info::MergeFrom(const add_royal_value_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_royal_value_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_royal_value_info::CopyFrom(const add_royal_value_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_royal_value_info::IsInitialized() const {

  return true;
}

void add_royal_value_info::Swap(add_royal_value_info* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(change_value_, other->change_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_royal_value_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_royal_value_info_descriptor_;
  metadata.reflection = add_royal_value_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int character_attr_info::kTypeFieldNumber;
const int character_attr_info::kCurrentValueFieldNumber;
#endif  // !_MSC_VER

character_attr_info::character_attr_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void character_attr_info::InitAsDefaultInstance() {
}

character_attr_info::character_attr_info(const character_attr_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void character_attr_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  current_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

character_attr_info::~character_attr_info() {
  SharedDtor();
}

void character_attr_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void character_attr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* character_attr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return character_attr_info_descriptor_;
}

const character_attr_info& character_attr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

character_attr_info* character_attr_info::default_instance_ = NULL;

character_attr_info* character_attr_info::New() const {
  return new character_attr_info;
}

void character_attr_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    current_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool character_attr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_value;
        break;
      }

      // optional int32 current_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_value_)));
          set_has_current_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void character_attr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 current_value = 2;
  if (has_current_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* character_attr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 current_value = 2;
  if (has_current_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int character_attr_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 current_value = 2;
    if (has_current_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void character_attr_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const character_attr_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const character_attr_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void character_attr_info::MergeFrom(const character_attr_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_current_value()) {
      set_current_value(from.current_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void character_attr_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void character_attr_info::CopyFrom(const character_attr_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool character_attr_info::IsInitialized() const {

  return true;
}

void character_attr_info::Swap(character_attr_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(current_value_, other->current_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata character_attr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = character_attr_info_descriptor_;
  metadata.reflection = character_attr_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int itemid_and_num::kItemIdFieldNumber;
const int itemid_and_num::kItemCountFieldNumber;
#endif  // !_MSC_VER

itemid_and_num::itemid_and_num()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void itemid_and_num::InitAsDefaultInstance() {
}

itemid_and_num::itemid_and_num(const itemid_and_num& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void itemid_and_num::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itemid_and_num::~itemid_and_num() {
  SharedDtor();
}

void itemid_and_num::SharedDtor() {
  if (this != default_instance_) {
  }
}

void itemid_and_num::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itemid_and_num::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemid_and_num_descriptor_;
}

const itemid_and_num& itemid_and_num::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

itemid_and_num* itemid_and_num::default_instance_ = NULL;

itemid_and_num* itemid_and_num::New() const {
  return new itemid_and_num;
}

void itemid_and_num::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itemid_and_num::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void itemid_and_num::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* itemid_and_num::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int itemid_and_num::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itemid_and_num::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itemid_and_num* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itemid_and_num*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itemid_and_num::MergeFrom(const itemid_and_num& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itemid_and_num::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itemid_and_num::CopyFrom(const itemid_and_num& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itemid_and_num::IsInitialized() const {

  return true;
}

void itemid_and_num::Swap(itemid_and_num* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itemid_and_num::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itemid_and_num_descriptor_;
  metadata.reflection = itemid_and_num_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_attach::kItemConfigIdFieldNumber;
const int mail_attach::kItemCountFieldNumber;
#endif  // !_MSC_VER

mail_attach::mail_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_attach::InitAsDefaultInstance() {
}

mail_attach::mail_attach(const mail_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_attach::SharedCtor() {
  _cached_size_ = 0;
  item_config_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_attach::~mail_attach() {
  SharedDtor();
}

void mail_attach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_attach_descriptor_;
}

const mail_attach& mail_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail_attach* mail_attach::default_instance_ = NULL;

mail_attach* mail_attach::New() const {
  return new mail_attach;
}

void mail_attach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_config_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_config_id_)));
          set_has_item_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_config_id = 1;
  if (has_item_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_config_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_config_id = 1;
  if (has_item_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_config_id(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_config_id = 1;
    if (has_item_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_config_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_attach::MergeFrom(const mail_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_config_id()) {
      set_item_config_id(from.item_config_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_attach::CopyFrom(const mail_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_attach::IsInitialized() const {

  return true;
}

void mail_attach::Swap(mail_attach* other) {
  if (other != this) {
    std::swap(item_config_id_, other->item_config_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_attach_descriptor_;
  metadata.reflection = mail_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_instance_attaches::kAttachmentsFieldNumber;
#endif  // !_MSC_VER

mail_instance_attaches::mail_instance_attaches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_instance_attaches::InitAsDefaultInstance() {
}

mail_instance_attaches::mail_instance_attaches(const mail_instance_attaches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_instance_attaches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_instance_attaches::~mail_instance_attaches() {
  SharedDtor();
}

void mail_instance_attaches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_instance_attaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_instance_attaches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_instance_attaches_descriptor_;
}

const mail_instance_attaches& mail_instance_attaches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail_instance_attaches* mail_instance_attaches::default_instance_ = NULL;

mail_instance_attaches* mail_instance_attaches::New() const {
  return new mail_instance_attaches;
}

void mail_instance_attaches::Clear() {
  attachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_instance_attaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.mail_attach attachments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attachments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_instance_attaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.mail_attach attachments = 1;
  for (int i = 0; i < this->attachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_instance_attaches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.mail_attach attachments = 1;
  for (int i = 0; i < this->attachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_instance_attaches::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.mail_attach attachments = 1;
  total_size += 1 * this->attachments_size();
  for (int i = 0; i < this->attachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_instance_attaches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_instance_attaches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_instance_attaches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_instance_attaches::MergeFrom(const mail_instance_attaches& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachments_.MergeFrom(from.attachments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_instance_attaches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_instance_attaches::CopyFrom(const mail_instance_attaches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_instance_attaches::IsInitialized() const {

  return true;
}

void mail_instance_attaches::Swap(mail_instance_attaches* other) {
  if (other != this) {
    attachments_.Swap(&other->attachments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_instance_attaches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_instance_attaches_descriptor_;
  metadata.reflection = mail_instance_attaches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_instance::kMailInstanceIdFieldNumber;
const int mail_instance::kMailConfigIdFieldNumber;
const int mail_instance::kPriotityFieldNumber;
const int mail_instance::kToRoleIdFieldNumber;
const int mail_instance::kFromRoleIdFieldNumber;
const int mail_instance::kTitleFieldNumber;
const int mail_instance::kContentFieldNumber;
const int mail_instance::kAttachmentsFieldNumber;
const int mail_instance::kIsReadFieldNumber;
const int mail_instance::kIsGetAttachFieldNumber;
const int mail_instance::kInvalidUtcTimeFieldNumber;
const int mail_instance::kMailTempletIdFieldNumber;
const int mail_instance::kServerTypeFieldNumber;
const int mail_instance::kClientTypeFieldNumber;
const int mail_instance::kFromRoleNameFieldNumber;
const int mail_instance::kFromRoleAvatarUrlFieldNumber;
const int mail_instance::kFromRoleGenderIdFieldNumber;
const int mail_instance::kFromRoleAvatarBoxIdFieldNumber;
const int mail_instance::kFromRoleLevelFieldNumber;
const int mail_instance::kFromRoleOfficerGradeFieldNumber;
const int mail_instance::kUtcTimeGenerateFieldNumber;
const int mail_instance::kUtcTimeInvalidFieldNumber;
const int mail_instance::kTimeGenerateFieldNumber;
const int mail_instance::kTimeInvalidFieldNumber;
#endif  // !_MSC_VER

mail_instance::mail_instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_instance::InitAsDefaultInstance() {
  attachments_ = const_cast< ::SProtoSpace::mail_instance_attaches*>(&::SProtoSpace::mail_instance_attaches::default_instance());
}

mail_instance::mail_instance(const mail_instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_instance::SharedCtor() {
  _cached_size_ = 0;
  mail_instance_id_ = GOOGLE_ULONGLONG(0);
  mail_config_id_ = 0;
  priotity_ = 0;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachments_ = NULL;
  is_read_ = false;
  is_get_attach_ = false;
  invalid_utc_time_ = GOOGLE_ULONGLONG(0);
  mail_templet_id_ = GOOGLE_ULONGLONG(0);
  server_type_ = 0;
  client_type_ = 0;
  from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_gender_id_ = 0;
  from_role_avatar_box_id_ = 0;
  from_role_level_ = 0;
  from_role_officer_grade_ = 0;
  utc_time_generate_ = 0u;
  utc_time_invalid_ = 0u;
  time_generate_ = 0u;
  time_invalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_instance::~mail_instance() {
  SharedDtor();
}

void mail_instance::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_name_;
  }
  if (from_role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_avatar_url_;
  }
  if (this != default_instance_) {
    delete attachments_;
  }
}

void mail_instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_instance_descriptor_;
}

const mail_instance& mail_instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail_instance* mail_instance::default_instance_ = NULL;

mail_instance* mail_instance::New() const {
  return new mail_instance;
}

void mail_instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_instance_id_ = GOOGLE_ULONGLONG(0);
    mail_config_id_ = 0;
    priotity_ = 0;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_attachments()) {
      if (attachments_ != NULL) attachments_->::SProtoSpace::mail_instance_attaches::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_read_ = false;
    is_get_attach_ = false;
    invalid_utc_time_ = GOOGLE_ULONGLONG(0);
    mail_templet_id_ = GOOGLE_ULONGLONG(0);
    server_type_ = 0;
    client_type_ = 0;
    if (has_from_role_name()) {
      if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
        from_role_name_->clear();
      }
    }
    if (has_from_role_avatar_url()) {
      if (from_role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        from_role_avatar_url_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    from_role_gender_id_ = 0;
    from_role_avatar_box_id_ = 0;
    from_role_level_ = 0;
    from_role_officer_grade_ = 0;
    utc_time_generate_ = 0u;
    utc_time_invalid_ = 0u;
    time_generate_ = 0u;
    time_invalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mail_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_instance_id_)));
          set_has_mail_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_config_id;
        break;
      }

      // optional int32 mail_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_config_id_)));
          set_has_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priotity;
        break;
      }

      // optional .SProtoSpace.eMailPriority priotity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priotity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailPriority_IsValid(value)) {
            set_priotity(static_cast< ::SProtoSpace::eMailPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attachments;
        break;
      }

      // optional .SProtoSpace.mail_instance_attaches attachments = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_read;
        break;
      }

      // optional bool is_read = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
          set_has_is_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_get_attach;
        break;
      }

      // optional bool is_get_attach = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_attach_)));
          set_has_is_get_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_invalid_utc_time;
        break;
      }

      // optional uint64 invalid_utc_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalid_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invalid_utc_time_)));
          set_has_invalid_utc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mail_templet_id;
        break;
      }

      // optional uint64 mail_templet_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_templet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_templet_id_)));
          set_has_mail_templet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_server_type;
        break;
      }

      // optional .SProtoSpace.eMailServerType server_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailServerType_IsValid(value)) {
            set_server_type(static_cast< ::SProtoSpace::eMailServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_client_type;
        break;
      }

      // optional .SProtoSpace.eMailClientType client_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailClientType_IsValid(value)) {
            set_client_type(static_cast< ::SProtoSpace::eMailClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_from_role_name;
        break;
      }

      // optional string from_role_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_role_name().data(), this->from_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_from_role_avatar_url;
        break;
      }

      // optional string from_role_avatar_url = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_role_avatar_url().data(), this->from_role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_from_role_gender_id;
        break;
      }

      // optional int32 from_role_gender_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_role_gender_id_)));
          set_has_from_role_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_from_role_avatar_box_id;
        break;
      }

      // optional int32 from_role_avatar_box_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_role_avatar_box_id_)));
          set_has_from_role_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_from_role_level;
        break;
      }

      // optional int32 from_role_level = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_role_level_)));
          set_has_from_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_from_role_officer_grade;
        break;
      }

      // optional int32 from_role_officer_grade = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_role_officer_grade_)));
          set_has_from_role_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_utc_time_generate;
        break;
      }

      // optional uint32 utc_time_generate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utc_time_generate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utc_time_generate_)));
          set_has_utc_time_generate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_utc_time_invalid;
        break;
      }

      // optional uint32 utc_time_invalid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utc_time_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utc_time_invalid_)));
          set_has_utc_time_invalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_time_generate;
        break;
      }

      // optional uint32 time_generate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_generate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_generate_)));
          set_has_time_generate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_time_invalid;
        break;
      }

      // optional uint32 time_invalid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_invalid_)));
          set_has_time_invalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mail_instance_id = 1;
  if (has_mail_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_instance_id(), output);
  }

  // optional int32 mail_config_id = 2;
  if (has_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_config_id(), output);
  }

  // optional .SProtoSpace.eMailPriority priotity = 3;
  if (has_priotity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->priotity(), output);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_role_id(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

  // optional .SProtoSpace.mail_instance_attaches attachments = 8;
  if (has_attachments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attachments(), output);
  }

  // optional bool is_read = 9;
  if (has_is_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_read(), output);
  }

  // optional bool is_get_attach = 10;
  if (has_is_get_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_get_attach(), output);
  }

  // optional uint64 invalid_utc_time = 11;
  if (has_invalid_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->invalid_utc_time(), output);
  }

  // optional uint64 mail_templet_id = 12;
  if (has_mail_templet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->mail_templet_id(), output);
  }

  // optional .SProtoSpace.eMailServerType server_type = 13;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->server_type(), output);
  }

  // optional .SProtoSpace.eMailClientType client_type = 14;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->client_type(), output);
  }

  // optional string from_role_name = 15;
  if (has_from_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_name().data(), this->from_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->from_role_name(), output);
  }

  // optional string from_role_avatar_url = 16;
  if (has_from_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_avatar_url().data(), this->from_role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->from_role_avatar_url(), output);
  }

  // optional int32 from_role_gender_id = 17;
  if (has_from_role_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->from_role_gender_id(), output);
  }

  // optional int32 from_role_avatar_box_id = 18;
  if (has_from_role_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->from_role_avatar_box_id(), output);
  }

  // optional int32 from_role_level = 19;
  if (has_from_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->from_role_level(), output);
  }

  // optional int32 from_role_officer_grade = 20;
  if (has_from_role_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->from_role_officer_grade(), output);
  }

  // optional uint32 utc_time_generate = 21;
  if (has_utc_time_generate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->utc_time_generate(), output);
  }

  // optional uint32 utc_time_invalid = 22;
  if (has_utc_time_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->utc_time_invalid(), output);
  }

  // optional uint32 time_generate = 23;
  if (has_time_generate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->time_generate(), output);
  }

  // optional uint32 time_invalid = 24;
  if (has_time_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->time_invalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mail_instance_id = 1;
  if (has_mail_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_instance_id(), target);
  }

  // optional int32 mail_config_id = 2;
  if (has_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_config_id(), target);
  }

  // optional .SProtoSpace.eMailPriority priotity = 3;
  if (has_priotity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->priotity(), target);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_role_id(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional .SProtoSpace.mail_instance_attaches attachments = 8;
  if (has_attachments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attachments(), target);
  }

  // optional bool is_read = 9;
  if (has_is_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_read(), target);
  }

  // optional bool is_get_attach = 10;
  if (has_is_get_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_get_attach(), target);
  }

  // optional uint64 invalid_utc_time = 11;
  if (has_invalid_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->invalid_utc_time(), target);
  }

  // optional uint64 mail_templet_id = 12;
  if (has_mail_templet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->mail_templet_id(), target);
  }

  // optional .SProtoSpace.eMailServerType server_type = 13;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->server_type(), target);
  }

  // optional .SProtoSpace.eMailClientType client_type = 14;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->client_type(), target);
  }

  // optional string from_role_name = 15;
  if (has_from_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_name().data(), this->from_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->from_role_name(), target);
  }

  // optional string from_role_avatar_url = 16;
  if (has_from_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_avatar_url().data(), this->from_role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->from_role_avatar_url(), target);
  }

  // optional int32 from_role_gender_id = 17;
  if (has_from_role_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->from_role_gender_id(), target);
  }

  // optional int32 from_role_avatar_box_id = 18;
  if (has_from_role_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->from_role_avatar_box_id(), target);
  }

  // optional int32 from_role_level = 19;
  if (has_from_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->from_role_level(), target);
  }

  // optional int32 from_role_officer_grade = 20;
  if (has_from_role_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->from_role_officer_grade(), target);
  }

  // optional uint32 utc_time_generate = 21;
  if (has_utc_time_generate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->utc_time_generate(), target);
  }

  // optional uint32 utc_time_invalid = 22;
  if (has_utc_time_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->utc_time_invalid(), target);
  }

  // optional uint32 time_generate = 23;
  if (has_time_generate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->time_generate(), target);
  }

  // optional uint32 time_invalid = 24;
  if (has_time_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->time_invalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mail_instance_id = 1;
    if (has_mail_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_instance_id());
    }

    // optional int32 mail_config_id = 2;
    if (has_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_config_id());
    }

    // optional .SProtoSpace.eMailPriority priotity = 3;
    if (has_priotity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priotity());
    }

    // optional uint64 to_role_id = 4;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .SProtoSpace.mail_instance_attaches attachments = 8;
    if (has_attachments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachments());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_read = 9;
    if (has_is_read()) {
      total_size += 1 + 1;
    }

    // optional bool is_get_attach = 10;
    if (has_is_get_attach()) {
      total_size += 1 + 1;
    }

    // optional uint64 invalid_utc_time = 11;
    if (has_invalid_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invalid_utc_time());
    }

    // optional uint64 mail_templet_id = 12;
    if (has_mail_templet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_templet_id());
    }

    // optional .SProtoSpace.eMailServerType server_type = 13;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional .SProtoSpace.eMailClientType client_type = 14;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional string from_role_name = 15;
    if (has_from_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_role_name());
    }

    // optional string from_role_avatar_url = 16;
    if (has_from_role_avatar_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_role_avatar_url());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 from_role_gender_id = 17;
    if (has_from_role_gender_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_role_gender_id());
    }

    // optional int32 from_role_avatar_box_id = 18;
    if (has_from_role_avatar_box_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_role_avatar_box_id());
    }

    // optional int32 from_role_level = 19;
    if (has_from_role_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_role_level());
    }

    // optional int32 from_role_officer_grade = 20;
    if (has_from_role_officer_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_role_officer_grade());
    }

    // optional uint32 utc_time_generate = 21;
    if (has_utc_time_generate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utc_time_generate());
    }

    // optional uint32 utc_time_invalid = 22;
    if (has_utc_time_invalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utc_time_invalid());
    }

    // optional uint32 time_generate = 23;
    if (has_time_generate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_generate());
    }

    // optional uint32 time_invalid = 24;
    if (has_time_invalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_invalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_instance::MergeFrom(const mail_instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_instance_id()) {
      set_mail_instance_id(from.mail_instance_id());
    }
    if (from.has_mail_config_id()) {
      set_mail_config_id(from.mail_config_id());
    }
    if (from.has_priotity()) {
      set_priotity(from.priotity());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_attachments()) {
      mutable_attachments()->::SProtoSpace::mail_instance_attaches::MergeFrom(from.attachments());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_read()) {
      set_is_read(from.is_read());
    }
    if (from.has_is_get_attach()) {
      set_is_get_attach(from.is_get_attach());
    }
    if (from.has_invalid_utc_time()) {
      set_invalid_utc_time(from.invalid_utc_time());
    }
    if (from.has_mail_templet_id()) {
      set_mail_templet_id(from.mail_templet_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_from_role_name()) {
      set_from_role_name(from.from_role_name());
    }
    if (from.has_from_role_avatar_url()) {
      set_from_role_avatar_url(from.from_role_avatar_url());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_from_role_gender_id()) {
      set_from_role_gender_id(from.from_role_gender_id());
    }
    if (from.has_from_role_avatar_box_id()) {
      set_from_role_avatar_box_id(from.from_role_avatar_box_id());
    }
    if (from.has_from_role_level()) {
      set_from_role_level(from.from_role_level());
    }
    if (from.has_from_role_officer_grade()) {
      set_from_role_officer_grade(from.from_role_officer_grade());
    }
    if (from.has_utc_time_generate()) {
      set_utc_time_generate(from.utc_time_generate());
    }
    if (from.has_utc_time_invalid()) {
      set_utc_time_invalid(from.utc_time_invalid());
    }
    if (from.has_time_generate()) {
      set_time_generate(from.time_generate());
    }
    if (from.has_time_invalid()) {
      set_time_invalid(from.time_invalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_instance::CopyFrom(const mail_instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_instance::IsInitialized() const {

  return true;
}

void mail_instance::Swap(mail_instance* other) {
  if (other != this) {
    std::swap(mail_instance_id_, other->mail_instance_id_);
    std::swap(mail_config_id_, other->mail_config_id_);
    std::swap(priotity_, other->priotity_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(attachments_, other->attachments_);
    std::swap(is_read_, other->is_read_);
    std::swap(is_get_attach_, other->is_get_attach_);
    std::swap(invalid_utc_time_, other->invalid_utc_time_);
    std::swap(mail_templet_id_, other->mail_templet_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(client_type_, other->client_type_);
    std::swap(from_role_name_, other->from_role_name_);
    std::swap(from_role_avatar_url_, other->from_role_avatar_url_);
    std::swap(from_role_gender_id_, other->from_role_gender_id_);
    std::swap(from_role_avatar_box_id_, other->from_role_avatar_box_id_);
    std::swap(from_role_level_, other->from_role_level_);
    std::swap(from_role_officer_grade_, other->from_role_officer_grade_);
    std::swap(utc_time_generate_, other->utc_time_generate_);
    std::swap(utc_time_invalid_, other->utc_time_invalid_);
    std::swap(time_generate_, other->time_generate_);
    std::swap(time_invalid_, other->time_invalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_instance_descriptor_;
  metadata.reflection = mail_instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_from_role_info::kRoleNameFieldNumber;
const int mail_from_role_info::kAvatarUrlFieldNumber;
const int mail_from_role_info::kAvatarBoxIdFieldNumber;
const int mail_from_role_info::kLevelFieldNumber;
const int mail_from_role_info::kOfficeGradeFieldNumber;
const int mail_from_role_info::kGenderIdFieldNumber;
const int mail_from_role_info::kRoleIdFieldNumber;
#endif  // !_MSC_VER

mail_from_role_info::mail_from_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_from_role_info::InitAsDefaultInstance() {
}

mail_from_role_info::mail_from_role_info(const mail_from_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_from_role_info::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_box_id_ = 0;
  level_ = 0;
  office_grade_ = 0;
  gender_id_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_from_role_info::~mail_from_role_info() {
  SharedDtor();
}

void mail_from_role_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (this != default_instance_) {
  }
}

void mail_from_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_from_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_from_role_info_descriptor_;
}

const mail_from_role_info& mail_from_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail_from_role_info* mail_from_role_info::default_instance_ = NULL;

mail_from_role_info* mail_from_role_info::New() const {
  return new mail_from_role_info;
}

void mail_from_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        avatar_url_->clear();
      }
    }
    avatar_box_id_ = 0;
    level_ = 0;
    office_grade_ = 0;
    gender_id_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_from_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_avatar_box_id;
        break;
      }

      // optional int32 avatar_box_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_office_grade;
        break;
      }

      // optional int32 office_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_grade_)));
          set_has_office_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_from_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }

  // optional string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->avatar_url(), output);
  }

  // optional int32 avatar_box_id = 3;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->avatar_box_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 office_grade = 5;
  if (has_office_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->office_grade(), output);
  }

  // optional int32 gender_id = 6;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gender_id(), output);
  }

  // optional uint64 role_id = 17;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_from_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }

  // optional string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatar_url(), target);
  }

  // optional int32 avatar_box_id = 3;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->avatar_box_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 office_grade = 5;
  if (has_office_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->office_grade(), target);
  }

  // optional int32 gender_id = 6;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gender_id(), target);
  }

  // optional uint64 role_id = 17;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_from_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional int32 avatar_box_id = 3;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar_box_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 office_grade = 5;
    if (has_office_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_grade());
    }

    // optional int32 gender_id = 6;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint64 role_id = 17;
    if (has_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_from_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_from_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_from_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_from_role_info::MergeFrom(const mail_from_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_office_grade()) {
      set_office_grade(from.office_grade());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_from_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_from_role_info::CopyFrom(const mail_from_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_from_role_info::IsInitialized() const {

  return true;
}

void mail_from_role_info::Swap(mail_from_role_info* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(office_grade_, other->office_grade_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_from_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_from_role_info_descriptor_;
  metadata.reflection = mail_from_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail::kIdFieldNumber;
const int mail::kCfgIdFieldNumber;
const int mail::kTitleFieldNumber;
const int mail::kContentFieldNumber;
const int mail::kInvalidTimeFieldNumber;
const int mail::kClientTypeFieldNumber;
const int mail::kServerTypeFieldNumber;
const int mail::kPriotityTypeFieldNumber;
const int mail::kToRoleIdFieldNumber;
const int mail::kFromRoleIdFieldNumber;
const int mail::kFromRoleInfoFieldNumber;
const int mail::kAttachmentFieldNumber;
const int mail::kIsReadFieldNumber;
const int mail::kIsGetAttachFieldNumber;
const int mail::kTempletIdFieldNumber;
const int mail::kGenerateTimeCliFieldNumber;
const int mail::kInvalidTimeCliFieldNumber;
#endif  // !_MSC_VER

mail::mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail::InitAsDefaultInstance() {
  from_role_info_ = const_cast< ::SProtoSpace::mail_from_role_info*>(&::SProtoSpace::mail_from_role_info::default_instance());
  attachment_ = const_cast< ::SProtoSpace::mail_instance_attaches*>(&::SProtoSpace::mail_instance_attaches::default_instance());
}

mail::mail(const mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  cfg_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invalid_time_ = GOOGLE_ULONGLONG(0);
  client_type_ = 0;
  server_type_ = 0;
  priotity_type_ = 0;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  from_role_info_ = NULL;
  attachment_ = NULL;
  is_read_ = false;
  is_get_attach_ = false;
  templet_id_ = GOOGLE_ULONGLONG(0);
  generate_time_cli_ = 0u;
  invalid_time_cli_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail::~mail() {
  SharedDtor();
}

void mail::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete from_role_info_;
    delete attachment_;
  }
}

void mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_descriptor_;
}

const mail& mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail* mail::default_instance_ = NULL;

mail* mail::New() const {
  return new mail;
}

void mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    cfg_id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    invalid_time_ = GOOGLE_ULONGLONG(0);
    client_type_ = 0;
    server_type_ = 0;
    priotity_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    to_role_id_ = GOOGLE_ULONGLONG(0);
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_role_info()) {
      if (from_role_info_ != NULL) from_role_info_->::SProtoSpace::mail_from_role_info::Clear();
    }
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::SProtoSpace::mail_instance_attaches::Clear();
    }
    is_read_ = false;
    is_get_attach_ = false;
    templet_id_ = GOOGLE_ULONGLONG(0);
    generate_time_cli_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    invalid_time_cli_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg_id;
        break;
      }

      // optional int32 cfg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_invalid_time;
        break;
      }

      // optional uint64 invalid_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invalid_time_)));
          set_has_invalid_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_client_type;
        break;
      }

      // optional .SProtoSpace.eMailClientType client_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailClientType_IsValid(value)) {
            set_client_type(static_cast< ::SProtoSpace::eMailClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_type;
        break;
      }

      // optional .SProtoSpace.eMailServerType server_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailServerType_IsValid(value)) {
            set_server_type(static_cast< ::SProtoSpace::eMailServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_priotity_type;
        break;
      }

      // optional .SProtoSpace.eMailPriority priotity_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priotity_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailPriority_IsValid(value)) {
            set_priotity_type(static_cast< ::SProtoSpace::eMailPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_from_role_info;
        break;
      }

      // optional .SProtoSpace.mail_from_role_info from_role_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attachment;
        break;
      }

      // optional .SProtoSpace.mail_instance_attaches attachment = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_read;
        break;
      }

      // optional bool is_read = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
          set_has_is_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_get_attach;
        break;
      }

      // optional bool is_get_attach = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_attach_)));
          set_has_is_get_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_templet_id;
        break;
      }

      // optional uint64 templet_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_templet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &templet_id_)));
          set_has_templet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_generate_time_cli;
        break;
      }

      // optional uint32 generate_time_cli = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generate_time_cli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &generate_time_cli_)));
          set_has_generate_time_cli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_invalid_time_cli;
        break;
      }

      // optional uint32 invalid_time_cli = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalid_time_cli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invalid_time_cli_)));
          set_has_invalid_time_cli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 cfg_id = 2;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfg_id(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional uint64 invalid_time = 5;
  if (has_invalid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->invalid_time(), output);
  }

  // optional .SProtoSpace.eMailClientType client_type = 6;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->client_type(), output);
  }

  // optional .SProtoSpace.eMailServerType server_type = 7;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_type(), output);
  }

  // optional .SProtoSpace.eMailPriority priotity_type = 8;
  if (has_priotity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->priotity_type(), output);
  }

  // optional uint64 to_role_id = 9;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->to_role_id(), output);
  }

  // optional uint64 from_role_id = 10;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->from_role_id(), output);
  }

  // optional .SProtoSpace.mail_from_role_info from_role_info = 11;
  if (has_from_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->from_role_info(), output);
  }

  // optional .SProtoSpace.mail_instance_attaches attachment = 12;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attachment(), output);
  }

  // optional bool is_read = 13;
  if (has_is_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_read(), output);
  }

  // optional bool is_get_attach = 14;
  if (has_is_get_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_get_attach(), output);
  }

  // optional uint64 templet_id = 15;
  if (has_templet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->templet_id(), output);
  }

  // optional uint32 generate_time_cli = 16;
  if (has_generate_time_cli()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->generate_time_cli(), output);
  }

  // optional uint32 invalid_time_cli = 17;
  if (has_invalid_time_cli()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->invalid_time_cli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 cfg_id = 2;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfg_id(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint64 invalid_time = 5;
  if (has_invalid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->invalid_time(), target);
  }

  // optional .SProtoSpace.eMailClientType client_type = 6;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->client_type(), target);
  }

  // optional .SProtoSpace.eMailServerType server_type = 7;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_type(), target);
  }

  // optional .SProtoSpace.eMailPriority priotity_type = 8;
  if (has_priotity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->priotity_type(), target);
  }

  // optional uint64 to_role_id = 9;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->to_role_id(), target);
  }

  // optional uint64 from_role_id = 10;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->from_role_id(), target);
  }

  // optional .SProtoSpace.mail_from_role_info from_role_info = 11;
  if (has_from_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->from_role_info(), target);
  }

  // optional .SProtoSpace.mail_instance_attaches attachment = 12;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attachment(), target);
  }

  // optional bool is_read = 13;
  if (has_is_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_read(), target);
  }

  // optional bool is_get_attach = 14;
  if (has_is_get_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_get_attach(), target);
  }

  // optional uint64 templet_id = 15;
  if (has_templet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->templet_id(), target);
  }

  // optional uint32 generate_time_cli = 16;
  if (has_generate_time_cli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->generate_time_cli(), target);
  }

  // optional uint32 invalid_time_cli = 17;
  if (has_invalid_time_cli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->invalid_time_cli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 cfg_id = 2;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 invalid_time = 5;
    if (has_invalid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invalid_time());
    }

    // optional .SProtoSpace.eMailClientType client_type = 6;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional .SProtoSpace.eMailServerType server_type = 7;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional .SProtoSpace.eMailPriority priotity_type = 8;
    if (has_priotity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priotity_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 to_role_id = 9;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 from_role_id = 10;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional .SProtoSpace.mail_from_role_info from_role_info = 11;
    if (has_from_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_role_info());
    }

    // optional .SProtoSpace.mail_instance_attaches attachment = 12;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional bool is_read = 13;
    if (has_is_read()) {
      total_size += 1 + 1;
    }

    // optional bool is_get_attach = 14;
    if (has_is_get_attach()) {
      total_size += 1 + 1;
    }

    // optional uint64 templet_id = 15;
    if (has_templet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->templet_id());
    }

    // optional uint32 generate_time_cli = 16;
    if (has_generate_time_cli()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->generate_time_cli());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 invalid_time_cli = 17;
    if (has_invalid_time_cli()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invalid_time_cli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail::MergeFrom(const mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_invalid_time()) {
      set_invalid_time(from.invalid_time());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_priotity_type()) {
      set_priotity_type(from.priotity_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_from_role_info()) {
      mutable_from_role_info()->::SProtoSpace::mail_from_role_info::MergeFrom(from.from_role_info());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::SProtoSpace::mail_instance_attaches::MergeFrom(from.attachment());
    }
    if (from.has_is_read()) {
      set_is_read(from.is_read());
    }
    if (from.has_is_get_attach()) {
      set_is_get_attach(from.is_get_attach());
    }
    if (from.has_templet_id()) {
      set_templet_id(from.templet_id());
    }
    if (from.has_generate_time_cli()) {
      set_generate_time_cli(from.generate_time_cli());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_invalid_time_cli()) {
      set_invalid_time_cli(from.invalid_time_cli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail::CopyFrom(const mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail::IsInitialized() const {

  return true;
}

void mail::Swap(mail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(invalid_time_, other->invalid_time_);
    std::swap(client_type_, other->client_type_);
    std::swap(server_type_, other->server_type_);
    std::swap(priotity_type_, other->priotity_type_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(from_role_info_, other->from_role_info_);
    std::swap(attachment_, other->attachment_);
    std::swap(is_read_, other->is_read_);
    std::swap(is_get_attach_, other->is_get_attach_);
    std::swap(templet_id_, other->templet_id_);
    std::swap(generate_time_cli_, other->generate_time_cli_);
    std::swap(invalid_time_cli_, other->invalid_time_cli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_descriptor_;
  metadata.reflection = mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_template::kMailTemplateIdFieldNumber;
const int mail_template::kMailConfigIdFieldNumber;
const int mail_template::kPriotityFieldNumber;
const int mail_template::kServerTypeFieldNumber;
const int mail_template::kClientTypeFieldNumber;
const int mail_template::kTitleFieldNumber;
const int mail_template::kContentFieldNumber;
const int mail_template::kLifeTimeFieldNumber;
const int mail_template::kInvalidTimeFieldNumber;
const int mail_template::kAttachmentFieldNumber;
#endif  // !_MSC_VER

mail_template::mail_template()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_template::InitAsDefaultInstance() {
  attachment_ = const_cast< ::SProtoSpace::mail_instance_attaches*>(&::SProtoSpace::mail_instance_attaches::default_instance());
}

mail_template::mail_template(const mail_template& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_template::SharedCtor() {
  _cached_size_ = 0;
  mail_template_id_ = GOOGLE_ULONGLONG(0);
  mail_config_id_ = 0;
  priotity_ = 0;
  server_type_ = 0;
  client_type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  life_time_ = 0u;
  invalid_time_ = GOOGLE_ULONGLONG(0);
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_template::~mail_template() {
  SharedDtor();
}

void mail_template::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete attachment_;
  }
}

void mail_template::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_template::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_template_descriptor_;
}

const mail_template& mail_template::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

mail_template* mail_template::default_instance_ = NULL;

mail_template* mail_template::New() const {
  return new mail_template;
}

void mail_template::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_template_id_ = GOOGLE_ULONGLONG(0);
    mail_config_id_ = 0;
    priotity_ = 0;
    server_type_ = 0;
    client_type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    life_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    invalid_time_ = GOOGLE_ULONGLONG(0);
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::SProtoSpace::mail_instance_attaches::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_template::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mail_template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_template_id_)));
          set_has_mail_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_config_id;
        break;
      }

      // optional int32 mail_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_config_id_)));
          set_has_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priotity;
        break;
      }

      // optional .SProtoSpace.eMailPriority priotity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priotity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailPriority_IsValid(value)) {
            set_priotity(static_cast< ::SProtoSpace::eMailPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_type;
        break;
      }

      // optional .SProtoSpace.eMailServerType server_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailServerType_IsValid(value)) {
            set_server_type(static_cast< ::SProtoSpace::eMailServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_type;
        break;
      }

      // optional .SProtoSpace.eMailClientType client_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailClientType_IsValid(value)) {
            set_client_type(static_cast< ::SProtoSpace::eMailClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_life_time;
        break;
      }

      // optional uint32 life_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_invalid_time;
        break;
      }

      // optional uint64 invalid_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invalid_time_)));
          set_has_invalid_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attachment;
        break;
      }

      // optional .SProtoSpace.mail_instance_attaches attachment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_template::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mail_template_id = 1;
  if (has_mail_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_template_id(), output);
  }

  // optional int32 mail_config_id = 2;
  if (has_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_config_id(), output);
  }

  // optional .SProtoSpace.eMailPriority priotity = 3;
  if (has_priotity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->priotity(), output);
  }

  // optional .SProtoSpace.eMailServerType server_type = 4;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->server_type(), output);
  }

  // optional .SProtoSpace.eMailClientType client_type = 5;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->client_type(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

  // optional uint32 life_time = 8;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->life_time(), output);
  }

  // optional uint64 invalid_time = 9;
  if (has_invalid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->invalid_time(), output);
  }

  // optional .SProtoSpace.mail_instance_attaches attachment = 10;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_template::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mail_template_id = 1;
  if (has_mail_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_template_id(), target);
  }

  // optional int32 mail_config_id = 2;
  if (has_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_config_id(), target);
  }

  // optional .SProtoSpace.eMailPriority priotity = 3;
  if (has_priotity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->priotity(), target);
  }

  // optional .SProtoSpace.eMailServerType server_type = 4;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->server_type(), target);
  }

  // optional .SProtoSpace.eMailClientType client_type = 5;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->client_type(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional uint32 life_time = 8;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->life_time(), target);
  }

  // optional uint64 invalid_time = 9;
  if (has_invalid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->invalid_time(), target);
  }

  // optional .SProtoSpace.mail_instance_attaches attachment = 10;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_template::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mail_template_id = 1;
    if (has_mail_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_template_id());
    }

    // optional int32 mail_config_id = 2;
    if (has_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_config_id());
    }

    // optional .SProtoSpace.eMailPriority priotity = 3;
    if (has_priotity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priotity());
    }

    // optional .SProtoSpace.eMailServerType server_type = 4;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional .SProtoSpace.eMailClientType client_type = 5;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 life_time = 8;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 invalid_time = 9;
    if (has_invalid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invalid_time());
    }

    // optional .SProtoSpace.mail_instance_attaches attachment = 10;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_template::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_template* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_template*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_template::MergeFrom(const mail_template& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_template_id()) {
      set_mail_template_id(from.mail_template_id());
    }
    if (from.has_mail_config_id()) {
      set_mail_config_id(from.mail_config_id());
    }
    if (from.has_priotity()) {
      set_priotity(from.priotity());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_invalid_time()) {
      set_invalid_time(from.invalid_time());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::SProtoSpace::mail_instance_attaches::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_template::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_template::CopyFrom(const mail_template& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_template::IsInitialized() const {

  return true;
}

void mail_template::Swap(mail_template* other) {
  if (other != this) {
    std::swap(mail_template_id_, other->mail_template_id_);
    std::swap(mail_config_id_, other->mail_config_id_);
    std::swap(priotity_, other->priotity_);
    std::swap(server_type_, other->server_type_);
    std::swap(client_type_, other->client_type_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(life_time_, other->life_time_);
    std::swap(invalid_time_, other->invalid_time_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_template::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_template_descriptor_;
  metadata.reflection = mail_template_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_offical_info::kGradeFieldNumber;
#endif  // !_MSC_VER

event_offical_info::event_offical_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_offical_info::InitAsDefaultInstance() {
}

event_offical_info::event_offical_info(const event_offical_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_offical_info::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_offical_info::~event_offical_info() {
  SharedDtor();
}

void event_offical_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_offical_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_offical_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_offical_info_descriptor_;
}

const event_offical_info& event_offical_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

event_offical_info* event_offical_info::default_instance_ = NULL;

event_offical_info* event_offical_info::New() const {
  return new event_offical_info;
}

void event_offical_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_offical_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_offical_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_offical_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_offical_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_offical_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_offical_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_offical_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_offical_info::MergeFrom(const event_offical_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_offical_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_offical_info::CopyFrom(const event_offical_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_offical_info::IsInitialized() const {

  return true;
}

void event_offical_info::Swap(event_offical_info* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_offical_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_offical_info_descriptor_;
  metadata.reflection = event_offical_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_offical_reduce::kOldGradeFieldNumber;
const int event_offical_reduce::kNewGradeFieldNumber;
#endif  // !_MSC_VER

event_offical_reduce::event_offical_reduce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_offical_reduce::InitAsDefaultInstance() {
}

event_offical_reduce::event_offical_reduce(const event_offical_reduce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_offical_reduce::SharedCtor() {
  _cached_size_ = 0;
  old_grade_ = 0u;
  new_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_offical_reduce::~event_offical_reduce() {
  SharedDtor();
}

void event_offical_reduce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_offical_reduce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_offical_reduce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_offical_reduce_descriptor_;
}

const event_offical_reduce& event_offical_reduce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

event_offical_reduce* event_offical_reduce::default_instance_ = NULL;

event_offical_reduce* event_offical_reduce::New() const {
  return new event_offical_reduce;
}

void event_offical_reduce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_grade_ = 0u;
    new_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_offical_reduce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 old_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_grade_)));
          set_has_old_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_grade;
        break;
      }

      // optional uint32 new_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_grade_)));
          set_has_new_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_offical_reduce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 old_grade = 1;
  if (has_old_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_grade(), output);
  }

  // optional uint32 new_grade = 2;
  if (has_new_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_offical_reduce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 old_grade = 1;
  if (has_old_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_grade(), target);
  }

  // optional uint32 new_grade = 2;
  if (has_new_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_offical_reduce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 old_grade = 1;
    if (has_old_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_grade());
    }

    // optional uint32 new_grade = 2;
    if (has_new_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_offical_reduce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_offical_reduce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_offical_reduce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_offical_reduce::MergeFrom(const event_offical_reduce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_grade()) {
      set_old_grade(from.old_grade());
    }
    if (from.has_new_grade()) {
      set_new_grade(from.new_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_offical_reduce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_offical_reduce::CopyFrom(const event_offical_reduce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_offical_reduce::IsInitialized() const {

  return true;
}

void event_offical_reduce::Swap(event_offical_reduce* other) {
  if (other != this) {
    std::swap(old_grade_, other->old_grade_);
    std::swap(new_grade_, other->new_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_offical_reduce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_offical_reduce_descriptor_;
  metadata.reflection = event_offical_reduce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_flower_info::kTemplateIdFieldNumber;
const int event_flower_info::kCountNumFieldNumber;
const int event_flower_info::kDefaultRemarkIndexFieldNumber;
const int event_flower_info::kCustomRemarkFieldNumber;
#endif  // !_MSC_VER

event_flower_info::event_flower_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_flower_info::InitAsDefaultInstance() {
}

event_flower_info::event_flower_info(const event_flower_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_flower_info::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  count_num_ = 0;
  default_remark_index_ = 0;
  custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_flower_info::~event_flower_info() {
  SharedDtor();
}

void event_flower_info::SharedDtor() {
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_remark_;
  }
  if (this != default_instance_) {
  }
}

void event_flower_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_flower_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_flower_info_descriptor_;
}

const event_flower_info& event_flower_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

event_flower_info* event_flower_info::default_instance_ = NULL;

event_flower_info* event_flower_info::New() const {
  return new event_flower_info;
}

void event_flower_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    count_num_ = 0;
    default_remark_index_ = 0;
    if (has_custom_remark()) {
      if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
        custom_remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_flower_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_num;
        break;
      }

      // optional int32 count_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_num_)));
          set_has_count_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_default_remark_index;
        break;
      }

      // optional int32 default_remark_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_remark_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_remark_index_)));
          set_has_default_remark_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_custom_remark;
        break;
      }

      // optional string custom_remark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_remark().data(), this->custom_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_flower_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // optional int32 count_num = 2;
  if (has_count_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_num(), output);
  }

  // optional int32 default_remark_index = 3;
  if (has_default_remark_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->default_remark_index(), output);
  }

  // optional string custom_remark = 4;
  if (has_custom_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_remark().data(), this->custom_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->custom_remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_flower_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 count_num = 2;
  if (has_count_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_num(), target);
  }

  // optional int32 default_remark_index = 3;
  if (has_default_remark_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->default_remark_index(), target);
  }

  // optional string custom_remark = 4;
  if (has_custom_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_remark().data(), this->custom_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->custom_remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_flower_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 count_num = 2;
    if (has_count_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_num());
    }

    // optional int32 default_remark_index = 3;
    if (has_default_remark_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_remark_index());
    }

    // optional string custom_remark = 4;
    if (has_custom_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_flower_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_flower_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_flower_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_flower_info::MergeFrom(const event_flower_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_count_num()) {
      set_count_num(from.count_num());
    }
    if (from.has_default_remark_index()) {
      set_default_remark_index(from.default_remark_index());
    }
    if (from.has_custom_remark()) {
      set_custom_remark(from.custom_remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_flower_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_flower_info::CopyFrom(const event_flower_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_flower_info::IsInitialized() const {

  return true;
}

void event_flower_info::Swap(event_flower_info* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(count_num_, other->count_num_);
    std::swap(default_remark_index_, other->default_remark_index_);
    std::swap(custom_remark_, other->custom_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_flower_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_flower_info_descriptor_;
  metadata.reflection = event_flower_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_flower_send_info::kToRoleInfoFieldNumber;
const int event_flower_send_info::kFlowerInfoFieldNumber;
#endif  // !_MSC_VER

event_flower_send_info::event_flower_send_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_flower_send_info::InitAsDefaultInstance() {
  to_role_info_ = const_cast< ::SProtoSpace::public_role_base_info*>(&::SProtoSpace::public_role_base_info::default_instance());
  flower_info_ = const_cast< ::SProtoSpace::event_flower_info*>(&::SProtoSpace::event_flower_info::default_instance());
}

event_flower_send_info::event_flower_send_info(const event_flower_send_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_flower_send_info::SharedCtor() {
  _cached_size_ = 0;
  to_role_info_ = NULL;
  flower_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_flower_send_info::~event_flower_send_info() {
  SharedDtor();
}

void event_flower_send_info::SharedDtor() {
  if (this != default_instance_) {
    delete to_role_info_;
    delete flower_info_;
  }
}

void event_flower_send_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_flower_send_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_flower_send_info_descriptor_;
}

const event_flower_send_info& event_flower_send_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

event_flower_send_info* event_flower_send_info::default_instance_ = NULL;

event_flower_send_info* event_flower_send_info::New() const {
  return new event_flower_send_info;
}

void event_flower_send_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_to_role_info()) {
      if (to_role_info_ != NULL) to_role_info_->::SProtoSpace::public_role_base_info::Clear();
    }
    if (has_flower_info()) {
      if (flower_info_ != NULL) flower_info_->::SProtoSpace::event_flower_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_flower_send_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.public_role_base_info to_role_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flower_info;
        break;
      }

      // optional .SProtoSpace.event_flower_info flower_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flower_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_flower_send_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.public_role_base_info to_role_info = 1;
  if (has_to_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->to_role_info(), output);
  }

  // optional .SProtoSpace.event_flower_info flower_info = 2;
  if (has_flower_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flower_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_flower_send_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.public_role_base_info to_role_info = 1;
  if (has_to_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->to_role_info(), target);
  }

  // optional .SProtoSpace.event_flower_info flower_info = 2;
  if (has_flower_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flower_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_flower_send_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.public_role_base_info to_role_info = 1;
    if (has_to_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_role_info());
    }

    // optional .SProtoSpace.event_flower_info flower_info = 2;
    if (has_flower_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flower_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_flower_send_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_flower_send_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_flower_send_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_flower_send_info::MergeFrom(const event_flower_send_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_role_info()) {
      mutable_to_role_info()->::SProtoSpace::public_role_base_info::MergeFrom(from.to_role_info());
    }
    if (from.has_flower_info()) {
      mutable_flower_info()->::SProtoSpace::event_flower_info::MergeFrom(from.flower_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_flower_send_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_flower_send_info::CopyFrom(const event_flower_send_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_flower_send_info::IsInitialized() const {

  return true;
}

void event_flower_send_info::Swap(event_flower_send_info* other) {
  if (other != this) {
    std::swap(to_role_info_, other->to_role_info_);
    std::swap(flower_info_, other->flower_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_flower_send_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_flower_send_info_descriptor_;
  metadata.reflection = event_flower_send_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_event_msg_info::kIdFieldNumber;
const int db_event_msg_info::kRoleIdFieldNumber;
const int db_event_msg_info::kFromIdFieldNumber;
const int db_event_msg_info::kFromNameFieldNumber;
const int db_event_msg_info::kFromLvFieldNumber;
const int db_event_msg_info::kFromSexFieldNumber;
const int db_event_msg_info::kFromGradeFieldNumber;
const int db_event_msg_info::kFromBorderFieldNumber;
const int db_event_msg_info::kEventTypeFieldNumber;
const int db_event_msg_info::kAddTimeFieldNumber;
const int db_event_msg_info::kIsReadFieldNumber;
const int db_event_msg_info::kMsgTemplateIdFieldNumber;
const int db_event_msg_info::kMsgContentFieldNumber;
#endif  // !_MSC_VER

db_event_msg_info::db_event_msg_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_event_msg_info::InitAsDefaultInstance() {
}

db_event_msg_info::db_event_msg_info(const db_event_msg_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_event_msg_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_lv_ = 0u;
  from_sex_ = 0u;
  from_grade_ = 0u;
  from_border_ = 0;
  event_type_ = 0u;
  add_time_ = GOOGLE_ULONGLONG(0);
  is_read_ = 0u;
  msg_template_id_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_event_msg_info::~db_event_msg_info() {
  SharedDtor();
}

void db_event_msg_info::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void db_event_msg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_event_msg_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_event_msg_info_descriptor_;
}

const db_event_msg_info& db_event_msg_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

db_event_msg_info* db_event_msg_info::default_instance_ = NULL;

db_event_msg_info* db_event_msg_info::New() const {
  return new db_event_msg_info;
}

void db_event_msg_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    from_lv_ = 0u;
    from_sex_ = 0u;
    from_grade_ = 0u;
    from_border_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    event_type_ = 0u;
    add_time_ = GOOGLE_ULONGLONG(0);
    is_read_ = 0u;
    msg_template_id_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_event_msg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_name;
        break;
      }

      // optional string from_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_lv;
        break;
      }

      // optional uint32 from_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_lv_)));
          set_has_from_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_from_sex;
        break;
      }

      // optional uint32 from_sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_sex_)));
          set_has_from_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_from_grade;
        break;
      }

      // optional uint32 from_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_grade_)));
          set_has_from_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_from_border;
        break;
      }

      // optional int32 from_border = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_border_)));
          set_has_from_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_add_time;
        break;
      }

      // optional uint64 add_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_time_)));
          set_has_add_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_read;
        break;
      }

      // optional uint32 is_read = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_read_)));
          set_has_is_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_msg_template_id;
        break;
      }

      // optional uint32 msg_template_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_template_id_)));
          set_has_msg_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_event_msg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 from_id = 3;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_id(), output);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_name(), output);
  }

  // optional uint32 from_lv = 5;
  if (has_from_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_lv(), output);
  }

  // optional uint32 from_sex = 6;
  if (has_from_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->from_sex(), output);
  }

  // optional uint32 from_grade = 7;
  if (has_from_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->from_grade(), output);
  }

  // optional int32 from_border = 8;
  if (has_from_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->from_border(), output);
  }

  // optional uint32 event_type = 9;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->event_type(), output);
  }

  // optional uint64 add_time = 10;
  if (has_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->add_time(), output);
  }

  // optional uint32 is_read = 11;
  if (has_is_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_read(), output);
  }

  // optional uint32 msg_template_id = 12;
  if (has_msg_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->msg_template_id(), output);
  }

  // optional string msg_content = 13;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_event_msg_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 from_id = 3;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_id(), target);
  }

  // optional string from_name = 4;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_name(), target);
  }

  // optional uint32 from_lv = 5;
  if (has_from_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_lv(), target);
  }

  // optional uint32 from_sex = 6;
  if (has_from_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->from_sex(), target);
  }

  // optional uint32 from_grade = 7;
  if (has_from_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->from_grade(), target);
  }

  // optional int32 from_border = 8;
  if (has_from_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->from_border(), target);
  }

  // optional uint32 event_type = 9;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->event_type(), target);
  }

  // optional uint64 add_time = 10;
  if (has_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->add_time(), target);
  }

  // optional uint32 is_read = 11;
  if (has_is_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->is_read(), target);
  }

  // optional uint32 msg_template_id = 12;
  if (has_msg_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->msg_template_id(), target);
  }

  // optional string msg_content = 13;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_event_msg_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 from_id = 3;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 4;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint32 from_lv = 5;
    if (has_from_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_lv());
    }

    // optional uint32 from_sex = 6;
    if (has_from_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_sex());
    }

    // optional uint32 from_grade = 7;
    if (has_from_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_grade());
    }

    // optional int32 from_border = 8;
    if (has_from_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_border());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 event_type = 9;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional uint64 add_time = 10;
    if (has_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_time());
    }

    // optional uint32 is_read = 11;
    if (has_is_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_read());
    }

    // optional uint32 msg_template_id = 12;
    if (has_msg_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_template_id());
    }

    // optional string msg_content = 13;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_event_msg_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_event_msg_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_event_msg_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_event_msg_info::MergeFrom(const db_event_msg_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_from_lv()) {
      set_from_lv(from.from_lv());
    }
    if (from.has_from_sex()) {
      set_from_sex(from.from_sex());
    }
    if (from.has_from_grade()) {
      set_from_grade(from.from_grade());
    }
    if (from.has_from_border()) {
      set_from_border(from.from_border());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_add_time()) {
      set_add_time(from.add_time());
    }
    if (from.has_is_read()) {
      set_is_read(from.is_read());
    }
    if (from.has_msg_template_id()) {
      set_msg_template_id(from.msg_template_id());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_event_msg_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_event_msg_info::CopyFrom(const db_event_msg_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_event_msg_info::IsInitialized() const {

  return true;
}

void db_event_msg_info::Swap(db_event_msg_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(role_id_, other->role_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(from_lv_, other->from_lv_);
    std::swap(from_sex_, other->from_sex_);
    std::swap(from_grade_, other->from_grade_);
    std::swap(from_border_, other->from_border_);
    std::swap(event_type_, other->event_type_);
    std::swap(add_time_, other->add_time_);
    std::swap(is_read_, other->is_read_);
    std::swap(msg_template_id_, other->msg_template_id_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_event_msg_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_event_msg_info_descriptor_;
  metadata.reflection = db_event_msg_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int share_officer_upgrade::kShareIdFieldNumber;
const int share_officer_upgrade::kRoleIdFieldNumber;
const int share_officer_upgrade::kRoleNameFieldNumber;
const int share_officer_upgrade::kSexFieldNumber;
const int share_officer_upgrade::kLvFieldNumber;
const int share_officer_upgrade::kGradeFieldNumber;
const int share_officer_upgrade::kWorldChannelIdFieldNumber;
const int share_officer_upgrade::kHeadFieldNumber;
#endif  // !_MSC_VER

share_officer_upgrade::share_officer_upgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void share_officer_upgrade::InitAsDefaultInstance() {
}

share_officer_upgrade::share_officer_upgrade(const share_officer_upgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void share_officer_upgrade::SharedCtor() {
  _cached_size_ = 0;
  share_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  lv_ = 0u;
  grade_ = 0u;
  world_channel_id_ = 0u;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

share_officer_upgrade::~share_officer_upgrade() {
  SharedDtor();
}

void share_officer_upgrade::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void share_officer_upgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* share_officer_upgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return share_officer_upgrade_descriptor_;
}

const share_officer_upgrade& share_officer_upgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

share_officer_upgrade* share_officer_upgrade::default_instance_ = NULL;

share_officer_upgrade* share_officer_upgrade::New() const {
  return new share_officer_upgrade;
}

void share_officer_upgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    share_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    sex_ = 0u;
    lv_ = 0u;
    grade_ = 0u;
    world_channel_id_ = 0u;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool share_officer_upgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 share_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_id_)));
          set_has_share_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_head;
        break;
      }

      // optional string head = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void share_officer_upgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 share_id = 1;
  if (has_share_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->share_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grade(), output);
  }

  // optional uint32 world_channel_id = 7;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->world_channel_id(), output);
  }

  // optional string head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* share_officer_upgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 share_id = 1;
  if (has_share_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->share_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grade(), target);
  }

  // optional uint32 world_channel_id = 7;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->world_channel_id(), target);
  }

  // optional string head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int share_officer_upgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 share_id = 1;
    if (has_share_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 world_channel_id = 7;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string head = 8;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void share_officer_upgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const share_officer_upgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const share_officer_upgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void share_officer_upgrade::MergeFrom(const share_officer_upgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share_id()) {
      set_share_id(from.share_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void share_officer_upgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void share_officer_upgrade::CopyFrom(const share_officer_upgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool share_officer_upgrade::IsInitialized() const {

  return true;
}

void share_officer_upgrade::Swap(share_officer_upgrade* other) {
  if (other != this) {
    std::swap(share_id_, other->share_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(sex_, other->sex_);
    std::swap(lv_, other->lv_);
    std::swap(grade_, other->grade_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata share_officer_upgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = share_officer_upgrade_descriptor_;
  metadata.reflection = share_officer_upgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int first_award_unit::kGradeFieldNumber;
const int first_award_unit::kAwardFieldNumber;
#endif  // !_MSC_VER

first_award_unit::first_award_unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void first_award_unit::InitAsDefaultInstance() {
}

first_award_unit::first_award_unit(const first_award_unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void first_award_unit::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  award_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

first_award_unit::~first_award_unit() {
  SharedDtor();
}

void first_award_unit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void first_award_unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* first_award_unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return first_award_unit_descriptor_;
}

const first_award_unit& first_award_unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

first_award_unit* first_award_unit::default_instance_ = NULL;

first_award_unit* first_award_unit::New() const {
  return new first_award_unit;
}

void first_award_unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
    award_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool first_award_unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_award;
        break;
      }

      // optional bool award = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void first_award_unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // optional bool award = 2;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* first_award_unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // optional bool award = 2;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int first_award_unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional bool award = 2;
    if (has_award()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void first_award_unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const first_award_unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const first_award_unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void first_award_unit::MergeFrom(const first_award_unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void first_award_unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void first_award_unit::CopyFrom(const first_award_unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool first_award_unit::IsInitialized() const {

  return true;
}

void first_award_unit::Swap(first_award_unit* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata first_award_unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = first_award_unit_descriptor_;
  metadata.reflection = first_award_unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_info::kUuidFieldNumber;
const int flower_info::kTemplateIdFieldNumber;
const int flower_info::kCountNumFieldNumber;
#endif  // !_MSC_VER

flower_info::flower_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_info::InitAsDefaultInstance() {
}

flower_info::flower_info(const flower_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_info::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  count_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_info::~flower_info() {
  SharedDtor();
}

void flower_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flower_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_info_descriptor_;
}

const flower_info& flower_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

flower_info* flower_info::default_instance_ = NULL;

flower_info* flower_info::New() const {
  return new flower_info;
}

void flower_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    count_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_num;
        break;
      }

      // optional int32 count_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_num_)));
          set_has_count_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional int32 count_num = 3;
  if (has_count_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 count_num = 3;
  if (has_count_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 count_num = 3;
    if (has_count_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_info::MergeFrom(const flower_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_count_num()) {
      set_count_num(from.count_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_info::CopyFrom(const flower_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_info::IsInitialized() const {

  return true;
}

void flower_info::Swap(flower_info* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(count_num_, other->count_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_info_descriptor_;
  metadata.reflection = flower_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_send_info::kToRoleIdFieldNumber;
const int flower_send_info::kToRoleNameFieldNumber;
const int flower_send_info::kSendFlowerTemplateIdFieldNumber;
const int flower_send_info::kSendFlowerNumFieldNumber;
const int flower_send_info::kDefaultRemarkIndexFieldNumber;
const int flower_send_info::kCustomRemarkFieldNumber;
#endif  // !_MSC_VER

flower_send_info::flower_send_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_send_info::InitAsDefaultInstance() {
}

flower_send_info::flower_send_info(const flower_send_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_send_info::SharedCtor() {
  _cached_size_ = 0;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_flower_template_id_ = 0;
  send_flower_num_ = 0;
  default_remark_index_ = 0;
  custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_send_info::~flower_send_info() {
  SharedDtor();
}

void flower_send_info::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_remark_;
  }
  if (this != default_instance_) {
  }
}

void flower_send_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_send_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_send_info_descriptor_;
}

const flower_send_info& flower_send_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

flower_send_info* flower_send_info::default_instance_ = NULL;

flower_send_info* flower_send_info::New() const {
  return new flower_send_info;
}

void flower_send_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    send_flower_template_id_ = 0;
    send_flower_num_ = 0;
    default_remark_index_ = 0;
    if (has_custom_remark()) {
      if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
        custom_remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_send_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 to_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_flower_template_id;
        break;
      }

      // optional int32 send_flower_template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_flower_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_flower_template_id_)));
          set_has_send_flower_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_flower_num;
        break;
      }

      // optional int32 send_flower_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_flower_num_)));
          set_has_send_flower_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_default_remark_index;
        break;
      }

      // optional int32 default_remark_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_remark_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_remark_index_)));
          set_has_default_remark_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_custom_remark;
        break;
      }

      // optional string custom_remark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_remark().data(), this->custom_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_send_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 to_role_id = 1;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to_role_id(), output);
  }

  // optional string to_role_name = 2;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to_role_name(), output);
  }

  // optional int32 send_flower_template_id = 3;
  if (has_send_flower_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->send_flower_template_id(), output);
  }

  // optional int32 send_flower_num = 4;
  if (has_send_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->send_flower_num(), output);
  }

  // optional int32 default_remark_index = 5;
  if (has_default_remark_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->default_remark_index(), output);
  }

  // optional string custom_remark = 6;
  if (has_custom_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_remark().data(), this->custom_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->custom_remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_send_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 to_role_id = 1;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to_role_id(), target);
  }

  // optional string to_role_name = 2;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_role_name(), target);
  }

  // optional int32 send_flower_template_id = 3;
  if (has_send_flower_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->send_flower_template_id(), target);
  }

  // optional int32 send_flower_num = 4;
  if (has_send_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->send_flower_num(), target);
  }

  // optional int32 default_remark_index = 5;
  if (has_default_remark_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->default_remark_index(), target);
  }

  // optional string custom_remark = 6;
  if (has_custom_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_remark().data(), this->custom_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->custom_remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_send_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 to_role_id = 1;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string to_role_name = 2;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional int32 send_flower_template_id = 3;
    if (has_send_flower_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_flower_template_id());
    }

    // optional int32 send_flower_num = 4;
    if (has_send_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_flower_num());
    }

    // optional int32 default_remark_index = 5;
    if (has_default_remark_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_remark_index());
    }

    // optional string custom_remark = 6;
    if (has_custom_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_send_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_send_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_send_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_send_info::MergeFrom(const flower_send_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_send_flower_template_id()) {
      set_send_flower_template_id(from.send_flower_template_id());
    }
    if (from.has_send_flower_num()) {
      set_send_flower_num(from.send_flower_num());
    }
    if (from.has_default_remark_index()) {
      set_default_remark_index(from.default_remark_index());
    }
    if (from.has_custom_remark()) {
      set_custom_remark(from.custom_remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_send_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_send_info::CopyFrom(const flower_send_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_send_info::IsInitialized() const {

  return true;
}

void flower_send_info::Swap(flower_send_info* other) {
  if (other != this) {
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(send_flower_template_id_, other->send_flower_template_id_);
    std::swap(send_flower_num_, other->send_flower_num_);
    std::swap(default_remark_index_, other->default_remark_index_);
    std::swap(custom_remark_, other->custom_remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_send_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_send_info_descriptor_;
  metadata.reflection = flower_send_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_battle_report_unit::kMyRoleIdFieldNumber;
const int offical_battle_report_unit::kMyRoleNameFieldNumber;
const int offical_battle_report_unit::kMyRoleSexFieldNumber;
const int offical_battle_report_unit::kMyRoleLvFieldNumber;
const int offical_battle_report_unit::kMyOldRankingIdFieldNumber;
const int offical_battle_report_unit::kMyNewRankingIdFieldNumber;
const int offical_battle_report_unit::kAttackerIdFieldNumber;
const int offical_battle_report_unit::kAttackerNameFieldNumber;
const int offical_battle_report_unit::kAttackerSexFieldNumber;
const int offical_battle_report_unit::kAttackerLvFieldNumber;
const int offical_battle_report_unit::kAttackerOldRankingIdFieldNumber;
const int offical_battle_report_unit::kAttackerNewRankingIdFieldNumber;
const int offical_battle_report_unit::kWinFieldNumber;
const int offical_battle_report_unit::kBattleTimeFieldNumber;
const int offical_battle_report_unit::kBattleIdFieldNumber;
const int offical_battle_report_unit::kGradeFieldNumber;
const int offical_battle_report_unit::kHerosFieldNumber;
#endif  // !_MSC_VER

offical_battle_report_unit::offical_battle_report_unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_battle_report_unit::InitAsDefaultInstance() {
}

offical_battle_report_unit::offical_battle_report_unit(const offical_battle_report_unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_battle_report_unit::SharedCtor() {
  _cached_size_ = 0;
  my_role_id_ = GOOGLE_ULONGLONG(0);
  my_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  my_role_sex_ = 0;
  my_role_lv_ = 0;
  my_old_ranking_id_ = 0;
  my_new_ranking_id_ = 0;
  attacker_id_ = GOOGLE_ULONGLONG(0);
  attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_sex_ = 0;
  attacker_lv_ = 0;
  attacker_old_ranking_id_ = 0;
  attacker_new_ranking_id_ = 0;
  win_ = false;
  battle_time_ = 0;
  battle_id_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_battle_report_unit::~offical_battle_report_unit() {
  SharedDtor();
}

void offical_battle_report_unit::SharedDtor() {
  if (my_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete my_role_name_;
  }
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (this != default_instance_) {
  }
}

void offical_battle_report_unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_battle_report_unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_battle_report_unit_descriptor_;
}

const offical_battle_report_unit& offical_battle_report_unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

offical_battle_report_unit* offical_battle_report_unit::default_instance_ = NULL;

offical_battle_report_unit* offical_battle_report_unit::New() const {
  return new offical_battle_report_unit;
}

void offical_battle_report_unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_my_role_name()) {
      if (my_role_name_ != &::google::protobuf::internal::kEmptyString) {
        my_role_name_->clear();
      }
    }
    my_role_sex_ = 0;
    my_role_lv_ = 0;
    my_old_ranking_id_ = 0;
    my_new_ranking_id_ = 0;
    attacker_id_ = GOOGLE_ULONGLONG(0);
    if (has_attacker_name()) {
      if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attacker_sex_ = 0;
    attacker_lv_ = 0;
    attacker_old_ranking_id_ = 0;
    attacker_new_ranking_id_ = 0;
    win_ = false;
    battle_time_ = 0;
    battle_id_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_battle_report_unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 my_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_role_id_)));
          set_has_my_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_my_role_name;
        break;
      }

      // optional string my_role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->my_role_name().data(), this->my_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_role_sex;
        break;
      }

      // optional int32 my_role_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_role_sex_)));
          set_has_my_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_role_lv;
        break;
      }

      // optional int32 my_role_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_role_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_role_lv_)));
          set_has_my_role_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_old_ranking_id;
        break;
      }

      // optional int32 my_old_ranking_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_old_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_old_ranking_id_)));
          set_has_my_old_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_my_new_ranking_id;
        break;
      }

      // optional int32 my_new_ranking_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_new_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_new_ranking_id_)));
          set_has_my_new_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attacker_id;
        break;
      }

      // optional uint64 attacker_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attacker_id_)));
          set_has_attacker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attacker_name;
        break;
      }

      // optional string attacker_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attacker_sex;
        break;
      }

      // optional int32 attacker_sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_sex_)));
          set_has_attacker_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attacker_lv;
        break;
      }

      // optional int32 attacker_lv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_lv_)));
          set_has_attacker_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_attacker_old_ranking_id;
        break;
      }

      // optional int32 attacker_old_ranking_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_old_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_old_ranking_id_)));
          set_has_attacker_old_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attacker_new_ranking_id;
        break;
      }

      // optional int32 attacker_new_ranking_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_new_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_new_ranking_id_)));
          set_has_attacker_new_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_win;
        break;
      }

      // optional bool win = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_battle_time;
        break;
      }

      // optional int32 battle_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_battle_id;
        break;
      }

      // optional uint64 battle_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_grade;
        break;
      }

      // optional int32 grade = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.hero_base_info heros = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_battle_report_unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->my_role_id(), output);
  }

  // optional string my_role_name = 2;
  if (has_my_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_role_name().data(), this->my_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->my_role_name(), output);
  }

  // optional int32 my_role_sex = 3;
  if (has_my_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->my_role_sex(), output);
  }

  // optional int32 my_role_lv = 4;
  if (has_my_role_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_role_lv(), output);
  }

  // optional int32 my_old_ranking_id = 5;
  if (has_my_old_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->my_old_ranking_id(), output);
  }

  // optional int32 my_new_ranking_id = 6;
  if (has_my_new_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->my_new_ranking_id(), output);
  }

  // optional uint64 attacker_id = 7;
  if (has_attacker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->attacker_id(), output);
  }

  // optional string attacker_name = 8;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->attacker_name(), output);
  }

  // optional int32 attacker_sex = 9;
  if (has_attacker_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attacker_sex(), output);
  }

  // optional int32 attacker_lv = 10;
  if (has_attacker_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attacker_lv(), output);
  }

  // optional int32 attacker_old_ranking_id = 12;
  if (has_attacker_old_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->attacker_old_ranking_id(), output);
  }

  // optional int32 attacker_new_ranking_id = 13;
  if (has_attacker_new_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attacker_new_ranking_id(), output);
  }

  // optional bool win = 14;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->win(), output);
  }

  // optional int32 battle_time = 15;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->battle_time(), output);
  }

  // optional uint64 battle_id = 16;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->battle_id(), output);
  }

  // optional int32 grade = 17;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->grade(), output);
  }

  // repeated .SProtoSpace.hero_base_info heros = 18;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_battle_report_unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 my_role_id = 1;
  if (has_my_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->my_role_id(), target);
  }

  // optional string my_role_name = 2;
  if (has_my_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_role_name().data(), this->my_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->my_role_name(), target);
  }

  // optional int32 my_role_sex = 3;
  if (has_my_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->my_role_sex(), target);
  }

  // optional int32 my_role_lv = 4;
  if (has_my_role_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_role_lv(), target);
  }

  // optional int32 my_old_ranking_id = 5;
  if (has_my_old_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->my_old_ranking_id(), target);
  }

  // optional int32 my_new_ranking_id = 6;
  if (has_my_new_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->my_new_ranking_id(), target);
  }

  // optional uint64 attacker_id = 7;
  if (has_attacker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->attacker_id(), target);
  }

  // optional string attacker_name = 8;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->attacker_name(), target);
  }

  // optional int32 attacker_sex = 9;
  if (has_attacker_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attacker_sex(), target);
  }

  // optional int32 attacker_lv = 10;
  if (has_attacker_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attacker_lv(), target);
  }

  // optional int32 attacker_old_ranking_id = 12;
  if (has_attacker_old_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->attacker_old_ranking_id(), target);
  }

  // optional int32 attacker_new_ranking_id = 13;
  if (has_attacker_new_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attacker_new_ranking_id(), target);
  }

  // optional bool win = 14;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->win(), target);
  }

  // optional int32 battle_time = 15;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->battle_time(), target);
  }

  // optional uint64 battle_id = 16;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->battle_id(), target);
  }

  // optional int32 grade = 17;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->grade(), target);
  }

  // repeated .SProtoSpace.hero_base_info heros = 18;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_battle_report_unit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 my_role_id = 1;
    if (has_my_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_role_id());
    }

    // optional string my_role_name = 2;
    if (has_my_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->my_role_name());
    }

    // optional int32 my_role_sex = 3;
    if (has_my_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_role_sex());
    }

    // optional int32 my_role_lv = 4;
    if (has_my_role_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_role_lv());
    }

    // optional int32 my_old_ranking_id = 5;
    if (has_my_old_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_old_ranking_id());
    }

    // optional int32 my_new_ranking_id = 6;
    if (has_my_new_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_new_ranking_id());
    }

    // optional uint64 attacker_id = 7;
    if (has_attacker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attacker_id());
    }

    // optional string attacker_name = 8;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 attacker_sex = 9;
    if (has_attacker_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_sex());
    }

    // optional int32 attacker_lv = 10;
    if (has_attacker_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_lv());
    }

    // optional int32 attacker_old_ranking_id = 12;
    if (has_attacker_old_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_old_ranking_id());
    }

    // optional int32 attacker_new_ranking_id = 13;
    if (has_attacker_new_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_new_ranking_id());
    }

    // optional bool win = 14;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional int32 battle_time = 15;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_time());
    }

    // optional uint64 battle_id = 16;
    if (has_battle_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_id());
    }

    // optional int32 grade = 17;
    if (has_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.hero_base_info heros = 18;
  total_size += 2 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_battle_report_unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_battle_report_unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_battle_report_unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_battle_report_unit::MergeFrom(const offical_battle_report_unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_role_id()) {
      set_my_role_id(from.my_role_id());
    }
    if (from.has_my_role_name()) {
      set_my_role_name(from.my_role_name());
    }
    if (from.has_my_role_sex()) {
      set_my_role_sex(from.my_role_sex());
    }
    if (from.has_my_role_lv()) {
      set_my_role_lv(from.my_role_lv());
    }
    if (from.has_my_old_ranking_id()) {
      set_my_old_ranking_id(from.my_old_ranking_id());
    }
    if (from.has_my_new_ranking_id()) {
      set_my_new_ranking_id(from.my_new_ranking_id());
    }
    if (from.has_attacker_id()) {
      set_attacker_id(from.attacker_id());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attacker_sex()) {
      set_attacker_sex(from.attacker_sex());
    }
    if (from.has_attacker_lv()) {
      set_attacker_lv(from.attacker_lv());
    }
    if (from.has_attacker_old_ranking_id()) {
      set_attacker_old_ranking_id(from.attacker_old_ranking_id());
    }
    if (from.has_attacker_new_ranking_id()) {
      set_attacker_new_ranking_id(from.attacker_new_ranking_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_battle_report_unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_battle_report_unit::CopyFrom(const offical_battle_report_unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_battle_report_unit::IsInitialized() const {

  return true;
}

void offical_battle_report_unit::Swap(offical_battle_report_unit* other) {
  if (other != this) {
    std::swap(my_role_id_, other->my_role_id_);
    std::swap(my_role_name_, other->my_role_name_);
    std::swap(my_role_sex_, other->my_role_sex_);
    std::swap(my_role_lv_, other->my_role_lv_);
    std::swap(my_old_ranking_id_, other->my_old_ranking_id_);
    std::swap(my_new_ranking_id_, other->my_new_ranking_id_);
    std::swap(attacker_id_, other->attacker_id_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_sex_, other->attacker_sex_);
    std::swap(attacker_lv_, other->attacker_lv_);
    std::swap(attacker_old_ranking_id_, other->attacker_old_ranking_id_);
    std::swap(attacker_new_ranking_id_, other->attacker_new_ranking_id_);
    std::swap(win_, other->win_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(grade_, other->grade_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_battle_report_unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_battle_report_unit_descriptor_;
  metadata.reflection = offical_battle_report_unit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talent_data::kIdFieldNumber;
const int talent_data::kStatusFieldNumber;
#endif  // !_MSC_VER

talent_data::talent_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talent_data::InitAsDefaultInstance() {
}

talent_data::talent_data(const talent_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talent_data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talent_data::~talent_data() {
  SharedDtor();
}

void talent_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talent_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talent_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talent_data_descriptor_;
}

const talent_data& talent_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

talent_data* talent_data::default_instance_ = NULL;

talent_data* talent_data::New() const {
  return new talent_data;
}

void talent_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talent_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .SProtoSpace.TALENT_STATUS status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::TALENT_STATUS_IsValid(value)) {
            set_status(static_cast< ::SProtoSpace::TALENT_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talent_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .SProtoSpace.TALENT_STATUS status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talent_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .SProtoSpace.TALENT_STATUS status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talent_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .SProtoSpace.TALENT_STATUS status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talent_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talent_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talent_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talent_data::MergeFrom(const talent_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talent_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talent_data::CopyFrom(const talent_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talent_data::IsInitialized() const {

  return true;
}

void talent_data::Swap(talent_data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talent_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talent_data_descriptor_;
  metadata.reflection = talent_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talent_battlt_data::kTypeFieldNumber;
const int talent_battlt_data::kValuesFieldNumber;
#endif  // !_MSC_VER

talent_battlt_data::talent_battlt_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talent_battlt_data::InitAsDefaultInstance() {
}

talent_battlt_data::talent_battlt_data(const talent_battlt_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talent_battlt_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  values_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talent_battlt_data::~talent_battlt_data() {
  SharedDtor();
}

void talent_battlt_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talent_battlt_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talent_battlt_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talent_battlt_data_descriptor_;
}

const talent_battlt_data& talent_battlt_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

talent_battlt_data* talent_battlt_data::default_instance_ = NULL;

talent_battlt_data* talent_battlt_data::New() const {
  return new talent_battlt_data;
}

void talent_battlt_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    values_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talent_battlt_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EAttribute type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EAttribute_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_values;
        break;
      }

      // optional float values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &values_)));
          set_has_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talent_battlt_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EAttribute type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float values = 2;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talent_battlt_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EAttribute type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float values = 2;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talent_battlt_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EAttribute type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float values = 2;
    if (has_values()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talent_battlt_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talent_battlt_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talent_battlt_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talent_battlt_data::MergeFrom(const talent_battlt_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_values()) {
      set_values(from.values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talent_battlt_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talent_battlt_data::CopyFrom(const talent_battlt_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talent_battlt_data::IsInitialized() const {

  return true;
}

void talent_battlt_data::Swap(talent_battlt_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(values_, other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talent_battlt_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talent_battlt_data_descriptor_;
  metadata.reflection = talent_battlt_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cli_unit_role_fashion::kConfigIdFieldNumber;
const int cli_unit_role_fashion::kUuidFieldNumber;
const int cli_unit_role_fashion::kTimeInvalidFieldNumber;
#endif  // !_MSC_VER

cli_unit_role_fashion::cli_unit_role_fashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cli_unit_role_fashion::InitAsDefaultInstance() {
}

cli_unit_role_fashion::cli_unit_role_fashion(const cli_unit_role_fashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cli_unit_role_fashion::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  time_invalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cli_unit_role_fashion::~cli_unit_role_fashion() {
  SharedDtor();
}

void cli_unit_role_fashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cli_unit_role_fashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cli_unit_role_fashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cli_unit_role_fashion_descriptor_;
}

const cli_unit_role_fashion& cli_unit_role_fashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

cli_unit_role_fashion* cli_unit_role_fashion::default_instance_ = NULL;

cli_unit_role_fashion* cli_unit_role_fashion::New() const {
  return new cli_unit_role_fashion;
}

void cli_unit_role_fashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    uuid_ = GOOGLE_ULONGLONG(0);
    time_invalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cli_unit_role_fashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_invalid;
        break;
      }

      // optional uint32 time_invalid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_invalid_)));
          set_has_time_invalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cli_unit_role_fashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 time_invalid = 3;
  if (has_time_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_invalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cli_unit_role_fashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 time_invalid = 3;
  if (has_time_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_invalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cli_unit_role_fashion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 time_invalid = 3;
    if (has_time_invalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_invalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cli_unit_role_fashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cli_unit_role_fashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cli_unit_role_fashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cli_unit_role_fashion::MergeFrom(const cli_unit_role_fashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_time_invalid()) {
      set_time_invalid(from.time_invalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cli_unit_role_fashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cli_unit_role_fashion::CopyFrom(const cli_unit_role_fashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cli_unit_role_fashion::IsInitialized() const {

  return true;
}

void cli_unit_role_fashion::Swap(cli_unit_role_fashion* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(time_invalid_, other->time_invalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cli_unit_role_fashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cli_unit_role_fashion_descriptor_;
  metadata.reflection = cli_unit_role_fashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fashions_pack::kFashionsFieldNumber;
const int fashions_pack::kRoleIdFieldNumber;
const int fashions_pack::kRoleNameFieldNumber;
#endif  // !_MSC_VER

fashions_pack::fashions_pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fashions_pack::InitAsDefaultInstance() {
}

fashions_pack::fashions_pack(const fashions_pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fashions_pack::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fashions_pack::~fashions_pack() {
  SharedDtor();
}

void fashions_pack::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void fashions_pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fashions_pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fashions_pack_descriptor_;
}

const fashions_pack& fashions_pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

fashions_pack* fashions_pack::default_instance_ = NULL;

fashions_pack* fashions_pack::New() const {
  return new fashions_pack;
}

void fashions_pack::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  fashions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fashions_pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fashions;
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fashions_pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fashions(i), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fashions_pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fashions(i), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fashions_pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  // repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
  total_size += 1 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fashions_pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fashions_pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fashions_pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fashions_pack::MergeFrom(const fashions_pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashions_.MergeFrom(from.fashions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fashions_pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fashions_pack::CopyFrom(const fashions_pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fashions_pack::IsInitialized() const {

  return true;
}

void fashions_pack::Swap(fashions_pack* other) {
  if (other != this) {
    fashions_.Swap(&other->fashions_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fashions_pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fashions_pack_descriptor_;
  metadata.reflection = fashions_pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_info::kTypeIdFieldNumber;
const int red_pt_info::kIsShowFieldNumber;
const int red_pt_info::kCountFieldNumber;
const int red_pt_info::kAddCountFieldNumber;
#endif  // !_MSC_VER

red_pt_info::red_pt_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_info::InitAsDefaultInstance() {
}

red_pt_info::red_pt_info(const red_pt_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_info::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 1;
  is_show_ = false;
  count_ = 0;
  add_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_info::~red_pt_info() {
  SharedDtor();
}

void red_pt_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void red_pt_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_info_descriptor_;
}

const red_pt_info& red_pt_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

red_pt_info* red_pt_info::default_instance_ = NULL;

red_pt_info* red_pt_info::New() const {
  return new red_pt_info;
}

void red_pt_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 1;
    is_show_ = false;
    count_ = 0;
    add_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.eRedPtType type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eRedPtType_IsValid(value)) {
            set_type_id(static_cast< ::SProtoSpace::eRedPtType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_show;
        break;
      }

      // optional bool is_show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_count;
        break;
      }

      // optional int32 add_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_count_)));
          set_has_add_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.eRedPtType type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_id(), output);
  }

  // optional bool is_show = 2;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_show(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 add_count = 4;
  if (has_add_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->add_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.eRedPtType type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_id(), target);
  }

  // optional bool is_show = 2;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_show(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 add_count = 4;
  if (has_add_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->add_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.eRedPtType type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_id());
    }

    // optional bool is_show = 2;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 add_count = 4;
    if (has_add_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_info::MergeFrom(const red_pt_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_add_count()) {
      set_add_count(from.add_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_info::CopyFrom(const red_pt_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_info::IsInitialized() const {

  return true;
}

void red_pt_info::Swap(red_pt_info* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(is_show_, other->is_show_);
    std::swap(count_, other->count_);
    std::swap(add_count_, other->add_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_info_descriptor_;
  metadata.reflection = red_pt_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_infos::kInfosFieldNumber;
#endif  // !_MSC_VER

red_pt_infos::red_pt_infos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_infos::InitAsDefaultInstance() {
}

red_pt_infos::red_pt_infos(const red_pt_infos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_infos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_infos::~red_pt_infos() {
  SharedDtor();
}

void red_pt_infos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void red_pt_infos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_infos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_infos_descriptor_;
}

const red_pt_infos& red_pt_infos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

red_pt_infos* red_pt_infos::default_instance_ = NULL;

red_pt_infos* red_pt_infos::New() const {
  return new red_pt_infos;
}

void red_pt_infos::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_infos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.red_pt_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_infos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.red_pt_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_infos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.red_pt_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_infos::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.red_pt_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_infos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_infos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_infos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_infos::MergeFrom(const red_pt_infos& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_infos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_infos::CopyFrom(const red_pt_infos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_infos::IsInitialized() const {

  return true;
}

void red_pt_infos::Swap(red_pt_infos* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_infos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_infos_descriptor_;
  metadata.reflection = red_pt_infos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int match_interval::kWeekDayFieldNumber;
const int match_interval::kStartTimeFieldNumber;
const int match_interval::kEndTimeFieldNumber;
#endif  // !_MSC_VER

match_interval::match_interval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void match_interval::InitAsDefaultInstance() {
}

match_interval::match_interval(const match_interval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void match_interval::SharedCtor() {
  _cached_size_ = 0;
  week_day_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

match_interval::~match_interval() {
  SharedDtor();
}

void match_interval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void match_interval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* match_interval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return match_interval_descriptor_;
}

const match_interval& match_interval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

match_interval* match_interval::default_instance_ = NULL;

match_interval* match_interval::New() const {
  return new match_interval;
}

void match_interval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_day_ = 0;
    start_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool match_interval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_)));
          set_has_week_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int32 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void match_interval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 week_day = 1;
  if (has_week_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week_day(), output);
  }

  // optional int32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_time(), output);
  }

  // optional int32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* match_interval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 week_day = 1;
  if (has_week_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week_day(), target);
  }

  // optional int32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_time(), target);
  }

  // optional int32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int match_interval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 week_day = 1;
    if (has_week_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day());
    }

    // optional int32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void match_interval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const match_interval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const match_interval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void match_interval::MergeFrom(const match_interval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week_day()) {
      set_week_day(from.week_day());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void match_interval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void match_interval::CopyFrom(const match_interval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_interval::IsInitialized() const {

  return true;
}

void match_interval::Swap(match_interval* other) {
  if (other != this) {
    std::swap(week_day_, other->week_day_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata match_interval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = match_interval_descriptor_;
  metadata.reflection = match_interval_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int grade_match_conf::kGradeFieldNumber;
const int grade_match_conf::kApplyFieldNumber;
const int grade_match_conf::kSettleFieldNumber;
#endif  // !_MSC_VER

grade_match_conf::grade_match_conf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void grade_match_conf::InitAsDefaultInstance() {
}

grade_match_conf::grade_match_conf(const grade_match_conf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void grade_match_conf::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grade_match_conf::~grade_match_conf() {
  SharedDtor();
}

void grade_match_conf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void grade_match_conf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grade_match_conf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grade_match_conf_descriptor_;
}

const grade_match_conf& grade_match_conf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

grade_match_conf* grade_match_conf::default_instance_ = NULL;

grade_match_conf* grade_match_conf::New() const {
  return new grade_match_conf;
}

void grade_match_conf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
  }
  apply_.Clear();
  settle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool grade_match_conf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply;
        break;
      }

      // repeated .SProtoSpace.match_interval apply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply;
        if (input->ExpectTag(26)) goto parse_settle;
        break;
      }

      // repeated .SProtoSpace.match_interval settle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_settle;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void grade_match_conf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // repeated .SProtoSpace.match_interval apply = 2;
  for (int i = 0; i < this->apply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply(i), output);
  }

  // repeated .SProtoSpace.match_interval settle = 3;
  for (int i = 0; i < this->settle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->settle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* grade_match_conf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // repeated .SProtoSpace.match_interval apply = 2;
  for (int i = 0; i < this->apply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply(i), target);
  }

  // repeated .SProtoSpace.match_interval settle = 3;
  for (int i = 0; i < this->settle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->settle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int grade_match_conf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.match_interval apply = 2;
  total_size += 1 * this->apply_size();
  for (int i = 0; i < this->apply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply(i));
  }

  // repeated .SProtoSpace.match_interval settle = 3;
  total_size += 1 * this->settle_size();
  for (int i = 0; i < this->settle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grade_match_conf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const grade_match_conf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const grade_match_conf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void grade_match_conf::MergeFrom(const grade_match_conf& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_.MergeFrom(from.apply_);
  settle_.MergeFrom(from.settle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void grade_match_conf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grade_match_conf::CopyFrom(const grade_match_conf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grade_match_conf::IsInitialized() const {

  return true;
}

void grade_match_conf::Swap(grade_match_conf* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    apply_.Swap(&other->apply_);
    settle_.Swap(&other->settle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata grade_match_conf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grade_match_conf_descriptor_;
  metadata.reflection = grade_match_conf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_plot_little_game::kCfgIdFieldNumber;
const int single_plot_little_game::kStateFieldNumber;
#endif  // !_MSC_VER

single_plot_little_game::single_plot_little_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void single_plot_little_game::InitAsDefaultInstance() {
}

single_plot_little_game::single_plot_little_game(const single_plot_little_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void single_plot_little_game::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_plot_little_game::~single_plot_little_game() {
  SharedDtor();
}

void single_plot_little_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void single_plot_little_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_plot_little_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_plot_little_game_descriptor_;
}

const single_plot_little_game& single_plot_little_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

single_plot_little_game* single_plot_little_game::default_instance_ = NULL;

single_plot_little_game* single_plot_little_game::New() const {
  return new single_plot_little_game;
}

void single_plot_little_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_plot_little_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void single_plot_little_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfg_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* single_plot_little_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfg_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int single_plot_little_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_plot_little_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_plot_little_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_plot_little_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_plot_little_game::MergeFrom(const single_plot_little_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_plot_little_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_plot_little_game::CopyFrom(const single_plot_little_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_plot_little_game::IsInitialized() const {

  return true;
}

void single_plot_little_game::Swap(single_plot_little_game* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_plot_little_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_plot_little_game_descriptor_;
  metadata.reflection = single_plot_little_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pack_plot_little_game::kPlotLittleGameSFieldNumber;
#endif  // !_MSC_VER

pack_plot_little_game::pack_plot_little_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pack_plot_little_game::InitAsDefaultInstance() {
}

pack_plot_little_game::pack_plot_little_game(const pack_plot_little_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pack_plot_little_game::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pack_plot_little_game::~pack_plot_little_game() {
  SharedDtor();
}

void pack_plot_little_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pack_plot_little_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pack_plot_little_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pack_plot_little_game_descriptor_;
}

const pack_plot_little_game& pack_plot_little_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pack_plot_little_game* pack_plot_little_game::default_instance_ = NULL;

pack_plot_little_game* pack_plot_little_game::New() const {
  return new pack_plot_little_game;
}

void pack_plot_little_game::Clear() {
  plot_little_game_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pack_plot_little_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plot_little_game_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plot_little_game_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plot_little_game_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pack_plot_little_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
  for (int i = 0; i < this->plot_little_game_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plot_little_game_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pack_plot_little_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
  for (int i = 0; i < this->plot_little_game_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plot_little_game_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pack_plot_little_game::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
  total_size += 1 * this->plot_little_game_s_size();
  for (int i = 0; i < this->plot_little_game_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plot_little_game_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pack_plot_little_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pack_plot_little_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pack_plot_little_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pack_plot_little_game::MergeFrom(const pack_plot_little_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  plot_little_game_s_.MergeFrom(from.plot_little_game_s_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pack_plot_little_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pack_plot_little_game::CopyFrom(const pack_plot_little_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pack_plot_little_game::IsInitialized() const {

  return true;
}

void pack_plot_little_game::Swap(pack_plot_little_game* other) {
  if (other != this) {
    plot_little_game_s_.Swap(&other->plot_little_game_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pack_plot_little_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pack_plot_little_game_descriptor_;
  metadata.reflection = pack_plot_little_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_attr_state::kTypeFieldNumber;
const int pet_attr_state::kValueFieldNumber;
#endif  // !_MSC_VER

pet_attr_state::pet_attr_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_attr_state::InitAsDefaultInstance() {
}

pet_attr_state::pet_attr_state(const pet_attr_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_attr_state::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_attr_state::~pet_attr_state() {
  SharedDtor();
}

void pet_attr_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_attr_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_attr_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_attr_state_descriptor_;
}

const pet_attr_state& pet_attr_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pet_attr_state* pet_attr_state::default_instance_ = NULL;

pet_attr_state* pet_attr_state::New() const {
  return new pet_attr_state;
}

void pet_attr_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_attr_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_attr_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_attr_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_attr_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_attr_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_attr_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_attr_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_attr_state::MergeFrom(const pet_attr_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_attr_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_attr_state::CopyFrom(const pet_attr_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_attr_state::IsInitialized() const {

  return true;
}

void pet_attr_state::Swap(pet_attr_state* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_attr_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_attr_state_descriptor_;
  metadata.reflection = pet_attr_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_out_event_item::kItemIdFieldNumber;
const int pet_out_event_item::kItemCountFieldNumber;
#endif  // !_MSC_VER

pet_out_event_item::pet_out_event_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_out_event_item::InitAsDefaultInstance() {
}

pet_out_event_item::pet_out_event_item(const pet_out_event_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_out_event_item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_out_event_item::~pet_out_event_item() {
  SharedDtor();
}

void pet_out_event_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_out_event_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_out_event_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_out_event_item_descriptor_;
}

const pet_out_event_item& pet_out_event_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pet_out_event_item* pet_out_event_item::default_instance_ = NULL;

pet_out_event_item* pet_out_event_item::New() const {
  return new pet_out_event_item;
}

void pet_out_event_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_out_event_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_out_event_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_out_event_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_out_event_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_out_event_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_out_event_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_out_event_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_out_event_item::MergeFrom(const pet_out_event_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_out_event_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_out_event_item::CopyFrom(const pet_out_event_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_out_event_item::IsInitialized() const {

  return true;
}

void pet_out_event_item::Swap(pet_out_event_item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_out_event_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_out_event_item_descriptor_;
  metadata.reflection = pet_out_event_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_out_event_data::kCfgIdFieldNumber;
const int pet_out_event_data::kDoneTimeFieldNumber;
const int pet_out_event_data::kItemSFieldNumber;
#endif  // !_MSC_VER

pet_out_event_data::pet_out_event_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_out_event_data::InitAsDefaultInstance() {
}

pet_out_event_data::pet_out_event_data(const pet_out_event_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_out_event_data::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = 0;
  done_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_out_event_data::~pet_out_event_data() {
  SharedDtor();
}

void pet_out_event_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_out_event_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_out_event_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_out_event_data_descriptor_;
}

const pet_out_event_data& pet_out_event_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pet_out_event_data* pet_out_event_data::default_instance_ = NULL;

pet_out_event_data* pet_out_event_data::New() const {
  return new pet_out_event_data;
}

void pet_out_event_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = 0;
    done_time_ = 0;
  }
  item_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_out_event_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_done_time;
        break;
      }

      // optional int32 done_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_time_)));
          set_has_done_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_s;
        break;
      }

      // repeated .SProtoSpace.pet_out_event_item item_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_out_event_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfg_id(), output);
  }

  // optional int32 done_time = 2;
  if (has_done_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->done_time(), output);
  }

  // repeated .SProtoSpace.pet_out_event_item item_s = 3;
  for (int i = 0; i < this->item_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_out_event_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfg_id(), target);
  }

  // optional int32 done_time = 2;
  if (has_done_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->done_time(), target);
  }

  // repeated .SProtoSpace.pet_out_event_item item_s = 3;
  for (int i = 0; i < this->item_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_out_event_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 done_time = 2;
    if (has_done_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->done_time());
    }

  }
  // repeated .SProtoSpace.pet_out_event_item item_s = 3;
  total_size += 1 * this->item_s_size();
  for (int i = 0; i < this->item_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_out_event_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_out_event_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_out_event_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_out_event_data::MergeFrom(const pet_out_event_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_s_.MergeFrom(from.item_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_done_time()) {
      set_done_time(from.done_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_out_event_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_out_event_data::CopyFrom(const pet_out_event_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_out_event_data::IsInitialized() const {

  return true;
}

void pet_out_event_data::Swap(pet_out_event_data* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(done_time_, other->done_time_);
    item_s_.Swap(&other->item_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_out_event_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_out_event_data_descriptor_;
  metadata.reflection = pet_out_event_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_single_data::kCfgIdFieldNumber;
const int pet_single_data::kStateSFieldNumber;
const int pet_single_data::kLvFieldNumber;
const int pet_single_data::kCurLvExpFieldNumber;
const int pet_single_data::kOutTimeFieldNumber;
const int pet_single_data::kBackTimeFieldNumber;
const int pet_single_data::kOutStoryIdFieldNumber;
const int pet_single_data::kOutEventSFieldNumber;
const int pet_single_data::kNameFieldNumber;
const int pet_single_data::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

pet_single_data::pet_single_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_single_data::InitAsDefaultInstance() {
}

pet_single_data::pet_single_data(const pet_single_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_single_data::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = 0;
  lv_ = 0;
  cur_lv_exp_ = 0;
  out_time_ = 0u;
  back_time_ = 0u;
  out_story_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_single_data::~pet_single_data() {
  SharedDtor();
}

void pet_single_data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pet_single_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_single_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_single_data_descriptor_;
}

const pet_single_data& pet_single_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pet_single_data* pet_single_data::default_instance_ = NULL;

pet_single_data* pet_single_data::New() const {
  return new pet_single_data;
}

void pet_single_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = 0;
    lv_ = 0;
    cur_lv_exp_ = 0;
    out_time_ = 0u;
    back_time_ = 0u;
    out_story_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    last_update_time_ = 0u;
  }
  state_s_.Clear();
  out_event_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_single_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_s;
        break;
      }

      // repeated .SProtoSpace.pet_attr_state state_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_s;
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_lv_exp;
        break;
      }

      // optional int32 cur_lv_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_lv_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_lv_exp_)));
          set_has_cur_lv_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_out_time;
        break;
      }

      // optional uint32 out_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_time_)));
          set_has_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_back_time;
        break;
      }

      // optional uint32 back_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_time_)));
          set_has_back_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_out_story_id;
        break;
      }

      // optional int32 out_story_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_story_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_story_id_)));
          set_has_out_story_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_out_event_s;
        break;
      }

      // repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out_event_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_event_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_out_event_s;
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_update_time;
        break;
      }

      // optional uint32 last_update_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_update_time_)));
          set_has_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_single_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfg_id(), output);
  }

  // repeated .SProtoSpace.pet_attr_state state_s = 2;
  for (int i = 0; i < this->state_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_s(i), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 cur_lv_exp = 4;
  if (has_cur_lv_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_lv_exp(), output);
  }

  // optional uint32 out_time = 5;
  if (has_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->out_time(), output);
  }

  // optional uint32 back_time = 6;
  if (has_back_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->back_time(), output);
  }

  // optional int32 out_story_id = 7;
  if (has_out_story_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->out_story_id(), output);
  }

  // repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
  for (int i = 0; i < this->out_event_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->out_event_s(i), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }

  // optional uint32 last_update_time = 10;
  if (has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_single_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfg_id(), target);
  }

  // repeated .SProtoSpace.pet_attr_state state_s = 2;
  for (int i = 0; i < this->state_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_s(i), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 cur_lv_exp = 4;
  if (has_cur_lv_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_lv_exp(), target);
  }

  // optional uint32 out_time = 5;
  if (has_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->out_time(), target);
  }

  // optional uint32 back_time = 6;
  if (has_back_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->back_time(), target);
  }

  // optional int32 out_story_id = 7;
  if (has_out_story_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->out_story_id(), target);
  }

  // repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
  for (int i = 0; i < this->out_event_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->out_event_s(i), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional uint32 last_update_time = 10;
  if (has_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_single_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 cur_lv_exp = 4;
    if (has_cur_lv_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_lv_exp());
    }

    // optional uint32 out_time = 5;
    if (has_out_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_time());
    }

    // optional uint32 back_time = 6;
    if (has_back_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_time());
    }

    // optional int32 out_story_id = 7;
    if (has_out_story_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_story_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 last_update_time = 10;
    if (has_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_update_time());
    }

  }
  // repeated .SProtoSpace.pet_attr_state state_s = 2;
  total_size += 1 * this->state_s_size();
  for (int i = 0; i < this->state_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_s(i));
  }

  // repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
  total_size += 1 * this->out_event_s_size();
  for (int i = 0; i < this->out_event_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_event_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_single_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_single_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_single_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_single_data::MergeFrom(const pet_single_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_s_.MergeFrom(from.state_s_);
  out_event_s_.MergeFrom(from.out_event_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_cur_lv_exp()) {
      set_cur_lv_exp(from.cur_lv_exp());
    }
    if (from.has_out_time()) {
      set_out_time(from.out_time());
    }
    if (from.has_back_time()) {
      set_back_time(from.back_time());
    }
    if (from.has_out_story_id()) {
      set_out_story_id(from.out_story_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_last_update_time()) {
      set_last_update_time(from.last_update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_single_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_single_data::CopyFrom(const pet_single_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_single_data::IsInitialized() const {

  return true;
}

void pet_single_data::Swap(pet_single_data* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    state_s_.Swap(&other->state_s_);
    std::swap(lv_, other->lv_);
    std::swap(cur_lv_exp_, other->cur_lv_exp_);
    std::swap(out_time_, other->out_time_);
    std::swap(back_time_, other->back_time_);
    std::swap(out_story_id_, other->out_story_id_);
    out_event_s_.Swap(&other->out_event_s_);
    std::swap(name_, other->name_);
    std::swap(last_update_time_, other->last_update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_single_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_single_data_descriptor_;
  metadata.reflection = pet_single_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_pack_data::kPetSFieldNumber;
#endif  // !_MSC_VER

pet_pack_data::pet_pack_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_pack_data::InitAsDefaultInstance() {
}

pet_pack_data::pet_pack_data(const pet_pack_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_pack_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_pack_data::~pet_pack_data() {
  SharedDtor();
}

void pet_pack_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_pack_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_pack_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_pack_data_descriptor_;
}

const pet_pack_data& pet_pack_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5froletype_2eproto();
  return *default_instance_;
}

pet_pack_data* pet_pack_data::default_instance_ = NULL;

pet_pack_data* pet_pack_data::New() const {
  return new pet_pack_data;
}

void pet_pack_data::Clear() {
  pet_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_pack_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.pet_single_data pet_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pet_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_pack_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.pet_single_data pet_s = 1;
  for (int i = 0; i < this->pet_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_pack_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.pet_single_data pet_s = 1;
  for (int i = 0; i < this->pet_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_pack_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.pet_single_data pet_s = 1;
  total_size += 1 * this->pet_s_size();
  for (int i = 0; i < this->pet_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_pack_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_pack_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_pack_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_pack_data::MergeFrom(const pet_pack_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_s_.MergeFrom(from.pet_s_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_pack_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_pack_data::CopyFrom(const pet_pack_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_pack_data::IsInitialized() const {

  return true;
}

void pet_pack_data::Swap(pet_pack_data* other) {
  if (other != this) {
    pet_s_.Swap(&other->pet_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_pack_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_pack_data_descriptor_;
  metadata.reflection = pet_pack_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
