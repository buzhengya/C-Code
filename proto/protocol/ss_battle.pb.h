// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_battle.proto

#ifndef PROTOBUF_ss_5fbattle_2eproto__INCLUDED
#define PROTOBUF_ss_5fbattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ss_protoid.pb.h"
#include "cm_battletype.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ss_5fbattle_2eproto();
void protobuf_AssignDesc_ss_5fbattle_2eproto();
void protobuf_ShutdownFile_ss_5fbattle_2eproto();

class gs_create_battle_req;
class gs_create_battle_ack;
class check_pve_result_req;
class check_pve_result_ack;
class gs_create_office_battle_req;
class gs_create_office_battle_ack;
class gs_office_battle_end_ntf;

// ===================================================================

class gs_create_battle_req : public ::google::protobuf::Message {
 public:
  gs_create_battle_req();
  virtual ~gs_create_battle_req();

  gs_create_battle_req(const gs_create_battle_req& from);

  inline gs_create_battle_req& operator=(const gs_create_battle_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_create_battle_req& default_instance();

  void Swap(gs_create_battle_req* other);

  // implements Message ----------------------------------------------

  gs_create_battle_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_create_battle_req& from);
  void MergeFrom(const gs_create_battle_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.create_battle_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::create_battle_data& data() const;
  inline ::SProtoSpace::create_battle_data* mutable_data();
  inline ::SProtoSpace::create_battle_data* release_data();
  inline void set_allocated_data(::SProtoSpace::create_battle_data* data);

  // optional uint64 source_game_id = 4;
  inline bool has_source_game_id() const;
  inline void clear_source_game_id();
  static const int kSourceGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 source_game_id() const;
  inline void set_source_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_create_battle_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_source_game_id();
  inline void clear_has_source_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::SProtoSpace::create_battle_data* data_;
  ::google::protobuf::uint64 source_game_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static gs_create_battle_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_create_battle_ack : public ::google::protobuf::Message {
 public:
  gs_create_battle_ack();
  virtual ~gs_create_battle_ack();

  gs_create_battle_ack(const gs_create_battle_ack& from);

  inline gs_create_battle_ack& operator=(const gs_create_battle_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_create_battle_ack& default_instance();

  void Swap(gs_create_battle_ack* other);

  // implements Message ----------------------------------------------

  gs_create_battle_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_create_battle_ack& from);
  void MergeFrom(const gs_create_battle_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 source_game_id = 4;
  inline bool has_source_game_id() const;
  inline void clear_source_game_id();
  static const int kSourceGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 source_game_id() const;
  inline void set_source_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_create_battle_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_source_game_id();
  inline void clear_has_source_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 source_game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static gs_create_battle_ack* default_instance_;
};
// -------------------------------------------------------------------

class check_pve_result_req : public ::google::protobuf::Message {
 public:
  check_pve_result_req();
  virtual ~check_pve_result_req();

  check_pve_result_req(const check_pve_result_req& from);

  inline check_pve_result_req& operator=(const check_pve_result_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const check_pve_result_req& default_instance();

  void Swap(check_pve_result_req* other);

  // implements Message ----------------------------------------------

  check_pve_result_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const check_pve_result_req& from);
  void MergeFrom(const check_pve_result_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.gs_create_battle_req req = 3;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 3;
  inline const ::SProtoSpace::gs_create_battle_req& req() const;
  inline ::SProtoSpace::gs_create_battle_req* mutable_req();
  inline ::SProtoSpace::gs_create_battle_req* release_req();
  inline void set_allocated_req(::SProtoSpace::gs_create_battle_req* req);

  // @@protoc_insertion_point(class_scope:SProtoSpace.check_pve_result_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::gs_create_battle_req* req_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static check_pve_result_req* default_instance_;
};
// -------------------------------------------------------------------

class check_pve_result_ack : public ::google::protobuf::Message {
 public:
  check_pve_result_ack();
  virtual ~check_pve_result_ack();

  check_pve_result_ack(const check_pve_result_ack& from);

  inline check_pve_result_ack& operator=(const check_pve_result_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const check_pve_result_ack& default_instance();

  void Swap(check_pve_result_ack* other);

  // implements Message ----------------------------------------------

  check_pve_result_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const check_pve_result_ack& from);
  void MergeFrom(const check_pve_result_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.gs_create_battle_req req = 4;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 4;
  inline const ::SProtoSpace::gs_create_battle_req& req() const;
  inline ::SProtoSpace::gs_create_battle_req* mutable_req();
  inline ::SProtoSpace::gs_create_battle_req* release_req();
  inline void set_allocated_req(::SProtoSpace::gs_create_battle_req* req);

  // @@protoc_insertion_point(class_scope:SProtoSpace.check_pve_result_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::gs_create_battle_req* req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static check_pve_result_ack* default_instance_;
};
// -------------------------------------------------------------------

class gs_create_office_battle_req : public ::google::protobuf::Message {
 public:
  gs_create_office_battle_req();
  virtual ~gs_create_office_battle_req();

  gs_create_office_battle_req(const gs_create_office_battle_req& from);

  inline gs_create_office_battle_req& operator=(const gs_create_office_battle_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_create_office_battle_req& default_instance();

  void Swap(gs_create_office_battle_req* other);

  // implements Message ----------------------------------------------

  gs_create_office_battle_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_create_office_battle_req& from);
  void MergeFrom(const gs_create_office_battle_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.create_battle_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::create_battle_data& data() const;
  inline ::SProtoSpace::create_battle_data* mutable_data();
  inline ::SProtoSpace::create_battle_data* release_data();
  inline void set_allocated_data(::SProtoSpace::create_battle_data* data);

  // optional uint64 source_game_id = 4;
  inline bool has_source_game_id() const;
  inline void clear_source_game_id();
  static const int kSourceGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 source_game_id() const;
  inline void set_source_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_create_office_battle_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_source_game_id();
  inline void clear_has_source_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::SProtoSpace::create_battle_data* data_;
  ::google::protobuf::uint64 source_game_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static gs_create_office_battle_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_create_office_battle_ack : public ::google::protobuf::Message {
 public:
  gs_create_office_battle_ack();
  virtual ~gs_create_office_battle_ack();

  gs_create_office_battle_ack(const gs_create_office_battle_ack& from);

  inline gs_create_office_battle_ack& operator=(const gs_create_office_battle_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_create_office_battle_ack& default_instance();

  void Swap(gs_create_office_battle_ack* other);

  // implements Message ----------------------------------------------

  gs_create_office_battle_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_create_office_battle_ack& from);
  void MergeFrom(const gs_create_office_battle_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 source_game_id = 4;
  inline bool has_source_game_id() const;
  inline void clear_source_game_id();
  static const int kSourceGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 source_game_id() const;
  inline void set_source_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_create_office_battle_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_source_game_id();
  inline void clear_has_source_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 source_game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static gs_create_office_battle_ack* default_instance_;
};
// -------------------------------------------------------------------

class gs_office_battle_end_ntf : public ::google::protobuf::Message {
 public:
  gs_office_battle_end_ntf();
  virtual ~gs_office_battle_end_ntf();

  gs_office_battle_end_ntf(const gs_office_battle_end_ntf& from);

  inline gs_office_battle_end_ntf& operator=(const gs_office_battle_end_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_office_battle_end_ntf& default_instance();

  void Swap(gs_office_battle_end_ntf* other);

  // implements Message ----------------------------------------------

  gs_office_battle_end_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_office_battle_end_ntf& from);
  void MergeFrom(const gs_office_battle_end_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_type() const;
  inline void set_battle_type(::google::protobuf::uint32 value);

  // optional uint64 winner_id = 4;
  inline bool has_winner_id() const;
  inline void clear_winner_id();
  static const int kWinnerIdFieldNumber = 4;
  inline ::google::protobuf::uint64 winner_id() const;
  inline void set_winner_id(::google::protobuf::uint64 value);

  // optional int32 winner_camp_id = 5;
  inline bool has_winner_camp_id() const;
  inline void clear_winner_camp_id();
  static const int kWinnerCampIdFieldNumber = 5;
  inline ::google::protobuf::int32 winner_camp_id() const;
  inline void set_winner_camp_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.round_data data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::SProtoSpace::round_data& data(int index) const;
  inline ::SProtoSpace::round_data* mutable_data(int index);
  inline ::SProtoSpace::round_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
      mutable_data();

  // optional uint64 target_game_id = 7;
  inline bool has_target_game_id() const;
  inline void clear_target_game_id();
  static const int kTargetGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 target_game_id() const;
  inline void set_target_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_office_battle_end_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_winner_id();
  inline void clear_has_winner_id();
  inline void set_has_winner_camp_id();
  inline void clear_has_winner_camp_id();
  inline void set_has_target_game_id();
  inline void clear_has_target_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 battle_type_;
  ::google::protobuf::uint64 winner_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data > data_;
  ::google::protobuf::uint64 target_game_id_;
  ::google::protobuf::int32 winner_camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fbattle_2eproto();
  friend void protobuf_AssignDesc_ss_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_ss_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static gs_office_battle_end_ntf* default_instance_;
};
// ===================================================================


// ===================================================================

// gs_create_battle_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
inline bool gs_create_battle_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_create_battle_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_create_battle_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_create_battle_req::clear_protoid() {
  protoid_ = 400;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_create_battle_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_create_battle_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool gs_create_battle_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_create_battle_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_create_battle_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_create_battle_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 gs_create_battle_req::battle_uuid() const {
  return battle_uuid_;
}
inline void gs_create_battle_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional .SProtoSpace.create_battle_data data = 3;
inline bool gs_create_battle_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_create_battle_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_create_battle_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_create_battle_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::create_battle_data& gs_create_battle_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::create_battle_data* gs_create_battle_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::create_battle_data;
  return data_;
}
inline ::SProtoSpace::create_battle_data* gs_create_battle_req::release_data() {
  clear_has_data();
  ::SProtoSpace::create_battle_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void gs_create_battle_req::set_allocated_data(::SProtoSpace::create_battle_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint64 source_game_id = 4;
inline bool gs_create_battle_req::has_source_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_create_battle_req::set_has_source_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_create_battle_req::clear_has_source_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_create_battle_req::clear_source_game_id() {
  source_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_game_id();
}
inline ::google::protobuf::uint64 gs_create_battle_req::source_game_id() const {
  return source_game_id_;
}
inline void gs_create_battle_req::set_source_game_id(::google::protobuf::uint64 value) {
  set_has_source_game_id();
  source_game_id_ = value;
}

// -------------------------------------------------------------------

// gs_create_battle_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
inline bool gs_create_battle_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_create_battle_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_create_battle_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_create_battle_ack::clear_protoid() {
  protoid_ = 401;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_create_battle_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_create_battle_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool gs_create_battle_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_create_battle_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_create_battle_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_create_battle_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 gs_create_battle_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void gs_create_battle_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 ret = 3;
inline bool gs_create_battle_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_create_battle_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_create_battle_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_create_battle_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 gs_create_battle_ack::ret() const {
  return ret_;
}
inline void gs_create_battle_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 source_game_id = 4;
inline bool gs_create_battle_ack::has_source_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_create_battle_ack::set_has_source_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_create_battle_ack::clear_has_source_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_create_battle_ack::clear_source_game_id() {
  source_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_game_id();
}
inline ::google::protobuf::uint64 gs_create_battle_ack::source_game_id() const {
  return source_game_id_;
}
inline void gs_create_battle_ack::set_source_game_id(::google::protobuf::uint64 value) {
  set_has_source_game_id();
  source_game_id_ = value;
}

// -------------------------------------------------------------------

// check_pve_result_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
inline bool check_pve_result_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void check_pve_result_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void check_pve_result_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void check_pve_result_req::clear_protoid() {
  protoid_ = 402;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID check_pve_result_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void check_pve_result_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool check_pve_result_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void check_pve_result_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void check_pve_result_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void check_pve_result_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 check_pve_result_req::role_id() const {
  return role_id_;
}
inline void check_pve_result_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.gs_create_battle_req req = 3;
inline bool check_pve_result_req::has_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void check_pve_result_req::set_has_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void check_pve_result_req::clear_has_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void check_pve_result_req::clear_req() {
  if (req_ != NULL) req_->::SProtoSpace::gs_create_battle_req::Clear();
  clear_has_req();
}
inline const ::SProtoSpace::gs_create_battle_req& check_pve_result_req::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::SProtoSpace::gs_create_battle_req* check_pve_result_req::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::SProtoSpace::gs_create_battle_req;
  return req_;
}
inline ::SProtoSpace::gs_create_battle_req* check_pve_result_req::release_req() {
  clear_has_req();
  ::SProtoSpace::gs_create_battle_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void check_pve_result_req::set_allocated_req(::SProtoSpace::gs_create_battle_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// -------------------------------------------------------------------

// check_pve_result_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
inline bool check_pve_result_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void check_pve_result_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void check_pve_result_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void check_pve_result_ack::clear_protoid() {
  protoid_ = 403;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID check_pve_result_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void check_pve_result_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool check_pve_result_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void check_pve_result_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void check_pve_result_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void check_pve_result_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 check_pve_result_ack::role_id() const {
  return role_id_;
}
inline void check_pve_result_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 ret = 3;
inline bool check_pve_result_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void check_pve_result_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void check_pve_result_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void check_pve_result_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 check_pve_result_ack::ret() const {
  return ret_;
}
inline void check_pve_result_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.gs_create_battle_req req = 4;
inline bool check_pve_result_ack::has_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void check_pve_result_ack::set_has_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void check_pve_result_ack::clear_has_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void check_pve_result_ack::clear_req() {
  if (req_ != NULL) req_->::SProtoSpace::gs_create_battle_req::Clear();
  clear_has_req();
}
inline const ::SProtoSpace::gs_create_battle_req& check_pve_result_ack::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::SProtoSpace::gs_create_battle_req* check_pve_result_ack::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::SProtoSpace::gs_create_battle_req;
  return req_;
}
inline ::SProtoSpace::gs_create_battle_req* check_pve_result_ack::release_req() {
  clear_has_req();
  ::SProtoSpace::gs_create_battle_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void check_pve_result_ack::set_allocated_req(::SProtoSpace::gs_create_battle_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// -------------------------------------------------------------------

// gs_create_office_battle_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
inline bool gs_create_office_battle_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_create_office_battle_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_create_office_battle_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_create_office_battle_req::clear_protoid() {
  protoid_ = 404;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_create_office_battle_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_create_office_battle_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool gs_create_office_battle_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_create_office_battle_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_create_office_battle_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_create_office_battle_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 gs_create_office_battle_req::battle_uuid() const {
  return battle_uuid_;
}
inline void gs_create_office_battle_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional .SProtoSpace.create_battle_data data = 3;
inline bool gs_create_office_battle_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_create_office_battle_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_create_office_battle_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_create_office_battle_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::create_battle_data& gs_create_office_battle_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::create_battle_data* gs_create_office_battle_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::create_battle_data;
  return data_;
}
inline ::SProtoSpace::create_battle_data* gs_create_office_battle_req::release_data() {
  clear_has_data();
  ::SProtoSpace::create_battle_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void gs_create_office_battle_req::set_allocated_data(::SProtoSpace::create_battle_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint64 source_game_id = 4;
inline bool gs_create_office_battle_req::has_source_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_create_office_battle_req::set_has_source_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_create_office_battle_req::clear_has_source_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_create_office_battle_req::clear_source_game_id() {
  source_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_game_id();
}
inline ::google::protobuf::uint64 gs_create_office_battle_req::source_game_id() const {
  return source_game_id_;
}
inline void gs_create_office_battle_req::set_source_game_id(::google::protobuf::uint64 value) {
  set_has_source_game_id();
  source_game_id_ = value;
}

// -------------------------------------------------------------------

// gs_create_office_battle_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
inline bool gs_create_office_battle_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_create_office_battle_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_create_office_battle_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_create_office_battle_ack::clear_protoid() {
  protoid_ = 405;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_create_office_battle_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_create_office_battle_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool gs_create_office_battle_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_create_office_battle_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_create_office_battle_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_create_office_battle_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 gs_create_office_battle_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void gs_create_office_battle_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 ret = 3;
inline bool gs_create_office_battle_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_create_office_battle_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_create_office_battle_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_create_office_battle_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 gs_create_office_battle_ack::ret() const {
  return ret_;
}
inline void gs_create_office_battle_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 source_game_id = 4;
inline bool gs_create_office_battle_ack::has_source_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_create_office_battle_ack::set_has_source_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_create_office_battle_ack::clear_has_source_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_create_office_battle_ack::clear_source_game_id() {
  source_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_game_id();
}
inline ::google::protobuf::uint64 gs_create_office_battle_ack::source_game_id() const {
  return source_game_id_;
}
inline void gs_create_office_battle_ack::set_source_game_id(::google::protobuf::uint64 value) {
  set_has_source_game_id();
  source_game_id_ = value;
}

// -------------------------------------------------------------------

// gs_office_battle_end_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
inline bool gs_office_battle_end_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_office_battle_end_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_office_battle_end_ntf::clear_protoid() {
  protoid_ = 406;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_office_battle_end_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_office_battle_end_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool gs_office_battle_end_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_office_battle_end_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_office_battle_end_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 gs_office_battle_end_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void gs_office_battle_end_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 battle_type = 3;
inline bool gs_office_battle_end_ntf::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_office_battle_end_ntf::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_office_battle_end_ntf::clear_battle_type() {
  battle_type_ = 0u;
  clear_has_battle_type();
}
inline ::google::protobuf::uint32 gs_office_battle_end_ntf::battle_type() const {
  return battle_type_;
}
inline void gs_office_battle_end_ntf::set_battle_type(::google::protobuf::uint32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional uint64 winner_id = 4;
inline bool gs_office_battle_end_ntf::has_winner_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_winner_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_office_battle_end_ntf::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_office_battle_end_ntf::clear_winner_id() {
  winner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_winner_id();
}
inline ::google::protobuf::uint64 gs_office_battle_end_ntf::winner_id() const {
  return winner_id_;
}
inline void gs_office_battle_end_ntf::set_winner_id(::google::protobuf::uint64 value) {
  set_has_winner_id();
  winner_id_ = value;
}

// optional int32 winner_camp_id = 5;
inline bool gs_office_battle_end_ntf::has_winner_camp_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_winner_camp_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_office_battle_end_ntf::clear_has_winner_camp_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_office_battle_end_ntf::clear_winner_camp_id() {
  winner_camp_id_ = 0;
  clear_has_winner_camp_id();
}
inline ::google::protobuf::int32 gs_office_battle_end_ntf::winner_camp_id() const {
  return winner_camp_id_;
}
inline void gs_office_battle_end_ntf::set_winner_camp_id(::google::protobuf::int32 value) {
  set_has_winner_camp_id();
  winner_camp_id_ = value;
}

// repeated .SProtoSpace.round_data data = 6;
inline int gs_office_battle_end_ntf::data_size() const {
  return data_.size();
}
inline void gs_office_battle_end_ntf::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::round_data& gs_office_battle_end_ntf::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::round_data* gs_office_battle_end_ntf::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::round_data* gs_office_battle_end_ntf::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
gs_office_battle_end_ntf::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
gs_office_battle_end_ntf::mutable_data() {
  return &data_;
}

// optional uint64 target_game_id = 7;
inline bool gs_office_battle_end_ntf::has_target_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_office_battle_end_ntf::set_has_target_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_office_battle_end_ntf::clear_has_target_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_office_battle_end_ntf::clear_target_game_id() {
  target_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_game_id();
}
inline ::google::protobuf::uint64 gs_office_battle_end_ntf::target_game_id() const {
  return target_game_id_;
}
inline void gs_office_battle_end_ntf::set_target_game_id(::google::protobuf::uint64 value) {
  set_has_target_game_id();
  target_game_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ss_5fbattle_2eproto__INCLUDED
