// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_cross.proto

#ifndef PROTOBUF_ss_5fcross_2eproto__INCLUDED
#define PROTOBUF_ss_5fcross_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ss_protoid.pb.h"
#include "cm_battletype.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ss_5fcross_2eproto();
void protobuf_AssignDesc_ss_5fcross_2eproto();
void protobuf_ShutdownFile_ss_5fcross_2eproto();

class cross_sign_in_req;
class cross_sign_in_ack;
class cross_ft_sync;
class cross_ft_req;
class cross_ft_ack;

// ===================================================================

class cross_sign_in_req : public ::google::protobuf::Message {
 public:
  cross_sign_in_req();
  virtual ~cross_sign_in_req();

  cross_sign_in_req(const cross_sign_in_req& from);

  inline cross_sign_in_req& operator=(const cross_sign_in_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_sign_in_req& default_instance();

  void Swap(cross_sign_in_req* other);

  // implements Message ----------------------------------------------

  cross_sign_in_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_sign_in_req& from);
  void MergeFrom(const cross_sign_in_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EBattleType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::EBattleType type() const;
  inline void set_type(::SProtoSpace::EBattleType value);

  // optional .SProtoSpace.battle_player_info data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::battle_player_info& data() const;
  inline ::SProtoSpace::battle_player_info* mutable_data();
  inline ::SProtoSpace::battle_player_info* release_data();
  inline void set_allocated_data(::SProtoSpace::battle_player_info* data);

  // optional uint64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cross_sign_in_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::SProtoSpace::battle_player_info* data_;
  ::google::protobuf::uint64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fcross_2eproto();
  friend void protobuf_AssignDesc_ss_5fcross_2eproto();
  friend void protobuf_ShutdownFile_ss_5fcross_2eproto();

  void InitAsDefaultInstance();
  static cross_sign_in_req* default_instance_;
};
// -------------------------------------------------------------------

class cross_sign_in_ack : public ::google::protobuf::Message {
 public:
  cross_sign_in_ack();
  virtual ~cross_sign_in_ack();

  cross_sign_in_ack(const cross_sign_in_ack& from);

  inline cross_sign_in_ack& operator=(const cross_sign_in_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_sign_in_ack& default_instance();

  void Swap(cross_sign_in_ack* other);

  // implements Message ----------------------------------------------

  cross_sign_in_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_sign_in_ack& from);
  void MergeFrom(const cross_sign_in_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EBattleType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::EBattleType type() const;
  inline void set_type(::SProtoSpace::EBattleType value);

  // optional int32 rslt = 3;
  inline bool has_rslt() const;
  inline void clear_rslt();
  static const int kRsltFieldNumber = 3;
  inline ::google::protobuf::int32 rslt() const;
  inline void set_rslt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cross_sign_in_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rslt();
  inline void clear_has_rslt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::int32 rslt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fcross_2eproto();
  friend void protobuf_AssignDesc_ss_5fcross_2eproto();
  friend void protobuf_ShutdownFile_ss_5fcross_2eproto();

  void InitAsDefaultInstance();
  static cross_sign_in_ack* default_instance_;
};
// -------------------------------------------------------------------

class cross_ft_sync : public ::google::protobuf::Message {
 public:
  cross_ft_sync();
  virtual ~cross_ft_sync();

  cross_ft_sync(const cross_ft_sync& from);

  inline cross_ft_sync& operator=(const cross_ft_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_ft_sync& default_instance();

  void Swap(cross_ft_sync* other);

  // implements Message ----------------------------------------------

  cross_ft_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_ft_sync& from);
  void MergeFrom(const cross_ft_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 ft_id = 2;
  inline bool has_ft_id() const;
  inline void clear_ft_id();
  static const int kFtIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ft_id() const;
  inline void set_ft_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.create_battle_data data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::create_battle_data& data(int index) const;
  inline ::SProtoSpace::create_battle_data* mutable_data(int index);
  inline ::SProtoSpace::create_battle_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::create_battle_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::create_battle_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.cross_ft_sync)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ft_id();
  inline void clear_has_ft_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ft_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::create_battle_data > data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fcross_2eproto();
  friend void protobuf_AssignDesc_ss_5fcross_2eproto();
  friend void protobuf_ShutdownFile_ss_5fcross_2eproto();

  void InitAsDefaultInstance();
  static cross_ft_sync* default_instance_;
};
// -------------------------------------------------------------------

class cross_ft_req : public ::google::protobuf::Message {
 public:
  cross_ft_req();
  virtual ~cross_ft_req();

  cross_ft_req(const cross_ft_req& from);

  inline cross_ft_req& operator=(const cross_ft_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_ft_req& default_instance();

  void Swap(cross_ft_req* other);

  // implements Message ----------------------------------------------

  cross_ft_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_ft_req& from);
  void MergeFrom(const cross_ft_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.create_battle_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::create_battle_data& data() const;
  inline ::SProtoSpace::create_battle_data* mutable_data();
  inline ::SProtoSpace::create_battle_data* release_data();
  inline void set_allocated_data(::SProtoSpace::create_battle_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cross_ft_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::create_battle_data* data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fcross_2eproto();
  friend void protobuf_AssignDesc_ss_5fcross_2eproto();
  friend void protobuf_ShutdownFile_ss_5fcross_2eproto();

  void InitAsDefaultInstance();
  static cross_ft_req* default_instance_;
};
// -------------------------------------------------------------------

class cross_ft_ack : public ::google::protobuf::Message {
 public:
  cross_ft_ack();
  virtual ~cross_ft_ack();

  cross_ft_ack(const cross_ft_ack& from);

  inline cross_ft_ack& operator=(const cross_ft_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cross_ft_ack& default_instance();

  void Swap(cross_ft_ack* other);

  // implements Message ----------------------------------------------

  cross_ft_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cross_ft_ack& from);
  void MergeFrom(const cross_ft_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.create_battle_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::create_battle_data& data() const;
  inline ::SProtoSpace::create_battle_data* mutable_data();
  inline ::SProtoSpace::create_battle_data* release_data();
  inline void set_allocated_data(::SProtoSpace::create_battle_data* data);

  // optional int32 rslt = 3;
  inline bool has_rslt() const;
  inline void clear_rslt();
  static const int kRsltFieldNumber = 3;
  inline ::google::protobuf::int32 rslt() const;
  inline void set_rslt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cross_ft_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_rslt();
  inline void clear_has_rslt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::create_battle_data* data_;
  int protoid_;
  ::google::protobuf::int32 rslt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fcross_2eproto();
  friend void protobuf_AssignDesc_ss_5fcross_2eproto();
  friend void protobuf_ShutdownFile_ss_5fcross_2eproto();

  void InitAsDefaultInstance();
  static cross_ft_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// cross_sign_in_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
inline bool cross_sign_in_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_sign_in_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_sign_in_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_sign_in_req::clear_protoid() {
  protoid_ = 500;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID cross_sign_in_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void cross_sign_in_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.EBattleType type = 2;
inline bool cross_sign_in_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_sign_in_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_sign_in_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_sign_in_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::EBattleType cross_sign_in_req::type() const {
  return static_cast< ::SProtoSpace::EBattleType >(type_);
}
inline void cross_sign_in_req::set_type(::SProtoSpace::EBattleType value) {
  assert(::SProtoSpace::EBattleType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.battle_player_info data = 3;
inline bool cross_sign_in_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cross_sign_in_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cross_sign_in_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cross_sign_in_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::battle_player_info::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::battle_player_info& cross_sign_in_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::battle_player_info* cross_sign_in_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::battle_player_info;
  return data_;
}
inline ::SProtoSpace::battle_player_info* cross_sign_in_req::release_data() {
  clear_has_data();
  ::SProtoSpace::battle_player_info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void cross_sign_in_req::set_allocated_data(::SProtoSpace::battle_player_info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint64 score = 4;
inline bool cross_sign_in_req::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cross_sign_in_req::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cross_sign_in_req::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cross_sign_in_req::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 cross_sign_in_req::score() const {
  return score_;
}
inline void cross_sign_in_req::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// cross_sign_in_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
inline bool cross_sign_in_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_sign_in_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_sign_in_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_sign_in_ack::clear_protoid() {
  protoid_ = 501;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID cross_sign_in_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void cross_sign_in_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.EBattleType type = 2;
inline bool cross_sign_in_ack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_sign_in_ack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_sign_in_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_sign_in_ack::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::EBattleType cross_sign_in_ack::type() const {
  return static_cast< ::SProtoSpace::EBattleType >(type_);
}
inline void cross_sign_in_ack::set_type(::SProtoSpace::EBattleType value) {
  assert(::SProtoSpace::EBattleType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 rslt = 3;
inline bool cross_sign_in_ack::has_rslt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cross_sign_in_ack::set_has_rslt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cross_sign_in_ack::clear_has_rslt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cross_sign_in_ack::clear_rslt() {
  rslt_ = 0;
  clear_has_rslt();
}
inline ::google::protobuf::int32 cross_sign_in_ack::rslt() const {
  return rslt_;
}
inline void cross_sign_in_ack::set_rslt(::google::protobuf::int32 value) {
  set_has_rslt();
  rslt_ = value;
}

// -------------------------------------------------------------------

// cross_ft_sync

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
inline bool cross_ft_sync::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_ft_sync::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_ft_sync::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_ft_sync::clear_protoid() {
  protoid_ = 502;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID cross_ft_sync::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void cross_ft_sync::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 ft_id = 2;
inline bool cross_ft_sync::has_ft_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_ft_sync::set_has_ft_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_ft_sync::clear_has_ft_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_ft_sync::clear_ft_id() {
  ft_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ft_id();
}
inline ::google::protobuf::uint64 cross_ft_sync::ft_id() const {
  return ft_id_;
}
inline void cross_ft_sync::set_ft_id(::google::protobuf::uint64 value) {
  set_has_ft_id();
  ft_id_ = value;
}

// repeated .SProtoSpace.create_battle_data data = 3;
inline int cross_ft_sync::data_size() const {
  return data_.size();
}
inline void cross_ft_sync::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::create_battle_data& cross_ft_sync::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::create_battle_data* cross_ft_sync::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::create_battle_data* cross_ft_sync::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::create_battle_data >&
cross_ft_sync::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::create_battle_data >*
cross_ft_sync::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// cross_ft_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
inline bool cross_ft_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_ft_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_ft_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_ft_req::clear_protoid() {
  protoid_ = 503;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID cross_ft_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void cross_ft_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.create_battle_data data = 2;
inline bool cross_ft_req::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_ft_req::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_ft_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_ft_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::create_battle_data& cross_ft_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::create_battle_data* cross_ft_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::create_battle_data;
  return data_;
}
inline ::SProtoSpace::create_battle_data* cross_ft_req::release_data() {
  clear_has_data();
  ::SProtoSpace::create_battle_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void cross_ft_req::set_allocated_data(::SProtoSpace::create_battle_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// cross_ft_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
inline bool cross_ft_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cross_ft_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cross_ft_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cross_ft_ack::clear_protoid() {
  protoid_ = 504;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID cross_ft_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void cross_ft_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.create_battle_data data = 2;
inline bool cross_ft_ack::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cross_ft_ack::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cross_ft_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cross_ft_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::create_battle_data& cross_ft_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::create_battle_data* cross_ft_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::create_battle_data;
  return data_;
}
inline ::SProtoSpace::create_battle_data* cross_ft_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::create_battle_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void cross_ft_ack::set_allocated_data(::SProtoSpace::create_battle_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional int32 rslt = 3;
inline bool cross_ft_ack::has_rslt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cross_ft_ack::set_has_rslt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cross_ft_ack::clear_has_rslt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cross_ft_ack::clear_rslt() {
  rslt_ = 0;
  clear_has_rslt();
}
inline ::google::protobuf::int32 cross_ft_ack::rslt() const {
  return rslt_;
}
inline void cross_ft_ack::set_rslt(::google::protobuf::int32 value) {
  set_has_rslt();
  rslt_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ss_5fcross_2eproto__INCLUDED
