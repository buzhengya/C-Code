// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* DataSaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_offical_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_offical_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_intimacy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_intimacy_reflection_ = NULL;
const ::google::protobuf::Descriptor* couple_love_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  couple_love_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_base_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_base_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_chest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_chest_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_free_times_draw_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_free_times_draw_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_limit_draw_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_limit_draw_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_unit_draw_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_unit_draw_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_unit_draw_card_special_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_unit_draw_card_special_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_unit_mail_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_unit_mail_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_unit_mail_send_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_unit_mail_send_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* skill_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skill_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skin_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skin_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_player_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_player_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_player_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_player_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_soul_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_soul_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* bag_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bag_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_hero_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_hero_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_formation_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_formation_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_role_pet_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_role_pet_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_role_pet_all_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_role_pet_all_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_hero_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_hero_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_quest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_quest_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_activity_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_activity_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_achieve_pt_award_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_achieve_pt_award_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_quest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_quest_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_drop_spid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_drop_spid_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_soul_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_soul_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_soul_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_soul_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_soul_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_soul_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_discover_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_discover_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_chapter_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_chapter_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* res_instance_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_instance_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_res_instance_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_res_instance_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_section_star_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_section_star_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_tower_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_tower_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_event_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_event_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_event_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_event_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* special_event_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  special_event_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_adv_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_adv_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* guide_step_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guide_step_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_guide_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_guide_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_plot_little_game_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_plot_little_game_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_level_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_level_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_royal_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_royal_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_opt_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_opt_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_royal_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_royal_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_task_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_task_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_operation_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_operation_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_friend_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_friend_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_black_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_black_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* give_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  give_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_friend_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_friend_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shop_refresh_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shop_refresh_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shop_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shop_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* buy_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buy_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_shop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_shop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_shop_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_shop_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* harem_compete_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  harem_compete_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_harem_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_harem_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* growing_flower_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  growing_flower_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_flower_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_flower_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_flower_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_flower_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_plot_screen_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_plot_screen_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_apply_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_apply_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_officer_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_officer_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_battle_report_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_battle_report_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_battle_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_battle_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_offical_apply_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_offical_apply_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_battle_result_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_battle_result_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_offical_apply_battle_result_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_offical_apply_battle_result_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_offical_result_rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_offical_result_rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_my_offical_result_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_my_offical_result_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_rank_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_rank_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_offical_rank_db_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_offical_rank_db_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_unit_fashion_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_unit_fashion_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_fashion_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_fashion_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_all_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_all_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* redis_role_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  redis_role_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* redis_role_show_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  redis_role_show_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* redis_role_battle_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  redis_role_battle_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* redis_comment_all_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  redis_comment_all_reflection_ = NULL;
const ::google::protobuf::Descriptor* redis_role_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  redis_role_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_user_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_user_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_redis_role_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_redis_role_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_redis_role_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_redis_role_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_redis_role_data_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_redis_role_data_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_apply_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_apply_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_apply_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_apply_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_save_apply_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_save_apply_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_apply_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_apply_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_process_apply_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_process_apply_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_process_apply_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_process_apply_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_search_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_search_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_search_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_search_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_save_friend_opt_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_save_friend_opt_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_record_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_record_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_opt_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_opt_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_opt_record_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_opt_record_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_opt_record_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_opt_record_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_recommend_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_recommend_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_recommend_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_recommend_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_get_role_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_get_role_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_role_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_role_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* save_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  save_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_like_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_like_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_like_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_like_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_delete_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_delete_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_delete_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_delete_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_change_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_change_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_change_name_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_change_name_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_like_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_like_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_like_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_like_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_get_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_get_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_write_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_write_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_write_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_write_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_like_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_like_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_like_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_like_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_comment_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_comment_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_comment_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_comment_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_remove_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_remove_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_remove_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_remove_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_remove_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_remove_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_show_remove_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_show_remove_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_battle_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_battle_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_role_battle_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_role_battle_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_account_role_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_account_role_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_account_role_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_account_role_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_create_role_of_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_create_role_of_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_create_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_create_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_role_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_role_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_role_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_role_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_harem_compete_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_harem_compete_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_check_harem_compete_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_check_harem_compete_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_harem_compete_clear_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_harem_compete_clear_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_slap_emoji_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_slap_emoji_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_harem_event_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_harem_event_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_harem_event_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_harem_event_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_share_officer_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_share_officer_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_share_officer_upgrade_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_share_officer_upgrade_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_share_officer_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_share_officer_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_share_officer_upgrade_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_share_officer_upgrade_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_role_popularity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_role_popularity_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kick_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kick_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_kick_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_kick_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_load_offical_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_load_offical_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_load_offical_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_load_offical_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_save_offical_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_save_offical_data_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESQLMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGetRoleShowDataResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOnlineType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESaveDataMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fdb_2eproto() {
  protobuf_AddDesc_ss_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_db.proto");
  GOOGLE_CHECK(file != NULL);
  DataSaveInfo_descriptor_ = file->message_type(0);
  static const int DataSaveInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSaveInfo, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSaveInfo, sql_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSaveInfo, key_id_),
  };
  DataSaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSaveInfo_descriptor_,
      DataSaveInfo::default_instance_,
      DataSaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSaveInfo));
  role_show_info_descriptor_ = file->message_type(1);
  static const int role_show_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, liked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, show_hero_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, star_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, labels_),
  };
  role_show_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_info_descriptor_,
      role_show_info::default_instance_,
      role_show_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_info));
  db_offical_data_descriptor_ = file->message_type(2);
  static const int db_offical_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, last_grade_),
  };
  db_offical_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_offical_data_descriptor_,
      db_offical_data::default_instance_,
      db_offical_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_offical_data));
  friend_intimacy_descriptor_ = file->message_type(3);
  static const int friend_intimacy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_intimacy, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_intimacy, intimacy_value_),
  };
  friend_intimacy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_intimacy_descriptor_,
      friend_intimacy::default_instance_,
      friend_intimacy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_intimacy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_intimacy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_intimacy));
  couple_love_descriptor_ = file->message_type(4);
  static const int couple_love_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(couple_love, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(couple_love, love_value_),
  };
  couple_love_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      couple_love_descriptor_,
      couple_love::default_instance_,
      couple_love_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(couple_love, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(couple_love, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(couple_love));
  role_base_data_descriptor_ = file->message_type(5);
  static const int role_base_data_offsets_[59] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, db_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, buy_power_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, jade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, last_disc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, task_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, g_system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, tender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, treason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, wise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, adorkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, scheming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_salary_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_challenge_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_share_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, bag_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, mail_global_last_checktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, mail_send_private_limit_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, first_offical_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, cur_mainline_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, offical_apply_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, acc_login_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, has_first_common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, has_first_special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, has_first_ten_in_one_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, skill_point_revocer_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, wine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, gm_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, wine_cup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, daily_fortune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, adv_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, talent_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, lock_module_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, pass_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, guide_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, chat_room_award_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, intimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, love_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, change_name_time_),
  };
  role_base_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_base_data_descriptor_,
      role_base_data::default_instance_,
      role_base_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_base_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_base_data));
  unit_chest_data_descriptor_ = file->message_type(6);
  static const int unit_chest_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chest_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chest_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chest_data, chest_),
  };
  unit_chest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_chest_data_descriptor_,
      unit_chest_data::default_instance_,
      unit_chest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_chest_data));
  unit_free_times_draw_card_descriptor_ = file->message_type(7);
  static const int unit_free_times_draw_card_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, used_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, now_has_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, time_last_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, free_left_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, limit_left_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, total_time_),
  };
  unit_free_times_draw_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_free_times_draw_card_descriptor_,
      unit_free_times_draw_card::default_instance_,
      unit_free_times_draw_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_free_times_draw_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_free_times_draw_card));
  unit_limit_draw_card_descriptor_ = file->message_type(8);
  static const int unit_limit_draw_card_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, used_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, time_last_draw_),
  };
  unit_limit_draw_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_limit_draw_card_descriptor_,
      unit_limit_draw_card::default_instance_,
      unit_limit_draw_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_limit_draw_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_limit_draw_card));
  db_unit_draw_card_descriptor_ = file->message_type(9);
  static const int db_unit_draw_card_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, now_remain_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, tody_remain_free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, tody_remain_limit_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, total_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, last_opt_time_),
  };
  db_unit_draw_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_unit_draw_card_descriptor_,
      db_unit_draw_card::default_instance_,
      db_unit_draw_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_unit_draw_card));
  db_unit_draw_card_special_descriptor_ = file->message_type(10);
  static const int db_unit_draw_card_special_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, draw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, rem_special_time_s_),
  };
  db_unit_draw_card_special_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_unit_draw_card_special_descriptor_,
      db_unit_draw_card_special::default_instance_,
      db_unit_draw_card_special_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_draw_card_special, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_unit_draw_card_special));
  db_unit_mail_data_descriptor_ = file->message_type(11);
  static const int db_unit_mail_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_data, time_id_),
  };
  db_unit_mail_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_unit_mail_data_descriptor_,
      db_unit_mail_data::default_instance_,
      db_unit_mail_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_unit_mail_data));
  db_unit_mail_send_data_descriptor_ = file->message_type(12);
  static const int db_unit_mail_send_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, free_left_day_),
  };
  db_unit_mail_send_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_unit_mail_send_data_descriptor_,
      db_unit_mail_send_data::default_instance_,
      db_unit_mail_send_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_mail_send_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_unit_mail_send_data));
  role_item_data_descriptor_ = file->message_type(13);
  static const int role_item_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, item_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, chests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, draw_card_free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, draw_card_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, fashions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, draw_card_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, draw_card_specail_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, item_role_fashion_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, mail_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, mail_send_),
  };
  role_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_item_data_descriptor_,
      role_item_data::default_instance_,
      role_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_item_data));
  skill_data_descriptor_ = file->message_type(14);
  static const int skill_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, unlock_),
  };
  skill_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skill_data_descriptor_,
      skill_data::default_instance_,
      skill_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skill_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skill_data));
  db_skin_info_descriptor_ = file->message_type(15);
  static const int db_skin_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skin_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skin_info, end_time_),
  };
  db_skin_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skin_info_descriptor_,
      db_skin_info::default_instance_,
      db_skin_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skin_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skin_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skin_info));
  db_equip_data_descriptor_ = file->message_type(16);
  static const int db_equip_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_data, template_id_),
  };
  db_equip_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_data_descriptor_,
      db_equip_data::default_instance_,
      db_equip_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_data));
  unit_player_data_descriptor_ = file->message_type(17);
  static const int unit_player_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, talent_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, skin_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, talent_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, bag_),
  };
  unit_player_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_player_data_descriptor_,
      unit_player_data::default_instance_,
      unit_player_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_player_data));
  unit_player_base_descriptor_ = file->message_type(18);
  static const int unit_player_base_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, liked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, show_hero_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, border_),
  };
  unit_player_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_player_base_descriptor_,
      unit_player_base::default_instance_,
      unit_player_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_player_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_player_base));
  role_player_data_descriptor_ = file->message_type(19);
  static const int role_player_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_data, players_),
  };
  role_player_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_data_descriptor_,
      role_player_data::default_instance_,
      role_player_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_data));
  role_show_data_descriptor_ = file->message_type(20);
  static const int role_show_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_data, show_info_),
  };
  role_show_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_data_descriptor_,
      role_show_data::default_instance_,
      role_show_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_data));
  hero_soul_data_descriptor_ = file->message_type(21);
  static const int hero_soul_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_soul_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_soul_data, slot_),
  };
  hero_soul_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_soul_data_descriptor_,
      hero_soul_data::default_instance_,
      hero_soul_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_soul_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_soul_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_soul_data));
  bag_data_descriptor_ = file->message_type(22);
  static const int bag_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_data, item_ids_),
  };
  bag_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bag_data_descriptor_,
      bag_data::default_instance_,
      bag_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bag_data));
  unit_hero_data_descriptor_ = file->message_type(23);
  static const int unit_hero_data_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, awaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, skin_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, souls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, awaken_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, talismans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, bag_),
  };
  unit_hero_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_hero_data_descriptor_,
      unit_hero_data::default_instance_,
      unit_hero_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_hero_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_hero_data));
  unit_formation_data_descriptor_ = file->message_type(24);
  static const int unit_formation_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, role_position_),
  };
  unit_formation_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_formation_data_descriptor_,
      unit_formation_data::default_instance_,
      unit_formation_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_formation_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_formation_data));
  unit_role_pet_data_descriptor_ = file->message_type(25);
  static const int unit_role_pet_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_data, pet_data_),
  };
  unit_role_pet_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_role_pet_data_descriptor_,
      unit_role_pet_data::default_instance_,
      unit_role_pet_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_role_pet_data));
  unit_role_pet_all_descriptor_ = file->message_type(26);
  static const int unit_role_pet_all_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, out_time_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, next_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, cur_show_pet_id_),
  };
  unit_role_pet_all_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_role_pet_all_descriptor_,
      unit_role_pet_all::default_instance_,
      unit_role_pet_all_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_role_pet_all, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_role_pet_all));
  role_hero_data_descriptor_ = file->message_type(27);
  static const int role_hero_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, formations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, pet_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, pet_all_),
  };
  role_hero_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_hero_data_descriptor_,
      role_hero_data::default_instance_,
      role_hero_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_hero_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_hero_data));
  unit_quest_data_descriptor_ = file->message_type(28);
  static const int unit_quest_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_quest_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_quest_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_quest_data, data_),
  };
  unit_quest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_quest_data_descriptor_,
      unit_quest_data::default_instance_,
      unit_quest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_quest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_quest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_quest_data));
  unit_activity_data_descriptor_ = file->message_type(29);
  static const int unit_activity_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, finish_),
  };
  unit_activity_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_activity_data_descriptor_,
      unit_activity_data::default_instance_,
      unit_activity_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_activity_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_activity_data));
  unit_achieve_pt_award_data_descriptor_ = file->message_type(30);
  static const int unit_achieve_pt_award_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, award_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, finish_),
  };
  unit_achieve_pt_award_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_achieve_pt_award_data_descriptor_,
      unit_achieve_pt_award_data::default_instance_,
      unit_achieve_pt_award_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_achieve_pt_award_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_achieve_pt_award_data));
  role_quest_data_descriptor_ = file->message_type(31);
  static const int role_quest_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_quest_data, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_quest_data, activities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_quest_data, pt_awards_),
  };
  role_quest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_quest_data_descriptor_,
      role_quest_data::default_instance_,
      role_quest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_quest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_quest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_quest_data));
  db_drop_spid_descriptor_ = file->message_type(32);
  static const int db_drop_spid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_spid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_spid, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_spid, value_),
  };
  db_drop_spid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_drop_spid_descriptor_,
      db_drop_spid::default_instance_,
      db_drop_spid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_spid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_drop_spid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_drop_spid));
  unit_soul_attr_descriptor_ = file->message_type(33);
  static const int unit_soul_attr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_attr, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_attr, init_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_attr, cur_value_),
  };
  unit_soul_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_soul_attr_descriptor_,
      unit_soul_attr::default_instance_,
      unit_soul_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_soul_attr));
  unit_soul_data_descriptor_ = file->message_type(34);
  static const int unit_soul_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, main_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, add_attrs_),
  };
  unit_soul_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_soul_data_descriptor_,
      unit_soul_data::default_instance_,
      unit_soul_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_soul_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_soul_data));
  role_soul_data_descriptor_ = file->message_type(35);
  static const int role_soul_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_soul_data, souls_),
  };
  role_soul_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_soul_data_descriptor_,
      role_soul_data::default_instance_,
      role_soul_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_soul_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_soul_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_soul_data));
  unit_discover_data_descriptor_ = file->message_type(36);
  static const int unit_discover_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_discover_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_discover_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_discover_data, discover_),
  };
  unit_discover_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_discover_data_descriptor_,
      unit_discover_data::default_instance_,
      unit_discover_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_discover_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_discover_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_discover_data));
  unit_chapter_data_descriptor_ = file->message_type(37);
  static const int unit_chapter_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, simple_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, diff_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, simple_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, diff_pass_),
  };
  unit_chapter_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_chapter_data_descriptor_,
      unit_chapter_data::default_instance_,
      unit_chapter_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_chapter_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_chapter_data));
  res_instance_data_descriptor_ = file->message_type(38);
  static const int res_instance_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_instance_data, instance_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_instance_data, level_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_instance_data, boss_),
  };
  res_instance_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_instance_data_descriptor_,
      res_instance_data::default_instance_,
      res_instance_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_instance_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_instance_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_instance_data));
  unit_res_instance_data_descriptor_ = file->message_type(39);
  static const int unit_res_instance_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_res_instance_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_res_instance_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_res_instance_data, data_),
  };
  unit_res_instance_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_res_instance_data_descriptor_,
      unit_res_instance_data::default_instance_,
      unit_res_instance_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_res_instance_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_res_instance_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_res_instance_data));
  unit_section_star_data_descriptor_ = file->message_type(40);
  static const int unit_section_star_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, reward_id_),
  };
  unit_section_star_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_section_star_data_descriptor_,
      unit_section_star_data::default_instance_,
      unit_section_star_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_section_star_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_section_star_data));
  unit_tower_data_descriptor_ = file->message_type(41);
  static const int unit_tower_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, max_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, cur_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, first_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, step_has_pass_),
  };
  unit_tower_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_tower_data_descriptor_,
      unit_tower_data::default_instance_,
      unit_tower_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_tower_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_tower_data));
  hero_event_info_descriptor_ = file->message_type(42);
  static const int hero_event_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_event_info, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_event_info, event_ids_),
  };
  hero_event_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_event_info_descriptor_,
      hero_event_info::default_instance_,
      hero_event_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_event_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_event_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_event_info));
  city_event_info_descriptor_ = file->message_type(43);
  static const int city_event_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_event_info, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_event_info, event_ids_),
  };
  city_event_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_event_info_descriptor_,
      city_event_info::default_instance_,
      city_event_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_event_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_event_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_event_info));
  special_event_data_descriptor_ = file->message_type(44);
  static const int special_event_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(special_event_data, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(special_event_data, shi_chen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(special_event_data, weather_),
  };
  special_event_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      special_event_data_descriptor_,
      special_event_data::default_instance_,
      special_event_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(special_event_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(special_event_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(special_event_data));
  unit_adv_data_descriptor_ = file->message_type(45);
  static const int unit_adv_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, city_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, event_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, hero_favors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, hero_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, city_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, cur_ask_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, sp_data_),
  };
  unit_adv_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_adv_data_descriptor_,
      unit_adv_data::default_instance_,
      unit_adv_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_adv_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_adv_data));
  guide_step_data_descriptor_ = file->message_type(46);
  static const int guide_step_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide_step_data, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide_step_data, skip_),
  };
  guide_step_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guide_step_data_descriptor_,
      guide_step_data::default_instance_,
      guide_step_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide_step_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide_step_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guide_step_data));
  unit_guide_data_descriptor_ = file->message_type(47);
  static const int unit_guide_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, guide_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, step_data_),
  };
  unit_guide_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_guide_data_descriptor_,
      unit_guide_data::default_instance_,
      unit_guide_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_guide_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_guide_data));
  unit_plot_little_game_data_descriptor_ = file->message_type(48);
  static const int unit_plot_little_game_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_little_game_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_little_game_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_little_game_data, data_),
  };
  unit_plot_little_game_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_plot_little_game_data_descriptor_,
      unit_plot_little_game_data::default_instance_,
      unit_plot_little_game_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_little_game_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_little_game_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_plot_little_game_data));
  role_level_data_descriptor_ = file->message_type(49);
  static const int role_level_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, discovers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, chapters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, res_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, plot_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, section_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, tower_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, adv_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, guide_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, plot_little_game_data_),
  };
  role_level_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_level_data_descriptor_,
      role_level_data::default_instance_,
      role_level_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_level_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_level_data));
  unit_royal_data_descriptor_ = file->message_type(50);
  static const int unit_royal_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, intimacy_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, has_received_),
  };
  unit_royal_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_royal_data_descriptor_,
      unit_royal_data::default_instance_,
      unit_royal_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_royal_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_royal_data));
  royal_opt_info_descriptor_ = file->message_type(51);
  static const int royal_opt_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, visit_times_),
  };
  royal_opt_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_opt_info_descriptor_,
      royal_opt_info::default_instance_,
      royal_opt_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_opt_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_opt_info));
  role_royal_data_descriptor_ = file->message_type(52);
  static const int role_royal_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_royal_data, royals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_royal_data, infos_),
  };
  role_royal_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_royal_data_descriptor_,
      role_royal_data::default_instance_,
      role_royal_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_royal_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_royal_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_royal_data));
  royal_task_data_descriptor_ = file->message_type(53);
  static const int royal_task_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, max_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, type_),
  };
  royal_task_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_task_data_descriptor_,
      royal_task_data::default_instance_,
      royal_task_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_task_data));
  friend_operation_info_descriptor_ = file->message_type(54);
  static const int friend_operation_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, give_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, draw_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, accept_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, last_search_time_),
  };
  friend_operation_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_operation_info_descriptor_,
      friend_operation_info::default_instance_,
      friend_operation_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_operation_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_operation_info));
  unit_friend_data_descriptor_ = file->message_type(55);
  static const int unit_friend_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_friend_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_friend_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_friend_data, intimacy_value_),
  };
  unit_friend_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_friend_data_descriptor_,
      unit_friend_data::default_instance_,
      unit_friend_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_friend_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_friend_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_friend_data));
  unit_black_data_descriptor_ = file->message_type(56);
  static const int unit_black_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_black_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_black_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_black_data, role_ids_),
  };
  unit_black_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_black_data_descriptor_,
      unit_black_data::default_instance_,
      unit_black_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_black_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_black_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_black_data));
  give_record_info_descriptor_ = file->message_type(57);
  static const int give_record_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_record_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_record_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_record_info, friend_ids_),
  };
  give_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      give_record_info_descriptor_,
      give_record_info::default_instance_,
      give_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(give_record_info));
  role_friend_data_descriptor_ = file->message_type(58);
  static const int role_friend_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, operation_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, give_records_),
  };
  role_friend_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_friend_data_descriptor_,
      role_friend_data::default_instance_,
      role_friend_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_friend_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_friend_data));
  db_shop_refresh_info_descriptor_ = file->message_type(59);
  static const int db_shop_refresh_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_refresh_info, user_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_refresh_info, last_user_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_refresh_info, last_sys_refresh_time_),
  };
  db_shop_refresh_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shop_refresh_info_descriptor_,
      db_shop_refresh_info::default_instance_,
      db_shop_refresh_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_refresh_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_refresh_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shop_refresh_info));
  db_shop_item_info_descriptor_ = file->message_type(60);
  static const int db_shop_item_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_item_info, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_item_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_item_info, buy_cur_num_),
  };
  db_shop_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shop_item_info_descriptor_,
      db_shop_item_info::default_instance_,
      db_shop_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shop_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shop_item_info));
  buy_record_info_descriptor_ = file->message_type(61);
  static const int buy_record_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, first_buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, last_buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, buy_num_),
  };
  buy_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buy_record_info_descriptor_,
      buy_record_info::default_instance_,
      buy_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buy_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buy_record_info));
  unit_shop_info_descriptor_ = file->message_type(62);
  static const int unit_shop_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, refresh_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, item_infos_),
  };
  unit_shop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_shop_info_descriptor_,
      unit_shop_info::default_instance_,
      unit_shop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_shop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_shop_info));
  role_shop_data_descriptor_ = file->message_type(63);
  static const int role_shop_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_shop_data, shop_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_shop_data, record_infos_),
  };
  role_shop_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_shop_data_descriptor_,
      role_shop_data::default_instance_,
      role_shop_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_shop_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_shop_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_shop_data));
  harem_compete_info_descriptor_ = file->message_type(64);
  static const int harem_compete_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, qingan_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, slap_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, red_point_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, infos_),
  };
  harem_compete_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      harem_compete_info_descriptor_,
      harem_compete_info::default_instance_,
      harem_compete_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(harem_compete_info));
  role_harem_data_descriptor_ = file->message_type(65);
  static const int role_harem_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_harem_data, info_),
  };
  role_harem_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_harem_data_descriptor_,
      role_harem_data::default_instance_,
      role_harem_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_harem_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_harem_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_harem_data));
  growing_flower_info_descriptor_ = file->message_type(66);
  static const int growing_flower_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, cur_status_),
  };
  growing_flower_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      growing_flower_info_descriptor_,
      growing_flower_info::default_instance_,
      growing_flower_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(growing_flower_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(growing_flower_info));
  unit_flower_info_descriptor_ = file->message_type(67);
  static const int unit_flower_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, count_num_),
  };
  unit_flower_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_flower_info_descriptor_,
      unit_flower_info::default_instance_,
      unit_flower_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_flower_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_flower_info));
  role_flower_data_descriptor_ = file->message_type(68);
  static const int role_flower_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_flower_data, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_flower_data, grow_info_),
  };
  role_flower_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_flower_data_descriptor_,
      role_flower_data::default_instance_,
      role_flower_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_flower_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_flower_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_flower_data));
  unit_plot_screen_data_descriptor_ = file->message_type(69);
  static const int unit_plot_screen_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, branch_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, section_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, get_end_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, action_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, chapter_is_end_),
  };
  unit_plot_screen_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_plot_screen_data_descriptor_,
      unit_plot_screen_data::default_instance_,
      unit_plot_screen_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_plot_screen_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_plot_screen_data));
  officer_apply_info_descriptor_ = file->message_type(70);
  static const int officer_apply_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, check_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, next_grade_),
  };
  officer_apply_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_apply_info_descriptor_,
      officer_apply_info::default_instance_,
      officer_apply_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_apply_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_apply_info));
  officer_base_info_descriptor_ = file->message_type(71);
  static const int officer_base_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, is_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, last_draw_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, daily_offical_chal_num_),
  };
  officer_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_base_info_descriptor_,
      officer_base_info::default_instance_,
      officer_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_base_info));
  role_officer_data_descriptor_ = file->message_type(72);
  static const int role_officer_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_officer_data, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_officer_data, infos_),
  };
  role_officer_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_officer_data_descriptor_,
      role_officer_data::default_instance_,
      role_officer_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_officer_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_officer_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_officer_data));
  offical_battle_report_data_descriptor_ = file->message_type(73);
  static const int offical_battle_report_data_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, attacker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, attacker_old_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, attacker_new_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, my_old_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, my_new_ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, battle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, heros_),
  };
  offical_battle_report_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_battle_report_data_descriptor_,
      offical_battle_report_data::default_instance_,
      offical_battle_report_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_battle_report_data));
  offical_battle_report_descriptor_ = file->message_type(74);
  static const int offical_battle_report_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report, reports_),
  };
  offical_battle_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_battle_report_descriptor_,
      offical_battle_report::default_instance_,
      offical_battle_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_battle_report));
  db_offical_apply_battle_data_descriptor_ = file->message_type(75);
  static const int db_offical_apply_battle_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_apply_battle_data, battle_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_apply_battle_data, my_records_),
  };
  db_offical_apply_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_offical_apply_battle_data_descriptor_,
      db_offical_apply_battle_data::default_instance_,
      db_offical_apply_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_apply_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_apply_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_offical_apply_battle_data));
  offical_apply_battle_result_db_descriptor_ = file->message_type(76);
  static const int offical_apply_battle_result_db_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_db, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_db, battle_data_),
  };
  offical_apply_battle_result_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_battle_result_db_descriptor_,
      offical_apply_battle_result_db::default_instance_,
      offical_apply_battle_result_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_battle_result_db));
  all_offical_apply_battle_result_db_descriptor_ = file->message_type(77);
  static const int all_offical_apply_battle_result_db_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_apply_battle_result_db, results_),
  };
  all_offical_apply_battle_result_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_offical_apply_battle_result_db_descriptor_,
      all_offical_apply_battle_result_db::default_instance_,
      all_offical_apply_battle_result_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_apply_battle_result_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_apply_battle_result_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_offical_apply_battle_result_db));
  db_offical_result_rank_data_descriptor_ = file->message_type(78);
  static const int db_offical_result_rank_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_result_rank_data, data_),
  };
  db_offical_result_rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_offical_result_rank_data_descriptor_,
      db_offical_result_rank_data::default_instance_,
      db_offical_result_rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_result_rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_offical_result_rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_offical_result_rank_data));
  db_my_offical_result_data_descriptor_ = file->message_type(79);
  static const int db_my_offical_result_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_my_offical_result_data, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_my_offical_result_data, mydata_),
  };
  db_my_offical_result_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_my_offical_result_data_descriptor_,
      db_my_offical_result_data::default_instance_,
      db_my_offical_result_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_my_offical_result_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_my_offical_result_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_my_offical_result_data));
  offical_rank_db_descriptor_ = file->message_type(80);
  static const int offical_rank_db_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_rank_db, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_rank_db, role_ids_),
  };
  offical_rank_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_rank_db_descriptor_,
      offical_rank_db::default_instance_,
      offical_rank_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_rank_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_rank_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_rank_db));
  all_offical_rank_db_descriptor_ = file->message_type(81);
  static const int all_offical_rank_db_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_rank_db, ranks_),
  };
  all_offical_rank_db_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_offical_rank_db_descriptor_,
      all_offical_rank_db::default_instance_,
      all_offical_rank_db_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_rank_db, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_offical_rank_db, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_offical_rank_db));
  db_unit_fashion_data_descriptor_ = file->message_type(82);
  static const int db_unit_fashion_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, db_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, state_),
  };
  db_unit_fashion_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_unit_fashion_data_descriptor_,
      db_unit_fashion_data::default_instance_,
      db_unit_fashion_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_unit_fashion_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_unit_fashion_data));
  role_fashion_data_descriptor_ = file->message_type(83);
  static const int role_fashion_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fashion_data, fashions_),
  };
  role_fashion_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_fashion_data_descriptor_,
      role_fashion_data::default_instance_,
      role_fashion_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fashion_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fashion_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_fashion_data));
  db_role_all_data_descriptor_ = file->message_type(84);
  static const int db_role_all_data_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, player_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, hero_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, soul_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, level_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, quest_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, royal_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, show_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, friend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, shop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, harem_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, flower_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, last_used_time_),
  };
  db_role_all_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_all_data_descriptor_,
      db_role_all_data::default_instance_,
      db_role_all_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_all_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_all_data));
  redis_role_base_descriptor_ = file->message_type(85);
  static const int redis_role_base_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, office_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, fimily_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, fimily_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, liked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, star_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, fight_value_),
  };
  redis_role_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      redis_role_base_descriptor_,
      redis_role_base::default_instance_,
      redis_role_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(redis_role_base));
  redis_role_show_hero_descriptor_ = file->message_type(86);
  static const int redis_role_show_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_show_hero, show_hero_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_show_hero, show_hero_id_list_),
  };
  redis_role_show_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      redis_role_show_hero_descriptor_,
      redis_role_show_hero::default_instance_,
      redis_role_show_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_show_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_show_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(redis_role_show_hero));
  redis_role_battle_hero_descriptor_ = file->message_type(87);
  static const int redis_role_battle_hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_battle_hero, battle_hero_list_),
  };
  redis_role_battle_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      redis_role_battle_hero_descriptor_,
      redis_role_battle_hero::default_instance_,
      redis_role_battle_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_battle_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_battle_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(redis_role_battle_hero));
  redis_comment_all_descriptor_ = file->message_type(88);
  static const int redis_comment_all_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_comment_all, comment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_comment_all, index_),
  };
  redis_comment_all_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      redis_comment_all_descriptor_,
      redis_comment_all::default_instance_,
      redis_comment_all_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_comment_all, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_comment_all, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(redis_comment_all));
  redis_role_data_descriptor_ = file->message_type(89);
  static const int redis_role_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, show_hero_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, battle_hero_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, fashion_data_),
  };
  redis_role_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      redis_role_data_descriptor_,
      redis_role_data::default_instance_,
      redis_role_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(redis_role_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(redis_role_data));
  arena_user_data_descriptor_ = file->message_type(90);
  static const int arena_user_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, challenged_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, fail_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, battle_data_),
  };
  arena_user_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_user_data_descriptor_,
      arena_user_data::default_instance_,
      arena_user_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_user_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_user_data));
  db_get_redis_role_data_req_descriptor_ = file->message_type(91);
  static const int db_get_redis_role_data_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, target_role_id_),
  };
  db_get_redis_role_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_redis_role_data_req_descriptor_,
      db_get_redis_role_data_req::default_instance_,
      db_get_redis_role_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_redis_role_data_req));
  db_get_redis_role_data_ack_descriptor_ = file->message_type(92);
  static const int db_get_redis_role_data_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, target_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, role_all_data_),
  };
  db_get_redis_role_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_redis_role_data_ack_descriptor_,
      db_get_redis_role_data_ack::default_instance_,
      db_get_redis_role_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_redis_role_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_redis_role_data_ack));
  db_update_redis_role_data_ntf_descriptor_ = file->message_type(93);
  static const int db_update_redis_role_data_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_redis_role_data_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_redis_role_data_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_redis_role_data_ntf, data_),
  };
  db_update_redis_role_data_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_redis_role_data_ntf_descriptor_,
      db_update_redis_role_data_ntf::default_instance_,
      db_update_redis_role_data_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_redis_role_data_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_redis_role_data_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_redis_role_data_ntf));
  db_check_apply_info_req_descriptor_ = file->message_type(94);
  static const int db_check_apply_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_req, area_id_),
  };
  db_check_apply_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_apply_info_req_descriptor_,
      db_check_apply_info_req::default_instance_,
      db_check_apply_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_apply_info_req));
  db_check_apply_info_ack_descriptor_ = file->message_type(95);
  static const int db_check_apply_info_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_ack, apply_infos_),
  };
  db_check_apply_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_apply_info_ack_descriptor_,
      db_check_apply_info_ack::default_instance_,
      db_check_apply_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_apply_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_apply_info_ack));
  db_save_apply_info_req_descriptor_ = file->message_type(96);
  static const int db_save_apply_info_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, accept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, apply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, content_),
  };
  db_save_apply_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_save_apply_info_req_descriptor_,
      db_save_apply_info_req::default_instance_,
      db_save_apply_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_apply_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_save_apply_info_req));
  db_update_apply_req_descriptor_ = file->message_type(97);
  static const int db_update_apply_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, accept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, apply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, status_),
  };
  db_update_apply_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_apply_req_descriptor_,
      db_update_apply_req::default_instance_,
      db_update_apply_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_apply_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_apply_req));
  db_process_apply_info_req_descriptor_ = file->message_type(98);
  static const int db_process_apply_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_req, apply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_req, area_id_),
  };
  db_process_apply_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_process_apply_info_req_descriptor_,
      db_process_apply_info_req::default_instance_,
      db_process_apply_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_process_apply_info_req));
  db_process_apply_info_ack_descriptor_ = file->message_type(99);
  static const int db_process_apply_info_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_ack, apply_infos_),
  };
  db_process_apply_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_process_apply_info_ack_descriptor_,
      db_process_apply_info_ack::default_instance_,
      db_process_apply_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_process_apply_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_process_apply_info_ack));
  db_search_friend_req_descriptor_ = file->message_type(100);
  static const int db_search_friend_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, content_),
  };
  db_search_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_search_friend_req_descriptor_,
      db_search_friend_req::default_instance_,
      db_search_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_search_friend_req));
  db_search_friend_ack_descriptor_ = file->message_type(101);
  static const int db_search_friend_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, info_),
  };
  db_search_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_search_friend_ack_descriptor_,
      db_search_friend_ack::default_instance_,
      db_search_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_search_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_search_friend_ack));
  db_save_friend_opt_req_descriptor_ = file->message_type(102);
  static const int db_save_friend_opt_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, opt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, status_),
  };
  db_save_friend_opt_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_save_friend_opt_req_descriptor_,
      db_save_friend_opt_req::default_instance_,
      db_save_friend_opt_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_friend_opt_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_save_friend_opt_req));
  opt_record_info_descriptor_ = file->message_type(103);
  static const int opt_record_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, opt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, status_),
  };
  opt_record_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_record_info_descriptor_,
      opt_record_info::default_instance_,
      opt_record_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_record_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_record_info));
  db_check_opt_record_req_descriptor_ = file->message_type(104);
  static const int db_check_opt_record_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_req, area_id_),
  };
  db_check_opt_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_opt_record_req_descriptor_,
      db_check_opt_record_req::default_instance_,
      db_check_opt_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_opt_record_req));
  db_check_opt_record_ack_descriptor_ = file->message_type(105);
  static const int db_check_opt_record_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, infos_),
  };
  db_check_opt_record_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_opt_record_ack_descriptor_,
      db_check_opt_record_ack::default_instance_,
      db_check_opt_record_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_opt_record_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_opt_record_ack));
  db_update_opt_record_req_descriptor_ = file->message_type(106);
  static const int db_update_opt_record_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, infos_),
  };
  db_update_opt_record_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_opt_record_req_descriptor_,
      db_update_opt_record_req::default_instance_,
      db_update_opt_record_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_opt_record_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_opt_record_req));
  db_get_recommend_friend_req_descriptor_ = file->message_type(107);
  static const int db_get_recommend_friend_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, fd_ids_),
  };
  db_get_recommend_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_recommend_friend_req_descriptor_,
      db_get_recommend_friend_req::default_instance_,
      db_get_recommend_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_recommend_friend_req));
  db_get_recommend_friend_ack_descriptor_ = file->message_type(108);
  static const int db_get_recommend_friend_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, fd_infos_),
  };
  db_get_recommend_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_recommend_friend_ack_descriptor_,
      db_get_recommend_friend_ack::default_instance_,
      db_get_recommend_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_recommend_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_recommend_friend_ack));
  gs_get_role_data_req_descriptor_ = file->message_type(109);
  static const int gs_get_role_data_req_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, online_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, new_db_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, is_switch_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, scene_type_),
  };
  gs_get_role_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_get_role_data_req_descriptor_,
      gs_get_role_data_req::default_instance_,
      gs_get_role_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_get_role_data_req));
  db_role_data_ack_descriptor_ = file->message_type(110);
  static const int db_role_data_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, online_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, is_switch_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, scene_type_),
  };
  db_role_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_data_ack_descriptor_,
      db_role_data_ack::default_instance_,
      db_role_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_data_ack));
  gs_role_leave_game_descriptor_ = file->message_type(111);
  static const int gs_role_leave_game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_leave_game, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_leave_game, role_id_),
  };
  gs_role_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_role_leave_game_descriptor_,
      gs_role_leave_game::default_instance_,
      gs_role_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_role_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_role_leave_game));
  save_role_req_descriptor_ = file->message_type(112);
  static const int save_role_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, mode_),
  };
  save_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      save_role_req_descriptor_,
      save_role_req::default_instance_,
      save_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(save_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(save_role_req));
  db_role_show_like_req_descriptor_ = file->message_type(113);
  static const int db_role_show_like_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_req, show_role_id_),
  };
  db_role_show_like_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_like_req_descriptor_,
      db_role_show_like_req::default_instance_,
      db_role_show_like_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_like_req));
  db_role_show_like_ack_descriptor_ = file->message_type(114);
  static const int db_role_show_like_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, likes_),
  };
  db_role_show_like_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_like_ack_descriptor_,
      db_role_show_like_ack::default_instance_,
      db_role_show_like_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_like_ack));
  db_role_show_comment_req_descriptor_ = file->message_type(115);
  static const int db_role_show_comment_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, comment_),
  };
  db_role_show_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_comment_req_descriptor_,
      db_role_show_comment_req::default_instance_,
      db_role_show_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_comment_req));
  db_role_show_comment_ack_descriptor_ = file->message_type(116);
  static const int db_role_show_comment_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, comment_),
  };
  db_role_show_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_comment_ack_descriptor_,
      db_role_show_comment_ack::default_instance_,
      db_role_show_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_comment_ack));
  db_role_show_delete_comment_req_descriptor_ = file->message_type(117);
  static const int db_role_show_delete_comment_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, time_),
  };
  db_role_show_delete_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_delete_comment_req_descriptor_,
      db_role_show_delete_comment_req::default_instance_,
      db_role_show_delete_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_delete_comment_req));
  db_role_show_delete_comment_ack_descriptor_ = file->message_type(118);
  static const int db_role_show_delete_comment_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_ack, show_role_id_),
  };
  db_role_show_delete_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_delete_comment_ack_descriptor_,
      db_role_show_delete_comment_ack::default_instance_,
      db_role_show_delete_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_delete_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_delete_comment_ack));
  db_role_show_get_comment_req_descriptor_ = file->message_type(119);
  static const int db_role_show_get_comment_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_req, show_role_id_),
  };
  db_role_show_get_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_comment_req_descriptor_,
      db_role_show_get_comment_req::default_instance_,
      db_role_show_get_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_comment_req));
  db_role_show_get_comment_ack_descriptor_ = file->message_type(120);
  static const int db_role_show_get_comment_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, comment_all_),
  };
  db_role_show_get_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_comment_ack_descriptor_,
      db_role_show_get_comment_ack::default_instance_,
      db_role_show_get_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_comment_ack));
  db_role_show_change_name_req_descriptor_ = file->message_type(121);
  static const int db_role_show_change_name_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, new_name_),
  };
  db_role_show_change_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_change_name_req_descriptor_,
      db_role_show_change_name_req::default_instance_,
      db_role_show_change_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_change_name_req));
  db_role_show_change_name_ack_descriptor_ = file->message_type(122);
  static const int db_role_show_change_name_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, new_name_),
  };
  db_role_show_change_name_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_change_name_ack_descriptor_,
      db_role_show_change_name_ack::default_instance_,
      db_role_show_change_name_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_change_name_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_change_name_ack));
  db_role_show_get_like_req_descriptor_ = file->message_type(123);
  static const int db_role_show_get_like_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_req, show_role_id_),
  };
  db_role_show_get_like_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_like_req_descriptor_,
      db_role_show_get_like_req::default_instance_,
      db_role_show_get_like_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_like_req));
  db_role_show_get_like_ack_descriptor_ = file->message_type(124);
  static const int db_role_show_get_like_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, likes_),
  };
  db_role_show_get_like_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_like_ack_descriptor_,
      db_role_show_get_like_ack::default_instance_,
      db_role_show_get_like_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_like_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_like_ack));
  db_role_show_get_emotion_req_descriptor_ = file->message_type(125);
  static const int db_role_show_get_emotion_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, count_),
  };
  db_role_show_get_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_emotion_req_descriptor_,
      db_role_show_get_emotion_req::default_instance_,
      db_role_show_get_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_emotion_req));
  db_role_show_get_emotion_ack_descriptor_ = file->message_type(126);
  static const int db_role_show_get_emotion_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, emotion_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, ret_),
  };
  db_role_show_get_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_get_emotion_ack_descriptor_,
      db_role_show_get_emotion_ack::default_instance_,
      db_role_show_get_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_get_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_get_emotion_ack));
  db_role_show_write_emotion_req_descriptor_ = file->message_type(127);
  static const int db_role_show_write_emotion_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, img_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, id_),
  };
  db_role_show_write_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_write_emotion_req_descriptor_,
      db_role_show_write_emotion_req::default_instance_,
      db_role_show_write_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_write_emotion_req));
  db_role_show_write_emotion_ack_descriptor_ = file->message_type(128);
  static const int db_role_show_write_emotion_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, img_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, create_time_),
  };
  db_role_show_write_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_write_emotion_ack_descriptor_,
      db_role_show_write_emotion_ack::default_instance_,
      db_role_show_write_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_write_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_write_emotion_ack));
  db_role_show_like_emotion_req_descriptor_ = file->message_type(129);
  static const int db_role_show_like_emotion_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, show_role_id_),
  };
  db_role_show_like_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_like_emotion_req_descriptor_,
      db_role_show_like_emotion_req::default_instance_,
      db_role_show_like_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_like_emotion_req));
  db_role_show_like_emotion_ack_descriptor_ = file->message_type(130);
  static const int db_role_show_like_emotion_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, show_role_id_),
  };
  db_role_show_like_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_like_emotion_ack_descriptor_,
      db_role_show_like_emotion_ack::default_instance_,
      db_role_show_like_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_like_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_like_emotion_ack));
  db_role_show_comment_emotion_req_descriptor_ = file->message_type(131);
  static const int db_role_show_comment_emotion_req_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, id_),
  };
  db_role_show_comment_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_comment_emotion_req_descriptor_,
      db_role_show_comment_emotion_req::default_instance_,
      db_role_show_comment_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_comment_emotion_req));
  db_role_show_comment_emotion_ack_descriptor_ = file->message_type(132);
  static const int db_role_show_comment_emotion_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, id_),
  };
  db_role_show_comment_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_comment_emotion_ack_descriptor_,
      db_role_show_comment_emotion_ack::default_instance_,
      db_role_show_comment_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_comment_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_comment_emotion_ack));
  db_role_show_remove_emotion_req_descriptor_ = file->message_type(133);
  static const int db_role_show_remove_emotion_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_req, emotion_id_),
  };
  db_role_show_remove_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_remove_emotion_req_descriptor_,
      db_role_show_remove_emotion_req::default_instance_,
      db_role_show_remove_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_remove_emotion_req));
  db_role_show_remove_emotion_ack_descriptor_ = file->message_type(134);
  static const int db_role_show_remove_emotion_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, role_id_),
  };
  db_role_show_remove_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_remove_emotion_ack_descriptor_,
      db_role_show_remove_emotion_ack::default_instance_,
      db_role_show_remove_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_remove_emotion_ack));
  db_role_show_remove_comment_req_descriptor_ = file->message_type(135);
  static const int db_role_show_remove_comment_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, comment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, role_id_),
  };
  db_role_show_remove_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_remove_comment_req_descriptor_,
      db_role_show_remove_comment_req::default_instance_,
      db_role_show_remove_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_remove_comment_req));
  db_role_show_remove_comment_ack_descriptor_ = file->message_type(136);
  static const int db_role_show_remove_comment_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, comment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, role_id_),
  };
  db_role_show_remove_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_show_remove_comment_ack_descriptor_,
      db_role_show_remove_comment_ack::default_instance_,
      db_role_show_remove_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_show_remove_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_show_remove_comment_ack));
  db_role_battle_info_req_descriptor_ = file->message_type(137);
  static const int db_role_battle_info_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, module_id_),
  };
  db_role_battle_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_battle_info_req_descriptor_,
      db_role_battle_info_req::default_instance_,
      db_role_battle_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_battle_info_req));
  db_role_battle_info_ack_descriptor_ = file->message_type(138);
  static const int db_role_battle_info_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, module_id_),
  };
  db_role_battle_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_role_battle_info_ack_descriptor_,
      db_role_battle_info_ack::default_instance_,
      db_role_battle_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_role_battle_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_role_battle_info_ack));
  db_account_role_data_req_descriptor_ = file->message_type(139);
  static const int db_account_role_data_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_req, area_id_),
  };
  db_account_role_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_account_role_data_req_descriptor_,
      db_account_role_data_req::default_instance_,
      db_account_role_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_account_role_data_req));
  db_account_role_data_ack_descriptor_ = file->message_type(140);
  static const int db_account_role_data_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, data_),
  };
  db_account_role_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_account_role_data_ack_descriptor_,
      db_account_role_data_ack::default_instance_,
      db_account_role_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_account_role_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_account_role_data_ack));
  db_create_role_of_game_descriptor_ = file->message_type(141);
  static const int db_create_role_of_game_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, role_sex_),
  };
  db_create_role_of_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_create_role_of_game_descriptor_,
      db_create_role_of_game::default_instance_,
      db_create_role_of_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_of_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_create_role_of_game));
  db_create_role_ack_descriptor_ = file->message_type(142);
  static const int db_create_role_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, data_),
  };
  db_create_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_create_role_ack_descriptor_,
      db_create_role_ack::default_instance_,
      db_create_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_create_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_create_role_ack));
  game_role_info_req_descriptor_ = file->message_type(143);
  static const int game_role_info_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, game_id_),
  };
  game_role_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_role_info_req_descriptor_,
      game_role_info_req::default_instance_,
      game_role_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_role_info_req));
  game_role_info_ack_descriptor_ = file->message_type(144);
  static const int game_role_info_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, can_ignore_),
  };
  game_role_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_role_info_ack_descriptor_,
      game_role_info_ack::default_instance_,
      game_role_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_role_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_role_info_ack));
  db_check_harem_compete_req_descriptor_ = file->message_type(145);
  static const int db_check_harem_compete_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_req, area_id_),
  };
  db_check_harem_compete_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_harem_compete_req_descriptor_,
      db_check_harem_compete_req::default_instance_,
      db_check_harem_compete_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_harem_compete_req));
  db_check_harem_compete_ack_descriptor_ = file->message_type(146);
  static const int db_check_harem_compete_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, end_time_),
  };
  db_check_harem_compete_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_check_harem_compete_ack_descriptor_,
      db_check_harem_compete_ack::default_instance_,
      db_check_harem_compete_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_check_harem_compete_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_check_harem_compete_ack));
  db_harem_compete_clear_req_descriptor_ = file->message_type(147);
  static const int db_harem_compete_clear_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_harem_compete_clear_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_harem_compete_clear_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_harem_compete_clear_req, type_),
  };
  db_harem_compete_clear_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_harem_compete_clear_req_descriptor_,
      db_harem_compete_clear_req::default_instance_,
      db_harem_compete_clear_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_harem_compete_clear_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_harem_compete_clear_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_harem_compete_clear_req));
  db_slap_emoji_info_descriptor_ = file->message_type(148);
  static const int db_slap_emoji_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_slap_emoji_info, infos_),
  };
  db_slap_emoji_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_slap_emoji_info_descriptor_,
      db_slap_emoji_info::default_instance_,
      db_slap_emoji_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_slap_emoji_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_slap_emoji_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_slap_emoji_info));
  db_get_harem_event_req_descriptor_ = file->message_type(149);
  static const int db_get_harem_event_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_req, event_uuid_),
  };
  db_get_harem_event_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_harem_event_req_descriptor_,
      db_get_harem_event_req::default_instance_,
      db_get_harem_event_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_harem_event_req));
  db_get_harem_event_ack_descriptor_ = file->message_type(150);
  static const int db_get_harem_event_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_ack, event_),
  };
  db_get_harem_event_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_harem_event_ack_descriptor_,
      db_get_harem_event_ack::default_instance_,
      db_get_harem_event_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_harem_event_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_harem_event_ack));
  db_share_officer_upgrade_req_descriptor_ = file->message_type(151);
  static const int db_share_officer_upgrade_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_req, data_),
  };
  db_share_officer_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_share_officer_upgrade_req_descriptor_,
      db_share_officer_upgrade_req::default_instance_,
      db_share_officer_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_share_officer_upgrade_req));
  db_share_officer_upgrade_ack_descriptor_ = file->message_type(152);
  static const int db_share_officer_upgrade_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, share_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, ret_),
  };
  db_share_officer_upgrade_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_share_officer_upgrade_ack_descriptor_,
      db_share_officer_upgrade_ack::default_instance_,
      db_share_officer_upgrade_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_share_officer_upgrade_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_share_officer_upgrade_ack));
  db_get_share_officer_upgrade_req_descriptor_ = file->message_type(153);
  static const int db_get_share_officer_upgrade_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_req, share_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_req, role_id_),
  };
  db_get_share_officer_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_share_officer_upgrade_req_descriptor_,
      db_get_share_officer_upgrade_req::default_instance_,
      db_get_share_officer_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_share_officer_upgrade_req));
  db_get_share_officer_upgrade_ack_descriptor_ = file->message_type(154);
  static const int db_get_share_officer_upgrade_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, data_),
  };
  db_get_share_officer_upgrade_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_share_officer_upgrade_ack_descriptor_,
      db_get_share_officer_upgrade_ack::default_instance_,
      db_get_share_officer_upgrade_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_share_officer_upgrade_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_share_officer_upgrade_ack));
  db_add_role_popularity_descriptor_ = file->message_type(155);
  static const int db_add_role_popularity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_role_popularity, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_role_popularity, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_role_popularity, add_num_),
  };
  db_add_role_popularity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_role_popularity_descriptor_,
      db_add_role_popularity::default_instance_,
      db_add_role_popularity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_role_popularity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_role_popularity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_role_popularity));
  db_kick_role_req_descriptor_ = file->message_type(156);
  static const int db_kick_role_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, gt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, role_id_),
  };
  db_kick_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kick_role_req_descriptor_,
      db_kick_role_req::default_instance_,
      db_kick_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kick_role_req));
  db_kick_role_ack_descriptor_ = file->message_type(157);
  static const int db_kick_role_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, gt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, role_id_),
  };
  db_kick_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_kick_role_ack_descriptor_,
      db_kick_role_ack::default_instance_,
      db_kick_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_kick_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_kick_role_ack));
  db_load_offical_data_req_descriptor_ = file->message_type(158);
  static const int db_load_offical_data_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_req, role_id_),
  };
  db_load_offical_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_load_offical_data_req_descriptor_,
      db_load_offical_data_req::default_instance_,
      db_load_offical_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_load_offical_data_req));
  db_load_offical_data_ack_descriptor_ = file->message_type(159);
  static const int db_load_offical_data_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, data_),
  };
  db_load_offical_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_load_offical_data_ack_descriptor_,
      db_load_offical_data_ack::default_instance_,
      db_load_offical_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_load_offical_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_load_offical_data_ack));
  db_save_offical_data_req_descriptor_ = file->message_type(160);
  static const int db_save_offical_data_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_offical_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_offical_data_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_offical_data_req, data_),
  };
  db_save_offical_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_save_offical_data_req_descriptor_,
      db_save_offical_data_req::default_instance_,
      db_save_offical_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_offical_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_save_offical_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_save_offical_data_req));
  ERoleDataType_descriptor_ = file->enum_type(0);
  ESQLMode_descriptor_ = file->enum_type(1);
  EGetRoleShowDataResult_descriptor_ = file->enum_type(2);
  EOnlineType_descriptor_ = file->enum_type(3);
  ESaveDataMode_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSaveInfo_descriptor_, &DataSaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_info_descriptor_, &role_show_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_offical_data_descriptor_, &db_offical_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_intimacy_descriptor_, &friend_intimacy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    couple_love_descriptor_, &couple_love::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_base_data_descriptor_, &role_base_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_chest_data_descriptor_, &unit_chest_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_free_times_draw_card_descriptor_, &unit_free_times_draw_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_limit_draw_card_descriptor_, &unit_limit_draw_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_unit_draw_card_descriptor_, &db_unit_draw_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_unit_draw_card_special_descriptor_, &db_unit_draw_card_special::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_unit_mail_data_descriptor_, &db_unit_mail_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_unit_mail_send_data_descriptor_, &db_unit_mail_send_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_item_data_descriptor_, &role_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skill_data_descriptor_, &skill_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skin_info_descriptor_, &db_skin_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_data_descriptor_, &db_equip_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_player_data_descriptor_, &unit_player_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_player_base_descriptor_, &unit_player_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_data_descriptor_, &role_player_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_data_descriptor_, &role_show_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_soul_data_descriptor_, &hero_soul_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bag_data_descriptor_, &bag_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_hero_data_descriptor_, &unit_hero_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_formation_data_descriptor_, &unit_formation_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_role_pet_data_descriptor_, &unit_role_pet_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_role_pet_all_descriptor_, &unit_role_pet_all::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_hero_data_descriptor_, &role_hero_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_quest_data_descriptor_, &unit_quest_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_activity_data_descriptor_, &unit_activity_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_achieve_pt_award_data_descriptor_, &unit_achieve_pt_award_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_quest_data_descriptor_, &role_quest_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_drop_spid_descriptor_, &db_drop_spid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_soul_attr_descriptor_, &unit_soul_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_soul_data_descriptor_, &unit_soul_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_soul_data_descriptor_, &role_soul_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_discover_data_descriptor_, &unit_discover_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_chapter_data_descriptor_, &unit_chapter_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_instance_data_descriptor_, &res_instance_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_res_instance_data_descriptor_, &unit_res_instance_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_section_star_data_descriptor_, &unit_section_star_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_tower_data_descriptor_, &unit_tower_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_event_info_descriptor_, &hero_event_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_event_info_descriptor_, &city_event_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    special_event_data_descriptor_, &special_event_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_adv_data_descriptor_, &unit_adv_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guide_step_data_descriptor_, &guide_step_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_guide_data_descriptor_, &unit_guide_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_plot_little_game_data_descriptor_, &unit_plot_little_game_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_level_data_descriptor_, &role_level_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_royal_data_descriptor_, &unit_royal_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_opt_info_descriptor_, &royal_opt_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_royal_data_descriptor_, &role_royal_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_task_data_descriptor_, &royal_task_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_operation_info_descriptor_, &friend_operation_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_friend_data_descriptor_, &unit_friend_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_black_data_descriptor_, &unit_black_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    give_record_info_descriptor_, &give_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_friend_data_descriptor_, &role_friend_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shop_refresh_info_descriptor_, &db_shop_refresh_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shop_item_info_descriptor_, &db_shop_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buy_record_info_descriptor_, &buy_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_shop_info_descriptor_, &unit_shop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_shop_data_descriptor_, &role_shop_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    harem_compete_info_descriptor_, &harem_compete_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_harem_data_descriptor_, &role_harem_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    growing_flower_info_descriptor_, &growing_flower_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_flower_info_descriptor_, &unit_flower_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_flower_data_descriptor_, &role_flower_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_plot_screen_data_descriptor_, &unit_plot_screen_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_apply_info_descriptor_, &officer_apply_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_base_info_descriptor_, &officer_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_officer_data_descriptor_, &role_officer_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_battle_report_data_descriptor_, &offical_battle_report_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_battle_report_descriptor_, &offical_battle_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_offical_apply_battle_data_descriptor_, &db_offical_apply_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_battle_result_db_descriptor_, &offical_apply_battle_result_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_offical_apply_battle_result_db_descriptor_, &all_offical_apply_battle_result_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_offical_result_rank_data_descriptor_, &db_offical_result_rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_my_offical_result_data_descriptor_, &db_my_offical_result_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_rank_db_descriptor_, &offical_rank_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_offical_rank_db_descriptor_, &all_offical_rank_db::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_unit_fashion_data_descriptor_, &db_unit_fashion_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_fashion_data_descriptor_, &role_fashion_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_all_data_descriptor_, &db_role_all_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    redis_role_base_descriptor_, &redis_role_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    redis_role_show_hero_descriptor_, &redis_role_show_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    redis_role_battle_hero_descriptor_, &redis_role_battle_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    redis_comment_all_descriptor_, &redis_comment_all::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    redis_role_data_descriptor_, &redis_role_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_user_data_descriptor_, &arena_user_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_redis_role_data_req_descriptor_, &db_get_redis_role_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_redis_role_data_ack_descriptor_, &db_get_redis_role_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_redis_role_data_ntf_descriptor_, &db_update_redis_role_data_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_apply_info_req_descriptor_, &db_check_apply_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_apply_info_ack_descriptor_, &db_check_apply_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_save_apply_info_req_descriptor_, &db_save_apply_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_apply_req_descriptor_, &db_update_apply_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_process_apply_info_req_descriptor_, &db_process_apply_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_process_apply_info_ack_descriptor_, &db_process_apply_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_search_friend_req_descriptor_, &db_search_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_search_friend_ack_descriptor_, &db_search_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_save_friend_opt_req_descriptor_, &db_save_friend_opt_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_record_info_descriptor_, &opt_record_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_opt_record_req_descriptor_, &db_check_opt_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_opt_record_ack_descriptor_, &db_check_opt_record_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_opt_record_req_descriptor_, &db_update_opt_record_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_recommend_friend_req_descriptor_, &db_get_recommend_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_recommend_friend_ack_descriptor_, &db_get_recommend_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_get_role_data_req_descriptor_, &gs_get_role_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_data_ack_descriptor_, &db_role_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_role_leave_game_descriptor_, &gs_role_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    save_role_req_descriptor_, &save_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_like_req_descriptor_, &db_role_show_like_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_like_ack_descriptor_, &db_role_show_like_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_comment_req_descriptor_, &db_role_show_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_comment_ack_descriptor_, &db_role_show_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_delete_comment_req_descriptor_, &db_role_show_delete_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_delete_comment_ack_descriptor_, &db_role_show_delete_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_comment_req_descriptor_, &db_role_show_get_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_comment_ack_descriptor_, &db_role_show_get_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_change_name_req_descriptor_, &db_role_show_change_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_change_name_ack_descriptor_, &db_role_show_change_name_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_like_req_descriptor_, &db_role_show_get_like_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_like_ack_descriptor_, &db_role_show_get_like_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_emotion_req_descriptor_, &db_role_show_get_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_get_emotion_ack_descriptor_, &db_role_show_get_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_write_emotion_req_descriptor_, &db_role_show_write_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_write_emotion_ack_descriptor_, &db_role_show_write_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_like_emotion_req_descriptor_, &db_role_show_like_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_like_emotion_ack_descriptor_, &db_role_show_like_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_comment_emotion_req_descriptor_, &db_role_show_comment_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_comment_emotion_ack_descriptor_, &db_role_show_comment_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_remove_emotion_req_descriptor_, &db_role_show_remove_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_remove_emotion_ack_descriptor_, &db_role_show_remove_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_remove_comment_req_descriptor_, &db_role_show_remove_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_show_remove_comment_ack_descriptor_, &db_role_show_remove_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_battle_info_req_descriptor_, &db_role_battle_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_role_battle_info_ack_descriptor_, &db_role_battle_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_account_role_data_req_descriptor_, &db_account_role_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_account_role_data_ack_descriptor_, &db_account_role_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_create_role_of_game_descriptor_, &db_create_role_of_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_create_role_ack_descriptor_, &db_create_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_role_info_req_descriptor_, &game_role_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_role_info_ack_descriptor_, &game_role_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_harem_compete_req_descriptor_, &db_check_harem_compete_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_check_harem_compete_ack_descriptor_, &db_check_harem_compete_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_harem_compete_clear_req_descriptor_, &db_harem_compete_clear_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_slap_emoji_info_descriptor_, &db_slap_emoji_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_harem_event_req_descriptor_, &db_get_harem_event_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_harem_event_ack_descriptor_, &db_get_harem_event_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_share_officer_upgrade_req_descriptor_, &db_share_officer_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_share_officer_upgrade_ack_descriptor_, &db_share_officer_upgrade_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_share_officer_upgrade_req_descriptor_, &db_get_share_officer_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_share_officer_upgrade_ack_descriptor_, &db_get_share_officer_upgrade_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_role_popularity_descriptor_, &db_add_role_popularity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kick_role_req_descriptor_, &db_kick_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_kick_role_ack_descriptor_, &db_kick_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_load_offical_data_req_descriptor_, &db_load_offical_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_load_offical_data_ack_descriptor_, &db_load_offical_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_save_offical_data_req_descriptor_, &db_save_offical_data_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fdb_2eproto() {
  delete DataSaveInfo::default_instance_;
  delete DataSaveInfo_reflection_;
  delete role_show_info::default_instance_;
  delete role_show_info_reflection_;
  delete db_offical_data::default_instance_;
  delete db_offical_data_reflection_;
  delete friend_intimacy::default_instance_;
  delete friend_intimacy_reflection_;
  delete couple_love::default_instance_;
  delete couple_love_reflection_;
  delete role_base_data::default_instance_;
  delete role_base_data_reflection_;
  delete unit_chest_data::default_instance_;
  delete unit_chest_data_reflection_;
  delete unit_free_times_draw_card::default_instance_;
  delete unit_free_times_draw_card_reflection_;
  delete unit_limit_draw_card::default_instance_;
  delete unit_limit_draw_card_reflection_;
  delete db_unit_draw_card::default_instance_;
  delete db_unit_draw_card_reflection_;
  delete db_unit_draw_card_special::default_instance_;
  delete db_unit_draw_card_special_reflection_;
  delete db_unit_mail_data::default_instance_;
  delete db_unit_mail_data_reflection_;
  delete db_unit_mail_send_data::default_instance_;
  delete db_unit_mail_send_data_reflection_;
  delete role_item_data::default_instance_;
  delete role_item_data_reflection_;
  delete skill_data::default_instance_;
  delete skill_data_reflection_;
  delete db_skin_info::default_instance_;
  delete db_skin_info_reflection_;
  delete db_equip_data::default_instance_;
  delete db_equip_data_reflection_;
  delete unit_player_data::default_instance_;
  delete unit_player_data_reflection_;
  delete unit_player_base::default_instance_;
  delete unit_player_base_reflection_;
  delete role_player_data::default_instance_;
  delete role_player_data_reflection_;
  delete role_show_data::default_instance_;
  delete role_show_data_reflection_;
  delete hero_soul_data::default_instance_;
  delete hero_soul_data_reflection_;
  delete bag_data::default_instance_;
  delete bag_data_reflection_;
  delete unit_hero_data::default_instance_;
  delete unit_hero_data_reflection_;
  delete unit_formation_data::default_instance_;
  delete unit_formation_data_reflection_;
  delete unit_role_pet_data::default_instance_;
  delete unit_role_pet_data_reflection_;
  delete unit_role_pet_all::default_instance_;
  delete unit_role_pet_all_reflection_;
  delete role_hero_data::default_instance_;
  delete role_hero_data_reflection_;
  delete unit_quest_data::default_instance_;
  delete unit_quest_data_reflection_;
  delete unit_activity_data::default_instance_;
  delete unit_activity_data_reflection_;
  delete unit_achieve_pt_award_data::default_instance_;
  delete unit_achieve_pt_award_data_reflection_;
  delete role_quest_data::default_instance_;
  delete role_quest_data_reflection_;
  delete db_drop_spid::default_instance_;
  delete db_drop_spid_reflection_;
  delete unit_soul_attr::default_instance_;
  delete unit_soul_attr_reflection_;
  delete unit_soul_data::default_instance_;
  delete unit_soul_data_reflection_;
  delete role_soul_data::default_instance_;
  delete role_soul_data_reflection_;
  delete unit_discover_data::default_instance_;
  delete unit_discover_data_reflection_;
  delete unit_chapter_data::default_instance_;
  delete unit_chapter_data_reflection_;
  delete res_instance_data::default_instance_;
  delete res_instance_data_reflection_;
  delete unit_res_instance_data::default_instance_;
  delete unit_res_instance_data_reflection_;
  delete unit_section_star_data::default_instance_;
  delete unit_section_star_data_reflection_;
  delete unit_tower_data::default_instance_;
  delete unit_tower_data_reflection_;
  delete hero_event_info::default_instance_;
  delete hero_event_info_reflection_;
  delete city_event_info::default_instance_;
  delete city_event_info_reflection_;
  delete special_event_data::default_instance_;
  delete special_event_data_reflection_;
  delete unit_adv_data::default_instance_;
  delete unit_adv_data_reflection_;
  delete guide_step_data::default_instance_;
  delete guide_step_data_reflection_;
  delete unit_guide_data::default_instance_;
  delete unit_guide_data_reflection_;
  delete unit_plot_little_game_data::default_instance_;
  delete unit_plot_little_game_data_reflection_;
  delete role_level_data::default_instance_;
  delete role_level_data_reflection_;
  delete unit_royal_data::default_instance_;
  delete unit_royal_data_reflection_;
  delete royal_opt_info::default_instance_;
  delete royal_opt_info_reflection_;
  delete role_royal_data::default_instance_;
  delete role_royal_data_reflection_;
  delete royal_task_data::default_instance_;
  delete royal_task_data_reflection_;
  delete friend_operation_info::default_instance_;
  delete friend_operation_info_reflection_;
  delete unit_friend_data::default_instance_;
  delete unit_friend_data_reflection_;
  delete unit_black_data::default_instance_;
  delete unit_black_data_reflection_;
  delete give_record_info::default_instance_;
  delete give_record_info_reflection_;
  delete role_friend_data::default_instance_;
  delete role_friend_data_reflection_;
  delete db_shop_refresh_info::default_instance_;
  delete db_shop_refresh_info_reflection_;
  delete db_shop_item_info::default_instance_;
  delete db_shop_item_info_reflection_;
  delete buy_record_info::default_instance_;
  delete buy_record_info_reflection_;
  delete unit_shop_info::default_instance_;
  delete unit_shop_info_reflection_;
  delete role_shop_data::default_instance_;
  delete role_shop_data_reflection_;
  delete harem_compete_info::default_instance_;
  delete harem_compete_info_reflection_;
  delete role_harem_data::default_instance_;
  delete role_harem_data_reflection_;
  delete growing_flower_info::default_instance_;
  delete growing_flower_info_reflection_;
  delete unit_flower_info::default_instance_;
  delete unit_flower_info_reflection_;
  delete role_flower_data::default_instance_;
  delete role_flower_data_reflection_;
  delete unit_plot_screen_data::default_instance_;
  delete unit_plot_screen_data_reflection_;
  delete officer_apply_info::default_instance_;
  delete officer_apply_info_reflection_;
  delete officer_base_info::default_instance_;
  delete officer_base_info_reflection_;
  delete role_officer_data::default_instance_;
  delete role_officer_data_reflection_;
  delete offical_battle_report_data::default_instance_;
  delete offical_battle_report_data_reflection_;
  delete offical_battle_report::default_instance_;
  delete offical_battle_report_reflection_;
  delete db_offical_apply_battle_data::default_instance_;
  delete db_offical_apply_battle_data_reflection_;
  delete offical_apply_battle_result_db::default_instance_;
  delete offical_apply_battle_result_db_reflection_;
  delete all_offical_apply_battle_result_db::default_instance_;
  delete all_offical_apply_battle_result_db_reflection_;
  delete db_offical_result_rank_data::default_instance_;
  delete db_offical_result_rank_data_reflection_;
  delete db_my_offical_result_data::default_instance_;
  delete db_my_offical_result_data_reflection_;
  delete offical_rank_db::default_instance_;
  delete offical_rank_db_reflection_;
  delete all_offical_rank_db::default_instance_;
  delete all_offical_rank_db_reflection_;
  delete db_unit_fashion_data::default_instance_;
  delete db_unit_fashion_data_reflection_;
  delete role_fashion_data::default_instance_;
  delete role_fashion_data_reflection_;
  delete db_role_all_data::default_instance_;
  delete db_role_all_data_reflection_;
  delete redis_role_base::default_instance_;
  delete redis_role_base_reflection_;
  delete redis_role_show_hero::default_instance_;
  delete redis_role_show_hero_reflection_;
  delete redis_role_battle_hero::default_instance_;
  delete redis_role_battle_hero_reflection_;
  delete redis_comment_all::default_instance_;
  delete redis_comment_all_reflection_;
  delete redis_role_data::default_instance_;
  delete redis_role_data_reflection_;
  delete arena_user_data::default_instance_;
  delete arena_user_data_reflection_;
  delete db_get_redis_role_data_req::default_instance_;
  delete db_get_redis_role_data_req_reflection_;
  delete db_get_redis_role_data_ack::default_instance_;
  delete db_get_redis_role_data_ack_reflection_;
  delete db_update_redis_role_data_ntf::default_instance_;
  delete db_update_redis_role_data_ntf_reflection_;
  delete db_check_apply_info_req::default_instance_;
  delete db_check_apply_info_req_reflection_;
  delete db_check_apply_info_ack::default_instance_;
  delete db_check_apply_info_ack_reflection_;
  delete db_save_apply_info_req::default_instance_;
  delete db_save_apply_info_req_reflection_;
  delete db_update_apply_req::default_instance_;
  delete db_update_apply_req_reflection_;
  delete db_process_apply_info_req::default_instance_;
  delete db_process_apply_info_req_reflection_;
  delete db_process_apply_info_ack::default_instance_;
  delete db_process_apply_info_ack_reflection_;
  delete db_search_friend_req::default_instance_;
  delete db_search_friend_req_reflection_;
  delete db_search_friend_ack::default_instance_;
  delete db_search_friend_ack_reflection_;
  delete db_save_friend_opt_req::default_instance_;
  delete db_save_friend_opt_req_reflection_;
  delete opt_record_info::default_instance_;
  delete opt_record_info_reflection_;
  delete db_check_opt_record_req::default_instance_;
  delete db_check_opt_record_req_reflection_;
  delete db_check_opt_record_ack::default_instance_;
  delete db_check_opt_record_ack_reflection_;
  delete db_update_opt_record_req::default_instance_;
  delete db_update_opt_record_req_reflection_;
  delete db_get_recommend_friend_req::default_instance_;
  delete db_get_recommend_friend_req_reflection_;
  delete db_get_recommend_friend_ack::default_instance_;
  delete db_get_recommend_friend_ack_reflection_;
  delete gs_get_role_data_req::default_instance_;
  delete gs_get_role_data_req_reflection_;
  delete db_role_data_ack::default_instance_;
  delete db_role_data_ack_reflection_;
  delete gs_role_leave_game::default_instance_;
  delete gs_role_leave_game_reflection_;
  delete save_role_req::default_instance_;
  delete save_role_req_reflection_;
  delete db_role_show_like_req::default_instance_;
  delete db_role_show_like_req_reflection_;
  delete db_role_show_like_ack::default_instance_;
  delete db_role_show_like_ack_reflection_;
  delete db_role_show_comment_req::default_instance_;
  delete db_role_show_comment_req_reflection_;
  delete db_role_show_comment_ack::default_instance_;
  delete db_role_show_comment_ack_reflection_;
  delete db_role_show_delete_comment_req::default_instance_;
  delete db_role_show_delete_comment_req_reflection_;
  delete db_role_show_delete_comment_ack::default_instance_;
  delete db_role_show_delete_comment_ack_reflection_;
  delete db_role_show_get_comment_req::default_instance_;
  delete db_role_show_get_comment_req_reflection_;
  delete db_role_show_get_comment_ack::default_instance_;
  delete db_role_show_get_comment_ack_reflection_;
  delete db_role_show_change_name_req::default_instance_;
  delete db_role_show_change_name_req_reflection_;
  delete db_role_show_change_name_ack::default_instance_;
  delete db_role_show_change_name_ack_reflection_;
  delete db_role_show_get_like_req::default_instance_;
  delete db_role_show_get_like_req_reflection_;
  delete db_role_show_get_like_ack::default_instance_;
  delete db_role_show_get_like_ack_reflection_;
  delete db_role_show_get_emotion_req::default_instance_;
  delete db_role_show_get_emotion_req_reflection_;
  delete db_role_show_get_emotion_ack::default_instance_;
  delete db_role_show_get_emotion_ack_reflection_;
  delete db_role_show_write_emotion_req::default_instance_;
  delete db_role_show_write_emotion_req_reflection_;
  delete db_role_show_write_emotion_ack::default_instance_;
  delete db_role_show_write_emotion_ack_reflection_;
  delete db_role_show_like_emotion_req::default_instance_;
  delete db_role_show_like_emotion_req_reflection_;
  delete db_role_show_like_emotion_ack::default_instance_;
  delete db_role_show_like_emotion_ack_reflection_;
  delete db_role_show_comment_emotion_req::default_instance_;
  delete db_role_show_comment_emotion_req_reflection_;
  delete db_role_show_comment_emotion_ack::default_instance_;
  delete db_role_show_comment_emotion_ack_reflection_;
  delete db_role_show_remove_emotion_req::default_instance_;
  delete db_role_show_remove_emotion_req_reflection_;
  delete db_role_show_remove_emotion_ack::default_instance_;
  delete db_role_show_remove_emotion_ack_reflection_;
  delete db_role_show_remove_comment_req::default_instance_;
  delete db_role_show_remove_comment_req_reflection_;
  delete db_role_show_remove_comment_ack::default_instance_;
  delete db_role_show_remove_comment_ack_reflection_;
  delete db_role_battle_info_req::default_instance_;
  delete db_role_battle_info_req_reflection_;
  delete db_role_battle_info_ack::default_instance_;
  delete db_role_battle_info_ack_reflection_;
  delete db_account_role_data_req::default_instance_;
  delete db_account_role_data_req_reflection_;
  delete db_account_role_data_ack::default_instance_;
  delete db_account_role_data_ack_reflection_;
  delete db_create_role_of_game::default_instance_;
  delete db_create_role_of_game_reflection_;
  delete db_create_role_ack::default_instance_;
  delete db_create_role_ack_reflection_;
  delete game_role_info_req::default_instance_;
  delete game_role_info_req_reflection_;
  delete game_role_info_ack::default_instance_;
  delete game_role_info_ack_reflection_;
  delete db_check_harem_compete_req::default_instance_;
  delete db_check_harem_compete_req_reflection_;
  delete db_check_harem_compete_ack::default_instance_;
  delete db_check_harem_compete_ack_reflection_;
  delete db_harem_compete_clear_req::default_instance_;
  delete db_harem_compete_clear_req_reflection_;
  delete db_slap_emoji_info::default_instance_;
  delete db_slap_emoji_info_reflection_;
  delete db_get_harem_event_req::default_instance_;
  delete db_get_harem_event_req_reflection_;
  delete db_get_harem_event_ack::default_instance_;
  delete db_get_harem_event_ack_reflection_;
  delete db_share_officer_upgrade_req::default_instance_;
  delete db_share_officer_upgrade_req_reflection_;
  delete db_share_officer_upgrade_ack::default_instance_;
  delete db_share_officer_upgrade_ack_reflection_;
  delete db_get_share_officer_upgrade_req::default_instance_;
  delete db_get_share_officer_upgrade_req_reflection_;
  delete db_get_share_officer_upgrade_ack::default_instance_;
  delete db_get_share_officer_upgrade_ack_reflection_;
  delete db_add_role_popularity::default_instance_;
  delete db_add_role_popularity_reflection_;
  delete db_kick_role_req::default_instance_;
  delete db_kick_role_req_reflection_;
  delete db_kick_role_ack::default_instance_;
  delete db_kick_role_ack_reflection_;
  delete db_load_offical_data_req::default_instance_;
  delete db_load_offical_data_req_reflection_;
  delete db_load_offical_data_ack::default_instance_;
  delete db_load_offical_data_ack_reflection_;
  delete db_save_offical_data_req::default_instance_;
  delete db_save_offical_data_req_reflection_;
}

void protobuf_AddDesc_ss_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5factivitytype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ss_db.proto\022\013SProtoSpace\032\020ss_protoid.p"
    "roto\032\021cm_roletype.proto\032\023cm_battletype.p"
    "roto\032\025cm_activitytype.proto\032\023cm_socialty"
    "pe.proto\"v\n\014DataSaveInfo\022-\n\tdata_type\030\001 "
    "\001(\0162\032.SProtoSpace.ERoleDataType\022\'\n\010sql_m"
    "ode\030\002 \001(\0162\025.SProtoSpace.ESQLMode\022\016\n\006key_"
    "id\030\003 \001(\004\"\272\002\n\016role_show_info\022\017\n\007db_mode\030\001"
    " \001(\r\022\014\n\004uuid\030\002 \001(\004\022\022\n\nliked_list\030\003 \003(\004\022\014"
    "\n\004like\030\004 \001(\r\022\021\n\tsignature\030\005 \001(\t\0220\n\010posit"
    "ion\030\006 \001(\0132\036.SProtoSpace.lsg_position_inf"
    "o\022\026\n\016show_hero_list\030\007 \003(\004\022\021\n\006border\030\010 \001("
    "\r:\0011\022(\n\010birthday\030\t \001(\0132\026.SProtoSpace.dat"
    "e_info\022\024\n\tstar_sign\030\n \001(\r:\0011\022\025\n\npopulari"
    "ty\030\013 \001(\r:\0010\022\020\n\005charm\030\014 \001(\r:\0010\022\016\n\006labels\030"
    "\r \003(\r\"t\n\017db_offical_data\022\021\n\tcur_grade\030\001 "
    "\001(\r\022\021\n\tmax_grade\030\002 \001(\r\022\023\n\013apply_grade\030\003 "
    "\001(\r\022\022\n\napply_time\030\004 \001(\r\022\022\n\nlast_grade\030\005 "
    "\001(\r\":\n\017friend_intimacy\022\017\n\007role_id\030\001 \001(\004\022"
    "\026\n\016intimacy_value\030\002 \001(\r\"2\n\013couple_love\022\017"
    "\n\007role_id\030\001 \001(\004\022\022\n\nlove_value\030\002 \001(\r\"\321\n\n\016"
    "role_base_data\022\017\n\007role_id\030\001 \001(\004\022\021\n\trole_"
    "name\030\002 \001(\t\022\022\n\naccount_id\030\003 \001(\t\022\017\n\007area_i"
    "d\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\024\n\014offline_time\030\006 \001"
    "(\004\022\021\n\tdb_svr_id\030\007 \001(\004\022\n\n\002lv\030\010 \001(\005\022\013\n\003exp"
    "\030\t \001(\005\022\027\n\017buy_power_times\030\013 \001(\005\022\014\n\004gold\030"
    "\014 \001(\005\022\014\n\004jade\030\r \001(\005\022\r\n\005power\030\016 \001(\005\022\024\n\014la"
    "st_disc_id\030\017 \001(\005\022\025\n\rtask_activity\030\020 \001(\005\022"
    "*\n\010g_system\030\021 \003(\0132\030.SProtoSpace.game_sys"
    "tem\022\022\n\nlogin_time\030\022 \001(\004\022\016\n\006tender\030\023 \001(\005\022"
    "\017\n\007treason\030\024 \001(\005\022\014\n\004wise\030\025 \001(\005\022\021\n\tadorka"
    "ble\030\026 \001(\005\022\014\n\004good\030\027 \001(\005\022\020\n\010scheming\030\030 \001("
    "\005\022\r\n\005merit\030\031 \001(\005\022\026\n\016offical_salary\030\032 \001(\010"
    "\022\031\n\021offical_salary_tm\030\033 \001(\005\022\035\n\025offical_c"
    "hallenge_num\030\034 \001(\005\022\035\n\025offical_challenge_"
    "buy\030\035 \001(\005\022\031\n\021offical_share_num\030\036 \001(\005\022\024\n\014"
    "bag_capacity\030\037 \001(\r\022\"\n\032mail_global_last_c"
    "hecktime\030  \001(\004\022#\n\033mail_send_private_limi"
    "t_day\030! \001(\r\022\023\n\013fight_power\030\" \001(\004\022\033\n\023firs"
    "t_offical_award\030# \001(\r\022\034\n\024cur_mainline_ta"
    "sk_id\030$ \001(\r\022\033\n\023offical_apply_count\030% \001(\r"
    "\022\027\n\017acc_login_count\030& \001(\r\022\030\n\020has_first_c"
    "ommon\030\' \001(\010\022\031\n\021has_first_special\030( \001(\010\022 "
    "\n\030has_first_ten_in_one_row\030) \001(\010\022\023\n\013skil"
    "l_point\030* \001(\r\022\036\n\026skill_point_revocer_tm\030"
    "+ \001(\r\022\017\n\004wine\030, \001(\r:\0010\022\017\n\007gm_auth\030- \001(\005\022"
    "\023\n\010wine_cup\030. \001(\r:\0010\022\025\n\rdaily_fortune\0300 "
    "\001(\005\022\016\n\006energy\0301 \001(\005\022\021\n\tadv_times\0302 \001(\005\022\024"
    "\n\014talent_point\0303 \001(\005\022\027\n\017lock_module_ids\030"
    "4 \003(\005\022\020\n\010pass_all\0305 \001(\010\022\014\n\004skip\0306 \001(\010\022\021\n"
    "\tguide_ids\0307 \003(\005\022\035\n\025chat_room_award_time"
    "s\0308 \001(\005\022\r\n\005charm\0309 \001(\005\022\022\n\npopularity\030: \001"
    "(\005\022.\n\010intimacy\030; \003(\0132\034.SProtoSpace.frien"
    "d_intimacy\022&\n\004love\030< \003(\0132\030.SProtoSpace.c"
    "ouple_love\022\033\n\020change_name_time\030= \001(\005:\0010\""
    "X\n\017unit_chest_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004u"
    "uid\030\002 \001(\004\022&\n\005chest\030\003 \001(\0132\027.SProtoSpace.r"
    "ole_chest\"\323\001\n\031unit_free_times_draw_card\022"
    "\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\021\n\tdraw_t"
    "ype\030\003 \001(\005\022\022\n\nused_today\030\004 \001(\005\022\025\n\rnow_has"
    "_times\030\005 \001(\005\022\026\n\016time_last_used\030\006 \001(\r\022\025\n\r"
    "free_left_day\030\007 \001(\005\022\026\n\016limit_left_day\030\010 "
    "\001(\005\022\022\n\ntotal_time\030\t \001(\005\"t\n\024unit_limit_dr"
    "aw_card\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\021"
    "\n\tdraw_type\030\003 \001(\005\022\022\n\nused_today\030\004 \001(\005\022\026\n"
    "\016time_last_draw\030\005 \001(\r\"\314\001\n\021db_unit_draw_c"
    "ard\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\021\n\tdr"
    "aw_type\030\003 \001(\005\022\030\n\020now_remain_times\030\004 \001(\005\022"
    "\036\n\026tody_remain_free_times\030\005 \001(\005\022\037\n\027tody_"
    "remain_limit_times\030\006 \001(\005\022\023\n\013total_times\030"
    "\007 \001(\005\022\025\n\rlast_opt_time\030\010 \001(\r\"i\n\031db_unit_"
    "draw_card_special\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uu"
    "id\030\002 \001(\004\022\021\n\tdraw_type\030\003 \001(\005\022\032\n\022rem_speci"
    "al_time_s\030\004 \001(\005\"C\n\021db_unit_mail_data\022\017\n\007"
    "db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\017\n\007time_id\030\004"
    " \001(\004\"\\\n\026db_unit_mail_send_data\022\017\n\007db_mod"
    "e\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\014\n\004time\030\004 \001(\r\022\025\n\rf"
    "ree_left_day\030\005 \001(\005\"\305\004\n\016role_item_data\022/\n"
    "\nitem_datas\030\001 \003(\0132\033.SProtoSpace.unit_ite"
    "m_data\022,\n\006chests\030\002 \003(\0132\034.SProtoSpace.uni"
    "t_chest_data\022D\n\024draw_card_free_times\030\003 \003"
    "(\0132&.SProtoSpace.unit_free_times_draw_ca"
    "rd\022:\n\017draw_card_limit\030\004 \003(\0132!.SProtoSpac"
    "e.unit_limit_draw_card\0223\n\010fashions\030\005 \003(\013"
    "2!.SProtoSpace.db_unit_fashion_data\0223\n\013d"
    "raw_card_s\030\006 \003(\0132\036.SProtoSpace.db_unit_d"
    "raw_card\022C\n\023draw_card_specail_s\030\007 \003(\0132&."
    "SProtoSpace.db_unit_draw_card_special\0228\n"
    "\023item_role_fashion_s\030\010 \003(\0132\033.SProtoSpace"
    ".unit_item_data\0221\n\tmail_data\030\t \003(\0132\036.SPr"
    "otoSpace.db_unit_mail_data\0226\n\tmail_send\030"
    "\n \003(\0132#.SProtoSpace.db_unit_mail_send_da"
    "ta\"N\n\nskill_data\022\023\n\013template_id\030\001 \001(\r\022\014\n"
    "\004slot\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\016\n\006unLock\030\004 \001"
    "(\005\"5\n\014db_skin_info\022\023\n\013template_id\030\001 \001(\r\022"
    "\020\n\010end_time\030\002 \001(\004\"$\n\rdb_equip_data\022\023\n\013te"
    "mplate_id\030\001 \001(\r\"\312\002\n\020unit_player_data\022\017\n\007"
    "db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\023\n\013template_"
    "id\030\003 \001(\r\022\024\n\014talent_grade\030\004 \001(\005\0222\n\nskill_"
    "data\030\005 \003(\0132\036.SProtoSpace.player_skill_in"
    "fo\022)\n\tskin_data\030\006 \001(\0132\026.SProtoSpace.skin"
    "_data\022*\n\006equips\030\007 \003(\0132\032.SProtoSpace.db_e"
    "quip_data\022-\n\013talent_data\030\010 \003(\0132\030.SProtoS"
    "pace.talent_info\022\016\n\006active\030\t \001(\010\022\"\n\003bag\030"
    "\n \001(\0132\025.SProtoSpace.bag_data\"\300\001\n\020unit_pl"
    "ayer_base\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004"
    "\022\022\n\nliked_list\030\003 \003(\004\022\014\n\004like\030\004 \001(\r\022\021\n\tsi"
    "gnature\030\005 \001(\t\0220\n\010position\030\006 \001(\0132\036.SProto"
    "Space.lsg_position_info\022\026\n\016show_hero_lis"
    "t\030\007 \003(\004\022\016\n\006border\030\010 \001(\r\"B\n\020role_player_d"
    "ata\022.\n\007players\030\001 \003(\0132\035.SProtoSpace.unit_"
    "player_data\"@\n\016role_show_data\022.\n\tshow_in"
    "fo\030\001 \003(\0132\033.SProtoSpace.role_show_info\",\n"
    "\016hero_soul_data\022\014\n\004uuid\030\001 \001(\004\022\014\n\004slot\030\002 "
    "\001(\005\"\034\n\010bag_data\022\020\n\010item_ids\030\001 \003(\004\"\363\003\n\016un"
    "it_hero_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 "
    "\001(\004\022\023\n\013template_id\030\003 \001(\r\022\n\n\002lv\030\004 \001(\005\022\014\n\004"
    "star\030\005 \001(\005\022\017\n\007quality\030\006 \001(\005\022\016\n\006awaken\030\007 "
    "\001(\010\022\013\n\003exp\030\010 \001(\005\022\016\n\006locked\030\t \001(\010\022\023\n\013crea"
    "te_time\030\n \001(\r\022)\n\tskin_info\030\013 \001(\0132\026.SProt"
    "oSpace.skin_data\022\'\n\006skills\030\014 \003(\0132\027.SProt"
    "oSpace.skill_data\022*\n\005souls\030\r \003(\0132\033.SProt"
    "oSpace.hero_soul_data\0221\n\013awaken_attr\030\016 \003"
    "(\0132\034.SProtoSpace.hero_attr_value\022\014\n\004name"
    "\030\017 \001(\t\022,\n\006equips\030\020 \003(\0132\034.SProtoSpace.her"
    "o_equip_data\022-\n\ttalismans\030\021 \003(\0132\032.SProto"
    "Space.talisman_data\022\"\n\003bag\030\022 \001(\0132\025.SProt"
    "oSpace.bag_data\"k\n\023unit_formation_data\022\017"
    "\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\014\n\004type\030\003 "
    "\001(\005\022\020\n\010hero_ids\030\004 \003(\004\022\025\n\rrole_position\030\005"
    " \001(\005\"c\n\022unit_role_pet_data\022\017\n\007db_mode\030\001 "
    "\001(\r\022\014\n\004uuid\030\002 \001(\004\022.\n\010pet_data\030\003 \001(\0132\034.SP"
    "rotoSpace.pet_single_data\"\223\001\n\021unit_role_"
    "pet_all\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\026"
    "\n\016out_time_today\030\003 \001(\005\022\027\n\017last_reset_tim"
    "e\030\004 \001(\r\022\025\n\rnext_out_time\030\005 \001(\r\022\027\n\017cur_sh"
    "ow_pet_id\030\006 \001(\005\"\323\001\n\016role_hero_data\022*\n\005he"
    "ros\030\001 \003(\0132\033.SProtoSpace.unit_hero_data\0224"
    "\n\nformations\030\002 \003(\0132 .SProtoSpace.unit_fo"
    "rmation_data\022.\n\005pet_s\030\003 \003(\0132\037.SProtoSpac"
    "e.unit_role_pet_data\022/\n\007pet_all\030\004 \003(\0132\036."
    "SProtoSpace.unit_role_pet_all\"W\n\017unit_qu"
    "est_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022"
    "%\n\004data\030\003 \001(\0132\027.SProtoSpace.quest_data\"X"
    "\n\022unit_activity_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n"
    "\004uuid\030\002 \001(\004\022\023\n\013activity_id\030\003 \001(\005\022\016\n\006fini"
    "sh\030\004 \001(\010\"]\n\032unit_achieve_pt_award_data\022\017"
    "\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\020\n\010award_i"
    "d\030\003 \001(\005\022\016\n\006finish\030\004 \001(\010\"\260\001\n\017role_quest_d"
    "ata\022,\n\006quests\030\001 \003(\0132\034.SProtoSpace.unit_q"
    "uest_data\0223\n\nactivities\030\002 \003(\0132\037.SProtoSp"
    "ace.unit_activity_data\022:\n\tpt_awards\030\003 \003("
    "\0132\'.SProtoSpace.unit_achieve_pt_award_da"
    "ta\"7\n\014db_drop_spid\022\n\n\002id\030\001 \001(\005\022\014\n\004step\030\002"
    " \001(\005\022\r\n\005value\030\003 \001(\005\"L\n\016unit_soul_attr\022\023\n"
    "\013template_id\030\001 \001(\r\022\022\n\ninit_value\030\002 \001(\005\022\021"
    "\n\tcur_value\030\003 \001(\005\"\325\001\n\016unit_soul_data\022\017\n\007"
    "db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\023\n\013template_"
    "id\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\014\n\004mask\030\005 \001(\r\022\023\n\013c"
    "reate_time\030\006 \001(\r\022/\n\nmain_attrs\030\007 \003(\0132\033.S"
    "ProtoSpace.unit_soul_attr\022.\n\tadd_attrs\030\010"
    " \003(\0132\033.SProtoSpace.unit_soul_attr\"<\n\016rol"
    "e_soul_data\022*\n\005souls\030\001 \003(\0132\033.SProtoSpace"
    ".unit_soul_data\"a\n\022unit_discover_data\022\017\n"
    "\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022,\n\010discover"
    "\030\003 \001(\0132\032.SProtoSpace.discover_data\"\216\001\n\021u"
    "nit_chapter_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uui"
    "d\030\002 \001(\004\022\n\n\002id\030\003 \001(\005\022\023\n\013simple_open\030\004 \001(\010"
    "\022\021\n\tdiff_open\030\005 \001(\010\022\023\n\013simple_pass\030\006 \001(\010"
    "\022\021\n\tdiff_pass\030\007 \001(\010\"m\n\021res_instance_data"
    "\022\026\n\016instance_index\030\001 \001(\r\022\023\n\013level_index\030"
    "\002 \001(\005\022+\n\004boss\030\003 \003(\0132\035.SProtoSpace.discov"
    "er_monster\"e\n\026unit_res_instance_data\022\017\n\007"
    "db_mode\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022,\n\004data\030\003 \001("
    "\0132\036.SProtoSpace.res_instance_data\"X\n\026uni"
    "t_section_star_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004"
    "uuid\030\002 \001(\004\022\014\n\004type\030\003 \001(\r\022\021\n\treward_id\030\004 "
    "\001(\005\"\257\001\n\017unit_tower_data\022\017\n\007db_mode\030\001 \001(\r"
    "\022\014\n\004uuid\030\002 \001(\004\022\024\n\tmax_floor\030\003 \001(\r:\0010\022\026\n\013"
    "reset_times\030\004 \001(\r:\0011\022\024\n\tcur_floor\030\005 \001(\r:"
    "\0011\022\020\n\010cur_step\030\006 \001(\r\022\020\n\010first_in\030\007 \001(\010\022\025"
    "\n\rstep_has_pass\030\010 \001(\010\"5\n\017hero_event_info"
    "\022\017\n\007hero_id\030\001 \001(\005\022\021\n\tevent_ids\030\002 \003(\005\"5\n\017"
    "city_event_info\022\017\n\007city_id\030\001 \001(\005\022\021\n\teven"
    "t_ids\030\002 \003(\005\"I\n\022special_event_data\022\020\n\010eve"
    "nt_id\030\001 \001(\005\022\020\n\010shi_chen\030\002 \001(\005\022\017\n\007weather"
    "\030\003 \001(\005\"\263\002\n\runit_adv_data\022\017\n\007db_mode\030\001 \001("
    "\r\022\014\n\004uuid\030\002 \001(\004\022\020\n\010city_ids\030\005 \003(\005\022\021\n\teve"
    "nt_ids\030\006 \003(\005\0221\n\013hero_favors\030\007 \003(\0132\034.SPro"
    "toSpace.hero_favor_info\0221\n\013hero_events\030\010"
    " \003(\0132\034.SProtoSpace.hero_event_info\0221\n\013ci"
    "ty_events\030\t \003(\0132\034.SProtoSpace.city_event"
    "_info\022\023\n\013cur_ask_ids\030\n \003(\005\0220\n\007sp_data\030\013 "
    "\003(\0132\037.SProtoSpace.special_event_data\"0\n\017"
    "guide_step_data\022\017\n\007step_id\030\001 \001(\005\022\014\n\004skip"
    "\030\002 \001(\010\"\201\001\n\017unit_guide_data\022\017\n\007db_mode\030\001 "
    "\001(\r\022\014\n\004uuid\030\002 \001(\004\022\020\n\010guide_id\030\003 \001(\005\022\014\n\004s"
    "kip\030\004 \001(\010\022/\n\tstep_data\030\005 \003(\0132\034.SProtoSpa"
    "ce.guide_step_data\"o\n\032unit_plot_little_g"
    "ame_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022"
    "2\n\004data\030\003 \001(\0132$.SProtoSpace.single_plot_"
    "little_game\"\372\003\n\017role_level_data\0222\n\tdisco"
    "vers\030\001 \003(\0132\037.SProtoSpace.unit_discover_d"
    "ata\0220\n\010chapters\030\002 \003(\0132\036.SProtoSpace.unit"
    "_chapter_data\0225\n\010res_data\030\003 \003(\0132#.SProto"
    "Space.unit_res_instance_data\0225\n\tplot_dat"
    "a\030\004 \003(\0132\".SProtoSpace.unit_plot_screen_d"
    "ata\0229\n\014section_star\030\005 \003(\0132#.SProtoSpace."
    "unit_section_star_data\0220\n\ntower_data\030\006 \003"
    "(\0132\034.SProtoSpace.unit_tower_data\022,\n\010adv_"
    "data\030\007 \003(\0132\032.SProtoSpace.unit_adv_data\0220"
    "\n\nguide_data\030\010 \003(\0132\034.SProtoSpace.unit_gu"
    "ide_data\022F\n\025plot_little_game_data\030\t \003(\0132"
    "\'.SProtoSpace.unit_plot_little_game_data"
    "\"q\n\017unit_royal_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004"
    "uuid\030\002 \001(\004\022\021\n\tconfig_id\030\003 \001(\r\022\026\n\016intimac"
    "y_value\030\005 \001(\r\022\024\n\014has_received\030\010 \003(\r\"[\n\016r"
    "oyal_opt_info\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002"
    " \001(\004\022\025\n\rrefresh_times\030\007 \001(\r\022\023\n\013visit_tim"
    "es\030\010 \001(\r\"k\n\017role_royal_data\022,\n\006royals\030\001 "
    "\003(\0132\034.SProtoSpace.unit_royal_data\022*\n\005inf"
    "os\030\002 \003(\0132\033.SProtoSpace.royal_opt_info\"\242\001"
    "\n\017royal_task_data\022\020\n\010max_step\030\001 \001(\005\022\020\n\010c"
    "ur_step\030\002 \001(\005\022\021\n\tconfig_id\030\003 \001(\r\022\014\n\004star"
    "\030\004 \001(\r\022-\n\006status\030\005 \001(\0162\035.SProtoSpace.ERo"
    "yalTaskStatus\022\r\n\005value\030\006 \001(\005\022\014\n\004type\030\007 \001"
    "(\005\"\214\001\n\025friend_operation_info\022\017\n\007db_mode\030"
    "\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\022\n\ngive_times\030\003 \001(\r\022"
    "\022\n\ndraw_times\030\004 \001(\r\022\022\n\naccept_ids\030\005 \003(\004\022"
    "\030\n\020last_search_time\030\006 \001(\r\"I\n\020unit_friend"
    "_data\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\026\n\016"
    "intimacy_value\030\003 \001(\r\"B\n\017unit_black_data\022"
    "\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\020\n\010role_i"
    "ds\030\003 \003(\004\"E\n\020give_record_info\022\017\n\007db_mode\030"
    "\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\022\n\nfriend_ids\030\003 \003(\004\""
    "\344\001\n\020role_friend_data\022:\n\016operation_info\030\001"
    " \003(\0132\".SProtoSpace.friend_operation_info"
    "\022/\n\tblacklist\030\002 \003(\0132\034.SProtoSpace.unit_b"
    "lack_data\022.\n\007friends\030\003 \003(\0132\035.SProtoSpace"
    ".unit_friend_data\0223\n\014give_records\030\004 \003(\0132"
    "\035.SProtoSpace.give_record_info\"z\n\024db_sho"
    "p_refresh_info\022\035\n\022user_refresh_times\030\001 \001"
    "(\005:\0010\022!\n\026last_user_refresh_time\030\002 \001(\004:\0010"
    "\022 \n\025last_sys_refresh_time\030\003 \001(\004:\0010\"Q\n\021db"
    "_shop_item_info\022\026\n\016sale_config_id\030\001 \001(\r\022"
    "\017\n\007item_id\030\002 \001(\r\022\023\n\013buy_cur_num\030\003 \001(\r\"\224\001"
    "\n\017buy_record_info\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uu"
    "id\030\002 \001(\004\022\031\n\016sale_config_id\030\003 \001(\005:\0010\022\031\n\016f"
    "irst_buy_time\030\004 \001(\r:\0010\022\030\n\rlast_buy_time\030"
    "\005 \001(\r:\0010\022\022\n\007buy_num\030\006 \001(\005:\0010\"\254\001\n\016unit_sh"
    "op_info\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\021"
    "\n\tconfig_id\030\003 \001(\005\0227\n\014refresh_info\030\004 \001(\0132"
    "!.SProtoSpace.db_shop_refresh_info\022/\n\nit"
    "em_infos\030\005 \003(\0132\033.SProtoSpace.shop_item_i"
    "nfo\"u\n\016role_shop_data\022/\n\nshop_infos\030\001 \003("
    "\0132\033.SProtoSpace.unit_shop_info\0222\n\014record"
    "_infos\030\002 \003(\0132\034.SProtoSpace.buy_record_in"
    "fo\"\337\001\n\022harem_compete_info\022\017\n\007db_mode\030\001 \001"
    "(\r\022\014\n\004uuid\030\002 \001(\004\022\024\n\014qingan_times\030\003 \001(\r\022\022"
    "\n\nslap_times\030\004 \001(\r\022\020\n\010end_time\030\005 \001(\004\022,\n\010"
    "progress\030\006 \001(\0162\032.SProtoSpace.ESLAPPROGRE"
    "SS\022\026\n\016red_point_time\030\007 \003(\004\022(\n\005infos\030\010 \003("
    "\0132\031.SProtoSpace.tribute_info\"@\n\017role_har"
    "em_data\022-\n\004info\030\001 \003(\0132\037.SProtoSpace.hare"
    "m_compete_info\"]\n\023growing_flower_info\022\017\n"
    "\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022\023\n\013template"
    "_id\030\003 \001(\005\022\022\n\ncur_status\030\004 \001(\005\"Y\n\020unit_fl"
    "ower_info\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004"
    "\022\023\n\013template_id\030\003 \001(\005\022\021\n\tcount_num\030\004 \001(\005"
    "\"t\n\020role_flower_data\022+\n\004info\030\001 \003(\0132\035.SPr"
    "otoSpace.unit_flower_info\0223\n\tgrow_info\030\002"
    " \003(\0132 .SProtoSpace.growing_flower_info\"\307"
    "\001\n\025unit_plot_screen_data\022\017\n\007db_mode\030\001 \001("
    "\r\022\014\n\004uuid\030\002 \001(\004\022\022\n\nchapter_id\030\003 \001(\r\022\021\n\ts"
    "creen_id\030\004 \001(\r\022\022\n\nbranch_ids\030\005 \003(\r\022\023\n\013se"
    "ction_ids\030\006 \003(\005\022\023\n\013get_end_ids\030\007 \003(\r\022\022\n\n"
    "action_ids\030\010 \003(\r\022\026\n\016chapter_is_end\030\t \001(\010"
    "\"\217\001\n\022officer_apply_info\022\017\n\007db_mode\030\001 \001(\r"
    "\022\014\n\004uuid\030\002 \001(\004\022\021\n\tcur_grade\030\003 \001(\r\022\022\n\napp"
    "ly_time\030\004 \001(\004\022\022\n\ncheck_time\030\005 \001(\004\022\013\n\003ret"
    "\030\006 \001(\010\022\022\n\nnext_grade\030\007 \001(\r\"\312\001\n\021officer_b"
    "ase_info\022\017\n\007db_mode\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\004\022"
    "\021\n\tcur_grade\030\003 \001(\r\022\021\n\tmax_grade\030\004 \001(\r\022\023\n"
    "\013apply_grade\030\005 \001(\r\022\022\n\napply_time\030\006 \001(\004\022\017"
    "\n\007is_draw\030\007 \001(\010\022\026\n\016last_draw_time\030\010 \001(\004\022"
    "\036\n\026daily_offical_chal_num\030\t \001(\005\"s\n\021role_"
    "officer_data\022/\n\006applys\030\001 \003(\0132\037.SProtoSpa"
    "ce.officer_apply_info\022-\n\005infos\030\002 \003(\0132\036.S"
    "ProtoSpace.officer_base_info\"\252\002\n\032offical"
    "_battle_report_data\022\017\n\007role_id\030\001 \001(\004\022\013\n\003"
    "win\030\002 \001(\010\022\023\n\013attacker_id\030\003 \001(\004\022\037\n\027attack"
    "er_old_ranking_id\030\004 \001(\005\022\037\n\027attacker_new_"
    "ranking_id\030\005 \001(\005\022\031\n\021my_old_ranking_id\030\006 "
    "\001(\005\022\031\n\021my_new_ranking_id\030\007 \001(\005\022\023\n\013battle"
    "_time\030\010 \001(\005\022\021\n\tbattle_id\030\t \001(\004\022\r\n\005grade\030"
    "\n \001(\005\022*\n\005heros\030\013 \003(\0132\033.SProtoSpace.hero_"
    "base_info\"b\n\025offical_battle_report\022\017\n\007ro"
    "le_id\030\001 \001(\004\0228\n\007reports\030\002 \003(\0132\'.SProtoSpa"
    "ce.offical_battle_report_data\"\232\001\n\034db_off"
    "ical_apply_battle_data\022;\n\013battle_data\030\001 "
    "\001(\0132&.SProtoSpace.offical_apply_battle_d"
    "ata\022=\n\nmy_records\030\002 \003(\0132).SProtoSpace.of"
    "fical_apply_my_battle_data\"\210\001\n\036offical_a"
    "pply_battle_result_db\022&\n\toffice_lv\030\001 \001(\016"
    "2\023.SProtoSpace.EGrade\022>\n\013battle_data\030\002 \003"
    "(\0132).SProtoSpace.db_offical_apply_battle"
    "_data\"b\n\"all_offical_apply_battle_result"
    "_db\022<\n\007results\030\001 \003(\0132+.SProtoSpace.offic"
    "al_apply_battle_result_db\"S\n\033db_offical_"
    "result_rank_data\0224\n\004data\030\001 \003(\0132&.SProtoS"
    "pace.offical_apply_battle_data\"e\n\031db_my_"
    "offical_result_data\022\r\n\005grade\030\001 \001(\005\0229\n\006my"
    "data\030\002 \003(\0132).SProtoSpace.offical_apply_m"
    "y_battle_data\"K\n\017offical_rank_db\022&\n\toffi"
    "ce_lv\030\001 \001(\0162\023.SProtoSpace.EGrade\022\020\n\010role"
    "_ids\030\002 \003(\004\"B\n\023all_offical_rank_db\022+\n\005ran"
    "ks\030\001 \003(\0132\034.SProtoSpace.offical_rank_db\"s"
    "\n\024db_unit_fashion_data\022\017\n\007db_mode\030\001 \001(\r\022"
    "\014\n\004uuid\030\002 \001(\004\022\021\n\tconfig_id\030\003 \001(\005\022)\n\005stat"
    "e\030\004 \001(\0162\032.SProtoSpace.FASHION_STATE\"H\n\021r"
    "ole_fashion_data\0223\n\010fashions\030\003 \003(\0132!.SPr"
    "otoSpace.db_unit_fashion_data\"\256\005\n\020db_rol"
    "e_all_data\022.\n\tbase_data\030\001 \001(\0132\033.SProtoSp"
    "ace.role_base_data\022.\n\titem_data\030\002 \001(\0132\033."
    "SProtoSpace.role_item_data\0222\n\013player_dat"
    "a\030\003 \001(\0132\035.SProtoSpace.role_player_data\022."
    "\n\thero_data\030\004 \001(\0132\033.SProtoSpace.role_her"
    "o_data\022.\n\tsoul_data\030\005 \001(\0132\033.SProtoSpace."
    "role_soul_data\0220\n\nlevel_data\030\006 \001(\0132\034.SPr"
    "otoSpace.role_level_data\0220\n\nquest_data\030\007"
    " \001(\0132\034.SProtoSpace.role_quest_data\0220\n\nro"
    "yal_data\030\010 \001(\0132\034.SProtoSpace.role_royal_"
    "data\022.\n\tshow_data\030\t \001(\0132\033.SProtoSpace.ro"
    "le_show_data\0222\n\013friend_data\030\n \001(\0132\035.SPro"
    "toSpace.role_friend_data\022.\n\tshop_data\030\013 "
    "\001(\0132\033.SProtoSpace.role_shop_data\0220\n\nhare"
    "m_data\030\014 \001(\0132\034.SProtoSpace.role_harem_da"
    "ta\0222\n\013flower_data\030\r \001(\0132\035.SProtoSpace.ro"
    "le_flower_data\022\026\n\016last_used_time\030\016 \001(\r\"\274"
    "\003\n\017redis_role_base\022\014\n\004uuid\030\002 \001(\004\022\n\n\002lv\030\003"
    " \001(\r\022\014\n\004name\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\014\n\004like\030"
    "\006 \001(\r\022\r\n\005title\030\007 \001(\r\022\022\n\npartner_id\030\010 \001(\004"
    "\022\024\n\014partner_name\030\t \001(\t\022\016\n\006office\030\n \001(\r\022\021"
    "\n\tfimily_id\030\013 \001(\004\022\023\n\013fimily_name\030\014 \001(\t\022\021"
    "\n\tsignature\030\r \001(\t\0220\n\010position\030\016 \001(\0132\036.SP"
    "rotoSpace.lsg_position_info\022\022\n\nliked_lis"
    "t\030\020 \003(\004\022\016\n\006border\030\022 \001(\r\022(\n\010birthday\030\023 \001("
    "\0132\026.SProtoSpace.date_info\022\024\n\tstar_sign\030\024"
    " \001(\r:\0011\022\025\n\npopularity\030\025 \001(\r:\0010\022\020\n\005charm\030"
    "\026 \001(\r:\0010\022\016\n\006labels\030\027 \003(\r\022\023\n\013fight_value\030"
    "\030 \001(\r\"h\n\024redis_role_show_hero\0225\n\016show_he"
    "ro_list\030\017 \003(\0132\035.SProtoSpace.battle_hero_"
    "info\022\031\n\021show_hero_id_list\030\021 \003(\004\"Q\n\026redis"
    "_role_battle_hero\0227\n\020battle_hero_list\030\017 "
    "\003(\0132\035.SProtoSpace.battle_hero_info\"S\n\021re"
    "dis_comment_all\022/\n\014comment_list\030\001 \003(\0132\031."
    "SProtoSpace.comment_info\022\r\n\005index\030\002 \001(\005\""
    "\356\001\n\017redis_role_data\022/\n\tbase_data\030\001 \001(\0132\034"
    ".SProtoSpace.redis_role_base\0229\n\016show_her"
    "o_data\030\002 \001(\0132!.SProtoSpace.redis_role_sh"
    "ow_hero\022=\n\020battle_hero_data\030\003 \001(\0132#.SPro"
    "toSpace.redis_role_battle_hero\0220\n\014fashio"
    "n_data\030\005 \001(\0132\032.SProtoSpace.fashions_pack"
    "\"\247\001\n\017arena_user_data\022\017\n\007role_id\030\001 \001(\004\022\026\n"
    "\016challenged_num\030\002 \001(\005\022\020\n\010is_robot\030\003 \001(\010\022"
    "\021\n\twin_count\030\004 \001(\005\022\022\n\nfail_count\030\005 \001(\005\0222"
    "\n\013battle_data\030\006 \001(\0132\035.SProtoSpace.battle"
    "_role_info\"\302\001\n\032db_get_redis_role_data_re"
    "q\022G\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\035db_get_redis_role_data_req_id\0222\n\004ty"
    "pe\030\002 \001(\0162$.SProtoSpace.eDBGetRedisRoleDa"
    "taType\022\017\n\007role_id\030\003 \001(\004\022\026\n\016target_role_i"
    "d\030\004 \001(\004\"\264\002\n\032db_get_redis_role_data_ack\022G"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\035db_get_redis_role_data_ack_id\0222\n\004type\030"
    "\002 \001(\0162$.SProtoSpace.eDBGetRedisRoleDataT"
    "ype\022\016\n\006result\030\003 \001(\005\022\017\n\007role_id\030\004 \001(\004\022\026\n\016"
    "target_role_id\030\005 \001(\004\022*\n\004data\030\006 \001(\0132\034.SPr"
    "otoSpace.redis_role_data\0224\n\rrole_all_dat"
    "a\030\007 \001(\0132\035.SProtoSpace.db_role_all_data\"\250"
    "\001\n\035db_update_redis_role_data_ntf\022J\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID: db_u"
    "pdate_redis_role_data_ntf_id\022\017\n\007role_id\030"
    "\002 \001(\004\022*\n\004data\030\003 \001(\0132\034.SProtoSpace.redis_"
    "role_data\"~\n\027db_check_apply_info_req\022D\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\032"
    "db_check_apply_info_req_id\022\014\n\004uuid\030\002 \001(\004"
    "\022\017\n\007area_id\030\003 \001(\r\"\242\001\n\027db_check_apply_inf"
    "o_ack\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\032db_check_apply_info_ack_id\022\014\n\004u"
    "uid\030\002 \001(\004\0223\n\013apply_infos\030\003 \003(\0132\036.SProtoS"
    "pace.friend_apply_info\"\244\001\n\026db_save_apply"
    "_info_req\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\031db_save_apply_info_req_id\022\021"
    "\n\taccept_id\030\002 \001(\004\022\020\n\010apply_id\030\003 \001(\004\022\017\n\007a"
    "rea_id\030\004 \001(\r\022\017\n\007content\030\005 \001(\t\"\236\001\n\023db_upd"
    "ate_apply_req\022A\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:\026db_update_apply_req_id"
    "\022\021\n\taccept_id\030\002 \001(\004\022\020\n\010apply_id\030\003 \001(\004\022\017\n"
    "\007area_id\030\004 \001(\r\022\016\n\006status\030\005 \001(\r\"\207\001\n\031db_pr"
    "ocess_apply_info_req\022G\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\034db_process_appl"
    "y_info_req_id\022\020\n\010apply_id\030\002 \001(\004\022\017\n\007area_"
    "id\030\003 \001(\r\"\247\001\n\031db_process_apply_info_ack\022G"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\034db_process_apply_info_ack_id\022\014\n\004uuid\030"
    "\002 \001(\004\0223\n\013apply_infos\030\003 \003(\0132\036.SProtoSpace"
    ".friend_apply_info\"\230\001\n\024db_search_friend_"
    "req\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\027db_search_friend_req_id\022\014\n\004uuid\030"
    "\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\017\n\007"
    "content\030\005 \001(\t\"\242\001\n\024db_search_friend_ack\022B"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\027db_search_friend_ack_id\022\014\n\004uuid\030\002 \001(\004"
    "\022\013\n\003ret\030\003 \001(\r\022+\n\004info\030\004 \001(\0132\035.SProtoSpac"
    "e.friend_base_info\"\257\001\n\026db_save_friend_op"
    "t_req\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\031db_save_friend_opt_req_id\022\014\n\004u"
    "uid\030\002 \001(\004\022\021\n\ttarget_id\030\003 \001(\004\022\014\n\004type\030\004 \001"
    "(\r\022\020\n\010opt_time\030\005 \001(\004\022\016\n\006status\030\006 \001(\r\"b\n\017"
    "opt_record_info\022\014\n\004uuid\030\001 \001(\004\022\021\n\ttarget_"
    "id\030\002 \001(\004\022\014\n\004type\030\003 \001(\r\022\020\n\010opt_time\030\004 \001(\004"
    "\022\016\n\006status\030\005 \001(\r\"\177\n\027db_check_opt_record_"
    "req\022E\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\032db_check_opt_record_req_id\022\014\n\004uu"
    "id\030\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\"\254\001\n\027db_check_o"
    "pt_record_ack\022E\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:\032db_check_opt_record_ac"
    "k_id\022\014\n\004uuid\030\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\022+\n\005i"
    "nfos\030\004 \003(\0132\034.SProtoSpace.opt_record_info"
    "\"\256\001\n\030db_update_opt_record_req\022F\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033db_upd"
    "ate_opt_record_req_id\022\014\n\004uuid\030\002 \001(\004\022\017\n\007a"
    "rea_id\030\003 \001(\r\022+\n\005infos\030\004 \003(\0132\034.SProtoSpac"
    "e.opt_record_info\"\316\001\n\033db_get_recommend_f"
    "riend_req\022I\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\036db_get_recommend_friend_re"
    "q_id\022\014\n\004uuid\030\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\022\n\n\002l"
    "v\030\004 \001(\r\022\r\n\005grade\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\r\n\005c"
    "ount\030\007 \001(\r\022\016\n\006fd_ids\030\010 \003(\004\"\270\001\n\033db_get_re"
    "commend_friend_ack\022I\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\036db_get_recommend_"
    "friend_ack_id\022\014\n\004uuid\030\002 \001(\004\022\017\n\007area_id\030\003"
    " \001(\r\022/\n\010fd_infos\030\004 \003(\0132\035.SProtoSpace.fri"
    "end_base_info\"\204\002\n\024gs_get_role_data_req\022A"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\027gs_get_role_data_req_id\022\017\n\007role_id\030\002 \001"
    "(\004\022\017\n\007gate_id\030\003 \001(\004\022\017\n\007area_id\030\004 \001(\r\022\023\n\013"
    "online_type\030\005 \001(\r\022\025\n\rnew_db_svr_id\030\006 \001(\004"
    "\022\036\n\017is_switch_scene\030\007 \001(\010:\005false\022\023\n\010scen"
    "e_id\030\010 \001(\r:\0010\022\025\n\nscene_type\030\t \001(\r:\0010\"\244\002\n"
    "\020db_role_data_ack\022=\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\023db_role_data_ack_id"
    "\022\020\n\010ret_code\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022\017\n\007g"
    "ate_id\030\004 \001(\004\022\017\n\007area_id\030\005 \001(\r\022\023\n\013online_"
    "type\030\006 \001(\010\022+\n\004data\030\007 \001(\0132\035.SProtoSpace.d"
    "b_role_all_data\022\036\n\017is_switch_scene\030\010 \001(\010"
    ":\005false\022\023\n\010scene_id\030\t \001(\r:\0010\022\025\n\nscene_ty"
    "pe\030\n \001(\r:\0010\"f\n\022gs_role_leave_game\022\?\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025gs_"
    "role_leave_game_id\022\017\n\007role_id\030\002 \001(\004\"\263\001\n\r"
    "save_role_req\022:\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\020save_role_req_id\022\017\n\007rol"
    "e_id\030\002 \001(\004\022+\n\004data\030\003 \001(\0132\035.SProtoSpace.d"
    "b_role_all_data\022(\n\004mode\030\004 \001(\0162\032.SProtoSp"
    "ace.ESaveDataMode\"\202\001\n\025db_role_show_like_"
    "req\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:\030db_role_show_like_req_id\022\017\n\007role_"
    "id\030\002 \001(\004\022\024\n\014show_role_id\030\003 \001(\004\"\241\001\n\025db_ro"
    "le_show_like_ack\022B\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\030db_role_show_like_ac"
    "k_id\022\016\n\006result\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022\024\n"
    "\014show_role_id\030\004 \001(\004\022\r\n\005likes\030\005 \001(\005\"\264\001\n\030d"
    "b_role_show_comment_req\022E\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\033db_role_show_"
    "comment_req_id\022\017\n\007role_id\030\002 \001(\004\022\024\n\014show_"
    "role_id\030\003 \001(\004\022*\n\007comment\030\004 \001(\0132\031.SProtoS"
    "pace.comment_info\"\304\001\n\030db_role_show_comme"
    "nt_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\033db_role_show_comment_ack_id\022\016\n"
    "\006result\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022\024\n\014show_r"
    "ole_id\030\004 \001(\004\022*\n\007comment\030\005 \001(\0132\031.SProtoSp"
    "ace.comment_info\"\270\001\n\037db_role_show_delete"
    "_comment_req\022L\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID:\"db_role_show_delete_comm"
    "ent_req_id\022\024\n\014show_role_id\030\002 \001(\004\022\017\n\007role"
    "_id\030\003 \001(\004\022\022\n\nto_role_id\030\004 \001(\004\022\014\n\004time\030\005 "
    "\001(\004\"\225\001\n\037db_role_show_delete_comment_ack\022"
    "L\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\"db_role_show_delete_comment_ack_id\022\016\n"
    "\006result\030\002 \001(\005\022\024\n\014show_role_id\030\003 \001(\004\"\220\001\n\034"
    "db_role_show_get_comment_req\022I\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ESSProtoID:\037db_role_"
    "show_get_comment_req_id\022\017\n\007role_id\030\002 \001(\004"
    "\022\024\n\014show_role_id\030\003 \001(\004\"\317\001\n\034db_role_show_"
    "get_comment_ack\022I\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\037db_role_show_get_comm"
    "ent_ack_id\022\016\n\006result\030\002 \001(\005\022\017\n\007role_id\030\003 "
    "\001(\004\022\024\n\014show_role_id\030\004 \001(\004\022-\n\013comment_all"
    "\030\005 \001(\0132\030.SProtoSpace.comment_all\"\235\001\n\034db_"
    "role_show_change_name_req\022I\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\037db_role_sho"
    "w_change_name_req_id\022\017\n\007account\030\002 \001(\t\022\017\n"
    "\007role_id\030\003 \001(\004\022\020\n\010new_name\030\004 \001(\t\"\234\001\n\034db_"
    "role_show_change_name_ack\022I\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\037db_role_sho"
    "w_change_name_ack_id\022\016\n\006result\030\002 \001(\005\022\017\n\007"
    "role_id\030\003 \001(\004\022\020\n\010new_name\030\004 \001(\t\"\212\001\n\031db_r"
    "ole_show_get_like_req\022F\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\034db_role_show_ge"
    "t_like_req_id\022\017\n\007role_id\030\002 \001(\004\022\024\n\014show_r"
    "ole_id\030\003 \001(\004\"\251\001\n\031db_role_show_get_like_a"
    "ck\022F\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\034db_role_show_get_like_ack_id\022\016\n\006re"
    "sult\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022\024\n\014show_role"
    "_id\030\004 \001(\004\022\r\n\005likes\030\005 \001(\005\"\264\001\n\034db_role_sho"
    "w_get_emotion_req\022I\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\037db_role_show_get_em"
    "otion_req_id\022\017\n\007role_id\030\002 \001(\004\022\024\n\014show_ro"
    "le_id\030\003 \001(\004\022\023\n\013start_index\030\004 \001(\r\022\r\n\005coun"
    "t\030\005 \001(\r\"\326\001\n\034db_role_show_get_emotion_ack"
    "\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\037db_role_show_get_emotion_ack_id\022\017\n\007r"
    "ole_id\030\002 \001(\004\022\024\n\014show_role_id\030\003 \001(\004\0227\n\013em"
    "otion_all\030\004 \001(\0132\".SProtoSpace.show_emoti"
    "on_all_info\022\013\n\003ret\030\005 \001(\r\"\335\001\n\036db_role_sho"
    "w_write_emotion_req\022K\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:!db_role_show_writ"
    "e_emotion_req_id\022\017\n\007role_id\030\002 \001(\004\022\023\n\013msg"
    "_content\030\003 \001(\t\022\020\n\010img_urls\030\004 \003(\t\022*\n\010msg_"
    "type\030\005 \001(\0162\030.SProtoSpace.EmotionType\022\n\n\002"
    "id\030\006 \001(\004\"\207\002\n\036db_role_show_write_emotion_"
    "ack\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:!db_role_show_write_emotion_ack_id"
    "\022\013\n\003ret\030\002 \001(\r\022\022\n\nemotion_id\030\003 \001(\004\022\017\n\007rol"
    "e_id\030\005 \001(\004\022\023\n\013msg_content\030\006 \001(\t\022\020\n\010img_u"
    "rls\030\007 \003(\t\022*\n\010msg_type\030\010 \001(\0162\030.SProtoSpac"
    "e.EmotionType\022\023\n\013create_time\030\t \001(\004\"\271\001\n\035d"
    "b_role_show_like_emotion_req\022J\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ESSProtoID: db_role_"
    "show_like_emotion_req_id\022\017\n\007role_id\030\002 \001("
    "\004\022\021\n\trole_name\030\003 \001(\t\022\022\n\nemotion_id\030\004 \001(\004"
    "\022\024\n\014show_role_id\030\005 \001(\004\"\306\001\n\035db_role_show_"
    "like_emotion_ack\022J\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID: db_role_show_like_em"
    "otion_ack_id\022\013\n\003ret\030\002 \001(\r\022\017\n\007role_id\030\003 \001"
    "(\004\022\021\n\trole_name\030\004 \001(\t\022\022\n\nemotion_id\030\005 \001("
    "\004\022\024\n\014show_role_id\030\006 \001(\004\"\200\002\n db_role_show"
    "_comment_emotion_req\022M\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:#db_role_show_com"
    "ment_emotion_req_id\022\017\n\007from_id\030\002 \001(\004\022\021\n\t"
    "from_name\030\003 \001(\t\022\r\n\005to_id\030\004 \001(\004\022\017\n\007to_nam"
    "e\030\005 \001(\t\022\023\n\013msg_content\030\006 \001(\t\022\024\n\014show_rol"
    "e_id\030\007 \001(\004\022\022\n\nemotion_id\030\010 \001(\004\022\n\n\002id\030\t \001"
    "(\004\"\215\002\n db_role_show_comment_emotion_ack\022"
    "M\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:#db_role_show_comment_emotion_ack_id\022\017"
    "\n\007from_id\030\002 \001(\004\022\021\n\tfrom_name\030\003 \001(\t\022\r\n\005to"
    "_id\030\004 \001(\004\022\017\n\007to_name\030\005 \001(\t\022\023\n\013msg_conten"
    "t\030\006 \001(\t\022\024\n\014show_role_id\030\007 \001(\004\022\022\n\nemotion"
    "_id\030\010 \001(\004\022\013\n\003ret\030\t \001(\r\022\n\n\002id\030\n \001(\004\"\224\001\n\037d"
    "b_role_show_remove_emotion_req\022L\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\"db_rol"
    "e_show_remove_emotion_req_id\022\017\n\007role_id\030"
    "\002 \001(\004\022\022\n\nemotion_id\030\003 \001(\004\"\241\001\n\037db_role_sh"
    "ow_remove_emotion_ack\022L\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\"db_role_show_re"
    "move_emotion_ack_id\022\022\n\nemotion_id\030\002 \001(\004\022"
    "\013\n\003ret\030\003 \001(\r\022\017\n\007role_id\030\004 \001(\004\"\336\001\n\037db_rol"
    "e_show_remove_comment_req\022L\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\"db_role_sho"
    "w_remove_comment_req_id\022\017\n\007from_id\030\002 \001(\004"
    "\022\r\n\005to_id\030\003 \001(\004\022\024\n\014show_role_id\030\004 \001(\004\022\022\n"
    "\nemotion_id\030\005 \001(\004\022\022\n\ncomment_id\030\006 \001(\004\022\017\n"
    "\007role_id\030\007 \001(\004\"\353\001\n\037db_role_show_remove_c"
    "omment_ack\022L\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\"db_role_show_remove_commen"
    "t_ack_id\022\017\n\007from_id\030\002 \001(\004\022\r\n\005to_id\030\003 \001(\004"
    "\022\024\n\014show_role_id\030\004 \001(\004\022\022\n\nemotion_id\030\005 \001"
    "(\004\022\022\n\ncomment_id\030\006 \001(\004\022\013\n\003ret\030\007 \001(\r\022\017\n\007r"
    "ole_id\030\010 \001(\004\"\244\001\n\027db_role_battle_info_req"
    "\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\032db_role_battle_info_req_id\022\014\n\004type\030\002"
    " \001(\005\022\017\n\007role_id\030\003 \001(\004\022\021\n\tbattle_id\030\004 \001(\005"
    "\022\021\n\tmodule_id\030\005 \001(\005\"\341\001\n\027db_role_battle_i"
    "nfo_ack\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\032db_role_battle_info_ack_id\022\016\n"
    "\006result\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\017\n\007role_id\030\004"
    " \001(\004\022+\n\004info\030\005 \001(\0132\035.SProtoSpace.battle_"
    "role_info\022\021\n\tbattle_id\030\006 \001(\005\022\021\n\tmodule_i"
    "d\030\007 \001(\005\"\203\001\n\030db_account_role_data_req\022E\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033"
    "db_account_role_data_req_id\022\017\n\007account\030\002"
    " \001(\t\022\017\n\007area_id\030\003 \001(\r\"\262\001\n\030db_account_rol"
    "e_data_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\033db_account_role_data_ack_i"
    "d\022\017\n\007account\030\002 \001(\t\022\020\n\010ret_code\030\003 \001(\r\022,\n\004"
    "data\030\004 \001(\0132\036.SProtoSpace.account_role_da"
    "ta\"\244\001\n\026db_create_role_of_game\022C\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031db_crea"
    "te_role_of_game_id\022\017\n\007account\030\002 \001(\t\022\017\n\007a"
    "rea_id\030\003 \001(\r\022\021\n\trole_name\030\004 \001(\t\022\020\n\010role_"
    "sex\030\005 \001(\005\"\246\001\n\022db_create_role_ack\022\?\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025db_c"
    "reate_role_ack_id\022\020\n\010ret_code\030\002 \001(\005\022\017\n\007a"
    "ccount\030\003 \001(\t\022,\n\004data\030\004 \001(\0132\036.SProtoSpace"
    ".account_role_data\"\212\001\n\022game_role_info_re"
    "q\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\025game_role_info_req_id\022\021\n\tclient_id\030"
    "\002 \001(\r\022\017\n\007account\030\003 \001(\t\022\017\n\007game_id\030\004 \001(\r\""
    "\302\001\n\022game_role_info_ack\022\?\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ESSProtoID:\025game_role_info"
    "_ack_id\022\021\n\tclient_id\030\002 \001(\r\022\017\n\007account\030\003 "
    "\001(\t\022\017\n\007game_id\030\004 \001(\r\022\017\n\007role_id\030\005 \001(\004\022\021\n"
    "\trole_name\030\006 \001(\t\022\022\n\ncan_ignore\030\007 \001(\010\"\205\001\n"
    "\032db_check_harem_compete_req\022H\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ESSProtoID:\035db_check"
    "_harem_compete_req_id\022\014\n\004uuid\030\002 \001(\004\022\017\n\007a"
    "rea_id\030\003 \001(\r\"\346\001\n\032db_check_harem_compete_"
    "ack\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\035db_check_harem_compete_ack_id\022\014\n"
    "\004uuid\030\002 \001(\004\0220\n\006events\030\003 \003(\0132 .SProtoSpac"
    "e.harem_compete_event\022,\n\010progress\030\004 \001(\0162"
    "\032.SProtoSpace.ESLAPPROGRESS\022\020\n\010end_time\030"
    "\005 \001(\004\"\202\001\n\032db_harem_compete_clear_req\022H\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    "\035db_harem_compete_clear_req_id\022\014\n\004uuid\030\002"
    " \001(\004\022\014\n\004type\030\003 \001(\r\"A\n\022db_slap_emoji_info"
    "\022+\n\005infos\030\001 \003(\0132\034.SProtoSpace.slap_emoji"
    "_info\"\200\001\n\026db_get_harem_event_req\022D\n\010prot"
    "o_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031db_"
    "get_harem_event_req_id\022\014\n\004uuid\030\002 \001(\004\022\022\n\n"
    "event_uuid\030\003 \001(\004\"\235\001\n\026db_get_harem_event_"
    "ack\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\031db_get_harem_event_ack_id\022\014\n\004uui"
    "d\030\002 \001(\004\022/\n\005event\030\003 \001(\0132 .SProtoSpace.har"
    "em_compete_event\"\234\001\n\034db_share_officer_up"
    "grade_req\022J\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\037db_share_officer_upgrade_r"
    "eq_id\0220\n\004data\030\002 \001(\0132\".SProtoSpace.share_"
    "officer_upgrade\"\303\001\n\034db_share_officer_upg"
    "rade_ack\022J\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\037db_share_officer_upgrade_ac"
    "k_id\022\020\n\010share_id\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\022"
    "\030\n\020world_channel_id\030\004 \001(\r\022\r\n\005grade\030\005 \001(\r"
    "\022\013\n\003ret\030\006 \001(\005\"\225\001\n db_get_share_officer_u"
    "pgrade_req\022N\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:#db_get_share_officer_upgr"
    "ade_req_id\022\020\n\010share_id\030\002 \001(\004\022\017\n\007role_id\030"
    "\003 \001(\004\"\302\001\n db_get_share_officer_upgrade_a"
    "ck\022N\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:#db_get_share_officer_upgrade_ack_"
    "id\022\013\n\003ret\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\0220\n\004data"
    "\030\004 \001(\0132\".SProtoSpace.share_officer_upgra"
    "de\"\200\001\n\026db_add_role_popularity\022D\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031db_add"
    "_role_popularity_id\022\017\n\007role_id\030\002 \001(\004\022\017\n\007"
    "add_num\030\003 \001(\r\"\305\001\n\020db_kick_role_req\022=\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\023db"
    "_kick_role_req_id\022\016\n\006reason\030\002 \001(\r\022\013\n\003ret"
    "\030\003 \001(\r\022\020\n\010scene_id\030\004 \001(\r\022\022\n\nscene_type\030\005"
    " \001(\r\022\017\n\007game_id\030\006 \001(\004\022\r\n\005gt_id\030\007 \001(\004\022\017\n\007"
    "role_id\030\010 \001(\004\"\305\001\n\020db_kick_role_ack\022=\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\023db"
    "_kick_role_ack_id\022\016\n\006reason\030\002 \001(\r\022\013\n\003ret"
    "\030\003 \001(\r\022\020\n\010scene_id\030\004 \001(\r\022\022\n\nscene_type\030\005"
    " \001(\r\022\017\n\007game_id\030\006 \001(\004\022\r\n\005gt_id\030\007 \001(\004\022\017\n\007"
    "role_id\030\010 \001(\004\"r\n\030db_load_offical_data_re"
    "q\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\033db_load_offical_data_req_id\022\017\n\007role"
    "_id\030\002 \001(\004\"\253\001\n\030db_load_offical_data_ack\022E"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\033db_load_offical_data_ack_id\022\013\n\003ret\030\002 \001"
    "(\r\022\017\n\007role_id\030\003 \001(\004\022*\n\004data\030\004 \001(\0132\034.SPro"
    "toSpace.db_offical_data\"\236\001\n\030db_save_offi"
    "cal_data_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID:\033db_save_offical_data_req"
    "_id\022\017\n\007role_id\030\002 \001(\004\022*\n\004data\030\003 \001(\0132\034.SPr"
    "otoSpace.db_offical_data*\303\002\n\rERoleDataTy"
    "pe\022\022\n\016ROLE_DATA_NONE\020\000\022\022\n\016ROLE_DATA_BASE"
    "\020\001\022\022\n\016ROLE_DATA_ITEM\020\002\022\024\n\020ROLE_DATA_PLAY"
    "ER\020\003\022\023\n\017ROLE_DATA_LEVEL\020\004\022\022\n\016ROLE_DATA_H"
    "ERO\020\005\022\022\n\016ROLE_DATA_SOUL\020\006\022\022\n\016ROLE_DATA_T"
    "ASK\020\007\022\023\n\017ROLE_DATA_ROYAL\020\010\022\022\n\016ROLE_DATA_"
    "SHOW\020\t\022\024\n\020ROLE_DATA_FRIEND\020\n\022\022\n\016ROLE_DAT"
    "A_SHOP\020\013\022\023\n\017ROLE_DATA_HAREM\020\014\022\024\n\020ROLE_DA"
    "TA_FLOWER\020\r\022\021\n\rROLE_DATA_MAX\020\016**\n\010ESQLMo"
    "de\022\016\n\nSQL_UPDATE\020\001\022\016\n\nSQL_DELETE\020\002*\213\001\n\026E"
    "GetRoleShowDataResult\022%\n!GET_ROLE_SHOW_D"
    "ATA_RESULT_SUCCESS\020\001\022%\n!GET_ROLE_SHOW_DA"
    "TA_RESULT_DB_DATA\020\002\022#\n\037GET_ROLE_SHOW_DAT"
    "A_RESULT_ERROR\020\003*@\n\013EOnlineType\022\025\n\021ONLIN"
    "E_TYPE_LOGIN\020\001\022\032\n\026ONLINE_TYPE_CHANGE_SVR"
    "\020\002*2\n\rESaveDataMode\022\021\n\rSAVE_TO_CACHE\020\001\022\016"
    "\n\nSAVE_TO_DB\020\002", 27734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_db.proto", &protobuf_RegisterTypes);
  DataSaveInfo::default_instance_ = new DataSaveInfo();
  role_show_info::default_instance_ = new role_show_info();
  db_offical_data::default_instance_ = new db_offical_data();
  friend_intimacy::default_instance_ = new friend_intimacy();
  couple_love::default_instance_ = new couple_love();
  role_base_data::default_instance_ = new role_base_data();
  unit_chest_data::default_instance_ = new unit_chest_data();
  unit_free_times_draw_card::default_instance_ = new unit_free_times_draw_card();
  unit_limit_draw_card::default_instance_ = new unit_limit_draw_card();
  db_unit_draw_card::default_instance_ = new db_unit_draw_card();
  db_unit_draw_card_special::default_instance_ = new db_unit_draw_card_special();
  db_unit_mail_data::default_instance_ = new db_unit_mail_data();
  db_unit_mail_send_data::default_instance_ = new db_unit_mail_send_data();
  role_item_data::default_instance_ = new role_item_data();
  skill_data::default_instance_ = new skill_data();
  db_skin_info::default_instance_ = new db_skin_info();
  db_equip_data::default_instance_ = new db_equip_data();
  unit_player_data::default_instance_ = new unit_player_data();
  unit_player_base::default_instance_ = new unit_player_base();
  role_player_data::default_instance_ = new role_player_data();
  role_show_data::default_instance_ = new role_show_data();
  hero_soul_data::default_instance_ = new hero_soul_data();
  bag_data::default_instance_ = new bag_data();
  unit_hero_data::default_instance_ = new unit_hero_data();
  unit_formation_data::default_instance_ = new unit_formation_data();
  unit_role_pet_data::default_instance_ = new unit_role_pet_data();
  unit_role_pet_all::default_instance_ = new unit_role_pet_all();
  role_hero_data::default_instance_ = new role_hero_data();
  unit_quest_data::default_instance_ = new unit_quest_data();
  unit_activity_data::default_instance_ = new unit_activity_data();
  unit_achieve_pt_award_data::default_instance_ = new unit_achieve_pt_award_data();
  role_quest_data::default_instance_ = new role_quest_data();
  db_drop_spid::default_instance_ = new db_drop_spid();
  unit_soul_attr::default_instance_ = new unit_soul_attr();
  unit_soul_data::default_instance_ = new unit_soul_data();
  role_soul_data::default_instance_ = new role_soul_data();
  unit_discover_data::default_instance_ = new unit_discover_data();
  unit_chapter_data::default_instance_ = new unit_chapter_data();
  res_instance_data::default_instance_ = new res_instance_data();
  unit_res_instance_data::default_instance_ = new unit_res_instance_data();
  unit_section_star_data::default_instance_ = new unit_section_star_data();
  unit_tower_data::default_instance_ = new unit_tower_data();
  hero_event_info::default_instance_ = new hero_event_info();
  city_event_info::default_instance_ = new city_event_info();
  special_event_data::default_instance_ = new special_event_data();
  unit_adv_data::default_instance_ = new unit_adv_data();
  guide_step_data::default_instance_ = new guide_step_data();
  unit_guide_data::default_instance_ = new unit_guide_data();
  unit_plot_little_game_data::default_instance_ = new unit_plot_little_game_data();
  role_level_data::default_instance_ = new role_level_data();
  unit_royal_data::default_instance_ = new unit_royal_data();
  royal_opt_info::default_instance_ = new royal_opt_info();
  role_royal_data::default_instance_ = new role_royal_data();
  royal_task_data::default_instance_ = new royal_task_data();
  friend_operation_info::default_instance_ = new friend_operation_info();
  unit_friend_data::default_instance_ = new unit_friend_data();
  unit_black_data::default_instance_ = new unit_black_data();
  give_record_info::default_instance_ = new give_record_info();
  role_friend_data::default_instance_ = new role_friend_data();
  db_shop_refresh_info::default_instance_ = new db_shop_refresh_info();
  db_shop_item_info::default_instance_ = new db_shop_item_info();
  buy_record_info::default_instance_ = new buy_record_info();
  unit_shop_info::default_instance_ = new unit_shop_info();
  role_shop_data::default_instance_ = new role_shop_data();
  harem_compete_info::default_instance_ = new harem_compete_info();
  role_harem_data::default_instance_ = new role_harem_data();
  growing_flower_info::default_instance_ = new growing_flower_info();
  unit_flower_info::default_instance_ = new unit_flower_info();
  role_flower_data::default_instance_ = new role_flower_data();
  unit_plot_screen_data::default_instance_ = new unit_plot_screen_data();
  officer_apply_info::default_instance_ = new officer_apply_info();
  officer_base_info::default_instance_ = new officer_base_info();
  role_officer_data::default_instance_ = new role_officer_data();
  offical_battle_report_data::default_instance_ = new offical_battle_report_data();
  offical_battle_report::default_instance_ = new offical_battle_report();
  db_offical_apply_battle_data::default_instance_ = new db_offical_apply_battle_data();
  offical_apply_battle_result_db::default_instance_ = new offical_apply_battle_result_db();
  all_offical_apply_battle_result_db::default_instance_ = new all_offical_apply_battle_result_db();
  db_offical_result_rank_data::default_instance_ = new db_offical_result_rank_data();
  db_my_offical_result_data::default_instance_ = new db_my_offical_result_data();
  offical_rank_db::default_instance_ = new offical_rank_db();
  all_offical_rank_db::default_instance_ = new all_offical_rank_db();
  db_unit_fashion_data::default_instance_ = new db_unit_fashion_data();
  role_fashion_data::default_instance_ = new role_fashion_data();
  db_role_all_data::default_instance_ = new db_role_all_data();
  redis_role_base::default_instance_ = new redis_role_base();
  redis_role_show_hero::default_instance_ = new redis_role_show_hero();
  redis_role_battle_hero::default_instance_ = new redis_role_battle_hero();
  redis_comment_all::default_instance_ = new redis_comment_all();
  redis_role_data::default_instance_ = new redis_role_data();
  arena_user_data::default_instance_ = new arena_user_data();
  db_get_redis_role_data_req::default_instance_ = new db_get_redis_role_data_req();
  db_get_redis_role_data_ack::default_instance_ = new db_get_redis_role_data_ack();
  db_update_redis_role_data_ntf::default_instance_ = new db_update_redis_role_data_ntf();
  db_check_apply_info_req::default_instance_ = new db_check_apply_info_req();
  db_check_apply_info_ack::default_instance_ = new db_check_apply_info_ack();
  db_save_apply_info_req::default_instance_ = new db_save_apply_info_req();
  db_update_apply_req::default_instance_ = new db_update_apply_req();
  db_process_apply_info_req::default_instance_ = new db_process_apply_info_req();
  db_process_apply_info_ack::default_instance_ = new db_process_apply_info_ack();
  db_search_friend_req::default_instance_ = new db_search_friend_req();
  db_search_friend_ack::default_instance_ = new db_search_friend_ack();
  db_save_friend_opt_req::default_instance_ = new db_save_friend_opt_req();
  opt_record_info::default_instance_ = new opt_record_info();
  db_check_opt_record_req::default_instance_ = new db_check_opt_record_req();
  db_check_opt_record_ack::default_instance_ = new db_check_opt_record_ack();
  db_update_opt_record_req::default_instance_ = new db_update_opt_record_req();
  db_get_recommend_friend_req::default_instance_ = new db_get_recommend_friend_req();
  db_get_recommend_friend_ack::default_instance_ = new db_get_recommend_friend_ack();
  gs_get_role_data_req::default_instance_ = new gs_get_role_data_req();
  db_role_data_ack::default_instance_ = new db_role_data_ack();
  gs_role_leave_game::default_instance_ = new gs_role_leave_game();
  save_role_req::default_instance_ = new save_role_req();
  db_role_show_like_req::default_instance_ = new db_role_show_like_req();
  db_role_show_like_ack::default_instance_ = new db_role_show_like_ack();
  db_role_show_comment_req::default_instance_ = new db_role_show_comment_req();
  db_role_show_comment_ack::default_instance_ = new db_role_show_comment_ack();
  db_role_show_delete_comment_req::default_instance_ = new db_role_show_delete_comment_req();
  db_role_show_delete_comment_ack::default_instance_ = new db_role_show_delete_comment_ack();
  db_role_show_get_comment_req::default_instance_ = new db_role_show_get_comment_req();
  db_role_show_get_comment_ack::default_instance_ = new db_role_show_get_comment_ack();
  db_role_show_change_name_req::default_instance_ = new db_role_show_change_name_req();
  db_role_show_change_name_ack::default_instance_ = new db_role_show_change_name_ack();
  db_role_show_get_like_req::default_instance_ = new db_role_show_get_like_req();
  db_role_show_get_like_ack::default_instance_ = new db_role_show_get_like_ack();
  db_role_show_get_emotion_req::default_instance_ = new db_role_show_get_emotion_req();
  db_role_show_get_emotion_ack::default_instance_ = new db_role_show_get_emotion_ack();
  db_role_show_write_emotion_req::default_instance_ = new db_role_show_write_emotion_req();
  db_role_show_write_emotion_ack::default_instance_ = new db_role_show_write_emotion_ack();
  db_role_show_like_emotion_req::default_instance_ = new db_role_show_like_emotion_req();
  db_role_show_like_emotion_ack::default_instance_ = new db_role_show_like_emotion_ack();
  db_role_show_comment_emotion_req::default_instance_ = new db_role_show_comment_emotion_req();
  db_role_show_comment_emotion_ack::default_instance_ = new db_role_show_comment_emotion_ack();
  db_role_show_remove_emotion_req::default_instance_ = new db_role_show_remove_emotion_req();
  db_role_show_remove_emotion_ack::default_instance_ = new db_role_show_remove_emotion_ack();
  db_role_show_remove_comment_req::default_instance_ = new db_role_show_remove_comment_req();
  db_role_show_remove_comment_ack::default_instance_ = new db_role_show_remove_comment_ack();
  db_role_battle_info_req::default_instance_ = new db_role_battle_info_req();
  db_role_battle_info_ack::default_instance_ = new db_role_battle_info_ack();
  db_account_role_data_req::default_instance_ = new db_account_role_data_req();
  db_account_role_data_ack::default_instance_ = new db_account_role_data_ack();
  db_create_role_of_game::default_instance_ = new db_create_role_of_game();
  db_create_role_ack::default_instance_ = new db_create_role_ack();
  game_role_info_req::default_instance_ = new game_role_info_req();
  game_role_info_ack::default_instance_ = new game_role_info_ack();
  db_check_harem_compete_req::default_instance_ = new db_check_harem_compete_req();
  db_check_harem_compete_ack::default_instance_ = new db_check_harem_compete_ack();
  db_harem_compete_clear_req::default_instance_ = new db_harem_compete_clear_req();
  db_slap_emoji_info::default_instance_ = new db_slap_emoji_info();
  db_get_harem_event_req::default_instance_ = new db_get_harem_event_req();
  db_get_harem_event_ack::default_instance_ = new db_get_harem_event_ack();
  db_share_officer_upgrade_req::default_instance_ = new db_share_officer_upgrade_req();
  db_share_officer_upgrade_ack::default_instance_ = new db_share_officer_upgrade_ack();
  db_get_share_officer_upgrade_req::default_instance_ = new db_get_share_officer_upgrade_req();
  db_get_share_officer_upgrade_ack::default_instance_ = new db_get_share_officer_upgrade_ack();
  db_add_role_popularity::default_instance_ = new db_add_role_popularity();
  db_kick_role_req::default_instance_ = new db_kick_role_req();
  db_kick_role_ack::default_instance_ = new db_kick_role_ack();
  db_load_offical_data_req::default_instance_ = new db_load_offical_data_req();
  db_load_offical_data_ack::default_instance_ = new db_load_offical_data_ack();
  db_save_offical_data_req::default_instance_ = new db_save_offical_data_req();
  DataSaveInfo::default_instance_->InitAsDefaultInstance();
  role_show_info::default_instance_->InitAsDefaultInstance();
  db_offical_data::default_instance_->InitAsDefaultInstance();
  friend_intimacy::default_instance_->InitAsDefaultInstance();
  couple_love::default_instance_->InitAsDefaultInstance();
  role_base_data::default_instance_->InitAsDefaultInstance();
  unit_chest_data::default_instance_->InitAsDefaultInstance();
  unit_free_times_draw_card::default_instance_->InitAsDefaultInstance();
  unit_limit_draw_card::default_instance_->InitAsDefaultInstance();
  db_unit_draw_card::default_instance_->InitAsDefaultInstance();
  db_unit_draw_card_special::default_instance_->InitAsDefaultInstance();
  db_unit_mail_data::default_instance_->InitAsDefaultInstance();
  db_unit_mail_send_data::default_instance_->InitAsDefaultInstance();
  role_item_data::default_instance_->InitAsDefaultInstance();
  skill_data::default_instance_->InitAsDefaultInstance();
  db_skin_info::default_instance_->InitAsDefaultInstance();
  db_equip_data::default_instance_->InitAsDefaultInstance();
  unit_player_data::default_instance_->InitAsDefaultInstance();
  unit_player_base::default_instance_->InitAsDefaultInstance();
  role_player_data::default_instance_->InitAsDefaultInstance();
  role_show_data::default_instance_->InitAsDefaultInstance();
  hero_soul_data::default_instance_->InitAsDefaultInstance();
  bag_data::default_instance_->InitAsDefaultInstance();
  unit_hero_data::default_instance_->InitAsDefaultInstance();
  unit_formation_data::default_instance_->InitAsDefaultInstance();
  unit_role_pet_data::default_instance_->InitAsDefaultInstance();
  unit_role_pet_all::default_instance_->InitAsDefaultInstance();
  role_hero_data::default_instance_->InitAsDefaultInstance();
  unit_quest_data::default_instance_->InitAsDefaultInstance();
  unit_activity_data::default_instance_->InitAsDefaultInstance();
  unit_achieve_pt_award_data::default_instance_->InitAsDefaultInstance();
  role_quest_data::default_instance_->InitAsDefaultInstance();
  db_drop_spid::default_instance_->InitAsDefaultInstance();
  unit_soul_attr::default_instance_->InitAsDefaultInstance();
  unit_soul_data::default_instance_->InitAsDefaultInstance();
  role_soul_data::default_instance_->InitAsDefaultInstance();
  unit_discover_data::default_instance_->InitAsDefaultInstance();
  unit_chapter_data::default_instance_->InitAsDefaultInstance();
  res_instance_data::default_instance_->InitAsDefaultInstance();
  unit_res_instance_data::default_instance_->InitAsDefaultInstance();
  unit_section_star_data::default_instance_->InitAsDefaultInstance();
  unit_tower_data::default_instance_->InitAsDefaultInstance();
  hero_event_info::default_instance_->InitAsDefaultInstance();
  city_event_info::default_instance_->InitAsDefaultInstance();
  special_event_data::default_instance_->InitAsDefaultInstance();
  unit_adv_data::default_instance_->InitAsDefaultInstance();
  guide_step_data::default_instance_->InitAsDefaultInstance();
  unit_guide_data::default_instance_->InitAsDefaultInstance();
  unit_plot_little_game_data::default_instance_->InitAsDefaultInstance();
  role_level_data::default_instance_->InitAsDefaultInstance();
  unit_royal_data::default_instance_->InitAsDefaultInstance();
  royal_opt_info::default_instance_->InitAsDefaultInstance();
  role_royal_data::default_instance_->InitAsDefaultInstance();
  royal_task_data::default_instance_->InitAsDefaultInstance();
  friend_operation_info::default_instance_->InitAsDefaultInstance();
  unit_friend_data::default_instance_->InitAsDefaultInstance();
  unit_black_data::default_instance_->InitAsDefaultInstance();
  give_record_info::default_instance_->InitAsDefaultInstance();
  role_friend_data::default_instance_->InitAsDefaultInstance();
  db_shop_refresh_info::default_instance_->InitAsDefaultInstance();
  db_shop_item_info::default_instance_->InitAsDefaultInstance();
  buy_record_info::default_instance_->InitAsDefaultInstance();
  unit_shop_info::default_instance_->InitAsDefaultInstance();
  role_shop_data::default_instance_->InitAsDefaultInstance();
  harem_compete_info::default_instance_->InitAsDefaultInstance();
  role_harem_data::default_instance_->InitAsDefaultInstance();
  growing_flower_info::default_instance_->InitAsDefaultInstance();
  unit_flower_info::default_instance_->InitAsDefaultInstance();
  role_flower_data::default_instance_->InitAsDefaultInstance();
  unit_plot_screen_data::default_instance_->InitAsDefaultInstance();
  officer_apply_info::default_instance_->InitAsDefaultInstance();
  officer_base_info::default_instance_->InitAsDefaultInstance();
  role_officer_data::default_instance_->InitAsDefaultInstance();
  offical_battle_report_data::default_instance_->InitAsDefaultInstance();
  offical_battle_report::default_instance_->InitAsDefaultInstance();
  db_offical_apply_battle_data::default_instance_->InitAsDefaultInstance();
  offical_apply_battle_result_db::default_instance_->InitAsDefaultInstance();
  all_offical_apply_battle_result_db::default_instance_->InitAsDefaultInstance();
  db_offical_result_rank_data::default_instance_->InitAsDefaultInstance();
  db_my_offical_result_data::default_instance_->InitAsDefaultInstance();
  offical_rank_db::default_instance_->InitAsDefaultInstance();
  all_offical_rank_db::default_instance_->InitAsDefaultInstance();
  db_unit_fashion_data::default_instance_->InitAsDefaultInstance();
  role_fashion_data::default_instance_->InitAsDefaultInstance();
  db_role_all_data::default_instance_->InitAsDefaultInstance();
  redis_role_base::default_instance_->InitAsDefaultInstance();
  redis_role_show_hero::default_instance_->InitAsDefaultInstance();
  redis_role_battle_hero::default_instance_->InitAsDefaultInstance();
  redis_comment_all::default_instance_->InitAsDefaultInstance();
  redis_role_data::default_instance_->InitAsDefaultInstance();
  arena_user_data::default_instance_->InitAsDefaultInstance();
  db_get_redis_role_data_req::default_instance_->InitAsDefaultInstance();
  db_get_redis_role_data_ack::default_instance_->InitAsDefaultInstance();
  db_update_redis_role_data_ntf::default_instance_->InitAsDefaultInstance();
  db_check_apply_info_req::default_instance_->InitAsDefaultInstance();
  db_check_apply_info_ack::default_instance_->InitAsDefaultInstance();
  db_save_apply_info_req::default_instance_->InitAsDefaultInstance();
  db_update_apply_req::default_instance_->InitAsDefaultInstance();
  db_process_apply_info_req::default_instance_->InitAsDefaultInstance();
  db_process_apply_info_ack::default_instance_->InitAsDefaultInstance();
  db_search_friend_req::default_instance_->InitAsDefaultInstance();
  db_search_friend_ack::default_instance_->InitAsDefaultInstance();
  db_save_friend_opt_req::default_instance_->InitAsDefaultInstance();
  opt_record_info::default_instance_->InitAsDefaultInstance();
  db_check_opt_record_req::default_instance_->InitAsDefaultInstance();
  db_check_opt_record_ack::default_instance_->InitAsDefaultInstance();
  db_update_opt_record_req::default_instance_->InitAsDefaultInstance();
  db_get_recommend_friend_req::default_instance_->InitAsDefaultInstance();
  db_get_recommend_friend_ack::default_instance_->InitAsDefaultInstance();
  gs_get_role_data_req::default_instance_->InitAsDefaultInstance();
  db_role_data_ack::default_instance_->InitAsDefaultInstance();
  gs_role_leave_game::default_instance_->InitAsDefaultInstance();
  save_role_req::default_instance_->InitAsDefaultInstance();
  db_role_show_like_req::default_instance_->InitAsDefaultInstance();
  db_role_show_like_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_comment_req::default_instance_->InitAsDefaultInstance();
  db_role_show_comment_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_delete_comment_req::default_instance_->InitAsDefaultInstance();
  db_role_show_delete_comment_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_get_comment_req::default_instance_->InitAsDefaultInstance();
  db_role_show_get_comment_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_change_name_req::default_instance_->InitAsDefaultInstance();
  db_role_show_change_name_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_get_like_req::default_instance_->InitAsDefaultInstance();
  db_role_show_get_like_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_get_emotion_req::default_instance_->InitAsDefaultInstance();
  db_role_show_get_emotion_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_write_emotion_req::default_instance_->InitAsDefaultInstance();
  db_role_show_write_emotion_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_like_emotion_req::default_instance_->InitAsDefaultInstance();
  db_role_show_like_emotion_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_comment_emotion_req::default_instance_->InitAsDefaultInstance();
  db_role_show_comment_emotion_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_remove_emotion_req::default_instance_->InitAsDefaultInstance();
  db_role_show_remove_emotion_ack::default_instance_->InitAsDefaultInstance();
  db_role_show_remove_comment_req::default_instance_->InitAsDefaultInstance();
  db_role_show_remove_comment_ack::default_instance_->InitAsDefaultInstance();
  db_role_battle_info_req::default_instance_->InitAsDefaultInstance();
  db_role_battle_info_ack::default_instance_->InitAsDefaultInstance();
  db_account_role_data_req::default_instance_->InitAsDefaultInstance();
  db_account_role_data_ack::default_instance_->InitAsDefaultInstance();
  db_create_role_of_game::default_instance_->InitAsDefaultInstance();
  db_create_role_ack::default_instance_->InitAsDefaultInstance();
  game_role_info_req::default_instance_->InitAsDefaultInstance();
  game_role_info_ack::default_instance_->InitAsDefaultInstance();
  db_check_harem_compete_req::default_instance_->InitAsDefaultInstance();
  db_check_harem_compete_ack::default_instance_->InitAsDefaultInstance();
  db_harem_compete_clear_req::default_instance_->InitAsDefaultInstance();
  db_slap_emoji_info::default_instance_->InitAsDefaultInstance();
  db_get_harem_event_req::default_instance_->InitAsDefaultInstance();
  db_get_harem_event_ack::default_instance_->InitAsDefaultInstance();
  db_share_officer_upgrade_req::default_instance_->InitAsDefaultInstance();
  db_share_officer_upgrade_ack::default_instance_->InitAsDefaultInstance();
  db_get_share_officer_upgrade_req::default_instance_->InitAsDefaultInstance();
  db_get_share_officer_upgrade_ack::default_instance_->InitAsDefaultInstance();
  db_add_role_popularity::default_instance_->InitAsDefaultInstance();
  db_kick_role_req::default_instance_->InitAsDefaultInstance();
  db_kick_role_ack::default_instance_->InitAsDefaultInstance();
  db_load_offical_data_req::default_instance_->InitAsDefaultInstance();
  db_load_offical_data_ack::default_instance_->InitAsDefaultInstance();
  db_save_offical_data_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fdb_2eproto {
  StaticDescriptorInitializer_ss_5fdb_2eproto() {
    protobuf_AddDesc_ss_5fdb_2eproto();
  }
} static_descriptor_initializer_ss_5fdb_2eproto_;
const ::google::protobuf::EnumDescriptor* ERoleDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleDataType_descriptor_;
}
bool ERoleDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESQLMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESQLMode_descriptor_;
}
bool ESQLMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGetRoleShowDataResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGetRoleShowDataResult_descriptor_;
}
bool EGetRoleShowDataResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOnlineType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOnlineType_descriptor_;
}
bool EOnlineType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESaveDataMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESaveDataMode_descriptor_;
}
bool ESaveDataMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataSaveInfo::kDataTypeFieldNumber;
const int DataSaveInfo::kSqlModeFieldNumber;
const int DataSaveInfo::kKeyIdFieldNumber;
#endif  // !_MSC_VER

DataSaveInfo::DataSaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSaveInfo::InitAsDefaultInstance() {
}

DataSaveInfo::DataSaveInfo(const DataSaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSaveInfo::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  sql_mode_ = 1;
  key_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSaveInfo::~DataSaveInfo() {
  SharedDtor();
}

void DataSaveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataSaveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSaveInfo_descriptor_;
}

const DataSaveInfo& DataSaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

DataSaveInfo* DataSaveInfo::default_instance_ = NULL;

DataSaveInfo* DataSaveInfo::New() const {
  return new DataSaveInfo;
}

void DataSaveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
    sql_mode_ = 1;
    key_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ERoleDataType data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ERoleDataType_IsValid(value)) {
            set_data_type(static_cast< ::SProtoSpace::ERoleDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sql_mode;
        break;
      }

      // optional .SProtoSpace.ESQLMode sql_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sql_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESQLMode_IsValid(value)) {
            set_sql_mode(static_cast< ::SProtoSpace::ESQLMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_id;
        break;
      }

      // optional uint64 key_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ERoleDataType data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // optional .SProtoSpace.ESQLMode sql_mode = 2;
  if (has_sql_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sql_mode(), output);
  }

  // optional uint64 key_id = 3;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->key_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ERoleDataType data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // optional .SProtoSpace.ESQLMode sql_mode = 2;
  if (has_sql_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sql_mode(), target);
  }

  // optional uint64 key_id = 3;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->key_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSaveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ERoleDataType data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional .SProtoSpace.ESQLMode sql_mode = 2;
    if (has_sql_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sql_mode());
    }

    // optional uint64 key_id = 3;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSaveInfo::MergeFrom(const DataSaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_sql_mode()) {
      set_sql_mode(from.sql_mode());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSaveInfo::CopyFrom(const DataSaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSaveInfo::IsInitialized() const {

  return true;
}

void DataSaveInfo::Swap(DataSaveInfo* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    std::swap(sql_mode_, other->sql_mode_);
    std::swap(key_id_, other->key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSaveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSaveInfo_descriptor_;
  metadata.reflection = DataSaveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_info::kDbModeFieldNumber;
const int role_show_info::kUuidFieldNumber;
const int role_show_info::kLikedListFieldNumber;
const int role_show_info::kLikeFieldNumber;
const int role_show_info::kSignatureFieldNumber;
const int role_show_info::kPositionFieldNumber;
const int role_show_info::kShowHeroListFieldNumber;
const int role_show_info::kBorderFieldNumber;
const int role_show_info::kBirthdayFieldNumber;
const int role_show_info::kStarSignFieldNumber;
const int role_show_info::kPopularityFieldNumber;
const int role_show_info::kCharmFieldNumber;
const int role_show_info::kLabelsFieldNumber;
#endif  // !_MSC_VER

role_show_info::role_show_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_info::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
  birthday_ = const_cast< ::SProtoSpace::date_info*>(&::SProtoSpace::date_info::default_instance());
}

role_show_info::role_show_info(const role_show_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  like_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  border_ = 1u;
  birthday_ = NULL;
  star_sign_ = 1u;
  popularity_ = 0u;
  charm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_info::~role_show_info() {
  SharedDtor();
}

void role_show_info::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete position_;
    delete birthday_;
  }
}

void role_show_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_info_descriptor_;
}

const role_show_info& role_show_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_show_info* role_show_info::default_instance_ = NULL;

role_show_info* role_show_info::New() const {
  return new role_show_info;
}

void role_show_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    like_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
    border_ = 1u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_birthday()) {
      if (birthday_ != NULL) birthday_->::SProtoSpace::date_info::Clear();
    }
    star_sign_ = 1u;
    popularity_ = 0u;
    charm_ = 0u;
  }
  liked_list_.Clear();
  show_hero_list_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liked_list;
        break;
      }

      // repeated uint64 liked_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_liked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liked_list;
        if (input->ExpectTag(32)) goto parse_like;
        break;
      }

      // optional uint32 like = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hero_list;
        break;
      }

      // repeated uint64 show_hero_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hero_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_show_hero_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_show_hero_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hero_list;
        if (input->ExpectTag(64)) goto parse_border;
        break;
      }

      // optional uint32 border = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_birthday;
        break;
      }

      // optional .SProtoSpace.date_info birthday = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_popularity;
        break;
      }

      // optional uint32 popularity = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_charm;
        break;
      }

      // optional uint32 charm = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_labels;
        break;
      }

      // repeated uint32 labels = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated uint64 liked_list = 3;
  for (int i = 0; i < this->liked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->liked_list(i), output);
  }

  // optional uint32 like = 4;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->like(), output);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signature(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position(), output);
  }

  // repeated uint64 show_hero_list = 7;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->show_hero_list(i), output);
  }

  // optional uint32 border = 8 [default = 1];
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->border(), output);
  }

  // optional .SProtoSpace.date_info birthday = 9;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->birthday(), output);
  }

  // optional uint32 star_sign = 10 [default = 1];
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->star_sign(), output);
  }

  // optional uint32 popularity = 11 [default = 0];
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->popularity(), output);
  }

  // optional uint32 charm = 12 [default = 0];
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->charm(), output);
  }

  // repeated uint32 labels = 13;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated uint64 liked_list = 3;
  for (int i = 0; i < this->liked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->liked_list(i), target);
  }

  // optional uint32 like = 4;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->like(), target);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->position(), target);
  }

  // repeated uint64 show_hero_list = 7;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->show_hero_list(i), target);
  }

  // optional uint32 border = 8 [default = 1];
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->border(), target);
  }

  // optional .SProtoSpace.date_info birthday = 9;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->birthday(), target);
  }

  // optional uint32 star_sign = 10 [default = 1];
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->star_sign(), target);
  }

  // optional uint32 popularity = 11 [default = 0];
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->popularity(), target);
  }

  // optional uint32 charm = 12 [default = 0];
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->charm(), target);
  }

  // repeated uint32 labels = 13;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 like = 4;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional .SProtoSpace.lsg_position_info position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional uint32 border = 8 [default = 1];
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.date_info birthday = 9;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birthday());
    }

    // optional uint32 star_sign = 10 [default = 1];
    if (has_star_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

    // optional uint32 popularity = 11 [default = 0];
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // optional uint32 charm = 12 [default = 0];
    if (has_charm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

  }
  // repeated uint64 liked_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->liked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->liked_list(i));
    }
    total_size += 1 * this->liked_list_size() + data_size;
  }

  // repeated uint64 show_hero_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_hero_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->show_hero_list(i));
    }
    total_size += 1 * this->show_hero_list_size() + data_size;
  }

  // repeated uint32 labels = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labels(i));
    }
    total_size += 1 * this->labels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_info::MergeFrom(const role_show_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  liked_list_.MergeFrom(from.liked_list_);
  show_hero_list_.MergeFrom(from.show_hero_list_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_birthday()) {
      mutable_birthday()->::SProtoSpace::date_info::MergeFrom(from.birthday());
    }
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_info::CopyFrom(const role_show_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_info::IsInitialized() const {

  return true;
}

void role_show_info::Swap(role_show_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    liked_list_.Swap(&other->liked_list_);
    std::swap(like_, other->like_);
    std::swap(signature_, other->signature_);
    std::swap(position_, other->position_);
    show_hero_list_.Swap(&other->show_hero_list_);
    std::swap(border_, other->border_);
    std::swap(birthday_, other->birthday_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(popularity_, other->popularity_);
    std::swap(charm_, other->charm_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_info_descriptor_;
  metadata.reflection = role_show_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_offical_data::kCurGradeFieldNumber;
const int db_offical_data::kMaxGradeFieldNumber;
const int db_offical_data::kApplyGradeFieldNumber;
const int db_offical_data::kApplyTimeFieldNumber;
const int db_offical_data::kLastGradeFieldNumber;
#endif  // !_MSC_VER

db_offical_data::db_offical_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_offical_data::InitAsDefaultInstance() {
}

db_offical_data::db_offical_data(const db_offical_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_offical_data::SharedCtor() {
  _cached_size_ = 0;
  cur_grade_ = 0u;
  max_grade_ = 0u;
  apply_grade_ = 0u;
  apply_time_ = 0u;
  last_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_offical_data::~db_offical_data() {
  SharedDtor();
}

void db_offical_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_offical_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_offical_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_offical_data_descriptor_;
}

const db_offical_data& db_offical_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_offical_data* db_offical_data::default_instance_ = NULL;

db_offical_data* db_offical_data::New() const {
  return new db_offical_data;
}

void db_offical_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_grade_ = 0u;
    max_grade_ = 0u;
    apply_grade_ = 0u;
    apply_time_ = 0u;
    last_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_offical_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_grade;
        break;
      }

      // optional uint32 apply_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_time;
        break;
      }

      // optional uint32 apply_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_grade;
        break;
      }

      // optional uint32 last_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_grade_)));
          set_has_last_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_offical_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_grade = 1;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_grade(), output);
  }

  // optional uint32 max_grade = 2;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_grade(), output);
  }

  // optional uint32 apply_grade = 3;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apply_grade(), output);
  }

  // optional uint32 apply_time = 4;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->apply_time(), output);
  }

  // optional uint32 last_grade = 5;
  if (has_last_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_offical_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_grade = 1;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_grade(), target);
  }

  // optional uint32 max_grade = 2;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_grade(), target);
  }

  // optional uint32 apply_grade = 3;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apply_grade(), target);
  }

  // optional uint32 apply_time = 4;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->apply_time(), target);
  }

  // optional uint32 last_grade = 5;
  if (has_last_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_offical_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_grade = 1;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint32 max_grade = 2;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
    }

    // optional uint32 apply_grade = 3;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_grade());
    }

    // optional uint32 apply_time = 4;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_time());
    }

    // optional uint32 last_grade = 5;
    if (has_last_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_offical_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_offical_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_offical_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_offical_data::MergeFrom(const db_offical_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_last_grade()) {
      set_last_grade(from.last_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_offical_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_offical_data::CopyFrom(const db_offical_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_offical_data::IsInitialized() const {

  return true;
}

void db_offical_data::Swap(db_offical_data* other) {
  if (other != this) {
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(apply_grade_, other->apply_grade_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(last_grade_, other->last_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_offical_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_offical_data_descriptor_;
  metadata.reflection = db_offical_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_intimacy::kRoleIdFieldNumber;
const int friend_intimacy::kIntimacyValueFieldNumber;
#endif  // !_MSC_VER

friend_intimacy::friend_intimacy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_intimacy::InitAsDefaultInstance() {
}

friend_intimacy::friend_intimacy(const friend_intimacy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_intimacy::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  intimacy_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_intimacy::~friend_intimacy() {
  SharedDtor();
}

void friend_intimacy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_intimacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_intimacy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_intimacy_descriptor_;
}

const friend_intimacy& friend_intimacy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

friend_intimacy* friend_intimacy::default_instance_ = NULL;

friend_intimacy* friend_intimacy::New() const {
  return new friend_intimacy;
}

void friend_intimacy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    intimacy_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_intimacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intimacy_value;
        break;
      }

      // optional uint32 intimacy_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intimacy_value_)));
          set_has_intimacy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_intimacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 intimacy_value = 2;
  if (has_intimacy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intimacy_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_intimacy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 intimacy_value = 2;
  if (has_intimacy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intimacy_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_intimacy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 intimacy_value = 2;
    if (has_intimacy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intimacy_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_intimacy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_intimacy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_intimacy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_intimacy::MergeFrom(const friend_intimacy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_intimacy_value()) {
      set_intimacy_value(from.intimacy_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_intimacy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_intimacy::CopyFrom(const friend_intimacy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_intimacy::IsInitialized() const {

  return true;
}

void friend_intimacy::Swap(friend_intimacy* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(intimacy_value_, other->intimacy_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_intimacy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_intimacy_descriptor_;
  metadata.reflection = friend_intimacy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int couple_love::kRoleIdFieldNumber;
const int couple_love::kLoveValueFieldNumber;
#endif  // !_MSC_VER

couple_love::couple_love()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void couple_love::InitAsDefaultInstance() {
}

couple_love::couple_love(const couple_love& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void couple_love::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  love_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

couple_love::~couple_love() {
  SharedDtor();
}

void couple_love::SharedDtor() {
  if (this != default_instance_) {
  }
}

void couple_love::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* couple_love::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return couple_love_descriptor_;
}

const couple_love& couple_love::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

couple_love* couple_love::default_instance_ = NULL;

couple_love* couple_love::New() const {
  return new couple_love;
}

void couple_love::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    love_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool couple_love::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_love_value;
        break;
      }

      // optional uint32 love_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_love_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &love_value_)));
          set_has_love_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void couple_love::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 love_value = 2;
  if (has_love_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->love_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* couple_love::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 love_value = 2;
  if (has_love_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->love_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int couple_love::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 love_value = 2;
    if (has_love_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->love_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void couple_love::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const couple_love* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const couple_love*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void couple_love::MergeFrom(const couple_love& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_love_value()) {
      set_love_value(from.love_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void couple_love::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void couple_love::CopyFrom(const couple_love& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool couple_love::IsInitialized() const {

  return true;
}

void couple_love::Swap(couple_love* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(love_value_, other->love_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata couple_love::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = couple_love_descriptor_;
  metadata.reflection = couple_love_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_base_data::kRoleIdFieldNumber;
const int role_base_data::kRoleNameFieldNumber;
const int role_base_data::kAccountIdFieldNumber;
const int role_base_data::kAreaIdFieldNumber;
const int role_base_data::kSexFieldNumber;
const int role_base_data::kOfflineTimeFieldNumber;
const int role_base_data::kDbSvrIdFieldNumber;
const int role_base_data::kLvFieldNumber;
const int role_base_data::kExpFieldNumber;
const int role_base_data::kBuyPowerTimesFieldNumber;
const int role_base_data::kGoldFieldNumber;
const int role_base_data::kJadeFieldNumber;
const int role_base_data::kPowerFieldNumber;
const int role_base_data::kLastDiscIdFieldNumber;
const int role_base_data::kTaskActivityFieldNumber;
const int role_base_data::kGSystemFieldNumber;
const int role_base_data::kLoginTimeFieldNumber;
const int role_base_data::kTenderFieldNumber;
const int role_base_data::kTreasonFieldNumber;
const int role_base_data::kWiseFieldNumber;
const int role_base_data::kAdorkableFieldNumber;
const int role_base_data::kGoodFieldNumber;
const int role_base_data::kSchemingFieldNumber;
const int role_base_data::kMeritFieldNumber;
const int role_base_data::kOfficalSalaryFieldNumber;
const int role_base_data::kOfficalSalaryTmFieldNumber;
const int role_base_data::kOfficalChallengeNumFieldNumber;
const int role_base_data::kOfficalChallengeBuyFieldNumber;
const int role_base_data::kOfficalShareNumFieldNumber;
const int role_base_data::kBagCapacityFieldNumber;
const int role_base_data::kMailGlobalLastChecktimeFieldNumber;
const int role_base_data::kMailSendPrivateLimitDayFieldNumber;
const int role_base_data::kFightPowerFieldNumber;
const int role_base_data::kFirstOfficalAwardFieldNumber;
const int role_base_data::kCurMainlineTaskIdFieldNumber;
const int role_base_data::kOfficalApplyCountFieldNumber;
const int role_base_data::kAccLoginCountFieldNumber;
const int role_base_data::kHasFirstCommonFieldNumber;
const int role_base_data::kHasFirstSpecialFieldNumber;
const int role_base_data::kHasFirstTenInOneRowFieldNumber;
const int role_base_data::kSkillPointFieldNumber;
const int role_base_data::kSkillPointRevocerTmFieldNumber;
const int role_base_data::kWineFieldNumber;
const int role_base_data::kGmAuthFieldNumber;
const int role_base_data::kWineCupFieldNumber;
const int role_base_data::kDailyFortuneFieldNumber;
const int role_base_data::kEnergyFieldNumber;
const int role_base_data::kAdvTimesFieldNumber;
const int role_base_data::kTalentPointFieldNumber;
const int role_base_data::kLockModuleIdsFieldNumber;
const int role_base_data::kPassAllFieldNumber;
const int role_base_data::kSkipFieldNumber;
const int role_base_data::kGuideIdsFieldNumber;
const int role_base_data::kChatRoomAwardTimesFieldNumber;
const int role_base_data::kCharmFieldNumber;
const int role_base_data::kPopularityFieldNumber;
const int role_base_data::kIntimacyFieldNumber;
const int role_base_data::kLoveFieldNumber;
const int role_base_data::kChangeNameTimeFieldNumber;
#endif  // !_MSC_VER

role_base_data::role_base_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_base_data::InitAsDefaultInstance() {
}

role_base_data::role_base_data(const role_base_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_base_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  sex_ = 0u;
  offline_time_ = GOOGLE_ULONGLONG(0);
  db_svr_id_ = GOOGLE_ULONGLONG(0);
  lv_ = 0;
  exp_ = 0;
  buy_power_times_ = 0;
  gold_ = 0;
  jade_ = 0;
  power_ = 0;
  last_disc_id_ = 0;
  task_activity_ = 0;
  login_time_ = GOOGLE_ULONGLONG(0);
  tender_ = 0;
  treason_ = 0;
  wise_ = 0;
  adorkable_ = 0;
  good_ = 0;
  scheming_ = 0;
  merit_ = 0;
  offical_salary_ = false;
  offical_salary_tm_ = 0;
  offical_challenge_num_ = 0;
  offical_challenge_buy_ = 0;
  offical_share_num_ = 0;
  bag_capacity_ = 0u;
  mail_global_last_checktime_ = GOOGLE_ULONGLONG(0);
  mail_send_private_limit_day_ = 0u;
  fight_power_ = GOOGLE_ULONGLONG(0);
  first_offical_award_ = 0u;
  cur_mainline_task_id_ = 0u;
  offical_apply_count_ = 0u;
  acc_login_count_ = 0u;
  has_first_common_ = false;
  has_first_special_ = false;
  has_first_ten_in_one_row_ = false;
  skill_point_ = 0u;
  skill_point_revocer_tm_ = 0u;
  wine_ = 0u;
  gm_auth_ = 0;
  wine_cup_ = 0u;
  daily_fortune_ = 0;
  energy_ = 0;
  adv_times_ = 0;
  talent_point_ = 0;
  pass_all_ = false;
  skip_ = false;
  chat_room_award_times_ = 0;
  charm_ = 0;
  popularity_ = 0;
  change_name_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_base_data::~role_base_data() {
  SharedDtor();
}

void role_base_data::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (this != default_instance_) {
  }
}

void role_base_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_base_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_base_data_descriptor_;
}

const role_base_data& role_base_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_base_data* role_base_data::default_instance_ = NULL;

role_base_data* role_base_data::New() const {
  return new role_base_data;
}

void role_base_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    area_id_ = 0u;
    sex_ = 0u;
    offline_time_ = GOOGLE_ULONGLONG(0);
    db_svr_id_ = GOOGLE_ULONGLONG(0);
    lv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0;
    buy_power_times_ = 0;
    gold_ = 0;
    jade_ = 0;
    power_ = 0;
    last_disc_id_ = 0;
    task_activity_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    login_time_ = GOOGLE_ULONGLONG(0);
    tender_ = 0;
    treason_ = 0;
    wise_ = 0;
    adorkable_ = 0;
    good_ = 0;
    scheming_ = 0;
    merit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    offical_salary_ = false;
    offical_salary_tm_ = 0;
    offical_challenge_num_ = 0;
    offical_challenge_buy_ = 0;
    offical_share_num_ = 0;
    bag_capacity_ = 0u;
    mail_global_last_checktime_ = GOOGLE_ULONGLONG(0);
    mail_send_private_limit_day_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    fight_power_ = GOOGLE_ULONGLONG(0);
    first_offical_award_ = 0u;
    cur_mainline_task_id_ = 0u;
    offical_apply_count_ = 0u;
    acc_login_count_ = 0u;
    has_first_common_ = false;
    has_first_special_ = false;
    has_first_ten_in_one_row_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    skill_point_ = 0u;
    skill_point_revocer_tm_ = 0u;
    wine_ = 0u;
    gm_auth_ = 0;
    wine_cup_ = 0u;
    daily_fortune_ = 0;
    energy_ = 0;
    adv_times_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    talent_point_ = 0;
    pass_all_ = false;
    skip_ = false;
    chat_room_award_times_ = 0;
    charm_ = 0;
    popularity_ = 0;
  }
  if (_has_bits_[58 / 32] & (0xffu << (58 % 32))) {
    change_name_time_ = 0;
  }
  g_system_.Clear();
  lock_module_ids_.Clear();
  guide_ids_.Clear();
  intimacy_.Clear();
  love_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_base_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_id;
        break;
      }

      // optional string account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offline_time;
        break;
      }

      // optional uint64 offline_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_db_svr_id;
        break;
      }

      // optional uint64 db_svr_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_svr_id_)));
          set_has_db_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional int32 lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_buy_power_times;
        break;
      }

      // optional int32 buy_power_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_power_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_power_times_)));
          set_has_buy_power_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gold;
        break;
      }

      // optional int32 gold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_jade;
        break;
      }

      // optional int32 jade = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jade_)));
          set_has_jade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_power;
        break;
      }

      // optional int32 power = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_disc_id;
        break;
      }

      // optional int32 last_disc_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_disc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_disc_id_)));
          set_has_last_disc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_task_activity;
        break;
      }

      // optional int32 task_activity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_activity_)));
          set_has_task_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_g_system;
        break;
      }

      // repeated .SProtoSpace.game_system g_system = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_g_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_g_system;
        if (input->ExpectTag(144)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tender;
        break;
      }

      // optional int32 tender = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tender_)));
          set_has_tender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_treason;
        break;
      }

      // optional int32 treason = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treason_)));
          set_has_treason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wise;
        break;
      }

      // optional int32 wise = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wise_)));
          set_has_wise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_adorkable;
        break;
      }

      // optional int32 adorkable = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adorkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adorkable_)));
          set_has_adorkable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_good;
        break;
      }

      // optional int32 good = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_scheming;
        break;
      }

      // optional int32 scheming = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scheming_)));
          set_has_scheming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_merit;
        break;
      }

      // optional int32 merit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_offical_salary;
        break;
      }

      // optional bool offical_salary = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offical_salary_)));
          set_has_offical_salary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_offical_salary_tm;
        break;
      }

      // optional int32 offical_salary_tm = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_salary_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_salary_tm_)));
          set_has_offical_salary_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_offical_challenge_num;
        break;
      }

      // optional int32 offical_challenge_num = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_num_)));
          set_has_offical_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_offical_challenge_buy;
        break;
      }

      // optional int32 offical_challenge_buy = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_buy_)));
          set_has_offical_challenge_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_offical_share_num;
        break;
      }

      // optional int32 offical_share_num = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_share_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_share_num_)));
          set_has_offical_share_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_bag_capacity;
        break;
      }

      // optional uint32 bag_capacity = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_capacity_)));
          set_has_bag_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_mail_global_last_checktime;
        break;
      }

      // optional uint64 mail_global_last_checktime = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_global_last_checktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_global_last_checktime_)));
          set_has_mail_global_last_checktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_mail_send_private_limit_day;
        break;
      }

      // optional uint32 mail_send_private_limit_day = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_send_private_limit_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_send_private_limit_day_)));
          set_has_mail_send_private_limit_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_fight_power;
        break;
      }

      // optional uint64 fight_power = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_first_offical_award;
        break;
      }

      // optional uint32 first_offical_award = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_offical_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_offical_award_)));
          set_has_first_offical_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_cur_mainline_task_id;
        break;
      }

      // optional uint32 cur_mainline_task_id = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mainline_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_mainline_task_id_)));
          set_has_cur_mainline_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_offical_apply_count;
        break;
      }

      // optional uint32 offical_apply_count = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_apply_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offical_apply_count_)));
          set_has_offical_apply_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_acc_login_count;
        break;
      }

      // optional uint32 acc_login_count = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acc_login_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_login_count_)));
          set_has_acc_login_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_has_first_common;
        break;
      }

      // optional bool has_first_common = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_first_common:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_first_common_)));
          set_has_has_first_common();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_has_first_special;
        break;
      }

      // optional bool has_first_special = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_first_special:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_first_special_)));
          set_has_has_first_special();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_has_first_ten_in_one_row;
        break;
      }

      // optional bool has_first_ten_in_one_row = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_first_ten_in_one_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_first_ten_in_one_row_)));
          set_has_has_first_ten_in_one_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_skill_point;
        break;
      }

      // optional uint32 skill_point = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_skill_point_revocer_tm;
        break;
      }

      // optional uint32 skill_point_revocer_tm = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_revocer_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_revocer_tm_)));
          set_has_skill_point_revocer_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_wine;
        break;
      }

      // optional uint32 wine = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_)));
          set_has_wine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_gm_auth;
        break;
      }

      // optional int32 gm_auth = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_auth_)));
          set_has_gm_auth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_wine_cup;
        break;
      }

      // optional uint32 wine_cup = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine_cup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_cup_)));
          set_has_wine_cup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_daily_fortune;
        break;
      }

      // optional int32 daily_fortune = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_fortune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_fortune_)));
          set_has_daily_fortune();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_energy;
        break;
      }

      // optional int32 energy = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_adv_times;
        break;
      }

      // optional int32 adv_times = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_times_)));
          set_has_adv_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_talent_point;
        break;
      }

      // optional int32 talent_point = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_point_)));
          set_has_talent_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_lock_module_ids;
        break;
      }

      // repeated int32 lock_module_ids = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_module_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 416, input, this->mutable_lock_module_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lock_module_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_lock_module_ids;
        if (input->ExpectTag(424)) goto parse_pass_all;
        break;
      }

      // optional bool pass_all = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pass_all_)));
          set_has_pass_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_skip;
        break;
      }

      // optional bool skip = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_guide_ids;
        break;
      }

      // repeated int32 guide_ids = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 440, input, this->mutable_guide_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guide_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_guide_ids;
        if (input->ExpectTag(448)) goto parse_chat_room_award_times;
        break;
      }

      // optional int32 chat_room_award_times = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_room_award_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_room_award_times_)));
          set_has_chat_room_award_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_charm;
        break;
      }

      // optional int32 charm = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_popularity;
        break;
      }

      // optional int32 popularity = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_intimacy;
        break;
      }

      // repeated .SProtoSpace.friend_intimacy intimacy = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intimacy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intimacy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_intimacy;
        if (input->ExpectTag(482)) goto parse_love;
        break;
      }

      // repeated .SProtoSpace.couple_love love = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_love:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_love()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_love;
        if (input->ExpectTag(488)) goto parse_change_name_time;
        break;
      }

      // optional int32 change_name_time = 61 [default = 0];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_name_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_name_time_)));
          set_has_change_name_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_base_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_id(), output);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area_id(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint64 offline_time = 6;
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->offline_time(), output);
  }

  // optional uint64 db_svr_id = 7;
  if (has_db_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->db_svr_id(), output);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lv(), output);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }

  // optional int32 buy_power_times = 11;
  if (has_buy_power_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->buy_power_times(), output);
  }

  // optional int32 gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold(), output);
  }

  // optional int32 jade = 13;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->jade(), output);
  }

  // optional int32 power = 14;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->power(), output);
  }

  // optional int32 last_disc_id = 15;
  if (has_last_disc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->last_disc_id(), output);
  }

  // optional int32 task_activity = 16;
  if (has_task_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->task_activity(), output);
  }

  // repeated .SProtoSpace.game_system g_system = 17;
  for (int i = 0; i < this->g_system_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->g_system(i), output);
  }

  // optional uint64 login_time = 18;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->login_time(), output);
  }

  // optional int32 tender = 19;
  if (has_tender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tender(), output);
  }

  // optional int32 treason = 20;
  if (has_treason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->treason(), output);
  }

  // optional int32 wise = 21;
  if (has_wise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->wise(), output);
  }

  // optional int32 adorkable = 22;
  if (has_adorkable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->adorkable(), output);
  }

  // optional int32 good = 23;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->good(), output);
  }

  // optional int32 scheming = 24;
  if (has_scheming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->scheming(), output);
  }

  // optional int32 merit = 25;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->merit(), output);
  }

  // optional bool offical_salary = 26;
  if (has_offical_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->offical_salary(), output);
  }

  // optional int32 offical_salary_tm = 27;
  if (has_offical_salary_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->offical_salary_tm(), output);
  }

  // optional int32 offical_challenge_num = 28;
  if (has_offical_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->offical_challenge_num(), output);
  }

  // optional int32 offical_challenge_buy = 29;
  if (has_offical_challenge_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->offical_challenge_buy(), output);
  }

  // optional int32 offical_share_num = 30;
  if (has_offical_share_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->offical_share_num(), output);
  }

  // optional uint32 bag_capacity = 31;
  if (has_bag_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bag_capacity(), output);
  }

  // optional uint64 mail_global_last_checktime = 32;
  if (has_mail_global_last_checktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->mail_global_last_checktime(), output);
  }

  // optional uint32 mail_send_private_limit_day = 33;
  if (has_mail_send_private_limit_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->mail_send_private_limit_day(), output);
  }

  // optional uint64 fight_power = 34;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->fight_power(), output);
  }

  // optional uint32 first_offical_award = 35;
  if (has_first_offical_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->first_offical_award(), output);
  }

  // optional uint32 cur_mainline_task_id = 36;
  if (has_cur_mainline_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->cur_mainline_task_id(), output);
  }

  // optional uint32 offical_apply_count = 37;
  if (has_offical_apply_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->offical_apply_count(), output);
  }

  // optional uint32 acc_login_count = 38;
  if (has_acc_login_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->acc_login_count(), output);
  }

  // optional bool has_first_common = 39;
  if (has_has_first_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->has_first_common(), output);
  }

  // optional bool has_first_special = 40;
  if (has_has_first_special()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->has_first_special(), output);
  }

  // optional bool has_first_ten_in_one_row = 41;
  if (has_has_first_ten_in_one_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->has_first_ten_in_one_row(), output);
  }

  // optional uint32 skill_point = 42;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->skill_point(), output);
  }

  // optional uint32 skill_point_revocer_tm = 43;
  if (has_skill_point_revocer_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->skill_point_revocer_tm(), output);
  }

  // optional uint32 wine = 44 [default = 0];
  if (has_wine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->wine(), output);
  }

  // optional int32 gm_auth = 45;
  if (has_gm_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->gm_auth(), output);
  }

  // optional uint32 wine_cup = 46 [default = 0];
  if (has_wine_cup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->wine_cup(), output);
  }

  // optional int32 daily_fortune = 48;
  if (has_daily_fortune()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->daily_fortune(), output);
  }

  // optional int32 energy = 49;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->energy(), output);
  }

  // optional int32 adv_times = 50;
  if (has_adv_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->adv_times(), output);
  }

  // optional int32 talent_point = 51;
  if (has_talent_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->talent_point(), output);
  }

  // repeated int32 lock_module_ids = 52;
  for (int i = 0; i < this->lock_module_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      52, this->lock_module_ids(i), output);
  }

  // optional bool pass_all = 53;
  if (has_pass_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->pass_all(), output);
  }

  // optional bool skip = 54;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->skip(), output);
  }

  // repeated int32 guide_ids = 55;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      55, this->guide_ids(i), output);
  }

  // optional int32 chat_room_award_times = 56;
  if (has_chat_room_award_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->chat_room_award_times(), output);
  }

  // optional int32 charm = 57;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->charm(), output);
  }

  // optional int32 popularity = 58;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->popularity(), output);
  }

  // repeated .SProtoSpace.friend_intimacy intimacy = 59;
  for (int i = 0; i < this->intimacy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->intimacy(i), output);
  }

  // repeated .SProtoSpace.couple_love love = 60;
  for (int i = 0; i < this->love_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->love(i), output);
  }

  // optional int32 change_name_time = 61 [default = 0];
  if (has_change_name_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->change_name_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_base_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional string account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area_id(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint64 offline_time = 6;
  if (has_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->offline_time(), target);
  }

  // optional uint64 db_svr_id = 7;
  if (has_db_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->db_svr_id(), target);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lv(), target);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }

  // optional int32 buy_power_times = 11;
  if (has_buy_power_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->buy_power_times(), target);
  }

  // optional int32 gold = 12;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gold(), target);
  }

  // optional int32 jade = 13;
  if (has_jade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->jade(), target);
  }

  // optional int32 power = 14;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->power(), target);
  }

  // optional int32 last_disc_id = 15;
  if (has_last_disc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->last_disc_id(), target);
  }

  // optional int32 task_activity = 16;
  if (has_task_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->task_activity(), target);
  }

  // repeated .SProtoSpace.game_system g_system = 17;
  for (int i = 0; i < this->g_system_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->g_system(i), target);
  }

  // optional uint64 login_time = 18;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->login_time(), target);
  }

  // optional int32 tender = 19;
  if (has_tender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tender(), target);
  }

  // optional int32 treason = 20;
  if (has_treason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->treason(), target);
  }

  // optional int32 wise = 21;
  if (has_wise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->wise(), target);
  }

  // optional int32 adorkable = 22;
  if (has_adorkable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->adorkable(), target);
  }

  // optional int32 good = 23;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->good(), target);
  }

  // optional int32 scheming = 24;
  if (has_scheming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->scheming(), target);
  }

  // optional int32 merit = 25;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->merit(), target);
  }

  // optional bool offical_salary = 26;
  if (has_offical_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->offical_salary(), target);
  }

  // optional int32 offical_salary_tm = 27;
  if (has_offical_salary_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->offical_salary_tm(), target);
  }

  // optional int32 offical_challenge_num = 28;
  if (has_offical_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->offical_challenge_num(), target);
  }

  // optional int32 offical_challenge_buy = 29;
  if (has_offical_challenge_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->offical_challenge_buy(), target);
  }

  // optional int32 offical_share_num = 30;
  if (has_offical_share_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->offical_share_num(), target);
  }

  // optional uint32 bag_capacity = 31;
  if (has_bag_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bag_capacity(), target);
  }

  // optional uint64 mail_global_last_checktime = 32;
  if (has_mail_global_last_checktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->mail_global_last_checktime(), target);
  }

  // optional uint32 mail_send_private_limit_day = 33;
  if (has_mail_send_private_limit_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->mail_send_private_limit_day(), target);
  }

  // optional uint64 fight_power = 34;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->fight_power(), target);
  }

  // optional uint32 first_offical_award = 35;
  if (has_first_offical_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->first_offical_award(), target);
  }

  // optional uint32 cur_mainline_task_id = 36;
  if (has_cur_mainline_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->cur_mainline_task_id(), target);
  }

  // optional uint32 offical_apply_count = 37;
  if (has_offical_apply_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->offical_apply_count(), target);
  }

  // optional uint32 acc_login_count = 38;
  if (has_acc_login_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->acc_login_count(), target);
  }

  // optional bool has_first_common = 39;
  if (has_has_first_common()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->has_first_common(), target);
  }

  // optional bool has_first_special = 40;
  if (has_has_first_special()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->has_first_special(), target);
  }

  // optional bool has_first_ten_in_one_row = 41;
  if (has_has_first_ten_in_one_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->has_first_ten_in_one_row(), target);
  }

  // optional uint32 skill_point = 42;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->skill_point(), target);
  }

  // optional uint32 skill_point_revocer_tm = 43;
  if (has_skill_point_revocer_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->skill_point_revocer_tm(), target);
  }

  // optional uint32 wine = 44 [default = 0];
  if (has_wine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->wine(), target);
  }

  // optional int32 gm_auth = 45;
  if (has_gm_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->gm_auth(), target);
  }

  // optional uint32 wine_cup = 46 [default = 0];
  if (has_wine_cup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->wine_cup(), target);
  }

  // optional int32 daily_fortune = 48;
  if (has_daily_fortune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->daily_fortune(), target);
  }

  // optional int32 energy = 49;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->energy(), target);
  }

  // optional int32 adv_times = 50;
  if (has_adv_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->adv_times(), target);
  }

  // optional int32 talent_point = 51;
  if (has_talent_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->talent_point(), target);
  }

  // repeated int32 lock_module_ids = 52;
  for (int i = 0; i < this->lock_module_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(52, this->lock_module_ids(i), target);
  }

  // optional bool pass_all = 53;
  if (has_pass_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->pass_all(), target);
  }

  // optional bool skip = 54;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->skip(), target);
  }

  // repeated int32 guide_ids = 55;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(55, this->guide_ids(i), target);
  }

  // optional int32 chat_room_award_times = 56;
  if (has_chat_room_award_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->chat_room_award_times(), target);
  }

  // optional int32 charm = 57;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->charm(), target);
  }

  // optional int32 popularity = 58;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->popularity(), target);
  }

  // repeated .SProtoSpace.friend_intimacy intimacy = 59;
  for (int i = 0; i < this->intimacy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->intimacy(i), target);
  }

  // repeated .SProtoSpace.couple_love love = 60;
  for (int i = 0; i < this->love_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->love(i), target);
  }

  // optional int32 change_name_time = 61 [default = 0];
  if (has_change_name_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->change_name_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_base_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional uint32 area_id = 4;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint64 offline_time = 6;
    if (has_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offline_time());
    }

    // optional uint64 db_svr_id = 7;
    if (has_db_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_svr_id());
    }

    // optional int32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 buy_power_times = 11;
    if (has_buy_power_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_power_times());
    }

    // optional int32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 jade = 13;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jade());
    }

    // optional int32 power = 14;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 last_disc_id = 15;
    if (has_last_disc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_disc_id());
    }

    // optional int32 task_activity = 16;
    if (has_task_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_activity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 login_time = 18;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional int32 tender = 19;
    if (has_tender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tender());
    }

    // optional int32 treason = 20;
    if (has_treason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treason());
    }

    // optional int32 wise = 21;
    if (has_wise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wise());
    }

    // optional int32 adorkable = 22;
    if (has_adorkable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adorkable());
    }

    // optional int32 good = 23;
    if (has_good()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good());
    }

    // optional int32 scheming = 24;
    if (has_scheming()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scheming());
    }

    // optional int32 merit = 25;
    if (has_merit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool offical_salary = 26;
    if (has_offical_salary()) {
      total_size += 2 + 1;
    }

    // optional int32 offical_salary_tm = 27;
    if (has_offical_salary_tm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_salary_tm());
    }

    // optional int32 offical_challenge_num = 28;
    if (has_offical_challenge_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_num());
    }

    // optional int32 offical_challenge_buy = 29;
    if (has_offical_challenge_buy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_buy());
    }

    // optional int32 offical_share_num = 30;
    if (has_offical_share_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_share_num());
    }

    // optional uint32 bag_capacity = 31;
    if (has_bag_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag_capacity());
    }

    // optional uint64 mail_global_last_checktime = 32;
    if (has_mail_global_last_checktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_global_last_checktime());
    }

    // optional uint32 mail_send_private_limit_day = 33;
    if (has_mail_send_private_limit_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_send_private_limit_day());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 fight_power = 34;
    if (has_fight_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_power());
    }

    // optional uint32 first_offical_award = 35;
    if (has_first_offical_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_offical_award());
    }

    // optional uint32 cur_mainline_task_id = 36;
    if (has_cur_mainline_task_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_mainline_task_id());
    }

    // optional uint32 offical_apply_count = 37;
    if (has_offical_apply_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offical_apply_count());
    }

    // optional uint32 acc_login_count = 38;
    if (has_acc_login_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc_login_count());
    }

    // optional bool has_first_common = 39;
    if (has_has_first_common()) {
      total_size += 2 + 1;
    }

    // optional bool has_first_special = 40;
    if (has_has_first_special()) {
      total_size += 2 + 1;
    }

    // optional bool has_first_ten_in_one_row = 41;
    if (has_has_first_ten_in_one_row()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 skill_point = 42;
    if (has_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // optional uint32 skill_point_revocer_tm = 43;
    if (has_skill_point_revocer_tm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_revocer_tm());
    }

    // optional uint32 wine = 44 [default = 0];
    if (has_wine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine());
    }

    // optional int32 gm_auth = 45;
    if (has_gm_auth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_auth());
    }

    // optional uint32 wine_cup = 46 [default = 0];
    if (has_wine_cup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine_cup());
    }

    // optional int32 daily_fortune = 48;
    if (has_daily_fortune()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_fortune());
    }

    // optional int32 energy = 49;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

    // optional int32 adv_times = 50;
    if (has_adv_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_times());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 talent_point = 51;
    if (has_talent_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_point());
    }

    // optional bool pass_all = 53;
    if (has_pass_all()) {
      total_size += 2 + 1;
    }

    // optional bool skip = 54;
    if (has_skip()) {
      total_size += 2 + 1;
    }

    // optional int32 chat_room_award_times = 56;
    if (has_chat_room_award_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_room_award_times());
    }

    // optional int32 charm = 57;
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charm());
    }

    // optional int32 popularity = 58;
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popularity());
    }

  }
  if (_has_bits_[58 / 32] & (0xffu << (58 % 32))) {
    // optional int32 change_name_time = 61 [default = 0];
    if (has_change_name_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_name_time());
    }

  }
  // repeated .SProtoSpace.game_system g_system = 17;
  total_size += 2 * this->g_system_size();
  for (int i = 0; i < this->g_system_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->g_system(i));
  }

  // repeated int32 lock_module_ids = 52;
  {
    int data_size = 0;
    for (int i = 0; i < this->lock_module_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lock_module_ids(i));
    }
    total_size += 2 * this->lock_module_ids_size() + data_size;
  }

  // repeated int32 guide_ids = 55;
  {
    int data_size = 0;
    for (int i = 0; i < this->guide_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guide_ids(i));
    }
    total_size += 2 * this->guide_ids_size() + data_size;
  }

  // repeated .SProtoSpace.friend_intimacy intimacy = 59;
  total_size += 2 * this->intimacy_size();
  for (int i = 0; i < this->intimacy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intimacy(i));
  }

  // repeated .SProtoSpace.couple_love love = 60;
  total_size += 2 * this->love_size();
  for (int i = 0; i < this->love_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->love(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_base_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_base_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_base_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_base_data::MergeFrom(const role_base_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  g_system_.MergeFrom(from.g_system_);
  lock_module_ids_.MergeFrom(from.lock_module_ids_);
  guide_ids_.MergeFrom(from.guide_ids_);
  intimacy_.MergeFrom(from.intimacy_);
  love_.MergeFrom(from.love_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
    if (from.has_db_svr_id()) {
      set_db_svr_id(from.db_svr_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_buy_power_times()) {
      set_buy_power_times(from.buy_power_times());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_last_disc_id()) {
      set_last_disc_id(from.last_disc_id());
    }
    if (from.has_task_activity()) {
      set_task_activity(from.task_activity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_tender()) {
      set_tender(from.tender());
    }
    if (from.has_treason()) {
      set_treason(from.treason());
    }
    if (from.has_wise()) {
      set_wise(from.wise());
    }
    if (from.has_adorkable()) {
      set_adorkable(from.adorkable());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_scheming()) {
      set_scheming(from.scheming());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_offical_salary()) {
      set_offical_salary(from.offical_salary());
    }
    if (from.has_offical_salary_tm()) {
      set_offical_salary_tm(from.offical_salary_tm());
    }
    if (from.has_offical_challenge_num()) {
      set_offical_challenge_num(from.offical_challenge_num());
    }
    if (from.has_offical_challenge_buy()) {
      set_offical_challenge_buy(from.offical_challenge_buy());
    }
    if (from.has_offical_share_num()) {
      set_offical_share_num(from.offical_share_num());
    }
    if (from.has_bag_capacity()) {
      set_bag_capacity(from.bag_capacity());
    }
    if (from.has_mail_global_last_checktime()) {
      set_mail_global_last_checktime(from.mail_global_last_checktime());
    }
    if (from.has_mail_send_private_limit_day()) {
      set_mail_send_private_limit_day(from.mail_send_private_limit_day());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_first_offical_award()) {
      set_first_offical_award(from.first_offical_award());
    }
    if (from.has_cur_mainline_task_id()) {
      set_cur_mainline_task_id(from.cur_mainline_task_id());
    }
    if (from.has_offical_apply_count()) {
      set_offical_apply_count(from.offical_apply_count());
    }
    if (from.has_acc_login_count()) {
      set_acc_login_count(from.acc_login_count());
    }
    if (from.has_has_first_common()) {
      set_has_first_common(from.has_first_common());
    }
    if (from.has_has_first_special()) {
      set_has_first_special(from.has_first_special());
    }
    if (from.has_has_first_ten_in_one_row()) {
      set_has_first_ten_in_one_row(from.has_first_ten_in_one_row());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_skill_point_revocer_tm()) {
      set_skill_point_revocer_tm(from.skill_point_revocer_tm());
    }
    if (from.has_wine()) {
      set_wine(from.wine());
    }
    if (from.has_gm_auth()) {
      set_gm_auth(from.gm_auth());
    }
    if (from.has_wine_cup()) {
      set_wine_cup(from.wine_cup());
    }
    if (from.has_daily_fortune()) {
      set_daily_fortune(from.daily_fortune());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_adv_times()) {
      set_adv_times(from.adv_times());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_talent_point()) {
      set_talent_point(from.talent_point());
    }
    if (from.has_pass_all()) {
      set_pass_all(from.pass_all());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_chat_room_award_times()) {
      set_chat_room_award_times(from.chat_room_award_times());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  if (from._has_bits_[58 / 32] & (0xffu << (58 % 32))) {
    if (from.has_change_name_time()) {
      set_change_name_time(from.change_name_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_base_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_base_data::CopyFrom(const role_base_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_base_data::IsInitialized() const {

  return true;
}

void role_base_data::Swap(role_base_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(account_id_, other->account_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(sex_, other->sex_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(db_svr_id_, other->db_svr_id_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(buy_power_times_, other->buy_power_times_);
    std::swap(gold_, other->gold_);
    std::swap(jade_, other->jade_);
    std::swap(power_, other->power_);
    std::swap(last_disc_id_, other->last_disc_id_);
    std::swap(task_activity_, other->task_activity_);
    g_system_.Swap(&other->g_system_);
    std::swap(login_time_, other->login_time_);
    std::swap(tender_, other->tender_);
    std::swap(treason_, other->treason_);
    std::swap(wise_, other->wise_);
    std::swap(adorkable_, other->adorkable_);
    std::swap(good_, other->good_);
    std::swap(scheming_, other->scheming_);
    std::swap(merit_, other->merit_);
    std::swap(offical_salary_, other->offical_salary_);
    std::swap(offical_salary_tm_, other->offical_salary_tm_);
    std::swap(offical_challenge_num_, other->offical_challenge_num_);
    std::swap(offical_challenge_buy_, other->offical_challenge_buy_);
    std::swap(offical_share_num_, other->offical_share_num_);
    std::swap(bag_capacity_, other->bag_capacity_);
    std::swap(mail_global_last_checktime_, other->mail_global_last_checktime_);
    std::swap(mail_send_private_limit_day_, other->mail_send_private_limit_day_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(first_offical_award_, other->first_offical_award_);
    std::swap(cur_mainline_task_id_, other->cur_mainline_task_id_);
    std::swap(offical_apply_count_, other->offical_apply_count_);
    std::swap(acc_login_count_, other->acc_login_count_);
    std::swap(has_first_common_, other->has_first_common_);
    std::swap(has_first_special_, other->has_first_special_);
    std::swap(has_first_ten_in_one_row_, other->has_first_ten_in_one_row_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(skill_point_revocer_tm_, other->skill_point_revocer_tm_);
    std::swap(wine_, other->wine_);
    std::swap(gm_auth_, other->gm_auth_);
    std::swap(wine_cup_, other->wine_cup_);
    std::swap(daily_fortune_, other->daily_fortune_);
    std::swap(energy_, other->energy_);
    std::swap(adv_times_, other->adv_times_);
    std::swap(talent_point_, other->talent_point_);
    lock_module_ids_.Swap(&other->lock_module_ids_);
    std::swap(pass_all_, other->pass_all_);
    std::swap(skip_, other->skip_);
    guide_ids_.Swap(&other->guide_ids_);
    std::swap(chat_room_award_times_, other->chat_room_award_times_);
    std::swap(charm_, other->charm_);
    std::swap(popularity_, other->popularity_);
    intimacy_.Swap(&other->intimacy_);
    love_.Swap(&other->love_);
    std::swap(change_name_time_, other->change_name_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_base_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_base_data_descriptor_;
  metadata.reflection = role_base_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_chest_data::kDbModeFieldNumber;
const int unit_chest_data::kUuidFieldNumber;
const int unit_chest_data::kChestFieldNumber;
#endif  // !_MSC_VER

unit_chest_data::unit_chest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_chest_data::InitAsDefaultInstance() {
  chest_ = const_cast< ::SProtoSpace::role_chest*>(&::SProtoSpace::role_chest::default_instance());
}

unit_chest_data::unit_chest_data(const unit_chest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_chest_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  chest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_chest_data::~unit_chest_data() {
  SharedDtor();
}

void unit_chest_data::SharedDtor() {
  if (this != default_instance_) {
    delete chest_;
  }
}

void unit_chest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_chest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_chest_data_descriptor_;
}

const unit_chest_data& unit_chest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_chest_data* unit_chest_data::default_instance_ = NULL;

unit_chest_data* unit_chest_data::New() const {
  return new unit_chest_data;
}

void unit_chest_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_chest()) {
      if (chest_ != NULL) chest_->::SProtoSpace::role_chest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_chest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chest;
        break;
      }

      // optional .SProtoSpace.role_chest chest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_chest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.role_chest chest = 3;
  if (has_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_chest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.role_chest chest = 3;
  if (has_chest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_chest_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.role_chest chest = 3;
    if (has_chest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_chest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_chest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_chest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_chest_data::MergeFrom(const unit_chest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_chest()) {
      mutable_chest()->::SProtoSpace::role_chest::MergeFrom(from.chest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_chest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_chest_data::CopyFrom(const unit_chest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_chest_data::IsInitialized() const {

  return true;
}

void unit_chest_data::Swap(unit_chest_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(chest_, other->chest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_chest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_chest_data_descriptor_;
  metadata.reflection = unit_chest_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_free_times_draw_card::kDbModeFieldNumber;
const int unit_free_times_draw_card::kUuidFieldNumber;
const int unit_free_times_draw_card::kDrawTypeFieldNumber;
const int unit_free_times_draw_card::kUsedTodayFieldNumber;
const int unit_free_times_draw_card::kNowHasTimesFieldNumber;
const int unit_free_times_draw_card::kTimeLastUsedFieldNumber;
const int unit_free_times_draw_card::kFreeLeftDayFieldNumber;
const int unit_free_times_draw_card::kLimitLeftDayFieldNumber;
const int unit_free_times_draw_card::kTotalTimeFieldNumber;
#endif  // !_MSC_VER

unit_free_times_draw_card::unit_free_times_draw_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_free_times_draw_card::InitAsDefaultInstance() {
}

unit_free_times_draw_card::unit_free_times_draw_card(const unit_free_times_draw_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_free_times_draw_card::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  draw_type_ = 0;
  used_today_ = 0;
  now_has_times_ = 0;
  time_last_used_ = 0u;
  free_left_day_ = 0;
  limit_left_day_ = 0;
  total_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_free_times_draw_card::~unit_free_times_draw_card() {
  SharedDtor();
}

void unit_free_times_draw_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_free_times_draw_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_free_times_draw_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_free_times_draw_card_descriptor_;
}

const unit_free_times_draw_card& unit_free_times_draw_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_free_times_draw_card* unit_free_times_draw_card::default_instance_ = NULL;

unit_free_times_draw_card* unit_free_times_draw_card::New() const {
  return new unit_free_times_draw_card;
}

void unit_free_times_draw_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    draw_type_ = 0;
    used_today_ = 0;
    now_has_times_ = 0;
    time_last_used_ = 0u;
    free_left_day_ = 0;
    limit_left_day_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_free_times_draw_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_type;
        break;
      }

      // optional int32 draw_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_)));
          set_has_draw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_today;
        break;
      }

      // optional int32 used_today = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_today_)));
          set_has_used_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_now_has_times;
        break;
      }

      // optional int32 now_has_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_has_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_has_times_)));
          set_has_now_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_last_used;
        break;
      }

      // optional uint32 time_last_used = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_last_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_used_)));
          set_has_time_last_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_free_left_day;
        break;
      }

      // optional int32 free_left_day = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_left_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_left_day_)));
          set_has_free_left_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_limit_left_day;
        break;
      }

      // optional int32 limit_left_day = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_left_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_left_day_)));
          set_has_limit_left_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_time;
        break;
      }

      // optional int32 total_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_free_times_draw_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_type(), output);
  }

  // optional int32 used_today = 4;
  if (has_used_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->used_today(), output);
  }

  // optional int32 now_has_times = 5;
  if (has_now_has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->now_has_times(), output);
  }

  // optional uint32 time_last_used = 6;
  if (has_time_last_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_last_used(), output);
  }

  // optional int32 free_left_day = 7;
  if (has_free_left_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->free_left_day(), output);
  }

  // optional int32 limit_left_day = 8;
  if (has_limit_left_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limit_left_day(), output);
  }

  // optional int32 total_time = 9;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_free_times_draw_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_type(), target);
  }

  // optional int32 used_today = 4;
  if (has_used_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->used_today(), target);
  }

  // optional int32 now_has_times = 5;
  if (has_now_has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->now_has_times(), target);
  }

  // optional uint32 time_last_used = 6;
  if (has_time_last_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_last_used(), target);
  }

  // optional int32 free_left_day = 7;
  if (has_free_left_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->free_left_day(), target);
  }

  // optional int32 limit_left_day = 8;
  if (has_limit_left_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limit_left_day(), target);
  }

  // optional int32 total_time = 9;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_free_times_draw_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 draw_type = 3;
    if (has_draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type());
    }

    // optional int32 used_today = 4;
    if (has_used_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_today());
    }

    // optional int32 now_has_times = 5;
    if (has_now_has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_has_times());
    }

    // optional uint32 time_last_used = 6;
    if (has_time_last_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_used());
    }

    // optional int32 free_left_day = 7;
    if (has_free_left_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_left_day());
    }

    // optional int32 limit_left_day = 8;
    if (has_limit_left_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_left_day());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_time = 9;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_free_times_draw_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_free_times_draw_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_free_times_draw_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_free_times_draw_card::MergeFrom(const unit_free_times_draw_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_draw_type()) {
      set_draw_type(from.draw_type());
    }
    if (from.has_used_today()) {
      set_used_today(from.used_today());
    }
    if (from.has_now_has_times()) {
      set_now_has_times(from.now_has_times());
    }
    if (from.has_time_last_used()) {
      set_time_last_used(from.time_last_used());
    }
    if (from.has_free_left_day()) {
      set_free_left_day(from.free_left_day());
    }
    if (from.has_limit_left_day()) {
      set_limit_left_day(from.limit_left_day());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_free_times_draw_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_free_times_draw_card::CopyFrom(const unit_free_times_draw_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_free_times_draw_card::IsInitialized() const {

  return true;
}

void unit_free_times_draw_card::Swap(unit_free_times_draw_card* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(draw_type_, other->draw_type_);
    std::swap(used_today_, other->used_today_);
    std::swap(now_has_times_, other->now_has_times_);
    std::swap(time_last_used_, other->time_last_used_);
    std::swap(free_left_day_, other->free_left_day_);
    std::swap(limit_left_day_, other->limit_left_day_);
    std::swap(total_time_, other->total_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_free_times_draw_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_free_times_draw_card_descriptor_;
  metadata.reflection = unit_free_times_draw_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_limit_draw_card::kDbModeFieldNumber;
const int unit_limit_draw_card::kUuidFieldNumber;
const int unit_limit_draw_card::kDrawTypeFieldNumber;
const int unit_limit_draw_card::kUsedTodayFieldNumber;
const int unit_limit_draw_card::kTimeLastDrawFieldNumber;
#endif  // !_MSC_VER

unit_limit_draw_card::unit_limit_draw_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_limit_draw_card::InitAsDefaultInstance() {
}

unit_limit_draw_card::unit_limit_draw_card(const unit_limit_draw_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_limit_draw_card::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  draw_type_ = 0;
  used_today_ = 0;
  time_last_draw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_limit_draw_card::~unit_limit_draw_card() {
  SharedDtor();
}

void unit_limit_draw_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_limit_draw_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_limit_draw_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_limit_draw_card_descriptor_;
}

const unit_limit_draw_card& unit_limit_draw_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_limit_draw_card* unit_limit_draw_card::default_instance_ = NULL;

unit_limit_draw_card* unit_limit_draw_card::New() const {
  return new unit_limit_draw_card;
}

void unit_limit_draw_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    draw_type_ = 0;
    used_today_ = 0;
    time_last_draw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_limit_draw_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_type;
        break;
      }

      // optional int32 draw_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_)));
          set_has_draw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_today;
        break;
      }

      // optional int32 used_today = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_today_)));
          set_has_used_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_last_draw;
        break;
      }

      // optional uint32 time_last_draw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_last_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_draw_)));
          set_has_time_last_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_limit_draw_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_type(), output);
  }

  // optional int32 used_today = 4;
  if (has_used_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->used_today(), output);
  }

  // optional uint32 time_last_draw = 5;
  if (has_time_last_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_last_draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_limit_draw_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_type(), target);
  }

  // optional int32 used_today = 4;
  if (has_used_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->used_today(), target);
  }

  // optional uint32 time_last_draw = 5;
  if (has_time_last_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_last_draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_limit_draw_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 draw_type = 3;
    if (has_draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type());
    }

    // optional int32 used_today = 4;
    if (has_used_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_today());
    }

    // optional uint32 time_last_draw = 5;
    if (has_time_last_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_draw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_limit_draw_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_limit_draw_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_limit_draw_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_limit_draw_card::MergeFrom(const unit_limit_draw_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_draw_type()) {
      set_draw_type(from.draw_type());
    }
    if (from.has_used_today()) {
      set_used_today(from.used_today());
    }
    if (from.has_time_last_draw()) {
      set_time_last_draw(from.time_last_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_limit_draw_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_limit_draw_card::CopyFrom(const unit_limit_draw_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_limit_draw_card::IsInitialized() const {

  return true;
}

void unit_limit_draw_card::Swap(unit_limit_draw_card* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(draw_type_, other->draw_type_);
    std::swap(used_today_, other->used_today_);
    std::swap(time_last_draw_, other->time_last_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_limit_draw_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_limit_draw_card_descriptor_;
  metadata.reflection = unit_limit_draw_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_unit_draw_card::kDbModeFieldNumber;
const int db_unit_draw_card::kUuidFieldNumber;
const int db_unit_draw_card::kDrawTypeFieldNumber;
const int db_unit_draw_card::kNowRemainTimesFieldNumber;
const int db_unit_draw_card::kTodyRemainFreeTimesFieldNumber;
const int db_unit_draw_card::kTodyRemainLimitTimesFieldNumber;
const int db_unit_draw_card::kTotalTimesFieldNumber;
const int db_unit_draw_card::kLastOptTimeFieldNumber;
#endif  // !_MSC_VER

db_unit_draw_card::db_unit_draw_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_unit_draw_card::InitAsDefaultInstance() {
}

db_unit_draw_card::db_unit_draw_card(const db_unit_draw_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_unit_draw_card::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  draw_type_ = 0;
  now_remain_times_ = 0;
  tody_remain_free_times_ = 0;
  tody_remain_limit_times_ = 0;
  total_times_ = 0;
  last_opt_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_unit_draw_card::~db_unit_draw_card() {
  SharedDtor();
}

void db_unit_draw_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_unit_draw_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_unit_draw_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_unit_draw_card_descriptor_;
}

const db_unit_draw_card& db_unit_draw_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_unit_draw_card* db_unit_draw_card::default_instance_ = NULL;

db_unit_draw_card* db_unit_draw_card::New() const {
  return new db_unit_draw_card;
}

void db_unit_draw_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    draw_type_ = 0;
    now_remain_times_ = 0;
    tody_remain_free_times_ = 0;
    tody_remain_limit_times_ = 0;
    total_times_ = 0;
    last_opt_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_unit_draw_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_type;
        break;
      }

      // optional int32 draw_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_)));
          set_has_draw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_now_remain_times;
        break;
      }

      // optional int32 now_remain_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_remain_times_)));
          set_has_now_remain_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tody_remain_free_times;
        break;
      }

      // optional int32 tody_remain_free_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tody_remain_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tody_remain_free_times_)));
          set_has_tody_remain_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tody_remain_limit_times;
        break;
      }

      // optional int32 tody_remain_limit_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tody_remain_limit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tody_remain_limit_times_)));
          set_has_tody_remain_limit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_times;
        break;
      }

      // optional int32 total_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_times_)));
          set_has_total_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_opt_time;
        break;
      }

      // optional uint32 last_opt_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_opt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_opt_time_)));
          set_has_last_opt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_unit_draw_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_type(), output);
  }

  // optional int32 now_remain_times = 4;
  if (has_now_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->now_remain_times(), output);
  }

  // optional int32 tody_remain_free_times = 5;
  if (has_tody_remain_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tody_remain_free_times(), output);
  }

  // optional int32 tody_remain_limit_times = 6;
  if (has_tody_remain_limit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tody_remain_limit_times(), output);
  }

  // optional int32 total_times = 7;
  if (has_total_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_times(), output);
  }

  // optional uint32 last_opt_time = 8;
  if (has_last_opt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_opt_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_unit_draw_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_type(), target);
  }

  // optional int32 now_remain_times = 4;
  if (has_now_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->now_remain_times(), target);
  }

  // optional int32 tody_remain_free_times = 5;
  if (has_tody_remain_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tody_remain_free_times(), target);
  }

  // optional int32 tody_remain_limit_times = 6;
  if (has_tody_remain_limit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tody_remain_limit_times(), target);
  }

  // optional int32 total_times = 7;
  if (has_total_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_times(), target);
  }

  // optional uint32 last_opt_time = 8;
  if (has_last_opt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_opt_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_unit_draw_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 draw_type = 3;
    if (has_draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type());
    }

    // optional int32 now_remain_times = 4;
    if (has_now_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_remain_times());
    }

    // optional int32 tody_remain_free_times = 5;
    if (has_tody_remain_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tody_remain_free_times());
    }

    // optional int32 tody_remain_limit_times = 6;
    if (has_tody_remain_limit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tody_remain_limit_times());
    }

    // optional int32 total_times = 7;
    if (has_total_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_times());
    }

    // optional uint32 last_opt_time = 8;
    if (has_last_opt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_opt_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_unit_draw_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_unit_draw_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_unit_draw_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_unit_draw_card::MergeFrom(const db_unit_draw_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_draw_type()) {
      set_draw_type(from.draw_type());
    }
    if (from.has_now_remain_times()) {
      set_now_remain_times(from.now_remain_times());
    }
    if (from.has_tody_remain_free_times()) {
      set_tody_remain_free_times(from.tody_remain_free_times());
    }
    if (from.has_tody_remain_limit_times()) {
      set_tody_remain_limit_times(from.tody_remain_limit_times());
    }
    if (from.has_total_times()) {
      set_total_times(from.total_times());
    }
    if (from.has_last_opt_time()) {
      set_last_opt_time(from.last_opt_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_unit_draw_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_unit_draw_card::CopyFrom(const db_unit_draw_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_unit_draw_card::IsInitialized() const {

  return true;
}

void db_unit_draw_card::Swap(db_unit_draw_card* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(draw_type_, other->draw_type_);
    std::swap(now_remain_times_, other->now_remain_times_);
    std::swap(tody_remain_free_times_, other->tody_remain_free_times_);
    std::swap(tody_remain_limit_times_, other->tody_remain_limit_times_);
    std::swap(total_times_, other->total_times_);
    std::swap(last_opt_time_, other->last_opt_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_unit_draw_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_unit_draw_card_descriptor_;
  metadata.reflection = db_unit_draw_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_unit_draw_card_special::kDbModeFieldNumber;
const int db_unit_draw_card_special::kUuidFieldNumber;
const int db_unit_draw_card_special::kDrawTypeFieldNumber;
const int db_unit_draw_card_special::kRemSpecialTimeSFieldNumber;
#endif  // !_MSC_VER

db_unit_draw_card_special::db_unit_draw_card_special()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_unit_draw_card_special::InitAsDefaultInstance() {
}

db_unit_draw_card_special::db_unit_draw_card_special(const db_unit_draw_card_special& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_unit_draw_card_special::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  draw_type_ = 0;
  rem_special_time_s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_unit_draw_card_special::~db_unit_draw_card_special() {
  SharedDtor();
}

void db_unit_draw_card_special::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_unit_draw_card_special::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_unit_draw_card_special::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_unit_draw_card_special_descriptor_;
}

const db_unit_draw_card_special& db_unit_draw_card_special::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_unit_draw_card_special* db_unit_draw_card_special::default_instance_ = NULL;

db_unit_draw_card_special* db_unit_draw_card_special::New() const {
  return new db_unit_draw_card_special;
}

void db_unit_draw_card_special::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    draw_type_ = 0;
    rem_special_time_s_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_unit_draw_card_special::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_type;
        break;
      }

      // optional int32 draw_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_)));
          set_has_draw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rem_special_time_s;
        break;
      }

      // optional int32 rem_special_time_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rem_special_time_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rem_special_time_s_)));
          set_has_rem_special_time_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_unit_draw_card_special::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_type(), output);
  }

  // optional int32 rem_special_time_s = 4;
  if (has_rem_special_time_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rem_special_time_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_unit_draw_card_special::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 draw_type = 3;
  if (has_draw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_type(), target);
  }

  // optional int32 rem_special_time_s = 4;
  if (has_rem_special_time_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rem_special_time_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_unit_draw_card_special::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 draw_type = 3;
    if (has_draw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type());
    }

    // optional int32 rem_special_time_s = 4;
    if (has_rem_special_time_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rem_special_time_s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_unit_draw_card_special::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_unit_draw_card_special* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_unit_draw_card_special*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_unit_draw_card_special::MergeFrom(const db_unit_draw_card_special& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_draw_type()) {
      set_draw_type(from.draw_type());
    }
    if (from.has_rem_special_time_s()) {
      set_rem_special_time_s(from.rem_special_time_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_unit_draw_card_special::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_unit_draw_card_special::CopyFrom(const db_unit_draw_card_special& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_unit_draw_card_special::IsInitialized() const {

  return true;
}

void db_unit_draw_card_special::Swap(db_unit_draw_card_special* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(draw_type_, other->draw_type_);
    std::swap(rem_special_time_s_, other->rem_special_time_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_unit_draw_card_special::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_unit_draw_card_special_descriptor_;
  metadata.reflection = db_unit_draw_card_special_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_unit_mail_data::kDbModeFieldNumber;
const int db_unit_mail_data::kUuidFieldNumber;
const int db_unit_mail_data::kTimeIdFieldNumber;
#endif  // !_MSC_VER

db_unit_mail_data::db_unit_mail_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_unit_mail_data::InitAsDefaultInstance() {
}

db_unit_mail_data::db_unit_mail_data(const db_unit_mail_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_unit_mail_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  time_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_unit_mail_data::~db_unit_mail_data() {
  SharedDtor();
}

void db_unit_mail_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_unit_mail_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_unit_mail_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_unit_mail_data_descriptor_;
}

const db_unit_mail_data& db_unit_mail_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_unit_mail_data* db_unit_mail_data::default_instance_ = NULL;

db_unit_mail_data* db_unit_mail_data::New() const {
  return new db_unit_mail_data;
}

void db_unit_mail_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    time_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_unit_mail_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_id;
        break;
      }

      // optional uint64 time_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_id_)));
          set_has_time_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_unit_mail_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint64 time_id = 4;
  if (has_time_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_unit_mail_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint64 time_id = 4;
  if (has_time_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_unit_mail_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 time_id = 4;
    if (has_time_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_unit_mail_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_unit_mail_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_unit_mail_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_unit_mail_data::MergeFrom(const db_unit_mail_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_time_id()) {
      set_time_id(from.time_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_unit_mail_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_unit_mail_data::CopyFrom(const db_unit_mail_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_unit_mail_data::IsInitialized() const {

  return true;
}

void db_unit_mail_data::Swap(db_unit_mail_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(time_id_, other->time_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_unit_mail_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_unit_mail_data_descriptor_;
  metadata.reflection = db_unit_mail_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_unit_mail_send_data::kDbModeFieldNumber;
const int db_unit_mail_send_data::kUuidFieldNumber;
const int db_unit_mail_send_data::kTimeFieldNumber;
const int db_unit_mail_send_data::kFreeLeftDayFieldNumber;
#endif  // !_MSC_VER

db_unit_mail_send_data::db_unit_mail_send_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_unit_mail_send_data::InitAsDefaultInstance() {
}

db_unit_mail_send_data::db_unit_mail_send_data(const db_unit_mail_send_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_unit_mail_send_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  free_left_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_unit_mail_send_data::~db_unit_mail_send_data() {
  SharedDtor();
}

void db_unit_mail_send_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_unit_mail_send_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_unit_mail_send_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_unit_mail_send_data_descriptor_;
}

const db_unit_mail_send_data& db_unit_mail_send_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_unit_mail_send_data* db_unit_mail_send_data::default_instance_ = NULL;

db_unit_mail_send_data* db_unit_mail_send_data::New() const {
  return new db_unit_mail_send_data;
}

void db_unit_mail_send_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    free_left_day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_unit_mail_send_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_free_left_day;
        break;
      }

      // optional int32 free_left_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_left_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_left_day_)));
          set_has_free_left_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_unit_mail_send_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional int32 free_left_day = 5;
  if (has_free_left_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->free_left_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_unit_mail_send_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional int32 free_left_day = 5;
  if (has_free_left_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->free_left_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_unit_mail_send_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional int32 free_left_day = 5;
    if (has_free_left_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_left_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_unit_mail_send_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_unit_mail_send_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_unit_mail_send_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_unit_mail_send_data::MergeFrom(const db_unit_mail_send_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_free_left_day()) {
      set_free_left_day(from.free_left_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_unit_mail_send_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_unit_mail_send_data::CopyFrom(const db_unit_mail_send_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_unit_mail_send_data::IsInitialized() const {

  return true;
}

void db_unit_mail_send_data::Swap(db_unit_mail_send_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(time_, other->time_);
    std::swap(free_left_day_, other->free_left_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_unit_mail_send_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_unit_mail_send_data_descriptor_;
  metadata.reflection = db_unit_mail_send_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_item_data::kItemDatasFieldNumber;
const int role_item_data::kChestsFieldNumber;
const int role_item_data::kDrawCardFreeTimesFieldNumber;
const int role_item_data::kDrawCardLimitFieldNumber;
const int role_item_data::kFashionsFieldNumber;
const int role_item_data::kDrawCardSFieldNumber;
const int role_item_data::kDrawCardSpecailSFieldNumber;
const int role_item_data::kItemRoleFashionSFieldNumber;
const int role_item_data::kMailDataFieldNumber;
const int role_item_data::kMailSendFieldNumber;
#endif  // !_MSC_VER

role_item_data::role_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_item_data::InitAsDefaultInstance() {
}

role_item_data::role_item_data(const role_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_item_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_item_data::~role_item_data() {
  SharedDtor();
}

void role_item_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_item_data_descriptor_;
}

const role_item_data& role_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_item_data* role_item_data::default_instance_ = NULL;

role_item_data* role_item_data::New() const {
  return new role_item_data;
}

void role_item_data::Clear() {
  item_datas_.Clear();
  chests_.Clear();
  draw_card_free_times_.Clear();
  draw_card_limit_.Clear();
  fashions_.Clear();
  draw_card_s_.Clear();
  draw_card_specail_s_.Clear();
  item_role_fashion_s_.Clear();
  mail_data_.Clear();
  mail_send_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_item_data item_datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_datas;
        if (input->ExpectTag(18)) goto parse_chests;
        break;
      }

      // repeated .SProtoSpace.unit_chest_data chests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chests;
        if (input->ExpectTag(26)) goto parse_draw_card_free_times;
        break;
      }

      // repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_card_free_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_card_free_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_draw_card_free_times;
        if (input->ExpectTag(34)) goto parse_draw_card_limit;
        break;
      }

      // repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_card_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_card_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_draw_card_limit;
        if (input->ExpectTag(42)) goto parse_fashions;
        break;
      }

      // repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fashions;
        if (input->ExpectTag(50)) goto parse_draw_card_s;
        break;
      }

      // repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_card_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_card_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_draw_card_s;
        if (input->ExpectTag(58)) goto parse_draw_card_specail_s;
        break;
      }

      // repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_card_specail_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draw_card_specail_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_draw_card_specail_s;
        if (input->ExpectTag(66)) goto parse_item_role_fashion_s;
        break;
      }

      // repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_role_fashion_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_role_fashion_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item_role_fashion_s;
        if (input->ExpectTag(74)) goto parse_mail_data;
        break;
      }

      // repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mail_data;
        if (input->ExpectTag(82)) goto parse_mail_send;
        break;
      }

      // repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_send()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mail_send;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_item_data item_datas = 1;
  for (int i = 0; i < this->item_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_datas(i), output);
  }

  // repeated .SProtoSpace.unit_chest_data chests = 2;
  for (int i = 0; i < this->chests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chests(i), output);
  }

  // repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
  for (int i = 0; i < this->draw_card_free_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->draw_card_free_times(i), output);
  }

  // repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
  for (int i = 0; i < this->draw_card_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->draw_card_limit(i), output);
  }

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fashions(i), output);
  }

  // repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
  for (int i = 0; i < this->draw_card_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->draw_card_s(i), output);
  }

  // repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
  for (int i = 0; i < this->draw_card_specail_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->draw_card_specail_s(i), output);
  }

  // repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
  for (int i = 0; i < this->item_role_fashion_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item_role_fashion_s(i), output);
  }

  // repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
  for (int i = 0; i < this->mail_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mail_data(i), output);
  }

  // repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
  for (int i = 0; i < this->mail_send_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mail_send(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_item_data item_datas = 1;
  for (int i = 0; i < this->item_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_datas(i), target);
  }

  // repeated .SProtoSpace.unit_chest_data chests = 2;
  for (int i = 0; i < this->chests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chests(i), target);
  }

  // repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
  for (int i = 0; i < this->draw_card_free_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->draw_card_free_times(i), target);
  }

  // repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
  for (int i = 0; i < this->draw_card_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->draw_card_limit(i), target);
  }

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fashions(i), target);
  }

  // repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
  for (int i = 0; i < this->draw_card_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->draw_card_s(i), target);
  }

  // repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
  for (int i = 0; i < this->draw_card_specail_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->draw_card_specail_s(i), target);
  }

  // repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
  for (int i = 0; i < this->item_role_fashion_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item_role_fashion_s(i), target);
  }

  // repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
  for (int i = 0; i < this->mail_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mail_data(i), target);
  }

  // repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
  for (int i = 0; i < this->mail_send_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mail_send(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_item_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_item_data item_datas = 1;
  total_size += 1 * this->item_datas_size();
  for (int i = 0; i < this->item_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_datas(i));
  }

  // repeated .SProtoSpace.unit_chest_data chests = 2;
  total_size += 1 * this->chests_size();
  for (int i = 0; i < this->chests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chests(i));
  }

  // repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
  total_size += 1 * this->draw_card_free_times_size();
  for (int i = 0; i < this->draw_card_free_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_card_free_times(i));
  }

  // repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
  total_size += 1 * this->draw_card_limit_size();
  for (int i = 0; i < this->draw_card_limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_card_limit(i));
  }

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
  total_size += 1 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }

  // repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
  total_size += 1 * this->draw_card_s_size();
  for (int i = 0; i < this->draw_card_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_card_s(i));
  }

  // repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
  total_size += 1 * this->draw_card_specail_s_size();
  for (int i = 0; i < this->draw_card_specail_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draw_card_specail_s(i));
  }

  // repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
  total_size += 1 * this->item_role_fashion_s_size();
  for (int i = 0; i < this->item_role_fashion_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_role_fashion_s(i));
  }

  // repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
  total_size += 1 * this->mail_data_size();
  for (int i = 0; i < this->mail_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_data(i));
  }

  // repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
  total_size += 1 * this->mail_send_size();
  for (int i = 0; i < this->mail_send_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_send(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_item_data::MergeFrom(const role_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_datas_.MergeFrom(from.item_datas_);
  chests_.MergeFrom(from.chests_);
  draw_card_free_times_.MergeFrom(from.draw_card_free_times_);
  draw_card_limit_.MergeFrom(from.draw_card_limit_);
  fashions_.MergeFrom(from.fashions_);
  draw_card_s_.MergeFrom(from.draw_card_s_);
  draw_card_specail_s_.MergeFrom(from.draw_card_specail_s_);
  item_role_fashion_s_.MergeFrom(from.item_role_fashion_s_);
  mail_data_.MergeFrom(from.mail_data_);
  mail_send_.MergeFrom(from.mail_send_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_item_data::CopyFrom(const role_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_item_data::IsInitialized() const {

  return true;
}

void role_item_data::Swap(role_item_data* other) {
  if (other != this) {
    item_datas_.Swap(&other->item_datas_);
    chests_.Swap(&other->chests_);
    draw_card_free_times_.Swap(&other->draw_card_free_times_);
    draw_card_limit_.Swap(&other->draw_card_limit_);
    fashions_.Swap(&other->fashions_);
    draw_card_s_.Swap(&other->draw_card_s_);
    draw_card_specail_s_.Swap(&other->draw_card_specail_s_);
    item_role_fashion_s_.Swap(&other->item_role_fashion_s_);
    mail_data_.Swap(&other->mail_data_);
    mail_send_.Swap(&other->mail_send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_item_data_descriptor_;
  metadata.reflection = role_item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skill_data::kTemplateIdFieldNumber;
const int skill_data::kSlotFieldNumber;
const int skill_data::kLevelFieldNumber;
const int skill_data::kUnLockFieldNumber;
#endif  // !_MSC_VER

skill_data::skill_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skill_data::InitAsDefaultInstance() {
}

skill_data::skill_data(const skill_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skill_data::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  slot_ = 0;
  level_ = 0;
  unlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skill_data::~skill_data() {
  SharedDtor();
}

void skill_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skill_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skill_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skill_data_descriptor_;
}

const skill_data& skill_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

skill_data* skill_data::default_instance_ = NULL;

skill_data* skill_data::New() const {
  return new skill_data;
}

void skill_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
    slot_ = 0;
    level_ = 0;
    unlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skill_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unLock;
        break;
      }

      // optional int32 unLock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skill_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 unLock = 4;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skill_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 unLock = 4;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skill_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 unLock = 4;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skill_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skill_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skill_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skill_data::MergeFrom(const skill_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skill_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_data::CopyFrom(const skill_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_data::IsInitialized() const {

  return true;
}

void skill_data::Swap(skill_data* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(slot_, other->slot_);
    std::swap(level_, other->level_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skill_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skill_data_descriptor_;
  metadata.reflection = skill_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skin_info::kTemplateIdFieldNumber;
const int db_skin_info::kEndTimeFieldNumber;
#endif  // !_MSC_VER

db_skin_info::db_skin_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skin_info::InitAsDefaultInstance() {
}

db_skin_info::db_skin_info(const db_skin_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skin_info::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skin_info::~db_skin_info() {
  SharedDtor();
}

void db_skin_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skin_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skin_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skin_info_descriptor_;
}

const db_skin_info& db_skin_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_skin_info* db_skin_info::default_instance_ = NULL;

db_skin_info* db_skin_info::New() const {
  return new db_skin_info;
}

void db_skin_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skin_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skin_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skin_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skin_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skin_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skin_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skin_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skin_info::MergeFrom(const db_skin_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skin_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skin_info::CopyFrom(const db_skin_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skin_info::IsInitialized() const {

  return true;
}

void db_skin_info::Swap(db_skin_info* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skin_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skin_info_descriptor_;
  metadata.reflection = db_skin_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_data::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

db_equip_data::db_equip_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_data::InitAsDefaultInstance() {
}

db_equip_data::db_equip_data(const db_equip_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_data::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_data::~db_equip_data() {
  SharedDtor();
}

void db_equip_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_data_descriptor_;
}

const db_equip_data& db_equip_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_equip_data* db_equip_data::default_instance_ = NULL;

db_equip_data* db_equip_data::New() const {
  return new db_equip_data;
}

void db_equip_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_data::MergeFrom(const db_equip_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_data::CopyFrom(const db_equip_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_data::IsInitialized() const {

  return true;
}

void db_equip_data::Swap(db_equip_data* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_data_descriptor_;
  metadata.reflection = db_equip_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_player_data::kDbModeFieldNumber;
const int unit_player_data::kUuidFieldNumber;
const int unit_player_data::kTemplateIdFieldNumber;
const int unit_player_data::kTalentGradeFieldNumber;
const int unit_player_data::kSkillDataFieldNumber;
const int unit_player_data::kSkinDataFieldNumber;
const int unit_player_data::kEquipsFieldNumber;
const int unit_player_data::kTalentDataFieldNumber;
const int unit_player_data::kActiveFieldNumber;
const int unit_player_data::kBagFieldNumber;
#endif  // !_MSC_VER

unit_player_data::unit_player_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_player_data::InitAsDefaultInstance() {
  skin_data_ = const_cast< ::SProtoSpace::skin_data*>(&::SProtoSpace::skin_data::default_instance());
  bag_ = const_cast< ::SProtoSpace::bag_data*>(&::SProtoSpace::bag_data::default_instance());
}

unit_player_data::unit_player_data(const unit_player_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_player_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  talent_grade_ = 0;
  skin_data_ = NULL;
  active_ = false;
  bag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_player_data::~unit_player_data() {
  SharedDtor();
}

void unit_player_data::SharedDtor() {
  if (this != default_instance_) {
    delete skin_data_;
    delete bag_;
  }
}

void unit_player_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_player_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_player_data_descriptor_;
}

const unit_player_data& unit_player_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_player_data* unit_player_data::default_instance_ = NULL;

unit_player_data* unit_player_data::New() const {
  return new unit_player_data;
}

void unit_player_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    talent_grade_ = 0;
    if (has_skin_data()) {
      if (skin_data_ != NULL) skin_data_->::SProtoSpace::skin_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    active_ = false;
    if (has_bag()) {
      if (bag_ != NULL) bag_->::SProtoSpace::bag_data::Clear();
    }
  }
  skill_data_.Clear();
  equips_.Clear();
  talent_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_player_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talent_grade;
        break;
      }

      // optional int32 talent_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_grade_)));
          set_has_talent_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        break;
      }

      // repeated .SProtoSpace.player_skill_info skill_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        if (input->ExpectTag(50)) goto parse_skin_data;
        break;
      }

      // optional .SProtoSpace.skin_data skin_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skin_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.db_equip_data equips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        if (input->ExpectTag(66)) goto parse_talent_data;
        break;
      }

      // repeated .SProtoSpace.talent_info talent_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talent_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talent_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_talent_data;
        if (input->ExpectTag(72)) goto parse_active;
        break;
      }

      // optional bool active = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bag;
        break;
      }

      // optional .SProtoSpace.bag_data bag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_player_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  // optional int32 talent_grade = 4;
  if (has_talent_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->talent_grade(), output);
  }

  // repeated .SProtoSpace.player_skill_info skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_data(i), output);
  }

  // optional .SProtoSpace.skin_data skin_data = 6;
  if (has_skin_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skin_data(), output);
  }

  // repeated .SProtoSpace.db_equip_data equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equips(i), output);
  }

  // repeated .SProtoSpace.talent_info talent_data = 8;
  for (int i = 0; i < this->talent_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->talent_data(i), output);
  }

  // optional bool active = 9;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->active(), output);
  }

  // optional .SProtoSpace.bag_data bag = 10;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_player_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  // optional int32 talent_grade = 4;
  if (has_talent_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->talent_grade(), target);
  }

  // repeated .SProtoSpace.player_skill_info skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_data(i), target);
  }

  // optional .SProtoSpace.skin_data skin_data = 6;
  if (has_skin_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skin_data(), target);
  }

  // repeated .SProtoSpace.db_equip_data equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equips(i), target);
  }

  // repeated .SProtoSpace.talent_info talent_data = 8;
  for (int i = 0; i < this->talent_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->talent_data(i), target);
  }

  // optional bool active = 9;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->active(), target);
  }

  // optional .SProtoSpace.bag_data bag = 10;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_player_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 talent_grade = 4;
    if (has_talent_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_grade());
    }

    // optional .SProtoSpace.skin_data skin_data = 6;
    if (has_skin_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skin_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool active = 9;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional .SProtoSpace.bag_data bag = 10;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

  }
  // repeated .SProtoSpace.player_skill_info skill_data = 5;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .SProtoSpace.db_equip_data equips = 7;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .SProtoSpace.talent_info talent_data = 8;
  total_size += 1 * this->talent_data_size();
  for (int i = 0; i < this->talent_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talent_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_player_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_player_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_player_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_player_data::MergeFrom(const unit_player_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_data_.MergeFrom(from.skill_data_);
  equips_.MergeFrom(from.equips_);
  talent_data_.MergeFrom(from.talent_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_talent_grade()) {
      set_talent_grade(from.talent_grade());
    }
    if (from.has_skin_data()) {
      mutable_skin_data()->::SProtoSpace::skin_data::MergeFrom(from.skin_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_bag()) {
      mutable_bag()->::SProtoSpace::bag_data::MergeFrom(from.bag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_player_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_player_data::CopyFrom(const unit_player_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_player_data::IsInitialized() const {

  return true;
}

void unit_player_data::Swap(unit_player_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(talent_grade_, other->talent_grade_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(skin_data_, other->skin_data_);
    equips_.Swap(&other->equips_);
    talent_data_.Swap(&other->talent_data_);
    std::swap(active_, other->active_);
    std::swap(bag_, other->bag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_player_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_player_data_descriptor_;
  metadata.reflection = unit_player_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_player_base::kDbModeFieldNumber;
const int unit_player_base::kUuidFieldNumber;
const int unit_player_base::kLikedListFieldNumber;
const int unit_player_base::kLikeFieldNumber;
const int unit_player_base::kSignatureFieldNumber;
const int unit_player_base::kPositionFieldNumber;
const int unit_player_base::kShowHeroListFieldNumber;
const int unit_player_base::kBorderFieldNumber;
#endif  // !_MSC_VER

unit_player_base::unit_player_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_player_base::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
}

unit_player_base::unit_player_base(const unit_player_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_player_base::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  like_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  border_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_player_base::~unit_player_base() {
  SharedDtor();
}

void unit_player_base::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void unit_player_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_player_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_player_base_descriptor_;
}

const unit_player_base& unit_player_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_player_base* unit_player_base::default_instance_ = NULL;

unit_player_base* unit_player_base::New() const {
  return new unit_player_base;
}

void unit_player_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    like_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
    border_ = 0u;
  }
  liked_list_.Clear();
  show_hero_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_player_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liked_list;
        break;
      }

      // repeated uint64 liked_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_liked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liked_list;
        if (input->ExpectTag(32)) goto parse_like;
        break;
      }

      // optional uint32 like = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hero_list;
        break;
      }

      // repeated uint64 show_hero_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hero_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_show_hero_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_show_hero_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hero_list;
        if (input->ExpectTag(64)) goto parse_border;
        break;
      }

      // optional uint32 border = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_player_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated uint64 liked_list = 3;
  for (int i = 0; i < this->liked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->liked_list(i), output);
  }

  // optional uint32 like = 4;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->like(), output);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signature(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position(), output);
  }

  // repeated uint64 show_hero_list = 7;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->show_hero_list(i), output);
  }

  // optional uint32 border = 8;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->border(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_player_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated uint64 liked_list = 3;
  for (int i = 0; i < this->liked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->liked_list(i), target);
  }

  // optional uint32 like = 4;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->like(), target);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->position(), target);
  }

  // repeated uint64 show_hero_list = 7;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->show_hero_list(i), target);
  }

  // optional uint32 border = 8;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_player_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 like = 4;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional .SProtoSpace.lsg_position_info position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional uint32 border = 8;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border());
    }

  }
  // repeated uint64 liked_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->liked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->liked_list(i));
    }
    total_size += 1 * this->liked_list_size() + data_size;
  }

  // repeated uint64 show_hero_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_hero_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->show_hero_list(i));
    }
    total_size += 1 * this->show_hero_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_player_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_player_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_player_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_player_base::MergeFrom(const unit_player_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  liked_list_.MergeFrom(from.liked_list_);
  show_hero_list_.MergeFrom(from.show_hero_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_player_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_player_base::CopyFrom(const unit_player_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_player_base::IsInitialized() const {

  return true;
}

void unit_player_base::Swap(unit_player_base* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    liked_list_.Swap(&other->liked_list_);
    std::swap(like_, other->like_);
    std::swap(signature_, other->signature_);
    std::swap(position_, other->position_);
    show_hero_list_.Swap(&other->show_hero_list_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_player_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_player_base_descriptor_;
  metadata.reflection = unit_player_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_data::kPlayersFieldNumber;
#endif  // !_MSC_VER

role_player_data::role_player_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_data::InitAsDefaultInstance() {
}

role_player_data::role_player_data(const role_player_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_data::~role_player_data() {
  SharedDtor();
}

void role_player_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_data_descriptor_;
}

const role_player_data& role_player_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_player_data* role_player_data::default_instance_ = NULL;

role_player_data* role_player_data::New() const {
  return new role_player_data;
}

void role_player_data::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_player_data players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_player_data players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_player_data players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_player_data players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_data::MergeFrom(const role_player_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_data::CopyFrom(const role_player_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_data::IsInitialized() const {

  return true;
}

void role_player_data::Swap(role_player_data* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_data_descriptor_;
  metadata.reflection = role_player_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_data::kShowInfoFieldNumber;
#endif  // !_MSC_VER

role_show_data::role_show_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_data::InitAsDefaultInstance() {
}

role_show_data::role_show_data(const role_show_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_data::~role_show_data() {
  SharedDtor();
}

void role_show_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_data_descriptor_;
}

const role_show_data& role_show_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_show_data* role_show_data::default_instance_ = NULL;

role_show_data* role_show_data::New() const {
  return new role_show_data;
}

void role_show_data::Clear() {
  show_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.role_show_info show_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_show_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.role_show_info show_info = 1;
  for (int i = 0; i < this->show_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->show_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.role_show_info show_info = 1;
  for (int i = 0; i < this->show_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->show_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.role_show_info show_info = 1;
  total_size += 1 * this->show_info_size();
  for (int i = 0; i < this->show_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_data::MergeFrom(const role_show_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_info_.MergeFrom(from.show_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_data::CopyFrom(const role_show_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_data::IsInitialized() const {

  return true;
}

void role_show_data::Swap(role_show_data* other) {
  if (other != this) {
    show_info_.Swap(&other->show_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_data_descriptor_;
  metadata.reflection = role_show_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_soul_data::kUuidFieldNumber;
const int hero_soul_data::kSlotFieldNumber;
#endif  // !_MSC_VER

hero_soul_data::hero_soul_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_soul_data::InitAsDefaultInstance() {
}

hero_soul_data::hero_soul_data(const hero_soul_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_soul_data::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_soul_data::~hero_soul_data() {
  SharedDtor();
}

void hero_soul_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_soul_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_soul_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_soul_data_descriptor_;
}

const hero_soul_data& hero_soul_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

hero_soul_data* hero_soul_data::default_instance_ = NULL;

hero_soul_data* hero_soul_data::New() const {
  return new hero_soul_data;
}

void hero_soul_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_soul_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_soul_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_soul_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_soul_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_soul_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_soul_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_soul_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_soul_data::MergeFrom(const hero_soul_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_soul_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_soul_data::CopyFrom(const hero_soul_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_soul_data::IsInitialized() const {

  return true;
}

void hero_soul_data::Swap(hero_soul_data* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_soul_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_soul_data_descriptor_;
  metadata.reflection = hero_soul_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bag_data::kItemIdsFieldNumber;
#endif  // !_MSC_VER

bag_data::bag_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bag_data::InitAsDefaultInstance() {
}

bag_data::bag_data(const bag_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bag_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bag_data::~bag_data() {
  SharedDtor();
}

void bag_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bag_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bag_data_descriptor_;
}

const bag_data& bag_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

bag_data* bag_data::default_instance_ = NULL;

bag_data* bag_data::New() const {
  return new bag_data;
}

void bag_data::Clear() {
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bag_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bag_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bag_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bag_data::ByteSize() const {
  int total_size = 0;

  // repeated uint64 item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bag_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bag_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bag_data::MergeFrom(const bag_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bag_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_data::CopyFrom(const bag_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_data::IsInitialized() const {

  return true;
}

void bag_data::Swap(bag_data* other) {
  if (other != this) {
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bag_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bag_data_descriptor_;
  metadata.reflection = bag_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_hero_data::kDbModeFieldNumber;
const int unit_hero_data::kUuidFieldNumber;
const int unit_hero_data::kTemplateIdFieldNumber;
const int unit_hero_data::kLvFieldNumber;
const int unit_hero_data::kStarFieldNumber;
const int unit_hero_data::kQualityFieldNumber;
const int unit_hero_data::kAwakenFieldNumber;
const int unit_hero_data::kExpFieldNumber;
const int unit_hero_data::kLockedFieldNumber;
const int unit_hero_data::kCreateTimeFieldNumber;
const int unit_hero_data::kSkinInfoFieldNumber;
const int unit_hero_data::kSkillsFieldNumber;
const int unit_hero_data::kSoulsFieldNumber;
const int unit_hero_data::kAwakenAttrFieldNumber;
const int unit_hero_data::kNameFieldNumber;
const int unit_hero_data::kEquipsFieldNumber;
const int unit_hero_data::kTalismansFieldNumber;
const int unit_hero_data::kBagFieldNumber;
#endif  // !_MSC_VER

unit_hero_data::unit_hero_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_hero_data::InitAsDefaultInstance() {
  skin_info_ = const_cast< ::SProtoSpace::skin_data*>(&::SProtoSpace::skin_data::default_instance());
  bag_ = const_cast< ::SProtoSpace::bag_data*>(&::SProtoSpace::bag_data::default_instance());
}

unit_hero_data::unit_hero_data(const unit_hero_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_hero_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  lv_ = 0;
  star_ = 0;
  quality_ = 0;
  awaken_ = false;
  exp_ = 0;
  locked_ = false;
  create_time_ = 0u;
  skin_info_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_hero_data::~unit_hero_data() {
  SharedDtor();
}

void unit_hero_data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete skin_info_;
    delete bag_;
  }
}

void unit_hero_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_hero_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_hero_data_descriptor_;
}

const unit_hero_data& unit_hero_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_hero_data* unit_hero_data::default_instance_ = NULL;

unit_hero_data* unit_hero_data::New() const {
  return new unit_hero_data;
}

void unit_hero_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    lv_ = 0;
    star_ = 0;
    quality_ = 0;
    awaken_ = false;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    locked_ = false;
    create_time_ = 0u;
    if (has_skin_info()) {
      if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_bag()) {
      if (bag_ != NULL) bag_->::SProtoSpace::bag_data::Clear();
    }
  }
  skills_.Clear();
  souls_.Clear();
  awaken_attr_.Clear();
  equips_.Clear();
  talismans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_hero_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_awaken;
        break;
      }

      // optional bool awaken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awaken_)));
          set_has_awaken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_locked;
        break;
      }

      // optional bool locked = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_skin_info;
        break;
      }

      // optional .SProtoSpace.skin_data skin_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skin_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skills;
        break;
      }

      // repeated .SProtoSpace.skill_data skills = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skills;
        if (input->ExpectTag(106)) goto parse_souls;
        break;
      }

      // repeated .SProtoSpace.hero_soul_data souls = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_souls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_souls;
        if (input->ExpectTag(114)) goto parse_awaken_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awaken_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_awaken_attr;
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // optional string name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equips;
        if (input->ExpectTag(138)) goto parse_talismans;
        break;
      }

      // repeated .SProtoSpace.talisman_data talismans = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talismans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talismans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_talismans;
        if (input->ExpectTag(146)) goto parse_bag;
        break;
      }

      // optional .SProtoSpace.bag_data bag = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_hero_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // optional bool awaken = 7;
  if (has_awaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->awaken(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional bool locked = 9;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->locked(), output);
  }

  // optional uint32 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->create_time(), output);
  }

  // optional .SProtoSpace.skin_data skin_info = 11;
  if (has_skin_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->skin_info(), output);
  }

  // repeated .SProtoSpace.skill_data skills = 12;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skills(i), output);
  }

  // repeated .SProtoSpace.hero_soul_data souls = 13;
  for (int i = 0; i < this->souls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->souls(i), output);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->awaken_attr(i), output);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->name(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->equips(i), output);
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  for (int i = 0; i < this->talismans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->talismans(i), output);
  }

  // optional .SProtoSpace.bag_data bag = 18;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_hero_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }

  // optional bool awaken = 7;
  if (has_awaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->awaken(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional bool locked = 9;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->locked(), target);
  }

  // optional uint32 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->create_time(), target);
  }

  // optional .SProtoSpace.skin_data skin_info = 11;
  if (has_skin_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->skin_info(), target);
  }

  // repeated .SProtoSpace.skill_data skills = 12;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skills(i), target);
  }

  // repeated .SProtoSpace.hero_soul_data souls = 13;
  for (int i = 0; i < this->souls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->souls(i), target);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->awaken_attr(i), target);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->equips(i), target);
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  for (int i = 0; i < this->talismans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->talismans(i), target);
  }

  // optional .SProtoSpace.bag_data bag = 18;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_hero_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional bool awaken = 7;
    if (has_awaken()) {
      total_size += 1 + 1;
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool locked = 9;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional uint32 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional .SProtoSpace.skin_data skin_info = 11;
    if (has_skin_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skin_info());
    }

    // optional string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .SProtoSpace.bag_data bag = 18;
    if (has_bag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

  }
  // repeated .SProtoSpace.skill_data skills = 12;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .SProtoSpace.hero_soul_data souls = 13;
  total_size += 1 * this->souls_size();
  for (int i = 0; i < this->souls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->souls(i));
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
  total_size += 1 * this->awaken_attr_size();
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awaken_attr(i));
  }

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .SProtoSpace.talisman_data talismans = 17;
  total_size += 2 * this->talismans_size();
  for (int i = 0; i < this->talismans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talismans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_hero_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_hero_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_hero_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_hero_data::MergeFrom(const unit_hero_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  souls_.MergeFrom(from.souls_);
  awaken_attr_.MergeFrom(from.awaken_attr_);
  equips_.MergeFrom(from.equips_);
  talismans_.MergeFrom(from.talismans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_awaken()) {
      set_awaken(from.awaken());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_skin_info()) {
      mutable_skin_info()->::SProtoSpace::skin_data::MergeFrom(from.skin_info());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_bag()) {
      mutable_bag()->::SProtoSpace::bag_data::MergeFrom(from.bag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_hero_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_hero_data::CopyFrom(const unit_hero_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_hero_data::IsInitialized() const {

  for (int i = 0; i < awaken_attr_size(); i++) {
    if (!this->awaken_attr(i).IsInitialized()) return false;
  }
  return true;
}

void unit_hero_data::Swap(unit_hero_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(lv_, other->lv_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(awaken_, other->awaken_);
    std::swap(exp_, other->exp_);
    std::swap(locked_, other->locked_);
    std::swap(create_time_, other->create_time_);
    std::swap(skin_info_, other->skin_info_);
    skills_.Swap(&other->skills_);
    souls_.Swap(&other->souls_);
    awaken_attr_.Swap(&other->awaken_attr_);
    std::swap(name_, other->name_);
    equips_.Swap(&other->equips_);
    talismans_.Swap(&other->talismans_);
    std::swap(bag_, other->bag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_hero_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_hero_data_descriptor_;
  metadata.reflection = unit_hero_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_formation_data::kDbModeFieldNumber;
const int unit_formation_data::kUuidFieldNumber;
const int unit_formation_data::kTypeFieldNumber;
const int unit_formation_data::kHeroIdsFieldNumber;
const int unit_formation_data::kRolePositionFieldNumber;
#endif  // !_MSC_VER

unit_formation_data::unit_formation_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_formation_data::InitAsDefaultInstance() {
}

unit_formation_data::unit_formation_data(const unit_formation_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_formation_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  role_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_formation_data::~unit_formation_data() {
  SharedDtor();
}

void unit_formation_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_formation_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_formation_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_formation_data_descriptor_;
}

const unit_formation_data& unit_formation_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_formation_data* unit_formation_data::default_instance_ = NULL;

unit_formation_data* unit_formation_data::New() const {
  return new unit_formation_data;
}

void unit_formation_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    role_position_ = 0;
  }
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_formation_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_ids;
        break;
      }

      // repeated uint64 hero_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_hero_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_ids;
        if (input->ExpectTag(40)) goto parse_role_position;
        break;
      }

      // optional int32 role_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_position_)));
          set_has_role_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_formation_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated uint64 hero_ids = 4;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->hero_ids(i), output);
  }

  // optional int32 role_position = 5;
  if (has_role_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_formation_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated uint64 hero_ids = 4;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->hero_ids(i), target);
  }

  // optional int32 role_position = 5;
  if (has_role_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_formation_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 role_position = 5;
    if (has_role_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_position());
    }

  }
  // repeated uint64 hero_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_formation_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_formation_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_formation_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_formation_data::MergeFrom(const unit_formation_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_position()) {
      set_role_position(from.role_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_formation_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_formation_data::CopyFrom(const unit_formation_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_formation_data::IsInitialized() const {

  return true;
}

void unit_formation_data::Swap(unit_formation_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(role_position_, other->role_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_formation_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_formation_data_descriptor_;
  metadata.reflection = unit_formation_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_role_pet_data::kDbModeFieldNumber;
const int unit_role_pet_data::kUuidFieldNumber;
const int unit_role_pet_data::kPetDataFieldNumber;
#endif  // !_MSC_VER

unit_role_pet_data::unit_role_pet_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_role_pet_data::InitAsDefaultInstance() {
  pet_data_ = const_cast< ::SProtoSpace::pet_single_data*>(&::SProtoSpace::pet_single_data::default_instance());
}

unit_role_pet_data::unit_role_pet_data(const unit_role_pet_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_role_pet_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  pet_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_role_pet_data::~unit_role_pet_data() {
  SharedDtor();
}

void unit_role_pet_data::SharedDtor() {
  if (this != default_instance_) {
    delete pet_data_;
  }
}

void unit_role_pet_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_role_pet_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_role_pet_data_descriptor_;
}

const unit_role_pet_data& unit_role_pet_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_role_pet_data* unit_role_pet_data::default_instance_ = NULL;

unit_role_pet_data* unit_role_pet_data::New() const {
  return new unit_role_pet_data;
}

void unit_role_pet_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_pet_data()) {
      if (pet_data_ != NULL) pet_data_->::SProtoSpace::pet_single_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_role_pet_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet_data;
        break;
      }

      // optional .SProtoSpace.pet_single_data pet_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_role_pet_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.pet_single_data pet_data = 3;
  if (has_pet_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_role_pet_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.pet_single_data pet_data = 3;
  if (has_pet_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_role_pet_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.pet_single_data pet_data = 3;
    if (has_pet_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_role_pet_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_role_pet_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_role_pet_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_role_pet_data::MergeFrom(const unit_role_pet_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_pet_data()) {
      mutable_pet_data()->::SProtoSpace::pet_single_data::MergeFrom(from.pet_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_role_pet_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_role_pet_data::CopyFrom(const unit_role_pet_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_role_pet_data::IsInitialized() const {

  return true;
}

void unit_role_pet_data::Swap(unit_role_pet_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(pet_data_, other->pet_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_role_pet_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_role_pet_data_descriptor_;
  metadata.reflection = unit_role_pet_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_role_pet_all::kDbModeFieldNumber;
const int unit_role_pet_all::kUuidFieldNumber;
const int unit_role_pet_all::kOutTimeTodayFieldNumber;
const int unit_role_pet_all::kLastResetTimeFieldNumber;
const int unit_role_pet_all::kNextOutTimeFieldNumber;
const int unit_role_pet_all::kCurShowPetIdFieldNumber;
#endif  // !_MSC_VER

unit_role_pet_all::unit_role_pet_all()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_role_pet_all::InitAsDefaultInstance() {
}

unit_role_pet_all::unit_role_pet_all(const unit_role_pet_all& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_role_pet_all::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  out_time_today_ = 0;
  last_reset_time_ = 0u;
  next_out_time_ = 0u;
  cur_show_pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_role_pet_all::~unit_role_pet_all() {
  SharedDtor();
}

void unit_role_pet_all::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_role_pet_all::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_role_pet_all::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_role_pet_all_descriptor_;
}

const unit_role_pet_all& unit_role_pet_all::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_role_pet_all* unit_role_pet_all::default_instance_ = NULL;

unit_role_pet_all* unit_role_pet_all::New() const {
  return new unit_role_pet_all;
}

void unit_role_pet_all::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    out_time_today_ = 0;
    last_reset_time_ = 0u;
    next_out_time_ = 0u;
    cur_show_pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_role_pet_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_time_today;
        break;
      }

      // optional int32 out_time_today = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_time_today_)));
          set_has_out_time_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_reset_time;
        break;
      }

      // optional uint32 last_reset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_out_time;
        break;
      }

      // optional uint32 next_out_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_out_time_)));
          set_has_next_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_show_pet_id;
        break;
      }

      // optional int32 cur_show_pet_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_show_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_show_pet_id_)));
          set_has_cur_show_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_role_pet_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 out_time_today = 3;
  if (has_out_time_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->out_time_today(), output);
  }

  // optional uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_reset_time(), output);
  }

  // optional uint32 next_out_time = 5;
  if (has_next_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_out_time(), output);
  }

  // optional int32 cur_show_pet_id = 6;
  if (has_cur_show_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_show_pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_role_pet_all::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 out_time_today = 3;
  if (has_out_time_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->out_time_today(), target);
  }

  // optional uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_reset_time(), target);
  }

  // optional uint32 next_out_time = 5;
  if (has_next_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->next_out_time(), target);
  }

  // optional int32 cur_show_pet_id = 6;
  if (has_cur_show_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_show_pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_role_pet_all::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 out_time_today = 3;
    if (has_out_time_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_time_today());
    }

    // optional uint32 last_reset_time = 4;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // optional uint32 next_out_time = 5;
    if (has_next_out_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_out_time());
    }

    // optional int32 cur_show_pet_id = 6;
    if (has_cur_show_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_show_pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_role_pet_all::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_role_pet_all* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_role_pet_all*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_role_pet_all::MergeFrom(const unit_role_pet_all& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_out_time_today()) {
      set_out_time_today(from.out_time_today());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_next_out_time()) {
      set_next_out_time(from.next_out_time());
    }
    if (from.has_cur_show_pet_id()) {
      set_cur_show_pet_id(from.cur_show_pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_role_pet_all::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_role_pet_all::CopyFrom(const unit_role_pet_all& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_role_pet_all::IsInitialized() const {

  return true;
}

void unit_role_pet_all::Swap(unit_role_pet_all* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(out_time_today_, other->out_time_today_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(next_out_time_, other->next_out_time_);
    std::swap(cur_show_pet_id_, other->cur_show_pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_role_pet_all::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_role_pet_all_descriptor_;
  metadata.reflection = unit_role_pet_all_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_hero_data::kHerosFieldNumber;
const int role_hero_data::kFormationsFieldNumber;
const int role_hero_data::kPetSFieldNumber;
const int role_hero_data::kPetAllFieldNumber;
#endif  // !_MSC_VER

role_hero_data::role_hero_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_hero_data::InitAsDefaultInstance() {
}

role_hero_data::role_hero_data(const role_hero_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_hero_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_hero_data::~role_hero_data() {
  SharedDtor();
}

void role_hero_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_hero_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_hero_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_hero_data_descriptor_;
}

const role_hero_data& role_hero_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_hero_data* role_hero_data::default_instance_ = NULL;

role_hero_data* role_hero_data::New() const {
  return new role_hero_data;
}

void role_hero_data::Clear() {
  heros_.Clear();
  formations_.Clear();
  pet_s_.Clear();
  pet_all_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_hero_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_hero_data heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectTag(18)) goto parse_formations;
        break;
      }

      // repeated .SProtoSpace.unit_formation_data formations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formations;
        if (input->ExpectTag(26)) goto parse_pet_s;
        break;
      }

      // repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet_s;
        if (input->ExpectTag(34)) goto parse_pet_all;
        break;
      }

      // repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_all()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet_all;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_hero_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_hero_data heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  // repeated .SProtoSpace.unit_formation_data formations = 2;
  for (int i = 0; i < this->formations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formations(i), output);
  }

  // repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
  for (int i = 0; i < this->pet_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet_s(i), output);
  }

  // repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
  for (int i = 0; i < this->pet_all_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet_all(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_hero_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_hero_data heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  // repeated .SProtoSpace.unit_formation_data formations = 2;
  for (int i = 0; i < this->formations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formations(i), target);
  }

  // repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
  for (int i = 0; i < this->pet_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet_s(i), target);
  }

  // repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
  for (int i = 0; i < this->pet_all_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet_all(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_hero_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_hero_data heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  // repeated .SProtoSpace.unit_formation_data formations = 2;
  total_size += 1 * this->formations_size();
  for (int i = 0; i < this->formations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formations(i));
  }

  // repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
  total_size += 1 * this->pet_s_size();
  for (int i = 0; i < this->pet_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_s(i));
  }

  // repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
  total_size += 1 * this->pet_all_size();
  for (int i = 0; i < this->pet_all_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_all(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_hero_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_hero_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_hero_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_hero_data::MergeFrom(const role_hero_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  formations_.MergeFrom(from.formations_);
  pet_s_.MergeFrom(from.pet_s_);
  pet_all_.MergeFrom(from.pet_all_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_hero_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_hero_data::CopyFrom(const role_hero_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_hero_data::IsInitialized() const {

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void role_hero_data::Swap(role_hero_data* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    formations_.Swap(&other->formations_);
    pet_s_.Swap(&other->pet_s_);
    pet_all_.Swap(&other->pet_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_hero_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_hero_data_descriptor_;
  metadata.reflection = role_hero_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_quest_data::kDbModeFieldNumber;
const int unit_quest_data::kUuidFieldNumber;
const int unit_quest_data::kDataFieldNumber;
#endif  // !_MSC_VER

unit_quest_data::unit_quest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_quest_data::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::quest_data*>(&::SProtoSpace::quest_data::default_instance());
}

unit_quest_data::unit_quest_data(const unit_quest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_quest_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_quest_data::~unit_quest_data() {
  SharedDtor();
}

void unit_quest_data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void unit_quest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_quest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_quest_data_descriptor_;
}

const unit_quest_data& unit_quest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_quest_data* unit_quest_data::default_instance_ = NULL;

unit_quest_data* unit_quest_data::New() const {
  return new unit_quest_data;
}

void unit_quest_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::quest_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_quest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.quest_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_quest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.quest_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_quest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.quest_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_quest_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.quest_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_quest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_quest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_quest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_quest_data::MergeFrom(const unit_quest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::quest_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_quest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_quest_data::CopyFrom(const unit_quest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_quest_data::IsInitialized() const {

  return true;
}

void unit_quest_data::Swap(unit_quest_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_quest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_quest_data_descriptor_;
  metadata.reflection = unit_quest_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_activity_data::kDbModeFieldNumber;
const int unit_activity_data::kUuidFieldNumber;
const int unit_activity_data::kActivityIdFieldNumber;
const int unit_activity_data::kFinishFieldNumber;
#endif  // !_MSC_VER

unit_activity_data::unit_activity_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_activity_data::InitAsDefaultInstance() {
}

unit_activity_data::unit_activity_data(const unit_activity_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_activity_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  activity_id_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_activity_data::~unit_activity_data() {
  SharedDtor();
}

void unit_activity_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_activity_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_activity_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_activity_data_descriptor_;
}

const unit_activity_data& unit_activity_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_activity_data* unit_activity_data::default_instance_ = NULL;

unit_activity_data* unit_activity_data::New() const {
  return new unit_activity_data;
}

void unit_activity_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    activity_id_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_activity_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_id;
        break;
      }

      // optional int32 activity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finish;
        break;
      }

      // optional bool finish = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_activity_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 activity_id = 3;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activity_id(), output);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_activity_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 activity_id = 3;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activity_id(), target);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_activity_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 activity_id = 3;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // optional bool finish = 4;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_activity_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_activity_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_activity_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_activity_data::MergeFrom(const unit_activity_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_activity_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_activity_data::CopyFrom(const unit_activity_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_activity_data::IsInitialized() const {

  return true;
}

void unit_activity_data::Swap(unit_activity_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_activity_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_activity_data_descriptor_;
  metadata.reflection = unit_activity_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_achieve_pt_award_data::kDbModeFieldNumber;
const int unit_achieve_pt_award_data::kUuidFieldNumber;
const int unit_achieve_pt_award_data::kAwardIdFieldNumber;
const int unit_achieve_pt_award_data::kFinishFieldNumber;
#endif  // !_MSC_VER

unit_achieve_pt_award_data::unit_achieve_pt_award_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_achieve_pt_award_data::InitAsDefaultInstance() {
}

unit_achieve_pt_award_data::unit_achieve_pt_award_data(const unit_achieve_pt_award_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_achieve_pt_award_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  award_id_ = 0;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_achieve_pt_award_data::~unit_achieve_pt_award_data() {
  SharedDtor();
}

void unit_achieve_pt_award_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_achieve_pt_award_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_achieve_pt_award_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_achieve_pt_award_data_descriptor_;
}

const unit_achieve_pt_award_data& unit_achieve_pt_award_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_achieve_pt_award_data* unit_achieve_pt_award_data::default_instance_ = NULL;

unit_achieve_pt_award_data* unit_achieve_pt_award_data::New() const {
  return new unit_achieve_pt_award_data;
}

void unit_achieve_pt_award_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    award_id_ = 0;
    finish_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_achieve_pt_award_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_award_id;
        break;
      }

      // optional int32 award_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_id_)));
          set_has_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finish;
        break;
      }

      // optional bool finish = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_achieve_pt_award_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 award_id = 3;
  if (has_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->award_id(), output);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_achieve_pt_award_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 award_id = 3;
  if (has_award_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->award_id(), target);
  }

  // optional bool finish = 4;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_achieve_pt_award_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 award_id = 3;
    if (has_award_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award_id());
    }

    // optional bool finish = 4;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_achieve_pt_award_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_achieve_pt_award_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_achieve_pt_award_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_achieve_pt_award_data::MergeFrom(const unit_achieve_pt_award_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_award_id()) {
      set_award_id(from.award_id());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_achieve_pt_award_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_achieve_pt_award_data::CopyFrom(const unit_achieve_pt_award_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_achieve_pt_award_data::IsInitialized() const {

  return true;
}

void unit_achieve_pt_award_data::Swap(unit_achieve_pt_award_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(award_id_, other->award_id_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_achieve_pt_award_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_achieve_pt_award_data_descriptor_;
  metadata.reflection = unit_achieve_pt_award_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_quest_data::kQuestsFieldNumber;
const int role_quest_data::kActivitiesFieldNumber;
const int role_quest_data::kPtAwardsFieldNumber;
#endif  // !_MSC_VER

role_quest_data::role_quest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_quest_data::InitAsDefaultInstance() {
}

role_quest_data::role_quest_data(const role_quest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_quest_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_quest_data::~role_quest_data() {
  SharedDtor();
}

void role_quest_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_quest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_quest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_quest_data_descriptor_;
}

const role_quest_data& role_quest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_quest_data* role_quest_data::default_instance_ = NULL;

role_quest_data* role_quest_data::New() const {
  return new role_quest_data;
}

void role_quest_data::Clear() {
  quests_.Clear();
  activities_.Clear();
  pt_awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_quest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_quest_data quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectTag(18)) goto parse_activities;
        break;
      }

      // repeated .SProtoSpace.unit_activity_data activities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activities;
        if (input->ExpectTag(26)) goto parse_pt_awards;
        break;
      }

      // repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pt_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_quest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_quest_data quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }

  // repeated .SProtoSpace.unit_activity_data activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activities(i), output);
  }

  // repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
  for (int i = 0; i < this->pt_awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt_awards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_quest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_quest_data quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }

  // repeated .SProtoSpace.unit_activity_data activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activities(i), target);
  }

  // repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
  for (int i = 0; i < this->pt_awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt_awards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_quest_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_quest_data quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated .SProtoSpace.unit_activity_data activities = 2;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }

  // repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
  total_size += 1 * this->pt_awards_size();
  for (int i = 0; i < this->pt_awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pt_awards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_quest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_quest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_quest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_quest_data::MergeFrom(const role_quest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  activities_.MergeFrom(from.activities_);
  pt_awards_.MergeFrom(from.pt_awards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_quest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_quest_data::CopyFrom(const role_quest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_quest_data::IsInitialized() const {

  return true;
}

void role_quest_data::Swap(role_quest_data* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    activities_.Swap(&other->activities_);
    pt_awards_.Swap(&other->pt_awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_quest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_quest_data_descriptor_;
  metadata.reflection = role_quest_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_drop_spid::kIdFieldNumber;
const int db_drop_spid::kStepFieldNumber;
const int db_drop_spid::kValueFieldNumber;
#endif  // !_MSC_VER

db_drop_spid::db_drop_spid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_drop_spid::InitAsDefaultInstance() {
}

db_drop_spid::db_drop_spid(const db_drop_spid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_drop_spid::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  step_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_drop_spid::~db_drop_spid() {
  SharedDtor();
}

void db_drop_spid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_drop_spid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_drop_spid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_drop_spid_descriptor_;
}

const db_drop_spid& db_drop_spid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_drop_spid* db_drop_spid::default_instance_ = NULL;

db_drop_spid* db_drop_spid::New() const {
  return new db_drop_spid;
}

void db_drop_spid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    step_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_drop_spid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional int32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_drop_spid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_drop_spid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_drop_spid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_drop_spid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_drop_spid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_drop_spid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_drop_spid::MergeFrom(const db_drop_spid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_drop_spid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_drop_spid::CopyFrom(const db_drop_spid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_drop_spid::IsInitialized() const {

  return true;
}

void db_drop_spid::Swap(db_drop_spid* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(step_, other->step_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_drop_spid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_drop_spid_descriptor_;
  metadata.reflection = db_drop_spid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_soul_attr::kTemplateIdFieldNumber;
const int unit_soul_attr::kInitValueFieldNumber;
const int unit_soul_attr::kCurValueFieldNumber;
#endif  // !_MSC_VER

unit_soul_attr::unit_soul_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_soul_attr::InitAsDefaultInstance() {
}

unit_soul_attr::unit_soul_attr(const unit_soul_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_soul_attr::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  init_value_ = 0;
  cur_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_soul_attr::~unit_soul_attr() {
  SharedDtor();
}

void unit_soul_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_soul_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_soul_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_soul_attr_descriptor_;
}

const unit_soul_attr& unit_soul_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_soul_attr* unit_soul_attr::default_instance_ = NULL;

unit_soul_attr* unit_soul_attr::New() const {
  return new unit_soul_attr;
}

void unit_soul_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0u;
    init_value_ = 0;
    cur_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_soul_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_init_value;
        break;
      }

      // optional int32 init_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_value_)));
          set_has_init_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_value;
        break;
      }

      // optional int32 cur_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_soul_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional int32 init_value = 2;
  if (has_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_value(), output);
  }

  // optional int32 cur_value = 3;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_soul_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional int32 init_value = 2;
  if (has_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_value(), target);
  }

  // optional int32 cur_value = 3;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_soul_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 init_value = 2;
    if (has_init_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_value());
    }

    // optional int32 cur_value = 3;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_soul_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_soul_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_soul_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_soul_attr::MergeFrom(const unit_soul_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_init_value()) {
      set_init_value(from.init_value());
    }
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_soul_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_soul_attr::CopyFrom(const unit_soul_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_soul_attr::IsInitialized() const {

  return true;
}

void unit_soul_attr::Swap(unit_soul_attr* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(init_value_, other->init_value_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_soul_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_soul_attr_descriptor_;
  metadata.reflection = unit_soul_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_soul_data::kDbModeFieldNumber;
const int unit_soul_data::kUuidFieldNumber;
const int unit_soul_data::kTemplateIdFieldNumber;
const int unit_soul_data::kExpFieldNumber;
const int unit_soul_data::kMaskFieldNumber;
const int unit_soul_data::kCreateTimeFieldNumber;
const int unit_soul_data::kMainAttrsFieldNumber;
const int unit_soul_data::kAddAttrsFieldNumber;
#endif  // !_MSC_VER

unit_soul_data::unit_soul_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_soul_data::InitAsDefaultInstance() {
}

unit_soul_data::unit_soul_data(const unit_soul_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_soul_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  exp_ = 0u;
  mask_ = 0u;
  create_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_soul_data::~unit_soul_data() {
  SharedDtor();
}

void unit_soul_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_soul_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_soul_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_soul_data_descriptor_;
}

const unit_soul_data& unit_soul_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_soul_data* unit_soul_data::default_instance_ = NULL;

unit_soul_data* unit_soul_data::New() const {
  return new unit_soul_data;
}

void unit_soul_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    exp_ = 0u;
    mask_ = 0u;
    create_time_ = 0u;
  }
  main_attrs_.Clear();
  add_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_soul_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mask;
        break;
      }

      // optional uint32 mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_main_attrs;
        break;
      }

      // repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_main_attrs;
        if (input->ExpectTag(66)) goto parse_add_attrs;
        break;
      }

      // repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_add_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_soul_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 mask = 5;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mask(), output);
  }

  // optional uint32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_time(), output);
  }

  // repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
  for (int i = 0; i < this->main_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->main_attrs(i), output);
  }

  // repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
  for (int i = 0; i < this->add_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->add_attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_soul_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 mask = 5;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mask(), target);
  }

  // optional uint32 create_time = 6;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_time(), target);
  }

  // repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
  for (int i = 0; i < this->main_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->main_attrs(i), target);
  }

  // repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
  for (int i = 0; i < this->add_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->add_attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_soul_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 mask = 5;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask());
    }

    // optional uint32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

  }
  // repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
  total_size += 1 * this->main_attrs_size();
  for (int i = 0; i < this->main_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_attrs(i));
  }

  // repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
  total_size += 1 * this->add_attrs_size();
  for (int i = 0; i < this->add_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_soul_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_soul_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_soul_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_soul_data::MergeFrom(const unit_soul_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  main_attrs_.MergeFrom(from.main_attrs_);
  add_attrs_.MergeFrom(from.add_attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_soul_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_soul_data::CopyFrom(const unit_soul_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_soul_data::IsInitialized() const {

  return true;
}

void unit_soul_data::Swap(unit_soul_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(exp_, other->exp_);
    std::swap(mask_, other->mask_);
    std::swap(create_time_, other->create_time_);
    main_attrs_.Swap(&other->main_attrs_);
    add_attrs_.Swap(&other->add_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_soul_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_soul_data_descriptor_;
  metadata.reflection = unit_soul_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_soul_data::kSoulsFieldNumber;
#endif  // !_MSC_VER

role_soul_data::role_soul_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_soul_data::InitAsDefaultInstance() {
}

role_soul_data::role_soul_data(const role_soul_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_soul_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_soul_data::~role_soul_data() {
  SharedDtor();
}

void role_soul_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_soul_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_soul_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_soul_data_descriptor_;
}

const role_soul_data& role_soul_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_soul_data* role_soul_data::default_instance_ = NULL;

role_soul_data* role_soul_data::New() const {
  return new role_soul_data;
}

void role_soul_data::Clear() {
  souls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_soul_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_soul_data souls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_souls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_souls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_soul_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_soul_data souls = 1;
  for (int i = 0; i < this->souls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->souls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_soul_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_soul_data souls = 1;
  for (int i = 0; i < this->souls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->souls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_soul_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_soul_data souls = 1;
  total_size += 1 * this->souls_size();
  for (int i = 0; i < this->souls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->souls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_soul_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_soul_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_soul_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_soul_data::MergeFrom(const role_soul_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  souls_.MergeFrom(from.souls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_soul_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_soul_data::CopyFrom(const role_soul_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_soul_data::IsInitialized() const {

  return true;
}

void role_soul_data::Swap(role_soul_data* other) {
  if (other != this) {
    souls_.Swap(&other->souls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_soul_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_soul_data_descriptor_;
  metadata.reflection = role_soul_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_discover_data::kDbModeFieldNumber;
const int unit_discover_data::kUuidFieldNumber;
const int unit_discover_data::kDiscoverFieldNumber;
#endif  // !_MSC_VER

unit_discover_data::unit_discover_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_discover_data::InitAsDefaultInstance() {
  discover_ = const_cast< ::SProtoSpace::discover_data*>(&::SProtoSpace::discover_data::default_instance());
}

unit_discover_data::unit_discover_data(const unit_discover_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_discover_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  discover_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_discover_data::~unit_discover_data() {
  SharedDtor();
}

void unit_discover_data::SharedDtor() {
  if (this != default_instance_) {
    delete discover_;
  }
}

void unit_discover_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_discover_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_discover_data_descriptor_;
}

const unit_discover_data& unit_discover_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_discover_data* unit_discover_data::default_instance_ = NULL;

unit_discover_data* unit_discover_data::New() const {
  return new unit_discover_data;
}

void unit_discover_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_discover()) {
      if (discover_ != NULL) discover_->::SProtoSpace::discover_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_discover_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_discover;
        break;
      }

      // optional .SProtoSpace.discover_data discover = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_discover_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.discover_data discover = 3;
  if (has_discover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->discover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_discover_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.discover_data discover = 3;
  if (has_discover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->discover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_discover_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.discover_data discover = 3;
    if (has_discover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discover());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_discover_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_discover_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_discover_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_discover_data::MergeFrom(const unit_discover_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_discover()) {
      mutable_discover()->::SProtoSpace::discover_data::MergeFrom(from.discover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_discover_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_discover_data::CopyFrom(const unit_discover_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_discover_data::IsInitialized() const {

  return true;
}

void unit_discover_data::Swap(unit_discover_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(discover_, other->discover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_discover_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_discover_data_descriptor_;
  metadata.reflection = unit_discover_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_chapter_data::kDbModeFieldNumber;
const int unit_chapter_data::kUuidFieldNumber;
const int unit_chapter_data::kIdFieldNumber;
const int unit_chapter_data::kSimpleOpenFieldNumber;
const int unit_chapter_data::kDiffOpenFieldNumber;
const int unit_chapter_data::kSimplePassFieldNumber;
const int unit_chapter_data::kDiffPassFieldNumber;
#endif  // !_MSC_VER

unit_chapter_data::unit_chapter_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_chapter_data::InitAsDefaultInstance() {
}

unit_chapter_data::unit_chapter_data(const unit_chapter_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_chapter_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  simple_open_ = false;
  diff_open_ = false;
  simple_pass_ = false;
  diff_pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_chapter_data::~unit_chapter_data() {
  SharedDtor();
}

void unit_chapter_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_chapter_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_chapter_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_chapter_data_descriptor_;
}

const unit_chapter_data& unit_chapter_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_chapter_data* unit_chapter_data::default_instance_ = NULL;

unit_chapter_data* unit_chapter_data::New() const {
  return new unit_chapter_data;
}

void unit_chapter_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    simple_open_ = false;
    diff_open_ = false;
    simple_pass_ = false;
    diff_pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_chapter_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_simple_open;
        break;
      }

      // optional bool simple_open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_simple_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_open_)));
          set_has_simple_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diff_open;
        break;
      }

      // optional bool diff_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_open_)));
          set_has_diff_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_simple_pass;
        break;
      }

      // optional bool simple_pass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_simple_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_pass_)));
          set_has_simple_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diff_pass;
        break;
      }

      // optional bool diff_pass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_pass_)));
          set_has_diff_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_chapter_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional bool simple_open = 4;
  if (has_simple_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->simple_open(), output);
  }

  // optional bool diff_open = 5;
  if (has_diff_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->diff_open(), output);
  }

  // optional bool simple_pass = 6;
  if (has_simple_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->simple_pass(), output);
  }

  // optional bool diff_pass = 7;
  if (has_diff_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->diff_pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_chapter_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional bool simple_open = 4;
  if (has_simple_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->simple_open(), target);
  }

  // optional bool diff_open = 5;
  if (has_diff_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->diff_open(), target);
  }

  // optional bool simple_pass = 6;
  if (has_simple_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->simple_pass(), target);
  }

  // optional bool diff_pass = 7;
  if (has_diff_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->diff_pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_chapter_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool simple_open = 4;
    if (has_simple_open()) {
      total_size += 1 + 1;
    }

    // optional bool diff_open = 5;
    if (has_diff_open()) {
      total_size += 1 + 1;
    }

    // optional bool simple_pass = 6;
    if (has_simple_pass()) {
      total_size += 1 + 1;
    }

    // optional bool diff_pass = 7;
    if (has_diff_pass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_chapter_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_chapter_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_chapter_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_chapter_data::MergeFrom(const unit_chapter_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_simple_open()) {
      set_simple_open(from.simple_open());
    }
    if (from.has_diff_open()) {
      set_diff_open(from.diff_open());
    }
    if (from.has_simple_pass()) {
      set_simple_pass(from.simple_pass());
    }
    if (from.has_diff_pass()) {
      set_diff_pass(from.diff_pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_chapter_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_chapter_data::CopyFrom(const unit_chapter_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_chapter_data::IsInitialized() const {

  return true;
}

void unit_chapter_data::Swap(unit_chapter_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(id_, other->id_);
    std::swap(simple_open_, other->simple_open_);
    std::swap(diff_open_, other->diff_open_);
    std::swap(simple_pass_, other->simple_pass_);
    std::swap(diff_pass_, other->diff_pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_chapter_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_chapter_data_descriptor_;
  metadata.reflection = unit_chapter_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_instance_data::kInstanceIndexFieldNumber;
const int res_instance_data::kLevelIndexFieldNumber;
const int res_instance_data::kBossFieldNumber;
#endif  // !_MSC_VER

res_instance_data::res_instance_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void res_instance_data::InitAsDefaultInstance() {
}

res_instance_data::res_instance_data(const res_instance_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void res_instance_data::SharedCtor() {
  _cached_size_ = 0;
  instance_index_ = 0u;
  level_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_instance_data::~res_instance_data() {
  SharedDtor();
}

void res_instance_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void res_instance_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_instance_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_instance_data_descriptor_;
}

const res_instance_data& res_instance_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

res_instance_data* res_instance_data::default_instance_ = NULL;

res_instance_data* res_instance_data::New() const {
  return new res_instance_data;
}

void res_instance_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_index_ = 0u;
    level_index_ = 0;
  }
  boss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_instance_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 instance_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_index_)));
          set_has_instance_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level_index;
        break;
      }

      // optional int32 level_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_index_)));
          set_has_level_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_boss;
        break;
      }

      // repeated .SProtoSpace.discover_monster boss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_boss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void res_instance_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 instance_index = 1;
  if (has_instance_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_index(), output);
  }

  // optional int32 level_index = 2;
  if (has_level_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_index(), output);
  }

  // repeated .SProtoSpace.discover_monster boss = 3;
  for (int i = 0; i < this->boss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* res_instance_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 instance_index = 1;
  if (has_instance_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_index(), target);
  }

  // optional int32 level_index = 2;
  if (has_level_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level_index(), target);
  }

  // repeated .SProtoSpace.discover_monster boss = 3;
  for (int i = 0; i < this->boss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int res_instance_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 instance_index = 1;
    if (has_instance_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_index());
    }

    // optional int32 level_index = 2;
    if (has_level_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_index());
    }

  }
  // repeated .SProtoSpace.discover_monster boss = 3;
  total_size += 1 * this->boss_size();
  for (int i = 0; i < this->boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_instance_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_instance_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_instance_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_instance_data::MergeFrom(const res_instance_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  boss_.MergeFrom(from.boss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_index()) {
      set_instance_index(from.instance_index());
    }
    if (from.has_level_index()) {
      set_level_index(from.level_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_instance_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_instance_data::CopyFrom(const res_instance_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_instance_data::IsInitialized() const {

  return true;
}

void res_instance_data::Swap(res_instance_data* other) {
  if (other != this) {
    std::swap(instance_index_, other->instance_index_);
    std::swap(level_index_, other->level_index_);
    boss_.Swap(&other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_instance_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_instance_data_descriptor_;
  metadata.reflection = res_instance_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_res_instance_data::kDbModeFieldNumber;
const int unit_res_instance_data::kTypeFieldNumber;
const int unit_res_instance_data::kDataFieldNumber;
#endif  // !_MSC_VER

unit_res_instance_data::unit_res_instance_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_res_instance_data::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::res_instance_data*>(&::SProtoSpace::res_instance_data::default_instance());
}

unit_res_instance_data::unit_res_instance_data(const unit_res_instance_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_res_instance_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  type_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_res_instance_data::~unit_res_instance_data() {
  SharedDtor();
}

void unit_res_instance_data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void unit_res_instance_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_res_instance_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_res_instance_data_descriptor_;
}

const unit_res_instance_data& unit_res_instance_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_res_instance_data* unit_res_instance_data::default_instance_ = NULL;

unit_res_instance_data* unit_res_instance_data::New() const {
  return new unit_res_instance_data;
}

void unit_res_instance_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    type_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::res_instance_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_res_instance_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.res_instance_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_res_instance_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .SProtoSpace.res_instance_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_res_instance_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .SProtoSpace.res_instance_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_res_instance_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .SProtoSpace.res_instance_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_res_instance_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_res_instance_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_res_instance_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_res_instance_data::MergeFrom(const unit_res_instance_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::res_instance_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_res_instance_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_res_instance_data::CopyFrom(const unit_res_instance_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_res_instance_data::IsInitialized() const {

  return true;
}

void unit_res_instance_data::Swap(unit_res_instance_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_res_instance_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_res_instance_data_descriptor_;
  metadata.reflection = unit_res_instance_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_section_star_data::kDbModeFieldNumber;
const int unit_section_star_data::kUuidFieldNumber;
const int unit_section_star_data::kTypeFieldNumber;
const int unit_section_star_data::kRewardIdFieldNumber;
#endif  // !_MSC_VER

unit_section_star_data::unit_section_star_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_section_star_data::InitAsDefaultInstance() {
}

unit_section_star_data::unit_section_star_data(const unit_section_star_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_section_star_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_section_star_data::~unit_section_star_data() {
  SharedDtor();
}

void unit_section_star_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_section_star_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_section_star_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_section_star_data_descriptor_;
}

const unit_section_star_data& unit_section_star_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_section_star_data* unit_section_star_data::default_instance_ = NULL;

unit_section_star_data* unit_section_star_data::New() const {
  return new unit_section_star_data;
}

void unit_section_star_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_section_star_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // optional int32 reward_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_section_star_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_section_star_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_section_star_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_section_star_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_section_star_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_section_star_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_section_star_data::MergeFrom(const unit_section_star_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_section_star_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_section_star_data::CopyFrom(const unit_section_star_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_section_star_data::IsInitialized() const {

  return true;
}

void unit_section_star_data::Swap(unit_section_star_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_section_star_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_section_star_data_descriptor_;
  metadata.reflection = unit_section_star_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_tower_data::kDbModeFieldNumber;
const int unit_tower_data::kUuidFieldNumber;
const int unit_tower_data::kMaxFloorFieldNumber;
const int unit_tower_data::kResetTimesFieldNumber;
const int unit_tower_data::kCurFloorFieldNumber;
const int unit_tower_data::kCurStepFieldNumber;
const int unit_tower_data::kFirstInFieldNumber;
const int unit_tower_data::kStepHasPassFieldNumber;
#endif  // !_MSC_VER

unit_tower_data::unit_tower_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_tower_data::InitAsDefaultInstance() {
}

unit_tower_data::unit_tower_data(const unit_tower_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_tower_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  max_floor_ = 0u;
  reset_times_ = 1u;
  cur_floor_ = 1u;
  cur_step_ = 0u;
  first_in_ = false;
  step_has_pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_tower_data::~unit_tower_data() {
  SharedDtor();
}

void unit_tower_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_tower_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_tower_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_tower_data_descriptor_;
}

const unit_tower_data& unit_tower_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_tower_data* unit_tower_data::default_instance_ = NULL;

unit_tower_data* unit_tower_data::New() const {
  return new unit_tower_data;
}

void unit_tower_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    max_floor_ = 0u;
    reset_times_ = 1u;
    cur_floor_ = 1u;
    cur_step_ = 0u;
    first_in_ = false;
    step_has_pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_tower_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_floor;
        break;
      }

      // optional uint32 max_floor = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_floor_)));
          set_has_max_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reset_times;
        break;
      }

      // optional uint32 reset_times = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_floor;
        break;
      }

      // optional uint32 cur_floor = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_floor_)));
          set_has_cur_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_first_in;
        break;
      }

      // optional bool first_in = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_in_)));
          set_has_first_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_step_has_pass;
        break;
      }

      // optional bool step_has_pass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_has_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step_has_pass_)));
          set_has_step_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_tower_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 max_floor = 3 [default = 0];
  if (has_max_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_floor(), output);
  }

  // optional uint32 reset_times = 4 [default = 1];
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reset_times(), output);
  }

  // optional uint32 cur_floor = 5 [default = 1];
  if (has_cur_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_floor(), output);
  }

  // optional uint32 cur_step = 6;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_step(), output);
  }

  // optional bool first_in = 7;
  if (has_first_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->first_in(), output);
  }

  // optional bool step_has_pass = 8;
  if (has_step_has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->step_has_pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_tower_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 max_floor = 3 [default = 0];
  if (has_max_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_floor(), target);
  }

  // optional uint32 reset_times = 4 [default = 1];
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reset_times(), target);
  }

  // optional uint32 cur_floor = 5 [default = 1];
  if (has_cur_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_floor(), target);
  }

  // optional uint32 cur_step = 6;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_step(), target);
  }

  // optional bool first_in = 7;
  if (has_first_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->first_in(), target);
  }

  // optional bool step_has_pass = 8;
  if (has_step_has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->step_has_pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_tower_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 max_floor = 3 [default = 0];
    if (has_max_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_floor());
    }

    // optional uint32 reset_times = 4 [default = 1];
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

    // optional uint32 cur_floor = 5 [default = 1];
    if (has_cur_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_floor());
    }

    // optional uint32 cur_step = 6;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

    // optional bool first_in = 7;
    if (has_first_in()) {
      total_size += 1 + 1;
    }

    // optional bool step_has_pass = 8;
    if (has_step_has_pass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_tower_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_tower_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_tower_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_tower_data::MergeFrom(const unit_tower_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_max_floor()) {
      set_max_floor(from.max_floor());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_cur_floor()) {
      set_cur_floor(from.cur_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_first_in()) {
      set_first_in(from.first_in());
    }
    if (from.has_step_has_pass()) {
      set_step_has_pass(from.step_has_pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_tower_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_tower_data::CopyFrom(const unit_tower_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_tower_data::IsInitialized() const {

  return true;
}

void unit_tower_data::Swap(unit_tower_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(max_floor_, other->max_floor_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(cur_floor_, other->cur_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(first_in_, other->first_in_);
    std::swap(step_has_pass_, other->step_has_pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_tower_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_tower_data_descriptor_;
  metadata.reflection = unit_tower_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_event_info::kHeroIdFieldNumber;
const int hero_event_info::kEventIdsFieldNumber;
#endif  // !_MSC_VER

hero_event_info::hero_event_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_event_info::InitAsDefaultInstance() {
}

hero_event_info::hero_event_info(const hero_event_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_event_info::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_event_info::~hero_event_info() {
  SharedDtor();
}

void hero_event_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_event_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_event_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_event_info_descriptor_;
}

const hero_event_info& hero_event_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

hero_event_info* hero_event_info::default_instance_ = NULL;

hero_event_info* hero_event_info::New() const {
  return new hero_event_info;
}

void hero_event_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0;
  }
  event_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_event_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        break;
      }

      // repeated int32 event_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_event_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_event_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->event_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_event_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->event_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_event_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

  }
  // repeated int32 event_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->event_ids(i));
    }
    total_size += 1 * this->event_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_event_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_event_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_event_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_event_info::MergeFrom(const hero_event_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_ids_.MergeFrom(from.event_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_event_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_event_info::CopyFrom(const hero_event_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_event_info::IsInitialized() const {

  return true;
}

void hero_event_info::Swap(hero_event_info* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    event_ids_.Swap(&other->event_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_event_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_event_info_descriptor_;
  metadata.reflection = hero_event_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_event_info::kCityIdFieldNumber;
const int city_event_info::kEventIdsFieldNumber;
#endif  // !_MSC_VER

city_event_info::city_event_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_event_info::InitAsDefaultInstance() {
}

city_event_info::city_event_info(const city_event_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_event_info::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_event_info::~city_event_info() {
  SharedDtor();
}

void city_event_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_event_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_event_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_event_info_descriptor_;
}

const city_event_info& city_event_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

city_event_info* city_event_info::default_instance_ = NULL;

city_event_info* city_event_info::New() const {
  return new city_event_info;
}

void city_event_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0;
  }
  event_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_event_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        break;
      }

      // repeated int32 event_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_event_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_event_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->city_id(), output);
  }

  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->event_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_event_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->city_id(), target);
  }

  // repeated int32 event_ids = 2;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->event_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_event_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

  }
  // repeated int32 event_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->event_ids(i));
    }
    total_size += 1 * this->event_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_event_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_event_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_event_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_event_info::MergeFrom(const city_event_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_ids_.MergeFrom(from.event_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_event_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_event_info::CopyFrom(const city_event_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_event_info::IsInitialized() const {

  return true;
}

void city_event_info::Swap(city_event_info* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    event_ids_.Swap(&other->event_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_event_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_event_info_descriptor_;
  metadata.reflection = city_event_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int special_event_data::kEventIdFieldNumber;
const int special_event_data::kShiChenFieldNumber;
const int special_event_data::kWeatherFieldNumber;
#endif  // !_MSC_VER

special_event_data::special_event_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void special_event_data::InitAsDefaultInstance() {
}

special_event_data::special_event_data(const special_event_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void special_event_data::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  shi_chen_ = 0;
  weather_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

special_event_data::~special_event_data() {
  SharedDtor();
}

void special_event_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void special_event_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* special_event_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return special_event_data_descriptor_;
}

const special_event_data& special_event_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

special_event_data* special_event_data::default_instance_ = NULL;

special_event_data* special_event_data::New() const {
  return new special_event_data;
}

void special_event_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    shi_chen_ = 0;
    weather_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool special_event_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shi_chen;
        break;
      }

      // optional int32 shi_chen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shi_chen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shi_chen_)));
          set_has_shi_chen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weather;
        break;
      }

      // optional int32 weather = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_)));
          set_has_weather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void special_event_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 shi_chen = 2;
  if (has_shi_chen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shi_chen(), output);
  }

  // optional int32 weather = 3;
  if (has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weather(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* special_event_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 shi_chen = 2;
  if (has_shi_chen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shi_chen(), target);
  }

  // optional int32 weather = 3;
  if (has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weather(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int special_event_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 shi_chen = 2;
    if (has_shi_chen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shi_chen());
    }

    // optional int32 weather = 3;
    if (has_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void special_event_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const special_event_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const special_event_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void special_event_data::MergeFrom(const special_event_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_shi_chen()) {
      set_shi_chen(from.shi_chen());
    }
    if (from.has_weather()) {
      set_weather(from.weather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void special_event_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void special_event_data::CopyFrom(const special_event_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool special_event_data::IsInitialized() const {

  return true;
}

void special_event_data::Swap(special_event_data* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(shi_chen_, other->shi_chen_);
    std::swap(weather_, other->weather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata special_event_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = special_event_data_descriptor_;
  metadata.reflection = special_event_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_adv_data::kDbModeFieldNumber;
const int unit_adv_data::kUuidFieldNumber;
const int unit_adv_data::kCityIdsFieldNumber;
const int unit_adv_data::kEventIdsFieldNumber;
const int unit_adv_data::kHeroFavorsFieldNumber;
const int unit_adv_data::kHeroEventsFieldNumber;
const int unit_adv_data::kCityEventsFieldNumber;
const int unit_adv_data::kCurAskIdsFieldNumber;
const int unit_adv_data::kSpDataFieldNumber;
#endif  // !_MSC_VER

unit_adv_data::unit_adv_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_adv_data::InitAsDefaultInstance() {
}

unit_adv_data::unit_adv_data(const unit_adv_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_adv_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_adv_data::~unit_adv_data() {
  SharedDtor();
}

void unit_adv_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_adv_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_adv_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_adv_data_descriptor_;
}

const unit_adv_data& unit_adv_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_adv_data* unit_adv_data::default_instance_ = NULL;

unit_adv_data* unit_adv_data::New() const {
  return new unit_adv_data;
}

void unit_adv_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  city_ids_.Clear();
  event_ids_.Clear();
  hero_favors_.Clear();
  hero_events_.Clear();
  city_events_.Clear();
  cur_ask_ids_.Clear();
  sp_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_adv_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_city_ids;
        break;
      }

      // repeated int32 city_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_city_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_city_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_city_ids;
        if (input->ExpectTag(48)) goto parse_event_ids;
        break;
      }

      // repeated int32 event_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_event_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_ids;
        if (input->ExpectTag(58)) goto parse_hero_favors;
        break;
      }

      // repeated .SProtoSpace.hero_favor_info hero_favors = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_favors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_favors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hero_favors;
        if (input->ExpectTag(66)) goto parse_hero_events;
        break;
      }

      // repeated .SProtoSpace.hero_event_info hero_events = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hero_events;
        if (input->ExpectTag(74)) goto parse_city_events;
        break;
      }

      // repeated .SProtoSpace.city_event_info city_events = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_city_events;
        if (input->ExpectTag(80)) goto parse_cur_ask_ids;
        break;
      }

      // repeated int32 cur_ask_ids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_ask_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cur_ask_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cur_ask_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cur_ask_ids;
        if (input->ExpectTag(90)) goto parse_sp_data;
        break;
      }

      // repeated .SProtoSpace.special_event_data sp_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sp_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_adv_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated int32 city_ids = 5;
  for (int i = 0; i < this->city_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->city_ids(i), output);
  }

  // repeated int32 event_ids = 6;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->event_ids(i), output);
  }

  // repeated .SProtoSpace.hero_favor_info hero_favors = 7;
  for (int i = 0; i < this->hero_favors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hero_favors(i), output);
  }

  // repeated .SProtoSpace.hero_event_info hero_events = 8;
  for (int i = 0; i < this->hero_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hero_events(i), output);
  }

  // repeated .SProtoSpace.city_event_info city_events = 9;
  for (int i = 0; i < this->city_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->city_events(i), output);
  }

  // repeated int32 cur_ask_ids = 10;
  for (int i = 0; i < this->cur_ask_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cur_ask_ids(i), output);
  }

  // repeated .SProtoSpace.special_event_data sp_data = 11;
  for (int i = 0; i < this->sp_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sp_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_adv_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated int32 city_ids = 5;
  for (int i = 0; i < this->city_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->city_ids(i), target);
  }

  // repeated int32 event_ids = 6;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->event_ids(i), target);
  }

  // repeated .SProtoSpace.hero_favor_info hero_favors = 7;
  for (int i = 0; i < this->hero_favors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hero_favors(i), target);
  }

  // repeated .SProtoSpace.hero_event_info hero_events = 8;
  for (int i = 0; i < this->hero_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hero_events(i), target);
  }

  // repeated .SProtoSpace.city_event_info city_events = 9;
  for (int i = 0; i < this->city_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->city_events(i), target);
  }

  // repeated int32 cur_ask_ids = 10;
  for (int i = 0; i < this->cur_ask_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cur_ask_ids(i), target);
  }

  // repeated .SProtoSpace.special_event_data sp_data = 11;
  for (int i = 0; i < this->sp_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sp_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_adv_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated int32 city_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->city_ids(i));
    }
    total_size += 1 * this->city_ids_size() + data_size;
  }

  // repeated int32 event_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->event_ids(i));
    }
    total_size += 1 * this->event_ids_size() + data_size;
  }

  // repeated .SProtoSpace.hero_favor_info hero_favors = 7;
  total_size += 1 * this->hero_favors_size();
  for (int i = 0; i < this->hero_favors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_favors(i));
  }

  // repeated .SProtoSpace.hero_event_info hero_events = 8;
  total_size += 1 * this->hero_events_size();
  for (int i = 0; i < this->hero_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_events(i));
  }

  // repeated .SProtoSpace.city_event_info city_events = 9;
  total_size += 1 * this->city_events_size();
  for (int i = 0; i < this->city_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_events(i));
  }

  // repeated int32 cur_ask_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_ask_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cur_ask_ids(i));
    }
    total_size += 1 * this->cur_ask_ids_size() + data_size;
  }

  // repeated .SProtoSpace.special_event_data sp_data = 11;
  total_size += 1 * this->sp_data_size();
  for (int i = 0; i < this->sp_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sp_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_adv_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_adv_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_adv_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_adv_data::MergeFrom(const unit_adv_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_ids_.MergeFrom(from.city_ids_);
  event_ids_.MergeFrom(from.event_ids_);
  hero_favors_.MergeFrom(from.hero_favors_);
  hero_events_.MergeFrom(from.hero_events_);
  city_events_.MergeFrom(from.city_events_);
  cur_ask_ids_.MergeFrom(from.cur_ask_ids_);
  sp_data_.MergeFrom(from.sp_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_adv_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_adv_data::CopyFrom(const unit_adv_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_adv_data::IsInitialized() const {

  return true;
}

void unit_adv_data::Swap(unit_adv_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    city_ids_.Swap(&other->city_ids_);
    event_ids_.Swap(&other->event_ids_);
    hero_favors_.Swap(&other->hero_favors_);
    hero_events_.Swap(&other->hero_events_);
    city_events_.Swap(&other->city_events_);
    cur_ask_ids_.Swap(&other->cur_ask_ids_);
    sp_data_.Swap(&other->sp_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_adv_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_adv_data_descriptor_;
  metadata.reflection = unit_adv_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guide_step_data::kStepIdFieldNumber;
const int guide_step_data::kSkipFieldNumber;
#endif  // !_MSC_VER

guide_step_data::guide_step_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guide_step_data::InitAsDefaultInstance() {
}

guide_step_data::guide_step_data(const guide_step_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guide_step_data::SharedCtor() {
  _cached_size_ = 0;
  step_id_ = 0;
  skip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guide_step_data::~guide_step_data() {
  SharedDtor();
}

void guide_step_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guide_step_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guide_step_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guide_step_data_descriptor_;
}

const guide_step_data& guide_step_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

guide_step_data* guide_step_data::default_instance_ = NULL;

guide_step_data* guide_step_data::New() const {
  return new guide_step_data;
}

void guide_step_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_id_ = 0;
    skip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guide_step_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skip;
        break;
      }

      // optional bool skip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guide_step_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 step_id = 1;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step_id(), output);
  }

  // optional bool skip = 2;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->skip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guide_step_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 step_id = 1;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step_id(), target);
  }

  // optional bool skip = 2;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->skip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guide_step_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step_id = 1;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_id());
    }

    // optional bool skip = 2;
    if (has_skip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guide_step_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guide_step_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guide_step_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guide_step_data::MergeFrom(const guide_step_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guide_step_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guide_step_data::CopyFrom(const guide_step_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guide_step_data::IsInitialized() const {

  return true;
}

void guide_step_data::Swap(guide_step_data* other) {
  if (other != this) {
    std::swap(step_id_, other->step_id_);
    std::swap(skip_, other->skip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guide_step_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guide_step_data_descriptor_;
  metadata.reflection = guide_step_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_guide_data::kDbModeFieldNumber;
const int unit_guide_data::kUuidFieldNumber;
const int unit_guide_data::kGuideIdFieldNumber;
const int unit_guide_data::kSkipFieldNumber;
const int unit_guide_data::kStepDataFieldNumber;
#endif  // !_MSC_VER

unit_guide_data::unit_guide_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_guide_data::InitAsDefaultInstance() {
}

unit_guide_data::unit_guide_data(const unit_guide_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_guide_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  guide_id_ = 0;
  skip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_guide_data::~unit_guide_data() {
  SharedDtor();
}

void unit_guide_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_guide_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_guide_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_guide_data_descriptor_;
}

const unit_guide_data& unit_guide_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_guide_data* unit_guide_data::default_instance_ = NULL;

unit_guide_data* unit_guide_data::New() const {
  return new unit_guide_data;
}

void unit_guide_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    guide_id_ = 0;
    skip_ = false;
  }
  step_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_guide_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guide_id;
        break;
      }

      // optional int32 guide_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skip;
        break;
      }

      // optional bool skip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_step_data;
        break;
      }

      // repeated .SProtoSpace.guide_step_data step_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_step_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_guide_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 guide_id = 3;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guide_id(), output);
  }

  // optional bool skip = 4;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skip(), output);
  }

  // repeated .SProtoSpace.guide_step_data step_data = 5;
  for (int i = 0; i < this->step_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->step_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_guide_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 guide_id = 3;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guide_id(), target);
  }

  // optional bool skip = 4;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skip(), target);
  }

  // repeated .SProtoSpace.guide_step_data step_data = 5;
  for (int i = 0; i < this->step_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->step_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_guide_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 guide_id = 3;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide_id());
    }

    // optional bool skip = 4;
    if (has_skip()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SProtoSpace.guide_step_data step_data = 5;
  total_size += 1 * this->step_data_size();
  for (int i = 0; i < this->step_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_guide_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_guide_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_guide_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_guide_data::MergeFrom(const unit_guide_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_data_.MergeFrom(from.step_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_guide_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_guide_data::CopyFrom(const unit_guide_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_guide_data::IsInitialized() const {

  return true;
}

void unit_guide_data::Swap(unit_guide_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(skip_, other->skip_);
    step_data_.Swap(&other->step_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_guide_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_guide_data_descriptor_;
  metadata.reflection = unit_guide_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_plot_little_game_data::kDbModeFieldNumber;
const int unit_plot_little_game_data::kUuidFieldNumber;
const int unit_plot_little_game_data::kDataFieldNumber;
#endif  // !_MSC_VER

unit_plot_little_game_data::unit_plot_little_game_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_plot_little_game_data::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::single_plot_little_game*>(&::SProtoSpace::single_plot_little_game::default_instance());
}

unit_plot_little_game_data::unit_plot_little_game_data(const unit_plot_little_game_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_plot_little_game_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_plot_little_game_data::~unit_plot_little_game_data() {
  SharedDtor();
}

void unit_plot_little_game_data::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void unit_plot_little_game_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_plot_little_game_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_plot_little_game_data_descriptor_;
}

const unit_plot_little_game_data& unit_plot_little_game_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_plot_little_game_data* unit_plot_little_game_data::default_instance_ = NULL;

unit_plot_little_game_data* unit_plot_little_game_data::New() const {
  return new unit_plot_little_game_data;
}

void unit_plot_little_game_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::single_plot_little_game::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_plot_little_game_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.single_plot_little_game data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_plot_little_game_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.single_plot_little_game data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_plot_little_game_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.single_plot_little_game data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_plot_little_game_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.single_plot_little_game data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_plot_little_game_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_plot_little_game_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_plot_little_game_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_plot_little_game_data::MergeFrom(const unit_plot_little_game_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::single_plot_little_game::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_plot_little_game_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_plot_little_game_data::CopyFrom(const unit_plot_little_game_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_plot_little_game_data::IsInitialized() const {

  return true;
}

void unit_plot_little_game_data::Swap(unit_plot_little_game_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_plot_little_game_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_plot_little_game_data_descriptor_;
  metadata.reflection = unit_plot_little_game_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_level_data::kDiscoversFieldNumber;
const int role_level_data::kChaptersFieldNumber;
const int role_level_data::kResDataFieldNumber;
const int role_level_data::kPlotDataFieldNumber;
const int role_level_data::kSectionStarFieldNumber;
const int role_level_data::kTowerDataFieldNumber;
const int role_level_data::kAdvDataFieldNumber;
const int role_level_data::kGuideDataFieldNumber;
const int role_level_data::kPlotLittleGameDataFieldNumber;
#endif  // !_MSC_VER

role_level_data::role_level_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_level_data::InitAsDefaultInstance() {
}

role_level_data::role_level_data(const role_level_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_level_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_level_data::~role_level_data() {
  SharedDtor();
}

void role_level_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_level_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_level_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_level_data_descriptor_;
}

const role_level_data& role_level_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_level_data* role_level_data::default_instance_ = NULL;

role_level_data* role_level_data::New() const {
  return new role_level_data;
}

void role_level_data::Clear() {
  discovers_.Clear();
  chapters_.Clear();
  res_data_.Clear();
  plot_data_.Clear();
  section_star_.Clear();
  tower_data_.Clear();
  adv_data_.Clear();
  guide_data_.Clear();
  plot_little_game_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_level_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_discover_data discovers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discovers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discovers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_discovers;
        if (input->ExpectTag(18)) goto parse_chapters;
        break;
      }

      // repeated .SProtoSpace.unit_chapter_data chapters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chapters;
        if (input->ExpectTag(26)) goto parse_res_data;
        break;
      }

      // repeated .SProtoSpace.unit_res_instance_data res_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_res_data;
        if (input->ExpectTag(34)) goto parse_plot_data;
        break;
      }

      // repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plot_data;
        if (input->ExpectTag(42)) goto parse_section_star;
        break;
      }

      // repeated .SProtoSpace.unit_section_star_data section_star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_section_star()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_section_star;
        if (input->ExpectTag(50)) goto parse_tower_data;
        break;
      }

      // repeated .SProtoSpace.unit_tower_data tower_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tower_data;
        if (input->ExpectTag(58)) goto parse_adv_data;
        break;
      }

      // repeated .SProtoSpace.unit_adv_data adv_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adv_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_adv_data;
        if (input->ExpectTag(66)) goto parse_guide_data;
        break;
      }

      // repeated .SProtoSpace.unit_guide_data guide_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guide_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guide_data;
        if (input->ExpectTag(74)) goto parse_plot_little_game_data;
        break;
      }

      // repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plot_little_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plot_little_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_plot_little_game_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_level_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_discover_data discovers = 1;
  for (int i = 0; i < this->discovers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->discovers(i), output);
  }

  // repeated .SProtoSpace.unit_chapter_data chapters = 2;
  for (int i = 0; i < this->chapters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chapters(i), output);
  }

  // repeated .SProtoSpace.unit_res_instance_data res_data = 3;
  for (int i = 0; i < this->res_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->res_data(i), output);
  }

  // repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
  for (int i = 0; i < this->plot_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->plot_data(i), output);
  }

  // repeated .SProtoSpace.unit_section_star_data section_star = 5;
  for (int i = 0; i < this->section_star_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->section_star(i), output);
  }

  // repeated .SProtoSpace.unit_tower_data tower_data = 6;
  for (int i = 0; i < this->tower_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tower_data(i), output);
  }

  // repeated .SProtoSpace.unit_adv_data adv_data = 7;
  for (int i = 0; i < this->adv_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adv_data(i), output);
  }

  // repeated .SProtoSpace.unit_guide_data guide_data = 8;
  for (int i = 0; i < this->guide_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->guide_data(i), output);
  }

  // repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
  for (int i = 0; i < this->plot_little_game_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->plot_little_game_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_level_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_discover_data discovers = 1;
  for (int i = 0; i < this->discovers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->discovers(i), target);
  }

  // repeated .SProtoSpace.unit_chapter_data chapters = 2;
  for (int i = 0; i < this->chapters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chapters(i), target);
  }

  // repeated .SProtoSpace.unit_res_instance_data res_data = 3;
  for (int i = 0; i < this->res_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->res_data(i), target);
  }

  // repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
  for (int i = 0; i < this->plot_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->plot_data(i), target);
  }

  // repeated .SProtoSpace.unit_section_star_data section_star = 5;
  for (int i = 0; i < this->section_star_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->section_star(i), target);
  }

  // repeated .SProtoSpace.unit_tower_data tower_data = 6;
  for (int i = 0; i < this->tower_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tower_data(i), target);
  }

  // repeated .SProtoSpace.unit_adv_data adv_data = 7;
  for (int i = 0; i < this->adv_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->adv_data(i), target);
  }

  // repeated .SProtoSpace.unit_guide_data guide_data = 8;
  for (int i = 0; i < this->guide_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->guide_data(i), target);
  }

  // repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
  for (int i = 0; i < this->plot_little_game_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->plot_little_game_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_level_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_discover_data discovers = 1;
  total_size += 1 * this->discovers_size();
  for (int i = 0; i < this->discovers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discovers(i));
  }

  // repeated .SProtoSpace.unit_chapter_data chapters = 2;
  total_size += 1 * this->chapters_size();
  for (int i = 0; i < this->chapters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapters(i));
  }

  // repeated .SProtoSpace.unit_res_instance_data res_data = 3;
  total_size += 1 * this->res_data_size();
  for (int i = 0; i < this->res_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res_data(i));
  }

  // repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
  total_size += 1 * this->plot_data_size();
  for (int i = 0; i < this->plot_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plot_data(i));
  }

  // repeated .SProtoSpace.unit_section_star_data section_star = 5;
  total_size += 1 * this->section_star_size();
  for (int i = 0; i < this->section_star_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->section_star(i));
  }

  // repeated .SProtoSpace.unit_tower_data tower_data = 6;
  total_size += 1 * this->tower_data_size();
  for (int i = 0; i < this->tower_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower_data(i));
  }

  // repeated .SProtoSpace.unit_adv_data adv_data = 7;
  total_size += 1 * this->adv_data_size();
  for (int i = 0; i < this->adv_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adv_data(i));
  }

  // repeated .SProtoSpace.unit_guide_data guide_data = 8;
  total_size += 1 * this->guide_data_size();
  for (int i = 0; i < this->guide_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_data(i));
  }

  // repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
  total_size += 1 * this->plot_little_game_data_size();
  for (int i = 0; i < this->plot_little_game_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plot_little_game_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_level_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_level_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_level_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_level_data::MergeFrom(const role_level_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  discovers_.MergeFrom(from.discovers_);
  chapters_.MergeFrom(from.chapters_);
  res_data_.MergeFrom(from.res_data_);
  plot_data_.MergeFrom(from.plot_data_);
  section_star_.MergeFrom(from.section_star_);
  tower_data_.MergeFrom(from.tower_data_);
  adv_data_.MergeFrom(from.adv_data_);
  guide_data_.MergeFrom(from.guide_data_);
  plot_little_game_data_.MergeFrom(from.plot_little_game_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_level_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_level_data::CopyFrom(const role_level_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_level_data::IsInitialized() const {

  return true;
}

void role_level_data::Swap(role_level_data* other) {
  if (other != this) {
    discovers_.Swap(&other->discovers_);
    chapters_.Swap(&other->chapters_);
    res_data_.Swap(&other->res_data_);
    plot_data_.Swap(&other->plot_data_);
    section_star_.Swap(&other->section_star_);
    tower_data_.Swap(&other->tower_data_);
    adv_data_.Swap(&other->adv_data_);
    guide_data_.Swap(&other->guide_data_);
    plot_little_game_data_.Swap(&other->plot_little_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_level_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_level_data_descriptor_;
  metadata.reflection = role_level_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_royal_data::kDbModeFieldNumber;
const int unit_royal_data::kUuidFieldNumber;
const int unit_royal_data::kConfigIdFieldNumber;
const int unit_royal_data::kIntimacyValueFieldNumber;
const int unit_royal_data::kHasReceivedFieldNumber;
#endif  // !_MSC_VER

unit_royal_data::unit_royal_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_royal_data::InitAsDefaultInstance() {
}

unit_royal_data::unit_royal_data(const unit_royal_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_royal_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0u;
  intimacy_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_royal_data::~unit_royal_data() {
  SharedDtor();
}

void unit_royal_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_royal_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_royal_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_royal_data_descriptor_;
}

const unit_royal_data& unit_royal_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_royal_data* unit_royal_data::default_instance_ = NULL;

unit_royal_data* unit_royal_data::New() const {
  return new unit_royal_data;
}

void unit_royal_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0u;
    intimacy_value_ = 0u;
  }
  has_received_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_royal_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intimacy_value;
        break;
      }

      // optional uint32 intimacy_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intimacy_value_)));
          set_has_intimacy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_has_received;
        break;
      }

      // repeated uint32 has_received = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_has_received())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_has_received())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_has_received;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_royal_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_id(), output);
  }

  // optional uint32 intimacy_value = 5;
  if (has_intimacy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intimacy_value(), output);
  }

  // repeated uint32 has_received = 8;
  for (int i = 0; i < this->has_received_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->has_received(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_royal_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_id(), target);
  }

  // optional uint32 intimacy_value = 5;
  if (has_intimacy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->intimacy_value(), target);
  }

  // repeated uint32 has_received = 8;
  for (int i = 0; i < this->has_received_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->has_received(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_royal_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 intimacy_value = 5;
    if (has_intimacy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intimacy_value());
    }

  }
  // repeated uint32 has_received = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->has_received_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->has_received(i));
    }
    total_size += 1 * this->has_received_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_royal_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_royal_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_royal_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_royal_data::MergeFrom(const unit_royal_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  has_received_.MergeFrom(from.has_received_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_intimacy_value()) {
      set_intimacy_value(from.intimacy_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_royal_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_royal_data::CopyFrom(const unit_royal_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_royal_data::IsInitialized() const {

  return true;
}

void unit_royal_data::Swap(unit_royal_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(config_id_, other->config_id_);
    std::swap(intimacy_value_, other->intimacy_value_);
    has_received_.Swap(&other->has_received_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_royal_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_royal_data_descriptor_;
  metadata.reflection = unit_royal_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_opt_info::kDbModeFieldNumber;
const int royal_opt_info::kUuidFieldNumber;
const int royal_opt_info::kRefreshTimesFieldNumber;
const int royal_opt_info::kVisitTimesFieldNumber;
#endif  // !_MSC_VER

royal_opt_info::royal_opt_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_opt_info::InitAsDefaultInstance() {
}

royal_opt_info::royal_opt_info(const royal_opt_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_opt_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  refresh_times_ = 0u;
  visit_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_opt_info::~royal_opt_info() {
  SharedDtor();
}

void royal_opt_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_opt_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_opt_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_opt_info_descriptor_;
}

const royal_opt_info& royal_opt_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

royal_opt_info* royal_opt_info::default_instance_ = NULL;

royal_opt_info* royal_opt_info::New() const {
  return new royal_opt_info;
}

void royal_opt_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    refresh_times_ = 0u;
    visit_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_opt_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refresh_times;
        break;
      }

      // optional uint32 refresh_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_visit_times;
        break;
      }

      // optional uint32 visit_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visit_times_)));
          set_has_visit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_opt_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 refresh_times = 7;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refresh_times(), output);
  }

  // optional uint32 visit_times = 8;
  if (has_visit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->visit_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_opt_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 refresh_times = 7;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refresh_times(), target);
  }

  // optional uint32 visit_times = 8;
  if (has_visit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->visit_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_opt_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 refresh_times = 7;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_times());
    }

    // optional uint32 visit_times = 8;
    if (has_visit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visit_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_opt_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_opt_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_opt_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_opt_info::MergeFrom(const royal_opt_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_visit_times()) {
      set_visit_times(from.visit_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_opt_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_opt_info::CopyFrom(const royal_opt_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_opt_info::IsInitialized() const {

  return true;
}

void royal_opt_info::Swap(royal_opt_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(visit_times_, other->visit_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_opt_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_opt_info_descriptor_;
  metadata.reflection = royal_opt_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_royal_data::kRoyalsFieldNumber;
const int role_royal_data::kInfosFieldNumber;
#endif  // !_MSC_VER

role_royal_data::role_royal_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_royal_data::InitAsDefaultInstance() {
}

role_royal_data::role_royal_data(const role_royal_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_royal_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_royal_data::~role_royal_data() {
  SharedDtor();
}

void role_royal_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_royal_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_royal_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_royal_data_descriptor_;
}

const role_royal_data& role_royal_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_royal_data* role_royal_data::default_instance_ = NULL;

role_royal_data* role_royal_data::New() const {
  return new role_royal_data;
}

void role_royal_data::Clear() {
  royals_.Clear();
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_royal_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_royal_data royals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_royals;
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.royal_opt_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_royal_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_royal_data royals = 1;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->royals(i), output);
  }

  // repeated .SProtoSpace.royal_opt_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_royal_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_royal_data royals = 1;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->royals(i), target);
  }

  // repeated .SProtoSpace.royal_opt_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_royal_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_royal_data royals = 1;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  // repeated .SProtoSpace.royal_opt_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_royal_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_royal_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_royal_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_royal_data::MergeFrom(const role_royal_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_royal_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_royal_data::CopyFrom(const role_royal_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_royal_data::IsInitialized() const {

  return true;
}

void role_royal_data::Swap(role_royal_data* other) {
  if (other != this) {
    royals_.Swap(&other->royals_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_royal_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_royal_data_descriptor_;
  metadata.reflection = role_royal_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_task_data::kMaxStepFieldNumber;
const int royal_task_data::kCurStepFieldNumber;
const int royal_task_data::kConfigIdFieldNumber;
const int royal_task_data::kStarFieldNumber;
const int royal_task_data::kStatusFieldNumber;
const int royal_task_data::kValueFieldNumber;
const int royal_task_data::kTypeFieldNumber;
#endif  // !_MSC_VER

royal_task_data::royal_task_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_task_data::InitAsDefaultInstance() {
}

royal_task_data::royal_task_data(const royal_task_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_task_data::SharedCtor() {
  _cached_size_ = 0;
  max_step_ = 0;
  cur_step_ = 0;
  config_id_ = 0u;
  star_ = 0u;
  status_ = 0;
  value_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_task_data::~royal_task_data() {
  SharedDtor();
}

void royal_task_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_task_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_task_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_task_data_descriptor_;
}

const royal_task_data& royal_task_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

royal_task_data* royal_task_data::default_instance_ = NULL;

royal_task_data* royal_task_data::New() const {
  return new royal_task_data;
}

void royal_task_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_step_ = 0;
    cur_step_ = 0;
    config_id_ = 0u;
    star_ = 0u;
    status_ = 0;
    value_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_task_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_step;
        break;
      }

      // optional int32 cur_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .SProtoSpace.ERoyalTaskStatus status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ERoyalTaskStatus_IsValid(value)) {
            set_status(static_cast< ::SProtoSpace::ERoyalTaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // optional int32 value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_task_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_step = 1;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_step(), output);
  }

  // optional int32 cur_step = 2;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_step(), output);
  }

  // optional uint32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_id(), output);
  }

  // optional uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // optional .SProtoSpace.ERoyalTaskStatus status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional int32 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_task_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_step = 1;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_step(), target);
  }

  // optional int32 cur_step = 2;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_step(), target);
  }

  // optional uint32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_id(), target);
  }

  // optional uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  // optional .SProtoSpace.ERoyalTaskStatus status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional int32 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_task_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_step = 1;
    if (has_max_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_step());
    }

    // optional int32 cur_step = 2;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_step());
    }

    // optional uint32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional .SProtoSpace.ERoyalTaskStatus status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_task_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_task_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_task_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_task_data::MergeFrom(const royal_task_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_task_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_task_data::CopyFrom(const royal_task_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_task_data::IsInitialized() const {

  return true;
}

void royal_task_data::Swap(royal_task_data* other) {
  if (other != this) {
    std::swap(max_step_, other->max_step_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(config_id_, other->config_id_);
    std::swap(star_, other->star_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_task_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_task_data_descriptor_;
  metadata.reflection = royal_task_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_operation_info::kDbModeFieldNumber;
const int friend_operation_info::kUuidFieldNumber;
const int friend_operation_info::kGiveTimesFieldNumber;
const int friend_operation_info::kDrawTimesFieldNumber;
const int friend_operation_info::kAcceptIdsFieldNumber;
const int friend_operation_info::kLastSearchTimeFieldNumber;
#endif  // !_MSC_VER

friend_operation_info::friend_operation_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_operation_info::InitAsDefaultInstance() {
}

friend_operation_info::friend_operation_info(const friend_operation_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_operation_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  give_times_ = 0u;
  draw_times_ = 0u;
  last_search_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_operation_info::~friend_operation_info() {
  SharedDtor();
}

void friend_operation_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_operation_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_operation_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_operation_info_descriptor_;
}

const friend_operation_info& friend_operation_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

friend_operation_info* friend_operation_info::default_instance_ = NULL;

friend_operation_info* friend_operation_info::New() const {
  return new friend_operation_info;
}

void friend_operation_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    give_times_ = 0u;
    draw_times_ = 0u;
    last_search_time_ = 0u;
  }
  accept_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_operation_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_give_times;
        break;
      }

      // optional uint32 give_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_times_)));
          set_has_give_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_draw_times;
        break;
      }

      // optional uint32 draw_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_times_)));
          set_has_draw_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accept_ids;
        break;
      }

      // repeated uint64 accept_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_accept_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_accept_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accept_ids;
        if (input->ExpectTag(48)) goto parse_last_search_time;
        break;
      }

      // optional uint32 last_search_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_search_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_search_time_)));
          set_has_last_search_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_operation_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 give_times = 3;
  if (has_give_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->give_times(), output);
  }

  // optional uint32 draw_times = 4;
  if (has_draw_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->draw_times(), output);
  }

  // repeated uint64 accept_ids = 5;
  for (int i = 0; i < this->accept_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->accept_ids(i), output);
  }

  // optional uint32 last_search_time = 6;
  if (has_last_search_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_search_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_operation_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 give_times = 3;
  if (has_give_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->give_times(), target);
  }

  // optional uint32 draw_times = 4;
  if (has_draw_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->draw_times(), target);
  }

  // repeated uint64 accept_ids = 5;
  for (int i = 0; i < this->accept_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->accept_ids(i), target);
  }

  // optional uint32 last_search_time = 6;
  if (has_last_search_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_search_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_operation_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 give_times = 3;
    if (has_give_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_times());
    }

    // optional uint32 draw_times = 4;
    if (has_draw_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_times());
    }

    // optional uint32 last_search_time = 6;
    if (has_last_search_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_search_time());
    }

  }
  // repeated uint64 accept_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->accept_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->accept_ids(i));
    }
    total_size += 1 * this->accept_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_operation_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_operation_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_operation_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_operation_info::MergeFrom(const friend_operation_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  accept_ids_.MergeFrom(from.accept_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_give_times()) {
      set_give_times(from.give_times());
    }
    if (from.has_draw_times()) {
      set_draw_times(from.draw_times());
    }
    if (from.has_last_search_time()) {
      set_last_search_time(from.last_search_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_operation_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_operation_info::CopyFrom(const friend_operation_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_operation_info::IsInitialized() const {

  return true;
}

void friend_operation_info::Swap(friend_operation_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(give_times_, other->give_times_);
    std::swap(draw_times_, other->draw_times_);
    accept_ids_.Swap(&other->accept_ids_);
    std::swap(last_search_time_, other->last_search_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_operation_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_operation_info_descriptor_;
  metadata.reflection = friend_operation_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_friend_data::kDbModeFieldNumber;
const int unit_friend_data::kUuidFieldNumber;
const int unit_friend_data::kIntimacyValueFieldNumber;
#endif  // !_MSC_VER

unit_friend_data::unit_friend_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_friend_data::InitAsDefaultInstance() {
}

unit_friend_data::unit_friend_data(const unit_friend_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_friend_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  intimacy_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_friend_data::~unit_friend_data() {
  SharedDtor();
}

void unit_friend_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_friend_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_friend_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_friend_data_descriptor_;
}

const unit_friend_data& unit_friend_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_friend_data* unit_friend_data::default_instance_ = NULL;

unit_friend_data* unit_friend_data::New() const {
  return new unit_friend_data;
}

void unit_friend_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    intimacy_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_friend_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intimacy_value;
        break;
      }

      // optional uint32 intimacy_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intimacy_value_)));
          set_has_intimacy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_friend_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 intimacy_value = 3;
  if (has_intimacy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->intimacy_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_friend_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 intimacy_value = 3;
  if (has_intimacy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->intimacy_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_friend_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 intimacy_value = 3;
    if (has_intimacy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intimacy_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_friend_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_friend_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_friend_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_friend_data::MergeFrom(const unit_friend_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_intimacy_value()) {
      set_intimacy_value(from.intimacy_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_friend_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_friend_data::CopyFrom(const unit_friend_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_friend_data::IsInitialized() const {

  return true;
}

void unit_friend_data::Swap(unit_friend_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(intimacy_value_, other->intimacy_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_friend_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_friend_data_descriptor_;
  metadata.reflection = unit_friend_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_black_data::kDbModeFieldNumber;
const int unit_black_data::kUuidFieldNumber;
const int unit_black_data::kRoleIdsFieldNumber;
#endif  // !_MSC_VER

unit_black_data::unit_black_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_black_data::InitAsDefaultInstance() {
}

unit_black_data::unit_black_data(const unit_black_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_black_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_black_data::~unit_black_data() {
  SharedDtor();
}

void unit_black_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_black_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_black_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_black_data_descriptor_;
}

const unit_black_data& unit_black_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_black_data* unit_black_data::default_instance_ = NULL;

unit_black_data* unit_black_data::New() const {
  return new unit_black_data;
}

void unit_black_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_black_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        break;
      }

      // repeated uint64 role_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_black_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated uint64 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->role_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_black_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated uint64 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->role_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_black_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated uint64 role_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_black_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_black_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_black_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_black_data::MergeFrom(const unit_black_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_ids_.MergeFrom(from.role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_black_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_black_data::CopyFrom(const unit_black_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_black_data::IsInitialized() const {

  return true;
}

void unit_black_data::Swap(unit_black_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    role_ids_.Swap(&other->role_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_black_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_black_data_descriptor_;
  metadata.reflection = unit_black_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int give_record_info::kDbModeFieldNumber;
const int give_record_info::kUuidFieldNumber;
const int give_record_info::kFriendIdsFieldNumber;
#endif  // !_MSC_VER

give_record_info::give_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void give_record_info::InitAsDefaultInstance() {
}

give_record_info::give_record_info(const give_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void give_record_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

give_record_info::~give_record_info() {
  SharedDtor();
}

void give_record_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void give_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* give_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return give_record_info_descriptor_;
}

const give_record_info& give_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

give_record_info* give_record_info::default_instance_ = NULL;

give_record_info* give_record_info::New() const {
  return new give_record_info;
}

void give_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  friend_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool give_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_ids;
        break;
      }

      // repeated uint64 friend_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_friend_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friend_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void give_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated uint64 friend_ids = 3;
  for (int i = 0; i < this->friend_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->friend_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* give_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated uint64 friend_ids = 3;
  for (int i = 0; i < this->friend_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->friend_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int give_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated uint64 friend_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->friend_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friend_ids(i));
    }
    total_size += 1 * this->friend_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void give_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const give_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const give_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void give_record_info::MergeFrom(const give_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_ids_.MergeFrom(from.friend_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void give_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void give_record_info::CopyFrom(const give_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool give_record_info::IsInitialized() const {

  return true;
}

void give_record_info::Swap(give_record_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    friend_ids_.Swap(&other->friend_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata give_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = give_record_info_descriptor_;
  metadata.reflection = give_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_friend_data::kOperationInfoFieldNumber;
const int role_friend_data::kBlacklistFieldNumber;
const int role_friend_data::kFriendsFieldNumber;
const int role_friend_data::kGiveRecordsFieldNumber;
#endif  // !_MSC_VER

role_friend_data::role_friend_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_friend_data::InitAsDefaultInstance() {
}

role_friend_data::role_friend_data(const role_friend_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_friend_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_friend_data::~role_friend_data() {
  SharedDtor();
}

void role_friend_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_friend_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_friend_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_friend_data_descriptor_;
}

const role_friend_data& role_friend_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_friend_data* role_friend_data::default_instance_ = NULL;

role_friend_data* role_friend_data::New() const {
  return new role_friend_data;
}

void role_friend_data::Clear() {
  operation_info_.Clear();
  blacklist_.Clear();
  friends_.Clear();
  give_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_friend_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.friend_operation_info operation_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operation_info;
        if (input->ExpectTag(18)) goto parse_blacklist;
        break;
      }

      // repeated .SProtoSpace.unit_black_data blacklist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blacklist;
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }

      // repeated .SProtoSpace.unit_friend_data friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        if (input->ExpectTag(34)) goto parse_give_records;
        break;
      }

      // repeated .SProtoSpace.give_record_info give_records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_give_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_give_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_give_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_friend_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.friend_operation_info operation_info = 1;
  for (int i = 0; i < this->operation_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operation_info(i), output);
  }

  // repeated .SProtoSpace.unit_black_data blacklist = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blacklist(i), output);
  }

  // repeated .SProtoSpace.unit_friend_data friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends(i), output);
  }

  // repeated .SProtoSpace.give_record_info give_records = 4;
  for (int i = 0; i < this->give_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->give_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_friend_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.friend_operation_info operation_info = 1;
  for (int i = 0; i < this->operation_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operation_info(i), target);
  }

  // repeated .SProtoSpace.unit_black_data blacklist = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blacklist(i), target);
  }

  // repeated .SProtoSpace.unit_friend_data friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friends(i), target);
  }

  // repeated .SProtoSpace.give_record_info give_records = 4;
  for (int i = 0; i < this->give_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->give_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_friend_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.friend_operation_info operation_info = 1;
  total_size += 1 * this->operation_info_size();
  for (int i = 0; i < this->operation_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operation_info(i));
  }

  // repeated .SProtoSpace.unit_black_data blacklist = 2;
  total_size += 1 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklist(i));
  }

  // repeated .SProtoSpace.unit_friend_data friends = 3;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .SProtoSpace.give_record_info give_records = 4;
  total_size += 1 * this->give_records_size();
  for (int i = 0; i < this->give_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->give_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_friend_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_friend_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_friend_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_friend_data::MergeFrom(const role_friend_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  operation_info_.MergeFrom(from.operation_info_);
  blacklist_.MergeFrom(from.blacklist_);
  friends_.MergeFrom(from.friends_);
  give_records_.MergeFrom(from.give_records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_friend_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_friend_data::CopyFrom(const role_friend_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_friend_data::IsInitialized() const {

  return true;
}

void role_friend_data::Swap(role_friend_data* other) {
  if (other != this) {
    operation_info_.Swap(&other->operation_info_);
    blacklist_.Swap(&other->blacklist_);
    friends_.Swap(&other->friends_);
    give_records_.Swap(&other->give_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_friend_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_friend_data_descriptor_;
  metadata.reflection = role_friend_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shop_refresh_info::kUserRefreshTimesFieldNumber;
const int db_shop_refresh_info::kLastUserRefreshTimeFieldNumber;
const int db_shop_refresh_info::kLastSysRefreshTimeFieldNumber;
#endif  // !_MSC_VER

db_shop_refresh_info::db_shop_refresh_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shop_refresh_info::InitAsDefaultInstance() {
}

db_shop_refresh_info::db_shop_refresh_info(const db_shop_refresh_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shop_refresh_info::SharedCtor() {
  _cached_size_ = 0;
  user_refresh_times_ = 0;
  last_user_refresh_time_ = GOOGLE_ULONGLONG(0);
  last_sys_refresh_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shop_refresh_info::~db_shop_refresh_info() {
  SharedDtor();
}

void db_shop_refresh_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shop_refresh_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shop_refresh_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shop_refresh_info_descriptor_;
}

const db_shop_refresh_info& db_shop_refresh_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_shop_refresh_info* db_shop_refresh_info::default_instance_ = NULL;

db_shop_refresh_info* db_shop_refresh_info::New() const {
  return new db_shop_refresh_info;
}

void db_shop_refresh_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_refresh_times_ = 0;
    last_user_refresh_time_ = GOOGLE_ULONGLONG(0);
    last_sys_refresh_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shop_refresh_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_refresh_times = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_refresh_times_)));
          set_has_user_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_user_refresh_time;
        break;
      }

      // optional uint64 last_user_refresh_time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_user_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_user_refresh_time_)));
          set_has_last_user_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_sys_refresh_time;
        break;
      }

      // optional uint64 last_sys_refresh_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sys_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_sys_refresh_time_)));
          set_has_last_sys_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shop_refresh_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_refresh_times = 1 [default = 0];
  if (has_user_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_refresh_times(), output);
  }

  // optional uint64 last_user_refresh_time = 2 [default = 0];
  if (has_last_user_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_user_refresh_time(), output);
  }

  // optional uint64 last_sys_refresh_time = 3 [default = 0];
  if (has_last_sys_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_sys_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shop_refresh_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_refresh_times = 1 [default = 0];
  if (has_user_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_refresh_times(), target);
  }

  // optional uint64 last_user_refresh_time = 2 [default = 0];
  if (has_last_user_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_user_refresh_time(), target);
  }

  // optional uint64 last_sys_refresh_time = 3 [default = 0];
  if (has_last_sys_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_sys_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shop_refresh_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_refresh_times = 1 [default = 0];
    if (has_user_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_refresh_times());
    }

    // optional uint64 last_user_refresh_time = 2 [default = 0];
    if (has_last_user_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_user_refresh_time());
    }

    // optional uint64 last_sys_refresh_time = 3 [default = 0];
    if (has_last_sys_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_sys_refresh_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shop_refresh_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shop_refresh_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shop_refresh_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shop_refresh_info::MergeFrom(const db_shop_refresh_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_refresh_times()) {
      set_user_refresh_times(from.user_refresh_times());
    }
    if (from.has_last_user_refresh_time()) {
      set_last_user_refresh_time(from.last_user_refresh_time());
    }
    if (from.has_last_sys_refresh_time()) {
      set_last_sys_refresh_time(from.last_sys_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shop_refresh_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shop_refresh_info::CopyFrom(const db_shop_refresh_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shop_refresh_info::IsInitialized() const {

  return true;
}

void db_shop_refresh_info::Swap(db_shop_refresh_info* other) {
  if (other != this) {
    std::swap(user_refresh_times_, other->user_refresh_times_);
    std::swap(last_user_refresh_time_, other->last_user_refresh_time_);
    std::swap(last_sys_refresh_time_, other->last_sys_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shop_refresh_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shop_refresh_info_descriptor_;
  metadata.reflection = db_shop_refresh_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shop_item_info::kSaleConfigIdFieldNumber;
const int db_shop_item_info::kItemIdFieldNumber;
const int db_shop_item_info::kBuyCurNumFieldNumber;
#endif  // !_MSC_VER

db_shop_item_info::db_shop_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shop_item_info::InitAsDefaultInstance() {
}

db_shop_item_info::db_shop_item_info(const db_shop_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shop_item_info::SharedCtor() {
  _cached_size_ = 0;
  sale_config_id_ = 0u;
  item_id_ = 0u;
  buy_cur_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shop_item_info::~db_shop_item_info() {
  SharedDtor();
}

void db_shop_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shop_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shop_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shop_item_info_descriptor_;
}

const db_shop_item_info& db_shop_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_shop_item_info* db_shop_item_info::default_instance_ = NULL;

db_shop_item_info* db_shop_item_info::New() const {
  return new db_shop_item_info;
}

void db_shop_item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sale_config_id_ = 0u;
    item_id_ = 0u;
    buy_cur_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shop_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sale_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_cur_num;
        break;
      }

      // optional uint32 buy_cur_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cur_num_)));
          set_has_buy_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shop_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sale_config_id = 1;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sale_config_id(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional uint32 buy_cur_num = 3;
  if (has_buy_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shop_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sale_config_id = 1;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sale_config_id(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // optional uint32 buy_cur_num = 3;
  if (has_buy_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shop_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sale_config_id = 1;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sale_config_id());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 buy_cur_num = 3;
    if (has_buy_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shop_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shop_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shop_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shop_item_info::MergeFrom(const db_shop_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buy_cur_num()) {
      set_buy_cur_num(from.buy_cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shop_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shop_item_info::CopyFrom(const db_shop_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shop_item_info::IsInitialized() const {

  return true;
}

void db_shop_item_info::Swap(db_shop_item_info* other) {
  if (other != this) {
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(buy_cur_num_, other->buy_cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shop_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shop_item_info_descriptor_;
  metadata.reflection = db_shop_item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buy_record_info::kDbModeFieldNumber;
const int buy_record_info::kUuidFieldNumber;
const int buy_record_info::kSaleConfigIdFieldNumber;
const int buy_record_info::kFirstBuyTimeFieldNumber;
const int buy_record_info::kLastBuyTimeFieldNumber;
const int buy_record_info::kBuyNumFieldNumber;
#endif  // !_MSC_VER

buy_record_info::buy_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buy_record_info::InitAsDefaultInstance() {
}

buy_record_info::buy_record_info(const buy_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buy_record_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  sale_config_id_ = 0;
  first_buy_time_ = 0u;
  last_buy_time_ = 0u;
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buy_record_info::~buy_record_info() {
  SharedDtor();
}

void buy_record_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buy_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buy_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buy_record_info_descriptor_;
}

const buy_record_info& buy_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

buy_record_info* buy_record_info::default_instance_ = NULL;

buy_record_info* buy_record_info::New() const {
  return new buy_record_info;
}

void buy_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    sale_config_id_ = 0;
    first_buy_time_ = 0u;
    last_buy_time_ = 0u;
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buy_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sale_config_id;
        break;
      }

      // optional int32 sale_config_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_buy_time;
        break;
      }

      // optional uint32 first_buy_time = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_buy_time_)));
          set_has_first_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_buy_time;
        break;
      }

      // optional uint32 last_buy_time = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_buy_time_)));
          set_has_last_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buy_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 sale_config_id = 3 [default = 0];
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sale_config_id(), output);
  }

  // optional uint32 first_buy_time = 4 [default = 0];
  if (has_first_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->first_buy_time(), output);
  }

  // optional uint32 last_buy_time = 5 [default = 0];
  if (has_last_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_buy_time(), output);
  }

  // optional int32 buy_num = 6 [default = 0];
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buy_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 sale_config_id = 3 [default = 0];
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sale_config_id(), target);
  }

  // optional uint32 first_buy_time = 4 [default = 0];
  if (has_first_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->first_buy_time(), target);
  }

  // optional uint32 last_buy_time = 5 [default = 0];
  if (has_last_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_buy_time(), target);
  }

  // optional int32 buy_num = 6 [default = 0];
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buy_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 sale_config_id = 3 [default = 0];
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale_config_id());
    }

    // optional uint32 first_buy_time = 4 [default = 0];
    if (has_first_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_buy_time());
    }

    // optional uint32 last_buy_time = 5 [default = 0];
    if (has_last_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_buy_time());
    }

    // optional int32 buy_num = 6 [default = 0];
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buy_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buy_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buy_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buy_record_info::MergeFrom(const buy_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_first_buy_time()) {
      set_first_buy_time(from.first_buy_time());
    }
    if (from.has_last_buy_time()) {
      set_last_buy_time(from.last_buy_time());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buy_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buy_record_info::CopyFrom(const buy_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buy_record_info::IsInitialized() const {

  return true;
}

void buy_record_info::Swap(buy_record_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(first_buy_time_, other->first_buy_time_);
    std::swap(last_buy_time_, other->last_buy_time_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buy_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buy_record_info_descriptor_;
  metadata.reflection = buy_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_shop_info::kDbModeFieldNumber;
const int unit_shop_info::kUuidFieldNumber;
const int unit_shop_info::kConfigIdFieldNumber;
const int unit_shop_info::kRefreshInfoFieldNumber;
const int unit_shop_info::kItemInfosFieldNumber;
#endif  // !_MSC_VER

unit_shop_info::unit_shop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_shop_info::InitAsDefaultInstance() {
  refresh_info_ = const_cast< ::SProtoSpace::db_shop_refresh_info*>(&::SProtoSpace::db_shop_refresh_info::default_instance());
}

unit_shop_info::unit_shop_info(const unit_shop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_shop_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0;
  refresh_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_shop_info::~unit_shop_info() {
  SharedDtor();
}

void unit_shop_info::SharedDtor() {
  if (this != default_instance_) {
    delete refresh_info_;
  }
}

void unit_shop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_shop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_shop_info_descriptor_;
}

const unit_shop_info& unit_shop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_shop_info* unit_shop_info::default_instance_ = NULL;

unit_shop_info* unit_shop_info::New() const {
  return new unit_shop_info;
}

void unit_shop_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0;
    if (has_refresh_info()) {
      if (refresh_info_ != NULL) refresh_info_->::SProtoSpace::db_shop_refresh_info::Clear();
    }
  }
  item_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_shop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_refresh_info;
        break;
      }

      // optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refresh_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refresh_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_infos;
        break;
      }

      // repeated .SProtoSpace.shop_item_info item_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_shop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  // optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
  if (has_refresh_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refresh_info(), output);
  }

  // repeated .SProtoSpace.shop_item_info item_infos = 5;
  for (int i = 0; i < this->item_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_shop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  // optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
  if (has_refresh_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refresh_info(), target);
  }

  // repeated .SProtoSpace.shop_item_info item_infos = 5;
  for (int i = 0; i < this->item_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_shop_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
    if (has_refresh_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refresh_info());
    }

  }
  // repeated .SProtoSpace.shop_item_info item_infos = 5;
  total_size += 1 * this->item_infos_size();
  for (int i = 0; i < this->item_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_shop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_shop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_shop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_shop_info::MergeFrom(const unit_shop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_infos_.MergeFrom(from.item_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_refresh_info()) {
      mutable_refresh_info()->::SProtoSpace::db_shop_refresh_info::MergeFrom(from.refresh_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_shop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_shop_info::CopyFrom(const unit_shop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_shop_info::IsInitialized() const {

  return true;
}

void unit_shop_info::Swap(unit_shop_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(config_id_, other->config_id_);
    std::swap(refresh_info_, other->refresh_info_);
    item_infos_.Swap(&other->item_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_shop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_shop_info_descriptor_;
  metadata.reflection = unit_shop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_shop_data::kShopInfosFieldNumber;
const int role_shop_data::kRecordInfosFieldNumber;
#endif  // !_MSC_VER

role_shop_data::role_shop_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_shop_data::InitAsDefaultInstance() {
}

role_shop_data::role_shop_data(const role_shop_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_shop_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_shop_data::~role_shop_data() {
  SharedDtor();
}

void role_shop_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_shop_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_shop_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_shop_data_descriptor_;
}

const role_shop_data& role_shop_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_shop_data* role_shop_data::default_instance_ = NULL;

role_shop_data* role_shop_data::New() const {
  return new role_shop_data;
}

void role_shop_data::Clear() {
  shop_infos_.Clear();
  record_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_shop_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_shop_info shop_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shop_infos;
        if (input->ExpectTag(18)) goto parse_record_infos;
        break;
      }

      // repeated .SProtoSpace.buy_record_info record_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_shop_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_shop_info shop_infos = 1;
  for (int i = 0; i < this->shop_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop_infos(i), output);
  }

  // repeated .SProtoSpace.buy_record_info record_infos = 2;
  for (int i = 0; i < this->record_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_shop_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_shop_info shop_infos = 1;
  for (int i = 0; i < this->shop_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop_infos(i), target);
  }

  // repeated .SProtoSpace.buy_record_info record_infos = 2;
  for (int i = 0; i < this->record_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_shop_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_shop_info shop_infos = 1;
  total_size += 1 * this->shop_infos_size();
  for (int i = 0; i < this->shop_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_infos(i));
  }

  // repeated .SProtoSpace.buy_record_info record_infos = 2;
  total_size += 1 * this->record_infos_size();
  for (int i = 0; i < this->record_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_shop_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_shop_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_shop_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_shop_data::MergeFrom(const role_shop_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_infos_.MergeFrom(from.shop_infos_);
  record_infos_.MergeFrom(from.record_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_shop_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_shop_data::CopyFrom(const role_shop_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_shop_data::IsInitialized() const {

  return true;
}

void role_shop_data::Swap(role_shop_data* other) {
  if (other != this) {
    shop_infos_.Swap(&other->shop_infos_);
    record_infos_.Swap(&other->record_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_shop_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_shop_data_descriptor_;
  metadata.reflection = role_shop_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int harem_compete_info::kDbModeFieldNumber;
const int harem_compete_info::kUuidFieldNumber;
const int harem_compete_info::kQinganTimesFieldNumber;
const int harem_compete_info::kSlapTimesFieldNumber;
const int harem_compete_info::kEndTimeFieldNumber;
const int harem_compete_info::kProgressFieldNumber;
const int harem_compete_info::kRedPointTimeFieldNumber;
const int harem_compete_info::kInfosFieldNumber;
#endif  // !_MSC_VER

harem_compete_info::harem_compete_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void harem_compete_info::InitAsDefaultInstance() {
}

harem_compete_info::harem_compete_info(const harem_compete_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void harem_compete_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  qingan_times_ = 0u;
  slap_times_ = 0u;
  end_time_ = GOOGLE_ULONGLONG(0);
  progress_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

harem_compete_info::~harem_compete_info() {
  SharedDtor();
}

void harem_compete_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void harem_compete_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* harem_compete_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return harem_compete_info_descriptor_;
}

const harem_compete_info& harem_compete_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

harem_compete_info* harem_compete_info::default_instance_ = NULL;

harem_compete_info* harem_compete_info::New() const {
  return new harem_compete_info;
}

void harem_compete_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    qingan_times_ = 0u;
    slap_times_ = 0u;
    end_time_ = GOOGLE_ULONGLONG(0);
    progress_ = 1;
  }
  red_point_time_.Clear();
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool harem_compete_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_qingan_times;
        break;
      }

      // optional uint32 qingan_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qingan_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qingan_times_)));
          set_has_qingan_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slap_times;
        break;
      }

      // optional uint32 slap_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_times_)));
          set_has_slap_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_point_time;
        break;
      }

      // repeated uint64 red_point_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_point_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_red_point_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_red_point_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_point_time;
        if (input->ExpectTag(66)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.tribute_info infos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void harem_compete_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 qingan_times = 3;
  if (has_qingan_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qingan_times(), output);
  }

  // optional uint32 slap_times = 4;
  if (has_slap_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slap_times(), output);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_time(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 6;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->progress(), output);
  }

  // repeated uint64 red_point_time = 7;
  for (int i = 0; i < this->red_point_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->red_point_time(i), output);
  }

  // repeated .SProtoSpace.tribute_info infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* harem_compete_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 qingan_times = 3;
  if (has_qingan_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qingan_times(), target);
  }

  // optional uint32 slap_times = 4;
  if (has_slap_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slap_times(), target);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_time(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 6;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->progress(), target);
  }

  // repeated uint64 red_point_time = 7;
  for (int i = 0; i < this->red_point_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->red_point_time(i), target);
  }

  // repeated .SProtoSpace.tribute_info infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int harem_compete_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 qingan_times = 3;
    if (has_qingan_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qingan_times());
    }

    // optional uint32 slap_times = 4;
    if (has_slap_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_times());
    }

    // optional uint64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 6;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

  }
  // repeated uint64 red_point_time = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->red_point_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->red_point_time(i));
    }
    total_size += 1 * this->red_point_time_size() + data_size;
  }

  // repeated .SProtoSpace.tribute_info infos = 8;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void harem_compete_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const harem_compete_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const harem_compete_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void harem_compete_info::MergeFrom(const harem_compete_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_point_time_.MergeFrom(from.red_point_time_);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_qingan_times()) {
      set_qingan_times(from.qingan_times());
    }
    if (from.has_slap_times()) {
      set_slap_times(from.slap_times());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void harem_compete_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void harem_compete_info::CopyFrom(const harem_compete_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool harem_compete_info::IsInitialized() const {

  return true;
}

void harem_compete_info::Swap(harem_compete_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(qingan_times_, other->qingan_times_);
    std::swap(slap_times_, other->slap_times_);
    std::swap(end_time_, other->end_time_);
    std::swap(progress_, other->progress_);
    red_point_time_.Swap(&other->red_point_time_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata harem_compete_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = harem_compete_info_descriptor_;
  metadata.reflection = harem_compete_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_harem_data::kInfoFieldNumber;
#endif  // !_MSC_VER

role_harem_data::role_harem_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_harem_data::InitAsDefaultInstance() {
}

role_harem_data::role_harem_data(const role_harem_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_harem_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_harem_data::~role_harem_data() {
  SharedDtor();
}

void role_harem_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_harem_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_harem_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_harem_data_descriptor_;
}

const role_harem_data& role_harem_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_harem_data* role_harem_data::default_instance_ = NULL;

role_harem_data* role_harem_data::New() const {
  return new role_harem_data;
}

void role_harem_data::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_harem_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.harem_compete_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_harem_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.harem_compete_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_harem_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.harem_compete_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_harem_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.harem_compete_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_harem_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_harem_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_harem_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_harem_data::MergeFrom(const role_harem_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_harem_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_harem_data::CopyFrom(const role_harem_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_harem_data::IsInitialized() const {

  return true;
}

void role_harem_data::Swap(role_harem_data* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_harem_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_harem_data_descriptor_;
  metadata.reflection = role_harem_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int growing_flower_info::kDbModeFieldNumber;
const int growing_flower_info::kUuidFieldNumber;
const int growing_flower_info::kTemplateIdFieldNumber;
const int growing_flower_info::kCurStatusFieldNumber;
#endif  // !_MSC_VER

growing_flower_info::growing_flower_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void growing_flower_info::InitAsDefaultInstance() {
}

growing_flower_info::growing_flower_info(const growing_flower_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void growing_flower_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  cur_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

growing_flower_info::~growing_flower_info() {
  SharedDtor();
}

void growing_flower_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void growing_flower_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* growing_flower_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return growing_flower_info_descriptor_;
}

const growing_flower_info& growing_flower_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

growing_flower_info* growing_flower_info::default_instance_ = NULL;

growing_flower_info* growing_flower_info::New() const {
  return new growing_flower_info;
}

void growing_flower_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    cur_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool growing_flower_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_status;
        break;
      }

      // optional int32 cur_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_status_)));
          set_has_cur_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void growing_flower_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // optional int32 cur_status = 4;
  if (has_cur_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* growing_flower_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // optional int32 cur_status = 4;
  if (has_cur_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int growing_flower_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 cur_status = 4;
    if (has_cur_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void growing_flower_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const growing_flower_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const growing_flower_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void growing_flower_info::MergeFrom(const growing_flower_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_cur_status()) {
      set_cur_status(from.cur_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void growing_flower_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void growing_flower_info::CopyFrom(const growing_flower_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool growing_flower_info::IsInitialized() const {

  return true;
}

void growing_flower_info::Swap(growing_flower_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(cur_status_, other->cur_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata growing_flower_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = growing_flower_info_descriptor_;
  metadata.reflection = growing_flower_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_flower_info::kDbModeFieldNumber;
const int unit_flower_info::kUuidFieldNumber;
const int unit_flower_info::kTemplateIdFieldNumber;
const int unit_flower_info::kCountNumFieldNumber;
#endif  // !_MSC_VER

unit_flower_info::unit_flower_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_flower_info::InitAsDefaultInstance() {
}

unit_flower_info::unit_flower_info(const unit_flower_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_flower_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0;
  count_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_flower_info::~unit_flower_info() {
  SharedDtor();
}

void unit_flower_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_flower_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_flower_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_flower_info_descriptor_;
}

const unit_flower_info& unit_flower_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_flower_info* unit_flower_info::default_instance_ = NULL;

unit_flower_info* unit_flower_info::New() const {
  return new unit_flower_info;
}

void unit_flower_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0;
    count_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_flower_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_num;
        break;
      }

      // optional int32 count_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_num_)));
          set_has_count_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_flower_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // optional int32 count_num = 4;
  if (has_count_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_flower_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // optional int32 count_num = 4;
  if (has_count_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_flower_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional int32 count_num = 4;
    if (has_count_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_flower_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_flower_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_flower_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_flower_info::MergeFrom(const unit_flower_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_count_num()) {
      set_count_num(from.count_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_flower_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_flower_info::CopyFrom(const unit_flower_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_flower_info::IsInitialized() const {

  return true;
}

void unit_flower_info::Swap(unit_flower_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(template_id_, other->template_id_);
    std::swap(count_num_, other->count_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_flower_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_flower_info_descriptor_;
  metadata.reflection = unit_flower_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_flower_data::kInfoFieldNumber;
const int role_flower_data::kGrowInfoFieldNumber;
#endif  // !_MSC_VER

role_flower_data::role_flower_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_flower_data::InitAsDefaultInstance() {
}

role_flower_data::role_flower_data(const role_flower_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_flower_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_flower_data::~role_flower_data() {
  SharedDtor();
}

void role_flower_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_flower_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_flower_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_flower_data_descriptor_;
}

const role_flower_data& role_flower_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_flower_data* role_flower_data::default_instance_ = NULL;

role_flower_data* role_flower_data::New() const {
  return new role_flower_data;
}

void role_flower_data::Clear() {
  info_.Clear();
  grow_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_flower_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.unit_flower_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_grow_info;
        break;
      }

      // repeated .SProtoSpace.growing_flower_info grow_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grow_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grow_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grow_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_flower_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.unit_flower_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // repeated .SProtoSpace.growing_flower_info grow_info = 2;
  for (int i = 0; i < this->grow_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grow_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_flower_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.unit_flower_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // repeated .SProtoSpace.growing_flower_info grow_info = 2;
  for (int i = 0; i < this->grow_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grow_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_flower_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.unit_flower_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .SProtoSpace.growing_flower_info grow_info = 2;
  total_size += 1 * this->grow_info_size();
  for (int i = 0; i < this->grow_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grow_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_flower_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_flower_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_flower_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_flower_data::MergeFrom(const role_flower_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  grow_info_.MergeFrom(from.grow_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_flower_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_flower_data::CopyFrom(const role_flower_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_flower_data::IsInitialized() const {

  return true;
}

void role_flower_data::Swap(role_flower_data* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    grow_info_.Swap(&other->grow_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_flower_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_flower_data_descriptor_;
  metadata.reflection = role_flower_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unit_plot_screen_data::kDbModeFieldNumber;
const int unit_plot_screen_data::kUuidFieldNumber;
const int unit_plot_screen_data::kChapterIdFieldNumber;
const int unit_plot_screen_data::kScreenIdFieldNumber;
const int unit_plot_screen_data::kBranchIdsFieldNumber;
const int unit_plot_screen_data::kSectionIdsFieldNumber;
const int unit_plot_screen_data::kGetEndIdsFieldNumber;
const int unit_plot_screen_data::kActionIdsFieldNumber;
const int unit_plot_screen_data::kChapterIsEndFieldNumber;
#endif  // !_MSC_VER

unit_plot_screen_data::unit_plot_screen_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_plot_screen_data::InitAsDefaultInstance() {
}

unit_plot_screen_data::unit_plot_screen_data(const unit_plot_screen_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_plot_screen_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  chapter_id_ = 0u;
  screen_id_ = 0u;
  chapter_is_end_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_plot_screen_data::~unit_plot_screen_data() {
  SharedDtor();
}

void unit_plot_screen_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_plot_screen_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_plot_screen_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_plot_screen_data_descriptor_;
}

const unit_plot_screen_data& unit_plot_screen_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

unit_plot_screen_data* unit_plot_screen_data::default_instance_ = NULL;

unit_plot_screen_data* unit_plot_screen_data::New() const {
  return new unit_plot_screen_data;
}

void unit_plot_screen_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    chapter_id_ = 0u;
    screen_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chapter_is_end_ = false;
  }
  branch_ids_.Clear();
  section_ids_.Clear();
  get_end_ids_.Clear();
  action_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_plot_screen_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_branch_ids;
        break;
      }

      // repeated uint32 branch_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_branch_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_branch_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_branch_ids;
        if (input->ExpectTag(48)) goto parse_section_ids;
        break;
      }

      // repeated int32 section_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_section_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_section_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_section_ids;
        if (input->ExpectTag(56)) goto parse_get_end_ids;
        break;
      }

      // repeated uint32 get_end_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_end_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_get_end_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_get_end_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_get_end_ids;
        if (input->ExpectTag(64)) goto parse_action_ids;
        break;
      }

      // repeated uint32 action_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_action_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_action_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_ids;
        if (input->ExpectTag(72)) goto parse_chapter_is_end;
        break;
      }

      // optional bool chapter_is_end = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_is_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chapter_is_end_)));
          set_has_chapter_is_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_plot_screen_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 chapter_id = 3;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 4;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->screen_id(), output);
  }

  // repeated uint32 branch_ids = 5;
  for (int i = 0; i < this->branch_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->branch_ids(i), output);
  }

  // repeated int32 section_ids = 6;
  for (int i = 0; i < this->section_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->section_ids(i), output);
  }

  // repeated uint32 get_end_ids = 7;
  for (int i = 0; i < this->get_end_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->get_end_ids(i), output);
  }

  // repeated uint32 action_ids = 8;
  for (int i = 0; i < this->action_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->action_ids(i), output);
  }

  // optional bool chapter_is_end = 9;
  if (has_chapter_is_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->chapter_is_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_plot_screen_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 chapter_id = 3;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 4;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->screen_id(), target);
  }

  // repeated uint32 branch_ids = 5;
  for (int i = 0; i < this->branch_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->branch_ids(i), target);
  }

  // repeated int32 section_ids = 6;
  for (int i = 0; i < this->section_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->section_ids(i), target);
  }

  // repeated uint32 get_end_ids = 7;
  for (int i = 0; i < this->get_end_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->get_end_ids(i), target);
  }

  // repeated uint32 action_ids = 8;
  for (int i = 0; i < this->action_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->action_ids(i), target);
  }

  // optional bool chapter_is_end = 9;
  if (has_chapter_is_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->chapter_is_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_plot_screen_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 chapter_id = 3;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 4;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool chapter_is_end = 9;
    if (has_chapter_is_end()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 branch_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->branch_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->branch_ids(i));
    }
    total_size += 1 * this->branch_ids_size() + data_size;
  }

  // repeated int32 section_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->section_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->section_ids(i));
    }
    total_size += 1 * this->section_ids_size() + data_size;
  }

  // repeated uint32 get_end_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_end_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->get_end_ids(i));
    }
    total_size += 1 * this->get_end_ids_size() + data_size;
  }

  // repeated uint32 action_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->action_ids(i));
    }
    total_size += 1 * this->action_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_plot_screen_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_plot_screen_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_plot_screen_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_plot_screen_data::MergeFrom(const unit_plot_screen_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  branch_ids_.MergeFrom(from.branch_ids_);
  section_ids_.MergeFrom(from.section_ids_);
  get_end_ids_.MergeFrom(from.get_end_ids_);
  action_ids_.MergeFrom(from.action_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chapter_is_end()) {
      set_chapter_is_end(from.chapter_is_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_plot_screen_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_plot_screen_data::CopyFrom(const unit_plot_screen_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_plot_screen_data::IsInitialized() const {

  return true;
}

void unit_plot_screen_data::Swap(unit_plot_screen_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    branch_ids_.Swap(&other->branch_ids_);
    section_ids_.Swap(&other->section_ids_);
    get_end_ids_.Swap(&other->get_end_ids_);
    action_ids_.Swap(&other->action_ids_);
    std::swap(chapter_is_end_, other->chapter_is_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_plot_screen_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_plot_screen_data_descriptor_;
  metadata.reflection = unit_plot_screen_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_apply_info::kDbModeFieldNumber;
const int officer_apply_info::kUuidFieldNumber;
const int officer_apply_info::kCurGradeFieldNumber;
const int officer_apply_info::kApplyTimeFieldNumber;
const int officer_apply_info::kCheckTimeFieldNumber;
const int officer_apply_info::kRetFieldNumber;
const int officer_apply_info::kNextGradeFieldNumber;
#endif  // !_MSC_VER

officer_apply_info::officer_apply_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_apply_info::InitAsDefaultInstance() {
}

officer_apply_info::officer_apply_info(const officer_apply_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_apply_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  cur_grade_ = 0u;
  apply_time_ = GOOGLE_ULONGLONG(0);
  check_time_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  next_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_apply_info::~officer_apply_info() {
  SharedDtor();
}

void officer_apply_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_apply_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_apply_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_apply_info_descriptor_;
}

const officer_apply_info& officer_apply_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

officer_apply_info* officer_apply_info::default_instance_ = NULL;

officer_apply_info* officer_apply_info::New() const {
  return new officer_apply_info;
}

void officer_apply_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    cur_grade_ = 0u;
    apply_time_ = GOOGLE_ULONGLONG(0);
    check_time_ = GOOGLE_ULONGLONG(0);
    ret_ = false;
    next_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_apply_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_grade;
        break;
      }

      // optional uint32 cur_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_check_time;
        break;
      }

      // optional uint64 check_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &check_time_)));
          set_has_check_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional bool ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_next_grade;
        break;
      }

      // optional uint32 next_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_grade_)));
          set_has_next_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_apply_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_grade(), output);
  }

  // optional uint64 apply_time = 4;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->apply_time(), output);
  }

  // optional uint64 check_time = 5;
  if (has_check_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->check_time(), output);
  }

  // optional bool ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ret(), output);
  }

  // optional uint32 next_grade = 7;
  if (has_next_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->next_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_apply_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_grade(), target);
  }

  // optional uint64 apply_time = 4;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->apply_time(), target);
  }

  // optional uint64 check_time = 5;
  if (has_check_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->check_time(), target);
  }

  // optional bool ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ret(), target);
  }

  // optional uint32 next_grade = 7;
  if (has_next_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->next_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_apply_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 cur_grade = 3;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint64 apply_time = 4;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional uint64 check_time = 5;
    if (has_check_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->check_time());
    }

    // optional bool ret = 6;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint32 next_grade = 7;
    if (has_next_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_apply_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_apply_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_apply_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_apply_info::MergeFrom(const officer_apply_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_check_time()) {
      set_check_time(from.check_time());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_next_grade()) {
      set_next_grade(from.next_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_apply_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_apply_info::CopyFrom(const officer_apply_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_apply_info::IsInitialized() const {

  return true;
}

void officer_apply_info::Swap(officer_apply_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(check_time_, other->check_time_);
    std::swap(ret_, other->ret_);
    std::swap(next_grade_, other->next_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_apply_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_apply_info_descriptor_;
  metadata.reflection = officer_apply_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_base_info::kDbModeFieldNumber;
const int officer_base_info::kUuidFieldNumber;
const int officer_base_info::kCurGradeFieldNumber;
const int officer_base_info::kMaxGradeFieldNumber;
const int officer_base_info::kApplyGradeFieldNumber;
const int officer_base_info::kApplyTimeFieldNumber;
const int officer_base_info::kIsDrawFieldNumber;
const int officer_base_info::kLastDrawTimeFieldNumber;
const int officer_base_info::kDailyOfficalChalNumFieldNumber;
#endif  // !_MSC_VER

officer_base_info::officer_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_base_info::InitAsDefaultInstance() {
}

officer_base_info::officer_base_info(const officer_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_base_info::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  cur_grade_ = 0u;
  max_grade_ = 0u;
  apply_grade_ = 0u;
  apply_time_ = GOOGLE_ULONGLONG(0);
  is_draw_ = false;
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  daily_offical_chal_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_base_info::~officer_base_info() {
  SharedDtor();
}

void officer_base_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_base_info_descriptor_;
}

const officer_base_info& officer_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

officer_base_info* officer_base_info::default_instance_ = NULL;

officer_base_info* officer_base_info::New() const {
  return new officer_base_info;
}

void officer_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    cur_grade_ = 0u;
    max_grade_ = 0u;
    apply_grade_ = 0u;
    apply_time_ = GOOGLE_ULONGLONG(0);
    is_draw_ = false;
    last_draw_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    daily_offical_chal_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_grade;
        break;
      }

      // optional uint32 cur_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_apply_grade;
        break;
      }

      // optional uint32 apply_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_draw;
        break;
      }

      // optional bool is_draw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_draw_)));
          set_has_is_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_draw_time;
        break;
      }

      // optional uint64 last_draw_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_draw_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_draw_time_)));
          set_has_last_draw_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_daily_offical_chal_num;
        break;
      }

      // optional int32 daily_offical_chal_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_offical_chal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_offical_chal_num_)));
          set_has_daily_offical_chal_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_grade(), output);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_grade(), output);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->apply_grade(), output);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->apply_time(), output);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_draw(), output);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_draw_time(), output);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->daily_offical_chal_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_grade(), target);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_grade(), target);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->apply_grade(), target);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->apply_time(), target);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_draw(), target);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_draw_time(), target);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->daily_offical_chal_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 cur_grade = 3;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint32 max_grade = 4;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
    }

    // optional uint32 apply_grade = 5;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_grade());
    }

    // optional uint64 apply_time = 6;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional bool is_draw = 7;
    if (has_is_draw()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_draw_time = 8;
    if (has_last_draw_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_draw_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 daily_offical_chal_num = 9;
    if (has_daily_offical_chal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_offical_chal_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_base_info::MergeFrom(const officer_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_is_draw()) {
      set_is_draw(from.is_draw());
    }
    if (from.has_last_draw_time()) {
      set_last_draw_time(from.last_draw_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daily_offical_chal_num()) {
      set_daily_offical_chal_num(from.daily_offical_chal_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_base_info::CopyFrom(const officer_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_base_info::IsInitialized() const {

  return true;
}

void officer_base_info::Swap(officer_base_info* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(apply_grade_, other->apply_grade_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(is_draw_, other->is_draw_);
    std::swap(last_draw_time_, other->last_draw_time_);
    std::swap(daily_offical_chal_num_, other->daily_offical_chal_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_base_info_descriptor_;
  metadata.reflection = officer_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_officer_data::kApplysFieldNumber;
const int role_officer_data::kInfosFieldNumber;
#endif  // !_MSC_VER

role_officer_data::role_officer_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_officer_data::InitAsDefaultInstance() {
}

role_officer_data::role_officer_data(const role_officer_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_officer_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_officer_data::~role_officer_data() {
  SharedDtor();
}

void role_officer_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_officer_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_officer_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_officer_data_descriptor_;
}

const role_officer_data& role_officer_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_officer_data* role_officer_data::default_instance_ = NULL;

role_officer_data* role_officer_data::New() const {
  return new role_officer_data;
}

void role_officer_data::Clear() {
  applys_.Clear();
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_officer_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.officer_apply_info applys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applys;
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.officer_base_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_officer_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.officer_apply_info applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applys(i), output);
  }

  // repeated .SProtoSpace.officer_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_officer_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.officer_apply_info applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applys(i), target);
  }

  // repeated .SProtoSpace.officer_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_officer_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.officer_apply_info applys = 1;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  // repeated .SProtoSpace.officer_base_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_officer_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_officer_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_officer_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_officer_data::MergeFrom(const role_officer_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_officer_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_officer_data::CopyFrom(const role_officer_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_officer_data::IsInitialized() const {

  return true;
}

void role_officer_data::Swap(role_officer_data* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_officer_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_officer_data_descriptor_;
  metadata.reflection = role_officer_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_battle_report_data::kRoleIdFieldNumber;
const int offical_battle_report_data::kWinFieldNumber;
const int offical_battle_report_data::kAttackerIdFieldNumber;
const int offical_battle_report_data::kAttackerOldRankingIdFieldNumber;
const int offical_battle_report_data::kAttackerNewRankingIdFieldNumber;
const int offical_battle_report_data::kMyOldRankingIdFieldNumber;
const int offical_battle_report_data::kMyNewRankingIdFieldNumber;
const int offical_battle_report_data::kBattleTimeFieldNumber;
const int offical_battle_report_data::kBattleIdFieldNumber;
const int offical_battle_report_data::kGradeFieldNumber;
const int offical_battle_report_data::kHerosFieldNumber;
#endif  // !_MSC_VER

offical_battle_report_data::offical_battle_report_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_battle_report_data::InitAsDefaultInstance() {
}

offical_battle_report_data::offical_battle_report_data(const offical_battle_report_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_battle_report_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  win_ = false;
  attacker_id_ = GOOGLE_ULONGLONG(0);
  attacker_old_ranking_id_ = 0;
  attacker_new_ranking_id_ = 0;
  my_old_ranking_id_ = 0;
  my_new_ranking_id_ = 0;
  battle_time_ = 0;
  battle_id_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_battle_report_data::~offical_battle_report_data() {
  SharedDtor();
}

void offical_battle_report_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_battle_report_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_battle_report_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_battle_report_data_descriptor_;
}

const offical_battle_report_data& offical_battle_report_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

offical_battle_report_data* offical_battle_report_data::default_instance_ = NULL;

offical_battle_report_data* offical_battle_report_data::New() const {
  return new offical_battle_report_data;
}

void offical_battle_report_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    win_ = false;
    attacker_id_ = GOOGLE_ULONGLONG(0);
    attacker_old_ranking_id_ = 0;
    attacker_new_ranking_id_ = 0;
    my_old_ranking_id_ = 0;
    my_new_ranking_id_ = 0;
    battle_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battle_id_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_battle_report_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attacker_id;
        break;
      }

      // optional uint64 attacker_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attacker_id_)));
          set_has_attacker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attacker_old_ranking_id;
        break;
      }

      // optional int32 attacker_old_ranking_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_old_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_old_ranking_id_)));
          set_has_attacker_old_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attacker_new_ranking_id;
        break;
      }

      // optional int32 attacker_new_ranking_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_new_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_new_ranking_id_)));
          set_has_attacker_new_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_my_old_ranking_id;
        break;
      }

      // optional int32 my_old_ranking_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_old_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_old_ranking_id_)));
          set_has_my_old_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_my_new_ranking_id;
        break;
      }

      // optional int32 my_new_ranking_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_new_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_new_ranking_id_)));
          set_has_my_new_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_time;
        break;
      }

      // optional int32 battle_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battle_id;
        break;
      }

      // optional uint64 battle_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_grade;
        break;
      }

      // optional int32 grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.hero_base_info heros = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_battle_report_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  // optional uint64 attacker_id = 3;
  if (has_attacker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->attacker_id(), output);
  }

  // optional int32 attacker_old_ranking_id = 4;
  if (has_attacker_old_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attacker_old_ranking_id(), output);
  }

  // optional int32 attacker_new_ranking_id = 5;
  if (has_attacker_new_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attacker_new_ranking_id(), output);
  }

  // optional int32 my_old_ranking_id = 6;
  if (has_my_old_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->my_old_ranking_id(), output);
  }

  // optional int32 my_new_ranking_id = 7;
  if (has_my_new_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->my_new_ranking_id(), output);
  }

  // optional int32 battle_time = 8;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battle_time(), output);
  }

  // optional uint64 battle_id = 9;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->battle_id(), output);
  }

  // optional int32 grade = 10;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grade(), output);
  }

  // repeated .SProtoSpace.hero_base_info heros = 11;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_battle_report_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  // optional uint64 attacker_id = 3;
  if (has_attacker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->attacker_id(), target);
  }

  // optional int32 attacker_old_ranking_id = 4;
  if (has_attacker_old_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attacker_old_ranking_id(), target);
  }

  // optional int32 attacker_new_ranking_id = 5;
  if (has_attacker_new_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attacker_new_ranking_id(), target);
  }

  // optional int32 my_old_ranking_id = 6;
  if (has_my_old_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->my_old_ranking_id(), target);
  }

  // optional int32 my_new_ranking_id = 7;
  if (has_my_new_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->my_new_ranking_id(), target);
  }

  // optional int32 battle_time = 8;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battle_time(), target);
  }

  // optional uint64 battle_id = 9;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->battle_id(), target);
  }

  // optional int32 grade = 10;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grade(), target);
  }

  // repeated .SProtoSpace.hero_base_info heros = 11;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_battle_report_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional uint64 attacker_id = 3;
    if (has_attacker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attacker_id());
    }

    // optional int32 attacker_old_ranking_id = 4;
    if (has_attacker_old_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_old_ranking_id());
    }

    // optional int32 attacker_new_ranking_id = 5;
    if (has_attacker_new_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_new_ranking_id());
    }

    // optional int32 my_old_ranking_id = 6;
    if (has_my_old_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_old_ranking_id());
    }

    // optional int32 my_new_ranking_id = 7;
    if (has_my_new_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_new_ranking_id());
    }

    // optional int32 battle_time = 8;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 battle_id = 9;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_id());
    }

    // optional int32 grade = 10;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.hero_base_info heros = 11;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_battle_report_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_battle_report_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_battle_report_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_battle_report_data::MergeFrom(const offical_battle_report_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_attacker_id()) {
      set_attacker_id(from.attacker_id());
    }
    if (from.has_attacker_old_ranking_id()) {
      set_attacker_old_ranking_id(from.attacker_old_ranking_id());
    }
    if (from.has_attacker_new_ranking_id()) {
      set_attacker_new_ranking_id(from.attacker_new_ranking_id());
    }
    if (from.has_my_old_ranking_id()) {
      set_my_old_ranking_id(from.my_old_ranking_id());
    }
    if (from.has_my_new_ranking_id()) {
      set_my_new_ranking_id(from.my_new_ranking_id());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_battle_report_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_battle_report_data::CopyFrom(const offical_battle_report_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_battle_report_data::IsInitialized() const {

  return true;
}

void offical_battle_report_data::Swap(offical_battle_report_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(win_, other->win_);
    std::swap(attacker_id_, other->attacker_id_);
    std::swap(attacker_old_ranking_id_, other->attacker_old_ranking_id_);
    std::swap(attacker_new_ranking_id_, other->attacker_new_ranking_id_);
    std::swap(my_old_ranking_id_, other->my_old_ranking_id_);
    std::swap(my_new_ranking_id_, other->my_new_ranking_id_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(grade_, other->grade_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_battle_report_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_battle_report_data_descriptor_;
  metadata.reflection = offical_battle_report_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_battle_report::kRoleIdFieldNumber;
const int offical_battle_report::kReportsFieldNumber;
#endif  // !_MSC_VER

offical_battle_report::offical_battle_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_battle_report::InitAsDefaultInstance() {
}

offical_battle_report::offical_battle_report(const offical_battle_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_battle_report::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_battle_report::~offical_battle_report() {
  SharedDtor();
}

void offical_battle_report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_battle_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_battle_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_battle_report_descriptor_;
}

const offical_battle_report& offical_battle_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

offical_battle_report* offical_battle_report::default_instance_ = NULL;

offical_battle_report* offical_battle_report::New() const {
  return new offical_battle_report;
}

void offical_battle_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_battle_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reports;
        break;
      }

      // repeated .SProtoSpace.offical_battle_report_data reports = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_battle_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // repeated .SProtoSpace.offical_battle_report_data reports = 2;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_battle_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // repeated .SProtoSpace.offical_battle_report_data reports = 2;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_battle_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.offical_battle_report_data reports = 2;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_battle_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_battle_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_battle_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_battle_report::MergeFrom(const offical_battle_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_battle_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_battle_report::CopyFrom(const offical_battle_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_battle_report::IsInitialized() const {

  return true;
}

void offical_battle_report::Swap(offical_battle_report* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    reports_.Swap(&other->reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_battle_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_battle_report_descriptor_;
  metadata.reflection = offical_battle_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_offical_apply_battle_data::kBattleDataFieldNumber;
const int db_offical_apply_battle_data::kMyRecordsFieldNumber;
#endif  // !_MSC_VER

db_offical_apply_battle_data::db_offical_apply_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_offical_apply_battle_data::InitAsDefaultInstance() {
  battle_data_ = const_cast< ::SProtoSpace::offical_apply_battle_data*>(&::SProtoSpace::offical_apply_battle_data::default_instance());
}

db_offical_apply_battle_data::db_offical_apply_battle_data(const db_offical_apply_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_offical_apply_battle_data::SharedCtor() {
  _cached_size_ = 0;
  battle_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_offical_apply_battle_data::~db_offical_apply_battle_data() {
  SharedDtor();
}

void db_offical_apply_battle_data::SharedDtor() {
  if (this != default_instance_) {
    delete battle_data_;
  }
}

void db_offical_apply_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_offical_apply_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_offical_apply_battle_data_descriptor_;
}

const db_offical_apply_battle_data& db_offical_apply_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_offical_apply_battle_data* db_offical_apply_battle_data::default_instance_ = NULL;

db_offical_apply_battle_data* db_offical_apply_battle_data::New() const {
  return new db_offical_apply_battle_data;
}

void db_offical_apply_battle_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battle_data()) {
      if (battle_data_ != NULL) battle_data_->::SProtoSpace::offical_apply_battle_data::Clear();
    }
  }
  my_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_offical_apply_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_my_records;
        break;
      }

      // repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_my_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_offical_apply_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_data(), output);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
  for (int i = 0; i < this->my_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_offical_apply_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
  if (has_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_data(), target);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
  for (int i = 0; i < this->my_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_offical_apply_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_data());
    }

  }
  // repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
  total_size += 1 * this->my_records_size();
  for (int i = 0; i < this->my_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_offical_apply_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_offical_apply_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_offical_apply_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_offical_apply_battle_data::MergeFrom(const db_offical_apply_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_records_.MergeFrom(from.my_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_data()) {
      mutable_battle_data()->::SProtoSpace::offical_apply_battle_data::MergeFrom(from.battle_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_offical_apply_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_offical_apply_battle_data::CopyFrom(const db_offical_apply_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_offical_apply_battle_data::IsInitialized() const {

  return true;
}

void db_offical_apply_battle_data::Swap(db_offical_apply_battle_data* other) {
  if (other != this) {
    std::swap(battle_data_, other->battle_data_);
    my_records_.Swap(&other->my_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_offical_apply_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_offical_apply_battle_data_descriptor_;
  metadata.reflection = db_offical_apply_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_battle_result_db::kOfficeLvFieldNumber;
const int offical_apply_battle_result_db::kBattleDataFieldNumber;
#endif  // !_MSC_VER

offical_apply_battle_result_db::offical_apply_battle_result_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_battle_result_db::InitAsDefaultInstance() {
}

offical_apply_battle_result_db::offical_apply_battle_result_db(const offical_apply_battle_result_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_battle_result_db::SharedCtor() {
  _cached_size_ = 0;
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_battle_result_db::~offical_apply_battle_result_db() {
  SharedDtor();
}

void offical_apply_battle_result_db::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_apply_battle_result_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_battle_result_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_battle_result_db_descriptor_;
}

const offical_apply_battle_result_db& offical_apply_battle_result_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

offical_apply_battle_result_db* offical_apply_battle_result_db::default_instance_ = NULL;

offical_apply_battle_result_db* offical_apply_battle_result_db::New() const {
  return new offical_apply_battle_result_db;
}

void offical_apply_battle_result_db::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_lv_ = 0;
  }
  battle_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_battle_result_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EGrade office_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_data;
        break;
      }

      // repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_battle_result_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EGrade office_lv = 1;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->office_lv(), output);
  }

  // repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
  for (int i = 0; i < this->battle_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_battle_result_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EGrade office_lv = 1;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->office_lv(), target);
  }

  // repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
  for (int i = 0; i < this->battle_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_battle_result_db::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EGrade office_lv = 1;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

  }
  // repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
  total_size += 1 * this->battle_data_size();
  for (int i = 0; i < this->battle_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_battle_result_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_battle_result_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_battle_result_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_battle_result_db::MergeFrom(const offical_apply_battle_result_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_data_.MergeFrom(from.battle_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_battle_result_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_battle_result_db::CopyFrom(const offical_apply_battle_result_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_battle_result_db::IsInitialized() const {

  return true;
}

void offical_apply_battle_result_db::Swap(offical_apply_battle_result_db* other) {
  if (other != this) {
    std::swap(office_lv_, other->office_lv_);
    battle_data_.Swap(&other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_battle_result_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_battle_result_db_descriptor_;
  metadata.reflection = offical_apply_battle_result_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_offical_apply_battle_result_db::kResultsFieldNumber;
#endif  // !_MSC_VER

all_offical_apply_battle_result_db::all_offical_apply_battle_result_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_offical_apply_battle_result_db::InitAsDefaultInstance() {
}

all_offical_apply_battle_result_db::all_offical_apply_battle_result_db(const all_offical_apply_battle_result_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_offical_apply_battle_result_db::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_offical_apply_battle_result_db::~all_offical_apply_battle_result_db() {
  SharedDtor();
}

void all_offical_apply_battle_result_db::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_offical_apply_battle_result_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_offical_apply_battle_result_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_offical_apply_battle_result_db_descriptor_;
}

const all_offical_apply_battle_result_db& all_offical_apply_battle_result_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

all_offical_apply_battle_result_db* all_offical_apply_battle_result_db::default_instance_ = NULL;

all_offical_apply_battle_result_db* all_offical_apply_battle_result_db::New() const {
  return new all_offical_apply_battle_result_db;
}

void all_offical_apply_battle_result_db::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_offical_apply_battle_result_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_offical_apply_battle_result_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_offical_apply_battle_result_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_offical_apply_battle_result_db::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_offical_apply_battle_result_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_offical_apply_battle_result_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_offical_apply_battle_result_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_offical_apply_battle_result_db::MergeFrom(const all_offical_apply_battle_result_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_offical_apply_battle_result_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_offical_apply_battle_result_db::CopyFrom(const all_offical_apply_battle_result_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_offical_apply_battle_result_db::IsInitialized() const {

  return true;
}

void all_offical_apply_battle_result_db::Swap(all_offical_apply_battle_result_db* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_offical_apply_battle_result_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_offical_apply_battle_result_db_descriptor_;
  metadata.reflection = all_offical_apply_battle_result_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_offical_result_rank_data::kDataFieldNumber;
#endif  // !_MSC_VER

db_offical_result_rank_data::db_offical_result_rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_offical_result_rank_data::InitAsDefaultInstance() {
}

db_offical_result_rank_data::db_offical_result_rank_data(const db_offical_result_rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_offical_result_rank_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_offical_result_rank_data::~db_offical_result_rank_data() {
  SharedDtor();
}

void db_offical_result_rank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_offical_result_rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_offical_result_rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_offical_result_rank_data_descriptor_;
}

const db_offical_result_rank_data& db_offical_result_rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_offical_result_rank_data* db_offical_result_rank_data::default_instance_ = NULL;

db_offical_result_rank_data* db_offical_result_rank_data::New() const {
  return new db_offical_result_rank_data;
}

void db_offical_result_rank_data::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_offical_result_rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.offical_apply_battle_data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_offical_result_rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.offical_apply_battle_data data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_offical_result_rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.offical_apply_battle_data data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_offical_result_rank_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.offical_apply_battle_data data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_offical_result_rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_offical_result_rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_offical_result_rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_offical_result_rank_data::MergeFrom(const db_offical_result_rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_offical_result_rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_offical_result_rank_data::CopyFrom(const db_offical_result_rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_offical_result_rank_data::IsInitialized() const {

  return true;
}

void db_offical_result_rank_data::Swap(db_offical_result_rank_data* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_offical_result_rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_offical_result_rank_data_descriptor_;
  metadata.reflection = db_offical_result_rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_my_offical_result_data::kGradeFieldNumber;
const int db_my_offical_result_data::kMydataFieldNumber;
#endif  // !_MSC_VER

db_my_offical_result_data::db_my_offical_result_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_my_offical_result_data::InitAsDefaultInstance() {
}

db_my_offical_result_data::db_my_offical_result_data(const db_my_offical_result_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_my_offical_result_data::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_my_offical_result_data::~db_my_offical_result_data() {
  SharedDtor();
}

void db_my_offical_result_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_my_offical_result_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_my_offical_result_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_my_offical_result_data_descriptor_;
}

const db_my_offical_result_data& db_my_offical_result_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_my_offical_result_data* db_my_offical_result_data::default_instance_ = NULL;

db_my_offical_result_data* db_my_offical_result_data::New() const {
  return new db_my_offical_result_data;
}

void db_my_offical_result_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
  }
  mydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_my_offical_result_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mydata;
        break;
      }

      // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mydata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_my_offical_result_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
  for (int i = 0; i < this->mydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mydata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_my_offical_result_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
  for (int i = 0; i < this->mydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mydata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_my_offical_result_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
  total_size += 1 * this->mydata_size();
  for (int i = 0; i < this->mydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mydata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_my_offical_result_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_my_offical_result_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_my_offical_result_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_my_offical_result_data::MergeFrom(const db_my_offical_result_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mydata_.MergeFrom(from.mydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_my_offical_result_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_my_offical_result_data::CopyFrom(const db_my_offical_result_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_my_offical_result_data::IsInitialized() const {

  return true;
}

void db_my_offical_result_data::Swap(db_my_offical_result_data* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    mydata_.Swap(&other->mydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_my_offical_result_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_my_offical_result_data_descriptor_;
  metadata.reflection = db_my_offical_result_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_rank_db::kOfficeLvFieldNumber;
const int offical_rank_db::kRoleIdsFieldNumber;
#endif  // !_MSC_VER

offical_rank_db::offical_rank_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_rank_db::InitAsDefaultInstance() {
}

offical_rank_db::offical_rank_db(const offical_rank_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_rank_db::SharedCtor() {
  _cached_size_ = 0;
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_rank_db::~offical_rank_db() {
  SharedDtor();
}

void offical_rank_db::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_rank_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_rank_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_rank_db_descriptor_;
}

const offical_rank_db& offical_rank_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

offical_rank_db* offical_rank_db::default_instance_ = NULL;

offical_rank_db* offical_rank_db::New() const {
  return new offical_rank_db;
}

void offical_rank_db::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    office_lv_ = 0;
  }
  role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_rank_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EGrade office_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        break;
      }

      // repeated uint64 role_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_rank_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EGrade office_lv = 1;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->office_lv(), output);
  }

  // repeated uint64 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->role_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_rank_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EGrade office_lv = 1;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->office_lv(), target);
  }

  // repeated uint64 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->role_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_rank_db::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EGrade office_lv = 1;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

  }
  // repeated uint64 role_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_rank_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_rank_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_rank_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_rank_db::MergeFrom(const offical_rank_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_ids_.MergeFrom(from.role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_rank_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_rank_db::CopyFrom(const offical_rank_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_rank_db::IsInitialized() const {

  return true;
}

void offical_rank_db::Swap(offical_rank_db* other) {
  if (other != this) {
    std::swap(office_lv_, other->office_lv_);
    role_ids_.Swap(&other->role_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_rank_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_rank_db_descriptor_;
  metadata.reflection = offical_rank_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_offical_rank_db::kRanksFieldNumber;
#endif  // !_MSC_VER

all_offical_rank_db::all_offical_rank_db()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_offical_rank_db::InitAsDefaultInstance() {
}

all_offical_rank_db::all_offical_rank_db(const all_offical_rank_db& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_offical_rank_db::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_offical_rank_db::~all_offical_rank_db() {
  SharedDtor();
}

void all_offical_rank_db::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_offical_rank_db::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_offical_rank_db::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_offical_rank_db_descriptor_;
}

const all_offical_rank_db& all_offical_rank_db::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

all_offical_rank_db* all_offical_rank_db::default_instance_ = NULL;

all_offical_rank_db* all_offical_rank_db::New() const {
  return new all_offical_rank_db;
}

void all_offical_rank_db::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_offical_rank_db::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.offical_rank_db ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_offical_rank_db::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.offical_rank_db ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_offical_rank_db::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.offical_rank_db ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_offical_rank_db::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.offical_rank_db ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_offical_rank_db::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_offical_rank_db* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_offical_rank_db*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_offical_rank_db::MergeFrom(const all_offical_rank_db& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_offical_rank_db::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_offical_rank_db::CopyFrom(const all_offical_rank_db& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_offical_rank_db::IsInitialized() const {

  return true;
}

void all_offical_rank_db::Swap(all_offical_rank_db* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_offical_rank_db::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_offical_rank_db_descriptor_;
  metadata.reflection = all_offical_rank_db_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_unit_fashion_data::kDbModeFieldNumber;
const int db_unit_fashion_data::kUuidFieldNumber;
const int db_unit_fashion_data::kConfigIdFieldNumber;
const int db_unit_fashion_data::kStateFieldNumber;
#endif  // !_MSC_VER

db_unit_fashion_data::db_unit_fashion_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_unit_fashion_data::InitAsDefaultInstance() {
}

db_unit_fashion_data::db_unit_fashion_data(const db_unit_fashion_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_unit_fashion_data::SharedCtor() {
  _cached_size_ = 0;
  db_mode_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_unit_fashion_data::~db_unit_fashion_data() {
  SharedDtor();
}

void db_unit_fashion_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_unit_fashion_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_unit_fashion_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_unit_fashion_data_descriptor_;
}

const db_unit_fashion_data& db_unit_fashion_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_unit_fashion_data* db_unit_fashion_data::default_instance_ = NULL;

db_unit_fashion_data* db_unit_fashion_data::New() const {
  return new db_unit_fashion_data;
}

void db_unit_fashion_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_mode_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_unit_fashion_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 db_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_mode_)));
          set_has_db_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .SProtoSpace.FASHION_STATE state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::FASHION_STATE_IsValid(value)) {
            set_state(static_cast< ::SProtoSpace::FASHION_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_unit_fashion_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_mode(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  // optional .SProtoSpace.FASHION_STATE state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_unit_fashion_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 db_mode = 1;
  if (has_db_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_mode(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  // optional .SProtoSpace.FASHION_STATE state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_unit_fashion_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 db_mode = 1;
    if (has_db_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_mode());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional .SProtoSpace.FASHION_STATE state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_unit_fashion_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_unit_fashion_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_unit_fashion_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_unit_fashion_data::MergeFrom(const db_unit_fashion_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_mode()) {
      set_db_mode(from.db_mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_unit_fashion_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_unit_fashion_data::CopyFrom(const db_unit_fashion_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_unit_fashion_data::IsInitialized() const {

  return true;
}

void db_unit_fashion_data::Swap(db_unit_fashion_data* other) {
  if (other != this) {
    std::swap(db_mode_, other->db_mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(config_id_, other->config_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_unit_fashion_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_unit_fashion_data_descriptor_;
  metadata.reflection = db_unit_fashion_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_fashion_data::kFashionsFieldNumber;
#endif  // !_MSC_VER

role_fashion_data::role_fashion_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_fashion_data::InitAsDefaultInstance() {
}

role_fashion_data::role_fashion_data(const role_fashion_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_fashion_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_fashion_data::~role_fashion_data() {
  SharedDtor();
}

void role_fashion_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_fashion_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_fashion_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_fashion_data_descriptor_;
}

const role_fashion_data& role_fashion_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

role_fashion_data* role_fashion_data::default_instance_ = NULL;

role_fashion_data* role_fashion_data::New() const {
  return new role_fashion_data;
}

void role_fashion_data::Clear() {
  fashions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_fashion_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fashions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_fashion_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fashions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_fashion_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fashions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_fashion_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
  total_size += 1 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_fashion_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_fashion_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_fashion_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_fashion_data::MergeFrom(const role_fashion_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashions_.MergeFrom(from.fashions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_fashion_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_fashion_data::CopyFrom(const role_fashion_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_fashion_data::IsInitialized() const {

  return true;
}

void role_fashion_data::Swap(role_fashion_data* other) {
  if (other != this) {
    fashions_.Swap(&other->fashions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_fashion_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_fashion_data_descriptor_;
  metadata.reflection = role_fashion_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_all_data::kBaseDataFieldNumber;
const int db_role_all_data::kItemDataFieldNumber;
const int db_role_all_data::kPlayerDataFieldNumber;
const int db_role_all_data::kHeroDataFieldNumber;
const int db_role_all_data::kSoulDataFieldNumber;
const int db_role_all_data::kLevelDataFieldNumber;
const int db_role_all_data::kQuestDataFieldNumber;
const int db_role_all_data::kRoyalDataFieldNumber;
const int db_role_all_data::kShowDataFieldNumber;
const int db_role_all_data::kFriendDataFieldNumber;
const int db_role_all_data::kShopDataFieldNumber;
const int db_role_all_data::kHaremDataFieldNumber;
const int db_role_all_data::kFlowerDataFieldNumber;
const int db_role_all_data::kLastUsedTimeFieldNumber;
#endif  // !_MSC_VER

db_role_all_data::db_role_all_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_all_data::InitAsDefaultInstance() {
  base_data_ = const_cast< ::SProtoSpace::role_base_data*>(&::SProtoSpace::role_base_data::default_instance());
  item_data_ = const_cast< ::SProtoSpace::role_item_data*>(&::SProtoSpace::role_item_data::default_instance());
  player_data_ = const_cast< ::SProtoSpace::role_player_data*>(&::SProtoSpace::role_player_data::default_instance());
  hero_data_ = const_cast< ::SProtoSpace::role_hero_data*>(&::SProtoSpace::role_hero_data::default_instance());
  soul_data_ = const_cast< ::SProtoSpace::role_soul_data*>(&::SProtoSpace::role_soul_data::default_instance());
  level_data_ = const_cast< ::SProtoSpace::role_level_data*>(&::SProtoSpace::role_level_data::default_instance());
  quest_data_ = const_cast< ::SProtoSpace::role_quest_data*>(&::SProtoSpace::role_quest_data::default_instance());
  royal_data_ = const_cast< ::SProtoSpace::role_royal_data*>(&::SProtoSpace::role_royal_data::default_instance());
  show_data_ = const_cast< ::SProtoSpace::role_show_data*>(&::SProtoSpace::role_show_data::default_instance());
  friend_data_ = const_cast< ::SProtoSpace::role_friend_data*>(&::SProtoSpace::role_friend_data::default_instance());
  shop_data_ = const_cast< ::SProtoSpace::role_shop_data*>(&::SProtoSpace::role_shop_data::default_instance());
  harem_data_ = const_cast< ::SProtoSpace::role_harem_data*>(&::SProtoSpace::role_harem_data::default_instance());
  flower_data_ = const_cast< ::SProtoSpace::role_flower_data*>(&::SProtoSpace::role_flower_data::default_instance());
}

db_role_all_data::db_role_all_data(const db_role_all_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_all_data::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  item_data_ = NULL;
  player_data_ = NULL;
  hero_data_ = NULL;
  soul_data_ = NULL;
  level_data_ = NULL;
  quest_data_ = NULL;
  royal_data_ = NULL;
  show_data_ = NULL;
  friend_data_ = NULL;
  shop_data_ = NULL;
  harem_data_ = NULL;
  flower_data_ = NULL;
  last_used_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_all_data::~db_role_all_data() {
  SharedDtor();
}

void db_role_all_data::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete item_data_;
    delete player_data_;
    delete hero_data_;
    delete soul_data_;
    delete level_data_;
    delete quest_data_;
    delete royal_data_;
    delete show_data_;
    delete friend_data_;
    delete shop_data_;
    delete harem_data_;
    delete flower_data_;
  }
}

void db_role_all_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_all_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_all_data_descriptor_;
}

const db_role_all_data& db_role_all_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_all_data* db_role_all_data::default_instance_ = NULL;

db_role_all_data* db_role_all_data::New() const {
  return new db_role_all_data;
}

void db_role_all_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::SProtoSpace::role_base_data::Clear();
    }
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::SProtoSpace::role_item_data::Clear();
    }
    if (has_player_data()) {
      if (player_data_ != NULL) player_data_->::SProtoSpace::role_player_data::Clear();
    }
    if (has_hero_data()) {
      if (hero_data_ != NULL) hero_data_->::SProtoSpace::role_hero_data::Clear();
    }
    if (has_soul_data()) {
      if (soul_data_ != NULL) soul_data_->::SProtoSpace::role_soul_data::Clear();
    }
    if (has_level_data()) {
      if (level_data_ != NULL) level_data_->::SProtoSpace::role_level_data::Clear();
    }
    if (has_quest_data()) {
      if (quest_data_ != NULL) quest_data_->::SProtoSpace::role_quest_data::Clear();
    }
    if (has_royal_data()) {
      if (royal_data_ != NULL) royal_data_->::SProtoSpace::role_royal_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_show_data()) {
      if (show_data_ != NULL) show_data_->::SProtoSpace::role_show_data::Clear();
    }
    if (has_friend_data()) {
      if (friend_data_ != NULL) friend_data_->::SProtoSpace::role_friend_data::Clear();
    }
    if (has_shop_data()) {
      if (shop_data_ != NULL) shop_data_->::SProtoSpace::role_shop_data::Clear();
    }
    if (has_harem_data()) {
      if (harem_data_ != NULL) harem_data_->::SProtoSpace::role_harem_data::Clear();
    }
    if (has_flower_data()) {
      if (flower_data_ != NULL) flower_data_->::SProtoSpace::role_flower_data::Clear();
    }
    last_used_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_all_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.role_base_data base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_data;
        break;
      }

      // optional .SProtoSpace.role_item_data item_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_data;
        break;
      }

      // optional .SProtoSpace.role_player_data player_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero_data;
        break;
      }

      // optional .SProtoSpace.role_hero_data hero_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soul_data;
        break;
      }

      // optional .SProtoSpace.role_soul_data soul_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soul_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_level_data;
        break;
      }

      // optional .SProtoSpace.role_level_data level_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quest_data;
        break;
      }

      // optional .SProtoSpace.role_quest_data quest_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_royal_data;
        break;
      }

      // optional .SProtoSpace.role_royal_data royal_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royal_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_royal_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_show_data;
        break;
      }

      // optional .SProtoSpace.role_show_data show_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friend_data;
        break;
      }

      // optional .SProtoSpace.role_friend_data friend_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shop_data;
        break;
      }

      // optional .SProtoSpace.role_shop_data shop_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_harem_data;
        break;
      }

      // optional .SProtoSpace.role_harem_data harem_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harem_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harem_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_flower_data;
        break;
      }

      // optional .SProtoSpace.role_flower_data flower_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flower_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_last_used_time;
        break;
      }

      // optional uint32 last_used_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_used_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_used_time_)));
          set_has_last_used_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_all_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.role_base_data base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .SProtoSpace.role_item_data item_data = 2;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_data(), output);
  }

  // optional .SProtoSpace.role_player_data player_data = 3;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_data(), output);
  }

  // optional .SProtoSpace.role_hero_data hero_data = 4;
  if (has_hero_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero_data(), output);
  }

  // optional .SProtoSpace.role_soul_data soul_data = 5;
  if (has_soul_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->soul_data(), output);
  }

  // optional .SProtoSpace.role_level_data level_data = 6;
  if (has_level_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->level_data(), output);
  }

  // optional .SProtoSpace.role_quest_data quest_data = 7;
  if (has_quest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quest_data(), output);
  }

  // optional .SProtoSpace.role_royal_data royal_data = 8;
  if (has_royal_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->royal_data(), output);
  }

  // optional .SProtoSpace.role_show_data show_data = 9;
  if (has_show_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->show_data(), output);
  }

  // optional .SProtoSpace.role_friend_data friend_data = 10;
  if (has_friend_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->friend_data(), output);
  }

  // optional .SProtoSpace.role_shop_data shop_data = 11;
  if (has_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shop_data(), output);
  }

  // optional .SProtoSpace.role_harem_data harem_data = 12;
  if (has_harem_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->harem_data(), output);
  }

  // optional .SProtoSpace.role_flower_data flower_data = 13;
  if (has_flower_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->flower_data(), output);
  }

  // optional uint32 last_used_time = 14;
  if (has_last_used_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->last_used_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_all_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.role_base_data base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .SProtoSpace.role_item_data item_data = 2;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_data(), target);
  }

  // optional .SProtoSpace.role_player_data player_data = 3;
  if (has_player_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_data(), target);
  }

  // optional .SProtoSpace.role_hero_data hero_data = 4;
  if (has_hero_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero_data(), target);
  }

  // optional .SProtoSpace.role_soul_data soul_data = 5;
  if (has_soul_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->soul_data(), target);
  }

  // optional .SProtoSpace.role_level_data level_data = 6;
  if (has_level_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->level_data(), target);
  }

  // optional .SProtoSpace.role_quest_data quest_data = 7;
  if (has_quest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quest_data(), target);
  }

  // optional .SProtoSpace.role_royal_data royal_data = 8;
  if (has_royal_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->royal_data(), target);
  }

  // optional .SProtoSpace.role_show_data show_data = 9;
  if (has_show_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->show_data(), target);
  }

  // optional .SProtoSpace.role_friend_data friend_data = 10;
  if (has_friend_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->friend_data(), target);
  }

  // optional .SProtoSpace.role_shop_data shop_data = 11;
  if (has_shop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shop_data(), target);
  }

  // optional .SProtoSpace.role_harem_data harem_data = 12;
  if (has_harem_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->harem_data(), target);
  }

  // optional .SProtoSpace.role_flower_data flower_data = 13;
  if (has_flower_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->flower_data(), target);
  }

  // optional uint32 last_used_time = 14;
  if (has_last_used_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->last_used_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_all_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.role_base_data base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .SProtoSpace.role_item_data item_data = 2;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

    // optional .SProtoSpace.role_player_data player_data = 3;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_data());
    }

    // optional .SProtoSpace.role_hero_data hero_data = 4;
    if (has_hero_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_data());
    }

    // optional .SProtoSpace.role_soul_data soul_data = 5;
    if (has_soul_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soul_data());
    }

    // optional .SProtoSpace.role_level_data level_data = 6;
    if (has_level_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_data());
    }

    // optional .SProtoSpace.role_quest_data quest_data = 7;
    if (has_quest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest_data());
    }

    // optional .SProtoSpace.role_royal_data royal_data = 8;
    if (has_royal_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->royal_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.role_show_data show_data = 9;
    if (has_show_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_data());
    }

    // optional .SProtoSpace.role_friend_data friend_data = 10;
    if (has_friend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_data());
    }

    // optional .SProtoSpace.role_shop_data shop_data = 11;
    if (has_shop_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_data());
    }

    // optional .SProtoSpace.role_harem_data harem_data = 12;
    if (has_harem_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harem_data());
    }

    // optional .SProtoSpace.role_flower_data flower_data = 13;
    if (has_flower_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flower_data());
    }

    // optional uint32 last_used_time = 14;
    if (has_last_used_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_used_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_all_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_all_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_all_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_all_data::MergeFrom(const db_role_all_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::SProtoSpace::role_base_data::MergeFrom(from.base_data());
    }
    if (from.has_item_data()) {
      mutable_item_data()->::SProtoSpace::role_item_data::MergeFrom(from.item_data());
    }
    if (from.has_player_data()) {
      mutable_player_data()->::SProtoSpace::role_player_data::MergeFrom(from.player_data());
    }
    if (from.has_hero_data()) {
      mutable_hero_data()->::SProtoSpace::role_hero_data::MergeFrom(from.hero_data());
    }
    if (from.has_soul_data()) {
      mutable_soul_data()->::SProtoSpace::role_soul_data::MergeFrom(from.soul_data());
    }
    if (from.has_level_data()) {
      mutable_level_data()->::SProtoSpace::role_level_data::MergeFrom(from.level_data());
    }
    if (from.has_quest_data()) {
      mutable_quest_data()->::SProtoSpace::role_quest_data::MergeFrom(from.quest_data());
    }
    if (from.has_royal_data()) {
      mutable_royal_data()->::SProtoSpace::role_royal_data::MergeFrom(from.royal_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_show_data()) {
      mutable_show_data()->::SProtoSpace::role_show_data::MergeFrom(from.show_data());
    }
    if (from.has_friend_data()) {
      mutable_friend_data()->::SProtoSpace::role_friend_data::MergeFrom(from.friend_data());
    }
    if (from.has_shop_data()) {
      mutable_shop_data()->::SProtoSpace::role_shop_data::MergeFrom(from.shop_data());
    }
    if (from.has_harem_data()) {
      mutable_harem_data()->::SProtoSpace::role_harem_data::MergeFrom(from.harem_data());
    }
    if (from.has_flower_data()) {
      mutable_flower_data()->::SProtoSpace::role_flower_data::MergeFrom(from.flower_data());
    }
    if (from.has_last_used_time()) {
      set_last_used_time(from.last_used_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_all_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_all_data::CopyFrom(const db_role_all_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_all_data::IsInitialized() const {

  if (has_hero_data()) {
    if (!this->hero_data().IsInitialized()) return false;
  }
  return true;
}

void db_role_all_data::Swap(db_role_all_data* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(item_data_, other->item_data_);
    std::swap(player_data_, other->player_data_);
    std::swap(hero_data_, other->hero_data_);
    std::swap(soul_data_, other->soul_data_);
    std::swap(level_data_, other->level_data_);
    std::swap(quest_data_, other->quest_data_);
    std::swap(royal_data_, other->royal_data_);
    std::swap(show_data_, other->show_data_);
    std::swap(friend_data_, other->friend_data_);
    std::swap(shop_data_, other->shop_data_);
    std::swap(harem_data_, other->harem_data_);
    std::swap(flower_data_, other->flower_data_);
    std::swap(last_used_time_, other->last_used_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_all_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_all_data_descriptor_;
  metadata.reflection = db_role_all_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int redis_role_base::kUuidFieldNumber;
const int redis_role_base::kLvFieldNumber;
const int redis_role_base::kNameFieldNumber;
const int redis_role_base::kSexFieldNumber;
const int redis_role_base::kLikeFieldNumber;
const int redis_role_base::kTitleFieldNumber;
const int redis_role_base::kPartnerIdFieldNumber;
const int redis_role_base::kPartnerNameFieldNumber;
const int redis_role_base::kOfficeFieldNumber;
const int redis_role_base::kFimilyIdFieldNumber;
const int redis_role_base::kFimilyNameFieldNumber;
const int redis_role_base::kSignatureFieldNumber;
const int redis_role_base::kPositionFieldNumber;
const int redis_role_base::kLikedListFieldNumber;
const int redis_role_base::kBorderFieldNumber;
const int redis_role_base::kBirthdayFieldNumber;
const int redis_role_base::kStarSignFieldNumber;
const int redis_role_base::kPopularityFieldNumber;
const int redis_role_base::kCharmFieldNumber;
const int redis_role_base::kLabelsFieldNumber;
const int redis_role_base::kFightValueFieldNumber;
#endif  // !_MSC_VER

redis_role_base::redis_role_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void redis_role_base::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
  birthday_ = const_cast< ::SProtoSpace::date_info*>(&::SProtoSpace::date_info::default_instance());
}

redis_role_base::redis_role_base(const redis_role_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void redis_role_base::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  lv_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  like_ = 0u;
  title_ = 0u;
  partner_id_ = GOOGLE_ULONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  office_ = 0u;
  fimily_id_ = GOOGLE_ULONGLONG(0);
  fimily_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  border_ = 0u;
  birthday_ = NULL;
  star_sign_ = 1u;
  popularity_ = 0u;
  charm_ = 0u;
  fight_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

redis_role_base::~redis_role_base() {
  SharedDtor();
}

void redis_role_base::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fimily_name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete position_;
    delete birthday_;
  }
}

void redis_role_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* redis_role_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return redis_role_base_descriptor_;
}

const redis_role_base& redis_role_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

redis_role_base* redis_role_base::default_instance_ = NULL;

redis_role_base* redis_role_base::New() const {
  return new redis_role_base;
}

void redis_role_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    lv_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    like_ = 0u;
    title_ = 0u;
    partner_id_ = GOOGLE_ULONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    office_ = 0u;
    fimily_id_ = GOOGLE_ULONGLONG(0);
    if (has_fimily_name()) {
      if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
        fimily_name_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
    border_ = 0u;
    if (has_birthday()) {
      if (birthday_ != NULL) birthday_->::SProtoSpace::date_info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    star_sign_ = 1u;
    popularity_ = 0u;
    charm_ = 0u;
    fight_value_ = 0u;
  }
  liked_list_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool redis_role_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_like;
        break;
      }

      // optional uint32 like = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_title;
        break;
      }

      // optional uint32 title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_partner_name;
        break;
      }

      // optional string partner_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_office;
        break;
      }

      // optional uint32 office = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_)));
          set_has_office();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fimily_id;
        break;
      }

      // optional uint64 fimily_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fimily_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fimily_id_)));
          set_has_fimily_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fimily_name;
        break;
      }

      // optional string fimily_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fimily_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fimily_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fimily_name().data(), this->fimily_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_signature;
        break;
      }

      // optional string signature = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_liked_list;
        break;
      }

      // repeated uint64 liked_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_liked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_liked_list;
        if (input->ExpectTag(144)) goto parse_border;
        break;
      }

      // optional uint32 border = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_birthday;
        break;
      }

      // optional .SProtoSpace.date_info birthday = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 20 [default = 1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_popularity;
        break;
      }

      // optional uint32 popularity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_charm;
        break;
      }

      // optional uint32 charm = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_labels;
        break;
      }

      // repeated uint32 labels = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_labels;
        if (input->ExpectTag(192)) goto parse_fight_value;
        break;
      }

      // optional uint32 fight_value = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void redis_role_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional uint32 like = 6;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->like(), output);
  }

  // optional uint32 title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->title(), output);
  }

  // optional uint64 partner_id = 8;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->partner_id(), output);
  }

  // optional string partner_name = 9;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->partner_name(), output);
  }

  // optional uint32 office = 10;
  if (has_office()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->office(), output);
  }

  // optional uint64 fimily_id = 11;
  if (has_fimily_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->fimily_id(), output);
  }

  // optional string fimily_name = 12;
  if (has_fimily_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fimily_name().data(), this->fimily_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->fimily_name(), output);
  }

  // optional string signature = 13;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->signature(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 14;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->position(), output);
  }

  // repeated uint64 liked_list = 16;
  for (int i = 0; i < this->liked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->liked_list(i), output);
  }

  // optional uint32 border = 18;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->border(), output);
  }

  // optional .SProtoSpace.date_info birthday = 19;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->birthday(), output);
  }

  // optional uint32 star_sign = 20 [default = 1];
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->star_sign(), output);
  }

  // optional uint32 popularity = 21 [default = 0];
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->popularity(), output);
  }

  // optional uint32 charm = 22 [default = 0];
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->charm(), output);
  }

  // repeated uint32 labels = 23;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->labels(i), output);
  }

  // optional uint32 fight_value = 24;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* redis_role_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 like = 6;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->like(), target);
  }

  // optional uint32 title = 7;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->title(), target);
  }

  // optional uint64 partner_id = 8;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->partner_id(), target);
  }

  // optional string partner_name = 9;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->partner_name(), target);
  }

  // optional uint32 office = 10;
  if (has_office()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->office(), target);
  }

  // optional uint64 fimily_id = 11;
  if (has_fimily_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->fimily_id(), target);
  }

  // optional string fimily_name = 12;
  if (has_fimily_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fimily_name().data(), this->fimily_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fimily_name(), target);
  }

  // optional string signature = 13;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->signature(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 14;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->position(), target);
  }

  // repeated uint64 liked_list = 16;
  for (int i = 0; i < this->liked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->liked_list(i), target);
  }

  // optional uint32 border = 18;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->border(), target);
  }

  // optional .SProtoSpace.date_info birthday = 19;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->birthday(), target);
  }

  // optional uint32 star_sign = 20 [default = 1];
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->star_sign(), target);
  }

  // optional uint32 popularity = 21 [default = 0];
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->popularity(), target);
  }

  // optional uint32 charm = 22 [default = 0];
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->charm(), target);
  }

  // repeated uint32 labels = 23;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->labels(i), target);
  }

  // optional uint32 fight_value = 24;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int redis_role_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional uint32 like = 6;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional uint32 title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint64 partner_id = 8;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partner_id());
    }

    // optional string partner_name = 9;
    if (has_partner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 office = 10;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office());
    }

    // optional uint64 fimily_id = 11;
    if (has_fimily_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fimily_id());
    }

    // optional string fimily_name = 12;
    if (has_fimily_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fimily_name());
    }

    // optional string signature = 13;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional .SProtoSpace.lsg_position_info position = 14;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional uint32 border = 18;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border());
    }

    // optional .SProtoSpace.date_info birthday = 19;
    if (has_birthday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birthday());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 star_sign = 20 [default = 1];
    if (has_star_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

    // optional uint32 popularity = 21 [default = 0];
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // optional uint32 charm = 22 [default = 0];
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

    // optional uint32 fight_value = 24;
    if (has_fight_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_value());
    }

  }
  // repeated uint64 liked_list = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->liked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->liked_list(i));
    }
    total_size += 2 * this->liked_list_size() + data_size;
  }

  // repeated uint32 labels = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labels(i));
    }
    total_size += 2 * this->labels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void redis_role_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const redis_role_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const redis_role_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void redis_role_base::MergeFrom(const redis_role_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  liked_list_.MergeFrom(from.liked_list_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_office()) {
      set_office(from.office());
    }
    if (from.has_fimily_id()) {
      set_fimily_id(from.fimily_id());
    }
    if (from.has_fimily_name()) {
      set_fimily_name(from.fimily_name());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_birthday()) {
      mutable_birthday()->::SProtoSpace::date_info::MergeFrom(from.birthday());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void redis_role_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void redis_role_base::CopyFrom(const redis_role_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool redis_role_base::IsInitialized() const {

  return true;
}

void redis_role_base::Swap(redis_role_base* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(lv_, other->lv_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(like_, other->like_);
    std::swap(title_, other->title_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(office_, other->office_);
    std::swap(fimily_id_, other->fimily_id_);
    std::swap(fimily_name_, other->fimily_name_);
    std::swap(signature_, other->signature_);
    std::swap(position_, other->position_);
    liked_list_.Swap(&other->liked_list_);
    std::swap(border_, other->border_);
    std::swap(birthday_, other->birthday_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(popularity_, other->popularity_);
    std::swap(charm_, other->charm_);
    labels_.Swap(&other->labels_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata redis_role_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = redis_role_base_descriptor_;
  metadata.reflection = redis_role_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int redis_role_show_hero::kShowHeroListFieldNumber;
const int redis_role_show_hero::kShowHeroIdListFieldNumber;
#endif  // !_MSC_VER

redis_role_show_hero::redis_role_show_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void redis_role_show_hero::InitAsDefaultInstance() {
}

redis_role_show_hero::redis_role_show_hero(const redis_role_show_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void redis_role_show_hero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

redis_role_show_hero::~redis_role_show_hero() {
  SharedDtor();
}

void redis_role_show_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void redis_role_show_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* redis_role_show_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return redis_role_show_hero_descriptor_;
}

const redis_role_show_hero& redis_role_show_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

redis_role_show_hero* redis_role_show_hero::default_instance_ = NULL;

redis_role_show_hero* redis_role_show_hero::New() const {
  return new redis_role_show_hero;
}

void redis_role_show_hero::Clear() {
  show_hero_list_.Clear();
  show_hero_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool redis_role_show_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_show_hero_list;
        if (input->ExpectTag(136)) goto parse_show_hero_id_list;
        break;
      }

      // repeated uint64 show_hero_id_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hero_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 136, input, this->mutable_show_hero_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_show_hero_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_show_hero_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void redis_role_show_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->show_hero_list(i), output);
  }

  // repeated uint64 show_hero_id_list = 17;
  for (int i = 0; i < this->show_hero_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      17, this->show_hero_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* redis_role_show_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->show_hero_list(i), target);
  }

  // repeated uint64 show_hero_id_list = 17;
  for (int i = 0; i < this->show_hero_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(17, this->show_hero_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int redis_role_show_hero::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
  total_size += 1 * this->show_hero_list_size();
  for (int i = 0; i < this->show_hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show_hero_list(i));
  }

  // repeated uint64 show_hero_id_list = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_hero_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->show_hero_id_list(i));
    }
    total_size += 2 * this->show_hero_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void redis_role_show_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const redis_role_show_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const redis_role_show_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void redis_role_show_hero::MergeFrom(const redis_role_show_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_hero_list_.MergeFrom(from.show_hero_list_);
  show_hero_id_list_.MergeFrom(from.show_hero_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void redis_role_show_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void redis_role_show_hero::CopyFrom(const redis_role_show_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool redis_role_show_hero::IsInitialized() const {

  for (int i = 0; i < show_hero_list_size(); i++) {
    if (!this->show_hero_list(i).IsInitialized()) return false;
  }
  return true;
}

void redis_role_show_hero::Swap(redis_role_show_hero* other) {
  if (other != this) {
    show_hero_list_.Swap(&other->show_hero_list_);
    show_hero_id_list_.Swap(&other->show_hero_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata redis_role_show_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = redis_role_show_hero_descriptor_;
  metadata.reflection = redis_role_show_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int redis_role_battle_hero::kBattleHeroListFieldNumber;
#endif  // !_MSC_VER

redis_role_battle_hero::redis_role_battle_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void redis_role_battle_hero::InitAsDefaultInstance() {
}

redis_role_battle_hero::redis_role_battle_hero(const redis_role_battle_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void redis_role_battle_hero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

redis_role_battle_hero::~redis_role_battle_hero() {
  SharedDtor();
}

void redis_role_battle_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void redis_role_battle_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* redis_role_battle_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return redis_role_battle_hero_descriptor_;
}

const redis_role_battle_hero& redis_role_battle_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

redis_role_battle_hero* redis_role_battle_hero::default_instance_ = NULL;

redis_role_battle_hero* redis_role_battle_hero::New() const {
  return new redis_role_battle_hero;
}

void redis_role_battle_hero::Clear() {
  battle_hero_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool redis_role_battle_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_battle_hero_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void redis_role_battle_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
  for (int i = 0; i < this->battle_hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->battle_hero_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* redis_role_battle_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
  for (int i = 0; i < this->battle_hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->battle_hero_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int redis_role_battle_hero::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
  total_size += 1 * this->battle_hero_list_size();
  for (int i = 0; i < this->battle_hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_hero_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void redis_role_battle_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const redis_role_battle_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const redis_role_battle_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void redis_role_battle_hero::MergeFrom(const redis_role_battle_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_hero_list_.MergeFrom(from.battle_hero_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void redis_role_battle_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void redis_role_battle_hero::CopyFrom(const redis_role_battle_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool redis_role_battle_hero::IsInitialized() const {

  for (int i = 0; i < battle_hero_list_size(); i++) {
    if (!this->battle_hero_list(i).IsInitialized()) return false;
  }
  return true;
}

void redis_role_battle_hero::Swap(redis_role_battle_hero* other) {
  if (other != this) {
    battle_hero_list_.Swap(&other->battle_hero_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata redis_role_battle_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = redis_role_battle_hero_descriptor_;
  metadata.reflection = redis_role_battle_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int redis_comment_all::kCommentListFieldNumber;
const int redis_comment_all::kIndexFieldNumber;
#endif  // !_MSC_VER

redis_comment_all::redis_comment_all()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void redis_comment_all::InitAsDefaultInstance() {
}

redis_comment_all::redis_comment_all(const redis_comment_all& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void redis_comment_all::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

redis_comment_all::~redis_comment_all() {
  SharedDtor();
}

void redis_comment_all::SharedDtor() {
  if (this != default_instance_) {
  }
}

void redis_comment_all::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* redis_comment_all::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return redis_comment_all_descriptor_;
}

const redis_comment_all& redis_comment_all::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

redis_comment_all* redis_comment_all::default_instance_ = NULL;

redis_comment_all* redis_comment_all::New() const {
  return new redis_comment_all;
}

void redis_comment_all::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    index_ = 0;
  }
  comment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool redis_comment_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.comment_info comment_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comment_list;
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void redis_comment_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.comment_info comment_list = 1;
  for (int i = 0; i < this->comment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comment_list(i), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* redis_comment_all::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.comment_info comment_list = 1;
  for (int i = 0; i < this->comment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comment_list(i), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int redis_comment_all::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .SProtoSpace.comment_info comment_list = 1;
  total_size += 1 * this->comment_list_size();
  for (int i = 0; i < this->comment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void redis_comment_all::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const redis_comment_all* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const redis_comment_all*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void redis_comment_all::MergeFrom(const redis_comment_all& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_list_.MergeFrom(from.comment_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void redis_comment_all::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void redis_comment_all::CopyFrom(const redis_comment_all& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool redis_comment_all::IsInitialized() const {

  return true;
}

void redis_comment_all::Swap(redis_comment_all* other) {
  if (other != this) {
    comment_list_.Swap(&other->comment_list_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata redis_comment_all::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = redis_comment_all_descriptor_;
  metadata.reflection = redis_comment_all_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int redis_role_data::kBaseDataFieldNumber;
const int redis_role_data::kShowHeroDataFieldNumber;
const int redis_role_data::kBattleHeroDataFieldNumber;
const int redis_role_data::kFashionDataFieldNumber;
#endif  // !_MSC_VER

redis_role_data::redis_role_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void redis_role_data::InitAsDefaultInstance() {
  base_data_ = const_cast< ::SProtoSpace::redis_role_base*>(&::SProtoSpace::redis_role_base::default_instance());
  show_hero_data_ = const_cast< ::SProtoSpace::redis_role_show_hero*>(&::SProtoSpace::redis_role_show_hero::default_instance());
  battle_hero_data_ = const_cast< ::SProtoSpace::redis_role_battle_hero*>(&::SProtoSpace::redis_role_battle_hero::default_instance());
  fashion_data_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

redis_role_data::redis_role_data(const redis_role_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void redis_role_data::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  show_hero_data_ = NULL;
  battle_hero_data_ = NULL;
  fashion_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

redis_role_data::~redis_role_data() {
  SharedDtor();
}

void redis_role_data::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete show_hero_data_;
    delete battle_hero_data_;
    delete fashion_data_;
  }
}

void redis_role_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* redis_role_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return redis_role_data_descriptor_;
}

const redis_role_data& redis_role_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

redis_role_data* redis_role_data::default_instance_ = NULL;

redis_role_data* redis_role_data::New() const {
  return new redis_role_data;
}

void redis_role_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::SProtoSpace::redis_role_base::Clear();
    }
    if (has_show_hero_data()) {
      if (show_hero_data_ != NULL) show_hero_data_->::SProtoSpace::redis_role_show_hero::Clear();
    }
    if (has_battle_hero_data()) {
      if (battle_hero_data_ != NULL) battle_hero_data_->::SProtoSpace::redis_role_battle_hero::Clear();
    }
    if (has_fashion_data()) {
      if (fashion_data_ != NULL) fashion_data_->::SProtoSpace::fashions_pack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool redis_role_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.redis_role_base base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show_hero_data;
        break;
      }

      // optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_hero_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_hero_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_hero_data;
        break;
      }

      // optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_hero_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_hero_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fashion_data;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashion_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void redis_role_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.redis_role_base base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
  if (has_show_hero_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show_hero_data(), output);
  }

  // optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
  if (has_battle_hero_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_hero_data(), output);
  }

  // optional .SProtoSpace.fashions_pack fashion_data = 5;
  if (has_fashion_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fashion_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* redis_role_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.redis_role_base base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
  if (has_show_hero_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show_hero_data(), target);
  }

  // optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
  if (has_battle_hero_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_hero_data(), target);
  }

  // optional .SProtoSpace.fashions_pack fashion_data = 5;
  if (has_fashion_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fashion_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int redis_role_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.redis_role_base base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
    if (has_show_hero_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_hero_data());
    }

    // optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
    if (has_battle_hero_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_hero_data());
    }

    // optional .SProtoSpace.fashions_pack fashion_data = 5;
    if (has_fashion_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void redis_role_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const redis_role_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const redis_role_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void redis_role_data::MergeFrom(const redis_role_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::SProtoSpace::redis_role_base::MergeFrom(from.base_data());
    }
    if (from.has_show_hero_data()) {
      mutable_show_hero_data()->::SProtoSpace::redis_role_show_hero::MergeFrom(from.show_hero_data());
    }
    if (from.has_battle_hero_data()) {
      mutable_battle_hero_data()->::SProtoSpace::redis_role_battle_hero::MergeFrom(from.battle_hero_data());
    }
    if (from.has_fashion_data()) {
      mutable_fashion_data()->::SProtoSpace::fashions_pack::MergeFrom(from.fashion_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void redis_role_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void redis_role_data::CopyFrom(const redis_role_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool redis_role_data::IsInitialized() const {

  if (has_show_hero_data()) {
    if (!this->show_hero_data().IsInitialized()) return false;
  }
  if (has_battle_hero_data()) {
    if (!this->battle_hero_data().IsInitialized()) return false;
  }
  return true;
}

void redis_role_data::Swap(redis_role_data* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(show_hero_data_, other->show_hero_data_);
    std::swap(battle_hero_data_, other->battle_hero_data_);
    std::swap(fashion_data_, other->fashion_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata redis_role_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = redis_role_data_descriptor_;
  metadata.reflection = redis_role_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_user_data::kRoleIdFieldNumber;
const int arena_user_data::kChallengedNumFieldNumber;
const int arena_user_data::kIsRobotFieldNumber;
const int arena_user_data::kWinCountFieldNumber;
const int arena_user_data::kFailCountFieldNumber;
const int arena_user_data::kBattleDataFieldNumber;
#endif  // !_MSC_VER

arena_user_data::arena_user_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_user_data::InitAsDefaultInstance() {
  battle_data_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

arena_user_data::arena_user_data(const arena_user_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_user_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  challenged_num_ = 0;
  is_robot_ = false;
  win_count_ = 0;
  fail_count_ = 0;
  battle_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_user_data::~arena_user_data() {
  SharedDtor();
}

void arena_user_data::SharedDtor() {
  if (this != default_instance_) {
    delete battle_data_;
  }
}

void arena_user_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_user_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_user_data_descriptor_;
}

const arena_user_data& arena_user_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

arena_user_data* arena_user_data::default_instance_ = NULL;

arena_user_data* arena_user_data::New() const {
  return new arena_user_data;
}

void arena_user_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    challenged_num_ = 0;
    is_robot_ = false;
    win_count_ = 0;
    fail_count_ = 0;
    if (has_battle_data()) {
      if (battle_data_ != NULL) battle_data_->::SProtoSpace::battle_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_user_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challenged_num;
        break;
      }

      // optional int32 challenged_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenged_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenged_num_)));
          set_has_challenged_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_robot;
        break;
      }

      // optional bool is_robot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fail_count;
        break;
      }

      // optional int32 fail_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_count_)));
          set_has_fail_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battle_data;
        break;
      }

      // optional .SProtoSpace.battle_role_info battle_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_user_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional int32 challenged_num = 2;
  if (has_challenged_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challenged_num(), output);
  }

  // optional bool is_robot = 3;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_robot(), output);
  }

  // optional int32 win_count = 4;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->win_count(), output);
  }

  // optional int32 fail_count = 5;
  if (has_fail_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fail_count(), output);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 6;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->battle_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_user_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional int32 challenged_num = 2;
  if (has_challenged_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challenged_num(), target);
  }

  // optional bool is_robot = 3;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_robot(), target);
  }

  // optional int32 win_count = 4;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->win_count(), target);
  }

  // optional int32 fail_count = 5;
  if (has_fail_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fail_count(), target);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 6;
  if (has_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->battle_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_user_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 challenged_num = 2;
    if (has_challenged_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenged_num());
    }

    // optional bool is_robot = 3;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

    // optional int32 win_count = 4;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

    // optional int32 fail_count = 5;
    if (has_fail_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_count());
    }

    // optional .SProtoSpace.battle_role_info battle_data = 6;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_user_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_user_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_user_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_user_data::MergeFrom(const arena_user_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_challenged_num()) {
      set_challenged_num(from.challenged_num());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_fail_count()) {
      set_fail_count(from.fail_count());
    }
    if (from.has_battle_data()) {
      mutable_battle_data()->::SProtoSpace::battle_role_info::MergeFrom(from.battle_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_user_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_user_data::CopyFrom(const arena_user_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_user_data::IsInitialized() const {

  if (has_battle_data()) {
    if (!this->battle_data().IsInitialized()) return false;
  }
  return true;
}

void arena_user_data::Swap(arena_user_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(challenged_num_, other->challenged_num_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(win_count_, other->win_count_);
    std::swap(fail_count_, other->fail_count_);
    std::swap(battle_data_, other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_user_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_user_data_descriptor_;
  metadata.reflection = arena_user_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_redis_role_data_req::kProtoidFieldNumber;
const int db_get_redis_role_data_req::kTypeFieldNumber;
const int db_get_redis_role_data_req::kRoleIdFieldNumber;
const int db_get_redis_role_data_req::kTargetRoleIdFieldNumber;
#endif  // !_MSC_VER

db_get_redis_role_data_req::db_get_redis_role_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_redis_role_data_req::InitAsDefaultInstance() {
}

db_get_redis_role_data_req::db_get_redis_role_data_req(const db_get_redis_role_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_redis_role_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 226;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  target_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_redis_role_data_req::~db_get_redis_role_data_req() {
  SharedDtor();
}

void db_get_redis_role_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_redis_role_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_redis_role_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_redis_role_data_req_descriptor_;
}

const db_get_redis_role_data_req& db_get_redis_role_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_redis_role_data_req* db_get_redis_role_data_req::default_instance_ = NULL;

db_get_redis_role_data_req* db_get_redis_role_data_req::New() const {
  return new db_get_redis_role_data_req;
}

void db_get_redis_role_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 226;
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    target_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_redis_role_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDBGetRedisRoleDataType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eDBGetRedisRoleDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_role_id;
        break;
      }

      // optional uint64 target_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_role_id_)));
          set_has_target_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_redis_role_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 target_role_id = 4;
  if (has_target_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_redis_role_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 target_role_id = 4;
  if (has_target_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_redis_role_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 target_role_id = 4;
    if (has_target_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_redis_role_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_redis_role_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_redis_role_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_redis_role_data_req::MergeFrom(const db_get_redis_role_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_target_role_id()) {
      set_target_role_id(from.target_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_redis_role_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_redis_role_data_req::CopyFrom(const db_get_redis_role_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_redis_role_data_req::IsInitialized() const {

  return true;
}

void db_get_redis_role_data_req::Swap(db_get_redis_role_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(target_role_id_, other->target_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_redis_role_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_redis_role_data_req_descriptor_;
  metadata.reflection = db_get_redis_role_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_redis_role_data_ack::kProtoidFieldNumber;
const int db_get_redis_role_data_ack::kTypeFieldNumber;
const int db_get_redis_role_data_ack::kResultFieldNumber;
const int db_get_redis_role_data_ack::kRoleIdFieldNumber;
const int db_get_redis_role_data_ack::kTargetRoleIdFieldNumber;
const int db_get_redis_role_data_ack::kDataFieldNumber;
const int db_get_redis_role_data_ack::kRoleAllDataFieldNumber;
#endif  // !_MSC_VER

db_get_redis_role_data_ack::db_get_redis_role_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_redis_role_data_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::redis_role_data*>(&::SProtoSpace::redis_role_data::default_instance());
  role_all_data_ = const_cast< ::SProtoSpace::db_role_all_data*>(&::SProtoSpace::db_role_all_data::default_instance());
}

db_get_redis_role_data_ack::db_get_redis_role_data_ack(const db_get_redis_role_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_redis_role_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 227;
  type_ = 0;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  target_role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  role_all_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_redis_role_data_ack::~db_get_redis_role_data_ack() {
  SharedDtor();
}

void db_get_redis_role_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete role_all_data_;
  }
}

void db_get_redis_role_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_redis_role_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_redis_role_data_ack_descriptor_;
}

const db_get_redis_role_data_ack& db_get_redis_role_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_redis_role_data_ack* db_get_redis_role_data_ack::default_instance_ = NULL;

db_get_redis_role_data_ack* db_get_redis_role_data_ack::New() const {
  return new db_get_redis_role_data_ack;
}

void db_get_redis_role_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 227;
    type_ = 0;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    target_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::redis_role_data::Clear();
    }
    if (has_role_all_data()) {
      if (role_all_data_ != NULL) role_all_data_->::SProtoSpace::db_role_all_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_redis_role_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDBGetRedisRoleDataType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eDBGetRedisRoleDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target_role_id;
        break;
      }

      // optional uint64 target_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_role_id_)));
          set_has_target_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.redis_role_data data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_all_data;
        break;
      }

      // optional .SProtoSpace.db_role_all_data role_all_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_all_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_all_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_redis_role_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional uint64 target_role_id = 5;
  if (has_target_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->target_role_id(), output);
  }

  // optional .SProtoSpace.redis_role_data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  // optional .SProtoSpace.db_role_all_data role_all_data = 7;
  if (has_role_all_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->role_all_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_redis_role_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional uint64 target_role_id = 5;
  if (has_target_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->target_role_id(), target);
  }

  // optional .SProtoSpace.redis_role_data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  // optional .SProtoSpace.db_role_all_data role_all_data = 7;
  if (has_role_all_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->role_all_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_redis_role_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 target_role_id = 5;
    if (has_target_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_role_id());
    }

    // optional .SProtoSpace.redis_role_data data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .SProtoSpace.db_role_all_data role_all_data = 7;
    if (has_role_all_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_all_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_redis_role_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_redis_role_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_redis_role_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_redis_role_data_ack::MergeFrom(const db_get_redis_role_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_target_role_id()) {
      set_target_role_id(from.target_role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::redis_role_data::MergeFrom(from.data());
    }
    if (from.has_role_all_data()) {
      mutable_role_all_data()->::SProtoSpace::db_role_all_data::MergeFrom(from.role_all_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_redis_role_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_redis_role_data_ack::CopyFrom(const db_get_redis_role_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_redis_role_data_ack::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_role_all_data()) {
    if (!this->role_all_data().IsInitialized()) return false;
  }
  return true;
}

void db_get_redis_role_data_ack::Swap(db_get_redis_role_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(target_role_id_, other->target_role_id_);
    std::swap(data_, other->data_);
    std::swap(role_all_data_, other->role_all_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_redis_role_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_redis_role_data_ack_descriptor_;
  metadata.reflection = db_get_redis_role_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_redis_role_data_ntf::kProtoidFieldNumber;
const int db_update_redis_role_data_ntf::kRoleIdFieldNumber;
const int db_update_redis_role_data_ntf::kDataFieldNumber;
#endif  // !_MSC_VER

db_update_redis_role_data_ntf::db_update_redis_role_data_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_redis_role_data_ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::redis_role_data*>(&::SProtoSpace::redis_role_data::default_instance());
}

db_update_redis_role_data_ntf::db_update_redis_role_data_ntf(const db_update_redis_role_data_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_redis_role_data_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 228;
  role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_redis_role_data_ntf::~db_update_redis_role_data_ntf() {
  SharedDtor();
}

void db_update_redis_role_data_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_update_redis_role_data_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_redis_role_data_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_redis_role_data_ntf_descriptor_;
}

const db_update_redis_role_data_ntf& db_update_redis_role_data_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_update_redis_role_data_ntf* db_update_redis_role_data_ntf::default_instance_ = NULL;

db_update_redis_role_data_ntf* db_update_redis_role_data_ntf::New() const {
  return new db_update_redis_role_data_ntf;
}

void db_update_redis_role_data_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 228;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::redis_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_redis_role_data_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.redis_role_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_redis_role_data_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.redis_role_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_redis_role_data_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.redis_role_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_redis_role_data_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.redis_role_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_redis_role_data_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_redis_role_data_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_redis_role_data_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_redis_role_data_ntf::MergeFrom(const db_update_redis_role_data_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::redis_role_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_redis_role_data_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_redis_role_data_ntf::CopyFrom(const db_update_redis_role_data_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_redis_role_data_ntf::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void db_update_redis_role_data_ntf::Swap(db_update_redis_role_data_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_redis_role_data_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_redis_role_data_ntf_descriptor_;
  metadata.reflection = db_update_redis_role_data_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_apply_info_req::kProtoidFieldNumber;
const int db_check_apply_info_req::kUuidFieldNumber;
const int db_check_apply_info_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

db_check_apply_info_req::db_check_apply_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_apply_info_req::InitAsDefaultInstance() {
}

db_check_apply_info_req::db_check_apply_info_req(const db_check_apply_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_apply_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 270;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_apply_info_req::~db_check_apply_info_req() {
  SharedDtor();
}

void db_check_apply_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_apply_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_apply_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_apply_info_req_descriptor_;
}

const db_check_apply_info_req& db_check_apply_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_apply_info_req* db_check_apply_info_req::default_instance_ = NULL;

db_check_apply_info_req* db_check_apply_info_req::New() const {
  return new db_check_apply_info_req;
}

void db_check_apply_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 270;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_apply_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_apply_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_apply_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_apply_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_apply_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_apply_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_apply_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_apply_info_req::MergeFrom(const db_check_apply_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_apply_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_apply_info_req::CopyFrom(const db_check_apply_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_apply_info_req::IsInitialized() const {

  return true;
}

void db_check_apply_info_req::Swap(db_check_apply_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_apply_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_apply_info_req_descriptor_;
  metadata.reflection = db_check_apply_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_apply_info_ack::kProtoidFieldNumber;
const int db_check_apply_info_ack::kUuidFieldNumber;
const int db_check_apply_info_ack::kApplyInfosFieldNumber;
#endif  // !_MSC_VER

db_check_apply_info_ack::db_check_apply_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_apply_info_ack::InitAsDefaultInstance() {
}

db_check_apply_info_ack::db_check_apply_info_ack(const db_check_apply_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_apply_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 271;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_apply_info_ack::~db_check_apply_info_ack() {
  SharedDtor();
}

void db_check_apply_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_apply_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_apply_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_apply_info_ack_descriptor_;
}

const db_check_apply_info_ack& db_check_apply_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_apply_info_ack* db_check_apply_info_ack::default_instance_ = NULL;

db_check_apply_info_ack* db_check_apply_info_ack::New() const {
  return new db_check_apply_info_ack;
}

void db_check_apply_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 271;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  apply_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_apply_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apply_infos;
        break;
      }

      // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apply_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_apply_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apply_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_apply_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apply_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_apply_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  total_size += 1 * this->apply_infos_size();
  for (int i = 0; i < this->apply_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_apply_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_apply_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_apply_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_apply_info_ack::MergeFrom(const db_check_apply_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_infos_.MergeFrom(from.apply_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_apply_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_apply_info_ack::CopyFrom(const db_check_apply_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_apply_info_ack::IsInitialized() const {

  return true;
}

void db_check_apply_info_ack::Swap(db_check_apply_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uuid_, other->uuid_);
    apply_infos_.Swap(&other->apply_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_apply_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_apply_info_ack_descriptor_;
  metadata.reflection = db_check_apply_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_save_apply_info_req::kProtoidFieldNumber;
const int db_save_apply_info_req::kAcceptIdFieldNumber;
const int db_save_apply_info_req::kApplyIdFieldNumber;
const int db_save_apply_info_req::kAreaIdFieldNumber;
const int db_save_apply_info_req::kContentFieldNumber;
#endif  // !_MSC_VER

db_save_apply_info_req::db_save_apply_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_save_apply_info_req::InitAsDefaultInstance() {
}

db_save_apply_info_req::db_save_apply_info_req(const db_save_apply_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_save_apply_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 272;
  accept_id_ = GOOGLE_ULONGLONG(0);
  apply_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_save_apply_info_req::~db_save_apply_info_req() {
  SharedDtor();
}

void db_save_apply_info_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_save_apply_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_save_apply_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_save_apply_info_req_descriptor_;
}

const db_save_apply_info_req& db_save_apply_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_save_apply_info_req* db_save_apply_info_req::default_instance_ = NULL;

db_save_apply_info_req* db_save_apply_info_req::New() const {
  return new db_save_apply_info_req;
}

void db_save_apply_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 272;
    accept_id_ = GOOGLE_ULONGLONG(0);
    apply_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_save_apply_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_id;
        break;
      }

      // optional uint64 accept_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accept_id_)));
          set_has_accept_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_save_apply_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accept_id(), output);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->apply_id(), output);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area_id(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_save_apply_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accept_id(), target);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->apply_id(), target);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area_id(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_save_apply_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 accept_id = 2;
    if (has_accept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accept_id());
    }

    // optional uint64 apply_id = 3;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

    // optional uint32 area_id = 4;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_save_apply_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_save_apply_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_save_apply_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_save_apply_info_req::MergeFrom(const db_save_apply_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_accept_id()) {
      set_accept_id(from.accept_id());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_save_apply_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_save_apply_info_req::CopyFrom(const db_save_apply_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_save_apply_info_req::IsInitialized() const {

  return true;
}

void db_save_apply_info_req::Swap(db_save_apply_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(accept_id_, other->accept_id_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_save_apply_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_save_apply_info_req_descriptor_;
  metadata.reflection = db_save_apply_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_apply_req::kProtoIdFieldNumber;
const int db_update_apply_req::kAcceptIdFieldNumber;
const int db_update_apply_req::kApplyIdFieldNumber;
const int db_update_apply_req::kAreaIdFieldNumber;
const int db_update_apply_req::kStatusFieldNumber;
#endif  // !_MSC_VER

db_update_apply_req::db_update_apply_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_apply_req::InitAsDefaultInstance() {
}

db_update_apply_req::db_update_apply_req(const db_update_apply_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_apply_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 273;
  accept_id_ = GOOGLE_ULONGLONG(0);
  apply_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_apply_req::~db_update_apply_req() {
  SharedDtor();
}

void db_update_apply_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_update_apply_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_apply_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_apply_req_descriptor_;
}

const db_update_apply_req& db_update_apply_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_update_apply_req* db_update_apply_req::default_instance_ = NULL;

db_update_apply_req* db_update_apply_req::New() const {
  return new db_update_apply_req;
}

void db_update_apply_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 273;
    accept_id_ = GOOGLE_ULONGLONG(0);
    apply_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_apply_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_id;
        break;
      }

      // optional uint64 accept_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accept_id_)));
          set_has_accept_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_apply_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accept_id(), output);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->apply_id(), output);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area_id(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_apply_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accept_id(), target);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->apply_id(), target);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area_id(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_apply_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 accept_id = 2;
    if (has_accept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accept_id());
    }

    // optional uint64 apply_id = 3;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

    // optional uint32 area_id = 4;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_apply_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_apply_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_apply_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_apply_req::MergeFrom(const db_update_apply_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_accept_id()) {
      set_accept_id(from.accept_id());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_apply_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_apply_req::CopyFrom(const db_update_apply_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_apply_req::IsInitialized() const {

  return true;
}

void db_update_apply_req::Swap(db_update_apply_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(accept_id_, other->accept_id_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_apply_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_apply_req_descriptor_;
  metadata.reflection = db_update_apply_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_process_apply_info_req::kProtoIdFieldNumber;
const int db_process_apply_info_req::kApplyIdFieldNumber;
const int db_process_apply_info_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

db_process_apply_info_req::db_process_apply_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_process_apply_info_req::InitAsDefaultInstance() {
}

db_process_apply_info_req::db_process_apply_info_req(const db_process_apply_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_process_apply_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 274;
  apply_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_process_apply_info_req::~db_process_apply_info_req() {
  SharedDtor();
}

void db_process_apply_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_process_apply_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_process_apply_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_process_apply_info_req_descriptor_;
}

const db_process_apply_info_req& db_process_apply_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_process_apply_info_req* db_process_apply_info_req::default_instance_ = NULL;

db_process_apply_info_req* db_process_apply_info_req::New() const {
  return new db_process_apply_info_req;
}

void db_process_apply_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 274;
    apply_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_process_apply_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_process_apply_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 apply_id = 2;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->apply_id(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_process_apply_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 apply_id = 2;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->apply_id(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_process_apply_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 apply_id = 2;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_process_apply_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_process_apply_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_process_apply_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_process_apply_info_req::MergeFrom(const db_process_apply_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_process_apply_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_process_apply_info_req::CopyFrom(const db_process_apply_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_process_apply_info_req::IsInitialized() const {

  return true;
}

void db_process_apply_info_req::Swap(db_process_apply_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_process_apply_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_process_apply_info_req_descriptor_;
  metadata.reflection = db_process_apply_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_process_apply_info_ack::kProtoIdFieldNumber;
const int db_process_apply_info_ack::kUuidFieldNumber;
const int db_process_apply_info_ack::kApplyInfosFieldNumber;
#endif  // !_MSC_VER

db_process_apply_info_ack::db_process_apply_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_process_apply_info_ack::InitAsDefaultInstance() {
}

db_process_apply_info_ack::db_process_apply_info_ack(const db_process_apply_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_process_apply_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 275;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_process_apply_info_ack::~db_process_apply_info_ack() {
  SharedDtor();
}

void db_process_apply_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_process_apply_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_process_apply_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_process_apply_info_ack_descriptor_;
}

const db_process_apply_info_ack& db_process_apply_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_process_apply_info_ack* db_process_apply_info_ack::default_instance_ = NULL;

db_process_apply_info_ack* db_process_apply_info_ack::New() const {
  return new db_process_apply_info_ack;
}

void db_process_apply_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 275;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  apply_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_process_apply_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apply_infos;
        break;
      }

      // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apply_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_process_apply_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apply_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_process_apply_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apply_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_process_apply_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  total_size += 1 * this->apply_infos_size();
  for (int i = 0; i < this->apply_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_process_apply_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_process_apply_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_process_apply_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_process_apply_info_ack::MergeFrom(const db_process_apply_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_infos_.MergeFrom(from.apply_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_process_apply_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_process_apply_info_ack::CopyFrom(const db_process_apply_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_process_apply_info_ack::IsInitialized() const {

  return true;
}

void db_process_apply_info_ack::Swap(db_process_apply_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    apply_infos_.Swap(&other->apply_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_process_apply_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_process_apply_info_ack_descriptor_;
  metadata.reflection = db_process_apply_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_search_friend_req::kProtoIdFieldNumber;
const int db_search_friend_req::kUuidFieldNumber;
const int db_search_friend_req::kAreaIdFieldNumber;
const int db_search_friend_req::kTypeFieldNumber;
const int db_search_friend_req::kContentFieldNumber;
#endif  // !_MSC_VER

db_search_friend_req::db_search_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_search_friend_req::InitAsDefaultInstance() {
}

db_search_friend_req::db_search_friend_req(const db_search_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_search_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 276;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_search_friend_req::~db_search_friend_req() {
  SharedDtor();
}

void db_search_friend_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_search_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_search_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_search_friend_req_descriptor_;
}

const db_search_friend_req& db_search_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_search_friend_req* db_search_friend_req::default_instance_ = NULL;

db_search_friend_req* db_search_friend_req::New() const {
  return new db_search_friend_req;
}

void db_search_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 276;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_search_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_search_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_search_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_search_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_search_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_search_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_search_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_search_friend_req::MergeFrom(const db_search_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_search_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_search_friend_req::CopyFrom(const db_search_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_search_friend_req::IsInitialized() const {

  return true;
}

void db_search_friend_req::Swap(db_search_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_search_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_search_friend_req_descriptor_;
  metadata.reflection = db_search_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_search_friend_ack::kProtoIdFieldNumber;
const int db_search_friend_ack::kUuidFieldNumber;
const int db_search_friend_ack::kRetFieldNumber;
const int db_search_friend_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

db_search_friend_ack::db_search_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_search_friend_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

db_search_friend_ack::db_search_friend_ack(const db_search_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_search_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 277;
  uuid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_search_friend_ack::~db_search_friend_ack() {
  SharedDtor();
}

void db_search_friend_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void db_search_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_search_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_search_friend_ack_descriptor_;
}

const db_search_friend_ack& db_search_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_search_friend_ack* db_search_friend_ack::default_instance_ = NULL;

db_search_friend_ack* db_search_friend_ack::New() const {
  return new db_search_friend_ack;
}

void db_search_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 277;
    uuid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_search_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.friend_base_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_search_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional .SProtoSpace.friend_base_info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_search_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional .SProtoSpace.friend_base_info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_search_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.friend_base_info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_search_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_search_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_search_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_search_friend_ack::MergeFrom(const db_search_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::friend_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_search_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_search_friend_ack::CopyFrom(const db_search_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_search_friend_ack::IsInitialized() const {

  return true;
}

void db_search_friend_ack::Swap(db_search_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_search_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_search_friend_ack_descriptor_;
  metadata.reflection = db_search_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_save_friend_opt_req::kProtoIdFieldNumber;
const int db_save_friend_opt_req::kUuidFieldNumber;
const int db_save_friend_opt_req::kTargetIdFieldNumber;
const int db_save_friend_opt_req::kTypeFieldNumber;
const int db_save_friend_opt_req::kOptTimeFieldNumber;
const int db_save_friend_opt_req::kStatusFieldNumber;
#endif  // !_MSC_VER

db_save_friend_opt_req::db_save_friend_opt_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_save_friend_opt_req::InitAsDefaultInstance() {
}

db_save_friend_opt_req::db_save_friend_opt_req(const db_save_friend_opt_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_save_friend_opt_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 278;
  uuid_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  opt_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_save_friend_opt_req::~db_save_friend_opt_req() {
  SharedDtor();
}

void db_save_friend_opt_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_save_friend_opt_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_save_friend_opt_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_save_friend_opt_req_descriptor_;
}

const db_save_friend_opt_req& db_save_friend_opt_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_save_friend_opt_req* db_save_friend_opt_req::default_instance_ = NULL;

db_save_friend_opt_req* db_save_friend_opt_req::New() const {
  return new db_save_friend_opt_req;
}

void db_save_friend_opt_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 278;
    uuid_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    opt_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_save_friend_opt_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opt_time;
        break;
      }

      // optional uint64 opt_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_time_)));
          set_has_opt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_save_friend_opt_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint64 opt_time = 5;
  if (has_opt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->opt_time(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_save_friend_opt_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint64 opt_time = 5;
  if (has_opt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->opt_time(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_save_friend_opt_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 opt_time = 5;
    if (has_opt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_time());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_save_friend_opt_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_save_friend_opt_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_save_friend_opt_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_save_friend_opt_req::MergeFrom(const db_save_friend_opt_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt_time()) {
      set_opt_time(from.opt_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_save_friend_opt_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_save_friend_opt_req::CopyFrom(const db_save_friend_opt_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_save_friend_opt_req::IsInitialized() const {

  return true;
}

void db_save_friend_opt_req::Swap(db_save_friend_opt_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(target_id_, other->target_id_);
    std::swap(type_, other->type_);
    std::swap(opt_time_, other->opt_time_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_save_friend_opt_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_save_friend_opt_req_descriptor_;
  metadata.reflection = db_save_friend_opt_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_record_info::kUuidFieldNumber;
const int opt_record_info::kTargetIdFieldNumber;
const int opt_record_info::kTypeFieldNumber;
const int opt_record_info::kOptTimeFieldNumber;
const int opt_record_info::kStatusFieldNumber;
#endif  // !_MSC_VER

opt_record_info::opt_record_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void opt_record_info::InitAsDefaultInstance() {
}

opt_record_info::opt_record_info(const opt_record_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void opt_record_info::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  opt_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_record_info::~opt_record_info() {
  SharedDtor();
}

void opt_record_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void opt_record_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_record_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_record_info_descriptor_;
}

const opt_record_info& opt_record_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

opt_record_info* opt_record_info::default_instance_ = NULL;

opt_record_info* opt_record_info::New() const {
  return new opt_record_info;
}

void opt_record_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    opt_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_record_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt_time;
        break;
      }

      // optional uint64 opt_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_time_)));
          set_has_opt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void opt_record_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 opt_time = 4;
  if (has_opt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opt_time(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* opt_record_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 opt_time = 4;
  if (has_opt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->opt_time(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int opt_record_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 opt_time = 4;
    if (has_opt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_time());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_record_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_record_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_record_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_record_info::MergeFrom(const opt_record_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opt_time()) {
      set_opt_time(from.opt_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_record_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_record_info::CopyFrom(const opt_record_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_record_info::IsInitialized() const {

  return true;
}

void opt_record_info::Swap(opt_record_info* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(target_id_, other->target_id_);
    std::swap(type_, other->type_);
    std::swap(opt_time_, other->opt_time_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_record_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_record_info_descriptor_;
  metadata.reflection = opt_record_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_opt_record_req::kProtoIdFieldNumber;
const int db_check_opt_record_req::kUuidFieldNumber;
const int db_check_opt_record_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

db_check_opt_record_req::db_check_opt_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_opt_record_req::InitAsDefaultInstance() {
}

db_check_opt_record_req::db_check_opt_record_req(const db_check_opt_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_opt_record_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 279;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_opt_record_req::~db_check_opt_record_req() {
  SharedDtor();
}

void db_check_opt_record_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_opt_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_opt_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_opt_record_req_descriptor_;
}

const db_check_opt_record_req& db_check_opt_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_opt_record_req* db_check_opt_record_req::default_instance_ = NULL;

db_check_opt_record_req* db_check_opt_record_req::New() const {
  return new db_check_opt_record_req;
}

void db_check_opt_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 279;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_opt_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_opt_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_opt_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_opt_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_opt_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_opt_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_opt_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_opt_record_req::MergeFrom(const db_check_opt_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_opt_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_opt_record_req::CopyFrom(const db_check_opt_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_opt_record_req::IsInitialized() const {

  return true;
}

void db_check_opt_record_req::Swap(db_check_opt_record_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_opt_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_opt_record_req_descriptor_;
  metadata.reflection = db_check_opt_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_opt_record_ack::kProtoIdFieldNumber;
const int db_check_opt_record_ack::kUuidFieldNumber;
const int db_check_opt_record_ack::kAreaIdFieldNumber;
const int db_check_opt_record_ack::kInfosFieldNumber;
#endif  // !_MSC_VER

db_check_opt_record_ack::db_check_opt_record_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_opt_record_ack::InitAsDefaultInstance() {
}

db_check_opt_record_ack::db_check_opt_record_ack(const db_check_opt_record_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_opt_record_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 280;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_opt_record_ack::~db_check_opt_record_ack() {
  SharedDtor();
}

void db_check_opt_record_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_opt_record_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_opt_record_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_opt_record_ack_descriptor_;
}

const db_check_opt_record_ack& db_check_opt_record_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_opt_record_ack* db_check_opt_record_ack::default_instance_ = NULL;

db_check_opt_record_ack* db_check_opt_record_ack::New() const {
  return new db_check_opt_record_ack;
}

void db_check_opt_record_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 280;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_opt_record_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.opt_record_info infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_opt_record_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // repeated .SProtoSpace.opt_record_info infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_opt_record_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // repeated .SProtoSpace.opt_record_info infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_opt_record_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  // repeated .SProtoSpace.opt_record_info infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_opt_record_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_opt_record_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_opt_record_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_opt_record_ack::MergeFrom(const db_check_opt_record_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_opt_record_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_opt_record_ack::CopyFrom(const db_check_opt_record_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_opt_record_ack::IsInitialized() const {

  return true;
}

void db_check_opt_record_ack::Swap(db_check_opt_record_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_opt_record_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_opt_record_ack_descriptor_;
  metadata.reflection = db_check_opt_record_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_opt_record_req::kProtoIdFieldNumber;
const int db_update_opt_record_req::kUuidFieldNumber;
const int db_update_opt_record_req::kAreaIdFieldNumber;
const int db_update_opt_record_req::kInfosFieldNumber;
#endif  // !_MSC_VER

db_update_opt_record_req::db_update_opt_record_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_opt_record_req::InitAsDefaultInstance() {
}

db_update_opt_record_req::db_update_opt_record_req(const db_update_opt_record_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_opt_record_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 281;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_opt_record_req::~db_update_opt_record_req() {
  SharedDtor();
}

void db_update_opt_record_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_update_opt_record_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_opt_record_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_opt_record_req_descriptor_;
}

const db_update_opt_record_req& db_update_opt_record_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_update_opt_record_req* db_update_opt_record_req::default_instance_ = NULL;

db_update_opt_record_req* db_update_opt_record_req::New() const {
  return new db_update_opt_record_req;
}

void db_update_opt_record_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 281;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_opt_record_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.opt_record_info infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_opt_record_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // repeated .SProtoSpace.opt_record_info infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_opt_record_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // repeated .SProtoSpace.opt_record_info infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_opt_record_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  // repeated .SProtoSpace.opt_record_info infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_opt_record_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_opt_record_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_opt_record_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_opt_record_req::MergeFrom(const db_update_opt_record_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_opt_record_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_opt_record_req::CopyFrom(const db_update_opt_record_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_opt_record_req::IsInitialized() const {

  return true;
}

void db_update_opt_record_req::Swap(db_update_opt_record_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_opt_record_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_opt_record_req_descriptor_;
  metadata.reflection = db_update_opt_record_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_recommend_friend_req::kProtoIdFieldNumber;
const int db_get_recommend_friend_req::kUuidFieldNumber;
const int db_get_recommend_friend_req::kAreaIdFieldNumber;
const int db_get_recommend_friend_req::kLvFieldNumber;
const int db_get_recommend_friend_req::kGradeFieldNumber;
const int db_get_recommend_friend_req::kSexFieldNumber;
const int db_get_recommend_friend_req::kCountFieldNumber;
const int db_get_recommend_friend_req::kFdIdsFieldNumber;
#endif  // !_MSC_VER

db_get_recommend_friend_req::db_get_recommend_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_recommend_friend_req::InitAsDefaultInstance() {
}

db_get_recommend_friend_req::db_get_recommend_friend_req(const db_get_recommend_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_recommend_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 282;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  lv_ = 0u;
  grade_ = 0u;
  sex_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_recommend_friend_req::~db_get_recommend_friend_req() {
  SharedDtor();
}

void db_get_recommend_friend_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_recommend_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_recommend_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_recommend_friend_req_descriptor_;
}

const db_get_recommend_friend_req& db_get_recommend_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_recommend_friend_req* db_get_recommend_friend_req::default_instance_ = NULL;

db_get_recommend_friend_req* db_get_recommend_friend_req::New() const {
  return new db_get_recommend_friend_req;
}

void db_get_recommend_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 282;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    lv_ = 0u;
    grade_ = 0u;
    sex_ = 0u;
    count_ = 0u;
  }
  fd_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_recommend_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fd_ids;
        break;
      }

      // repeated uint64 fd_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_fd_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fd_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fd_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_recommend_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // optional uint32 grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->grade(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // repeated uint64 fd_ids = 8;
  for (int i = 0; i < this->fd_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->fd_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_recommend_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // optional uint32 grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->grade(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // repeated uint64 fd_ids = 8;
  for (int i = 0; i < this->fd_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->fd_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_recommend_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint64 fd_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->fd_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fd_ids(i));
    }
    total_size += 1 * this->fd_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_recommend_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_recommend_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_recommend_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_recommend_friend_req::MergeFrom(const db_get_recommend_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  fd_ids_.MergeFrom(from.fd_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_recommend_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_recommend_friend_req::CopyFrom(const db_get_recommend_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_recommend_friend_req::IsInitialized() const {

  return true;
}

void db_get_recommend_friend_req::Swap(db_get_recommend_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(lv_, other->lv_);
    std::swap(grade_, other->grade_);
    std::swap(sex_, other->sex_);
    std::swap(count_, other->count_);
    fd_ids_.Swap(&other->fd_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_recommend_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_recommend_friend_req_descriptor_;
  metadata.reflection = db_get_recommend_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_recommend_friend_ack::kProtoIdFieldNumber;
const int db_get_recommend_friend_ack::kUuidFieldNumber;
const int db_get_recommend_friend_ack::kAreaIdFieldNumber;
const int db_get_recommend_friend_ack::kFdInfosFieldNumber;
#endif  // !_MSC_VER

db_get_recommend_friend_ack::db_get_recommend_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_recommend_friend_ack::InitAsDefaultInstance() {
}

db_get_recommend_friend_ack::db_get_recommend_friend_ack(const db_get_recommend_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_recommend_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 283;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_recommend_friend_ack::~db_get_recommend_friend_ack() {
  SharedDtor();
}

void db_get_recommend_friend_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_recommend_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_recommend_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_recommend_friend_ack_descriptor_;
}

const db_get_recommend_friend_ack& db_get_recommend_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_recommend_friend_ack* db_get_recommend_friend_ack::default_instance_ = NULL;

db_get_recommend_friend_ack* db_get_recommend_friend_ack::New() const {
  return new db_get_recommend_friend_ack;
}

void db_get_recommend_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 283;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  fd_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_recommend_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fd_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info fd_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fd_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fd_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fd_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_recommend_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fd_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_recommend_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fd_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_recommend_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  total_size += 1 * this->fd_infos_size();
  for (int i = 0; i < this->fd_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fd_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_recommend_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_recommend_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_recommend_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_recommend_friend_ack::MergeFrom(const db_get_recommend_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fd_infos_.MergeFrom(from.fd_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_recommend_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_recommend_friend_ack::CopyFrom(const db_get_recommend_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_recommend_friend_ack::IsInitialized() const {

  return true;
}

void db_get_recommend_friend_ack::Swap(db_get_recommend_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    fd_infos_.Swap(&other->fd_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_recommend_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_recommend_friend_ack_descriptor_;
  metadata.reflection = db_get_recommend_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_get_role_data_req::kProtoidFieldNumber;
const int gs_get_role_data_req::kRoleIdFieldNumber;
const int gs_get_role_data_req::kGateIdFieldNumber;
const int gs_get_role_data_req::kAreaIdFieldNumber;
const int gs_get_role_data_req::kOnlineTypeFieldNumber;
const int gs_get_role_data_req::kNewDbSvrIdFieldNumber;
const int gs_get_role_data_req::kIsSwitchSceneFieldNumber;
const int gs_get_role_data_req::kSceneIdFieldNumber;
const int gs_get_role_data_req::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

gs_get_role_data_req::gs_get_role_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_get_role_data_req::InitAsDefaultInstance() {
}

gs_get_role_data_req::gs_get_role_data_req(const gs_get_role_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_get_role_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 220;
  role_id_ = GOOGLE_ULONGLONG(0);
  gate_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  online_type_ = 0u;
  new_db_svr_id_ = GOOGLE_ULONGLONG(0);
  is_switch_scene_ = false;
  scene_id_ = 0u;
  scene_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_get_role_data_req::~gs_get_role_data_req() {
  SharedDtor();
}

void gs_get_role_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_get_role_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_get_role_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_get_role_data_req_descriptor_;
}

const gs_get_role_data_req& gs_get_role_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

gs_get_role_data_req* gs_get_role_data_req::default_instance_ = NULL;

gs_get_role_data_req* gs_get_role_data_req::New() const {
  return new gs_get_role_data_req;
}

void gs_get_role_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 220;
    role_id_ = GOOGLE_ULONGLONG(0);
    gate_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    online_type_ = 0u;
    new_db_svr_id_ = GOOGLE_ULONGLONG(0);
    is_switch_scene_ = false;
    scene_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scene_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_get_role_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gate_id;
        break;
      }

      // optional uint64 gate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_online_type;
        break;
      }

      // optional uint32 online_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_type_)));
          set_has_online_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_db_svr_id;
        break;
      }

      // optional uint64 new_db_svr_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_db_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_db_svr_id_)));
          set_has_new_db_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_switch_scene;
        break;
      }

      // optional bool is_switch_scene = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_switch_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_scene_)));
          set_has_is_switch_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_get_role_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 gate_id = 3;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gate_id(), output);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->area_id(), output);
  }

  // optional uint32 online_type = 5;
  if (has_online_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->online_type(), output);
  }

  // optional uint64 new_db_svr_id = 6;
  if (has_new_db_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->new_db_svr_id(), output);
  }

  // optional bool is_switch_scene = 7 [default = false];
  if (has_is_switch_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_switch_scene(), output);
  }

  // optional uint32 scene_id = 8 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_id(), output);
  }

  // optional uint32 scene_type = 9 [default = 0];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_get_role_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 gate_id = 3;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gate_id(), target);
  }

  // optional uint32 area_id = 4;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->area_id(), target);
  }

  // optional uint32 online_type = 5;
  if (has_online_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->online_type(), target);
  }

  // optional uint64 new_db_svr_id = 6;
  if (has_new_db_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->new_db_svr_id(), target);
  }

  // optional bool is_switch_scene = 7 [default = false];
  if (has_is_switch_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_switch_scene(), target);
  }

  // optional uint32 scene_id = 8 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_id(), target);
  }

  // optional uint32 scene_type = 9 [default = 0];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_get_role_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 gate_id = 3;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gate_id());
    }

    // optional uint32 area_id = 4;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 online_type = 5;
    if (has_online_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_type());
    }

    // optional uint64 new_db_svr_id = 6;
    if (has_new_db_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_db_svr_id());
    }

    // optional bool is_switch_scene = 7 [default = false];
    if (has_is_switch_scene()) {
      total_size += 1 + 1;
    }

    // optional uint32 scene_id = 8 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 scene_type = 9 [default = 0];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_get_role_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_get_role_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_get_role_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_get_role_data_req::MergeFrom(const gs_get_role_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_online_type()) {
      set_online_type(from.online_type());
    }
    if (from.has_new_db_svr_id()) {
      set_new_db_svr_id(from.new_db_svr_id());
    }
    if (from.has_is_switch_scene()) {
      set_is_switch_scene(from.is_switch_scene());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_get_role_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_get_role_data_req::CopyFrom(const gs_get_role_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_get_role_data_req::IsInitialized() const {

  return true;
}

void gs_get_role_data_req::Swap(gs_get_role_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(online_type_, other->online_type_);
    std::swap(new_db_svr_id_, other->new_db_svr_id_);
    std::swap(is_switch_scene_, other->is_switch_scene_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_get_role_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_get_role_data_req_descriptor_;
  metadata.reflection = gs_get_role_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_data_ack::kProtoidFieldNumber;
const int db_role_data_ack::kRetCodeFieldNumber;
const int db_role_data_ack::kRoleIdFieldNumber;
const int db_role_data_ack::kGateIdFieldNumber;
const int db_role_data_ack::kAreaIdFieldNumber;
const int db_role_data_ack::kOnlineTypeFieldNumber;
const int db_role_data_ack::kDataFieldNumber;
const int db_role_data_ack::kIsSwitchSceneFieldNumber;
const int db_role_data_ack::kSceneIdFieldNumber;
const int db_role_data_ack::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

db_role_data_ack::db_role_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_data_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::db_role_all_data*>(&::SProtoSpace::db_role_all_data::default_instance());
}

db_role_data_ack::db_role_data_ack(const db_role_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 221;
  ret_code_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  gate_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  online_type_ = false;
  data_ = NULL;
  is_switch_scene_ = false;
  scene_id_ = 0u;
  scene_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_data_ack::~db_role_data_ack() {
  SharedDtor();
}

void db_role_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_role_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_data_ack_descriptor_;
}

const db_role_data_ack& db_role_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_data_ack* db_role_data_ack::default_instance_ = NULL;

db_role_data_ack* db_role_data_ack::New() const {
  return new db_role_data_ack;
}

void db_role_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 221;
    ret_code_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    gate_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    online_type_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::db_role_all_data::Clear();
    }
    is_switch_scene_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scene_id_ = 0u;
    scene_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional int32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gate_id;
        break;
      }

      // optional uint64 gate_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online_type;
        break;
      }

      // optional bool online_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_type_)));
          set_has_online_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.db_role_all_data data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_switch_scene;
        break;
      }

      // optional bool is_switch_scene = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_switch_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_scene_)));
          set_has_is_switch_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 gate_id = 4;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gate_id(), output);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_id(), output);
  }

  // optional bool online_type = 6;
  if (has_online_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->online_type(), output);
  }

  // optional .SProtoSpace.db_role_all_data data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(), output);
  }

  // optional bool is_switch_scene = 8 [default = false];
  if (has_is_switch_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_switch_scene(), output);
  }

  // optional uint32 scene_id = 9 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scene_id(), output);
  }

  // optional uint32 scene_type = 10 [default = 0];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 gate_id = 4;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gate_id(), target);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->area_id(), target);
  }

  // optional bool online_type = 6;
  if (has_online_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->online_type(), target);
  }

  // optional .SProtoSpace.db_role_all_data data = 7;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(), target);
  }

  // optional bool is_switch_scene = 8 [default = false];
  if (has_is_switch_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_switch_scene(), target);
  }

  // optional uint32 scene_id = 9 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scene_id(), target);
  }

  // optional uint32 scene_type = 10 [default = 0];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 gate_id = 4;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gate_id());
    }

    // optional uint32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional bool online_type = 6;
    if (has_online_type()) {
      total_size += 1 + 1;
    }

    // optional .SProtoSpace.db_role_all_data data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool is_switch_scene = 8 [default = false];
    if (has_is_switch_scene()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 scene_id = 9 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 10 [default = 0];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_data_ack::MergeFrom(const db_role_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_online_type()) {
      set_online_type(from.online_type());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::db_role_all_data::MergeFrom(from.data());
    }
    if (from.has_is_switch_scene()) {
      set_is_switch_scene(from.is_switch_scene());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_data_ack::CopyFrom(const db_role_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_data_ack::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void db_role_data_ack::Swap(db_role_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_id_, other->role_id_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(online_type_, other->online_type_);
    std::swap(data_, other->data_);
    std::swap(is_switch_scene_, other->is_switch_scene_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_data_ack_descriptor_;
  metadata.reflection = db_role_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_role_leave_game::kProtoidFieldNumber;
const int gs_role_leave_game::kRoleIdFieldNumber;
#endif  // !_MSC_VER

gs_role_leave_game::gs_role_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_role_leave_game::InitAsDefaultInstance() {
}

gs_role_leave_game::gs_role_leave_game(const gs_role_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_role_leave_game::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 222;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_role_leave_game::~gs_role_leave_game() {
  SharedDtor();
}

void gs_role_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_role_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_role_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_role_leave_game_descriptor_;
}

const gs_role_leave_game& gs_role_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

gs_role_leave_game* gs_role_leave_game::default_instance_ = NULL;

gs_role_leave_game* gs_role_leave_game::New() const {
  return new gs_role_leave_game;
}

void gs_role_leave_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 222;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_role_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_role_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_role_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_role_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_role_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_role_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_role_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_role_leave_game::MergeFrom(const gs_role_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_role_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_role_leave_game::CopyFrom(const gs_role_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_role_leave_game::IsInitialized() const {

  return true;
}

void gs_role_leave_game::Swap(gs_role_leave_game* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_role_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_role_leave_game_descriptor_;
  metadata.reflection = gs_role_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int save_role_req::kProtoidFieldNumber;
const int save_role_req::kRoleIdFieldNumber;
const int save_role_req::kDataFieldNumber;
const int save_role_req::kModeFieldNumber;
#endif  // !_MSC_VER

save_role_req::save_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void save_role_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::db_role_all_data*>(&::SProtoSpace::db_role_all_data::default_instance());
}

save_role_req::save_role_req(const save_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void save_role_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 223;
  role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

save_role_req::~save_role_req() {
  SharedDtor();
}

void save_role_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void save_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* save_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return save_role_req_descriptor_;
}

const save_role_req& save_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

save_role_req* save_role_req::default_instance_ = NULL;

save_role_req* save_role_req::New() const {
  return new save_role_req;
}

void save_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 223;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::db_role_all_data::Clear();
    }
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool save_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.db_role_all_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional .SProtoSpace.ESaveDataMode mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESaveDataMode_IsValid(value)) {
            set_mode(static_cast< ::SProtoSpace::ESaveDataMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void save_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.db_role_all_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional .SProtoSpace.ESaveDataMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* save_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.db_role_all_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional .SProtoSpace.ESaveDataMode mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int save_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_role_all_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .SProtoSpace.ESaveDataMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void save_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const save_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const save_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void save_role_req::MergeFrom(const save_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::db_role_all_data::MergeFrom(from.data());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void save_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void save_role_req::CopyFrom(const save_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool save_role_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void save_role_req::Swap(save_role_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(data_, other->data_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata save_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = save_role_req_descriptor_;
  metadata.reflection = save_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_like_req::kProtoidFieldNumber;
const int db_role_show_like_req::kRoleIdFieldNumber;
const int db_role_show_like_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_like_req::db_role_show_like_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_like_req::InitAsDefaultInstance() {
}

db_role_show_like_req::db_role_show_like_req(const db_role_show_like_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_like_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 236;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_like_req::~db_role_show_like_req() {
  SharedDtor();
}

void db_role_show_like_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_like_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_like_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_like_req_descriptor_;
}

const db_role_show_like_req& db_role_show_like_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_like_req* db_role_show_like_req::default_instance_ = NULL;

db_role_show_like_req* db_role_show_like_req::New() const {
  return new db_role_show_like_req;
}

void db_role_show_like_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 236;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_like_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_like_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_like_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_like_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_like_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_like_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_like_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_like_req::MergeFrom(const db_role_show_like_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_like_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_like_req::CopyFrom(const db_role_show_like_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_like_req::IsInitialized() const {

  return true;
}

void db_role_show_like_req::Swap(db_role_show_like_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_like_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_like_req_descriptor_;
  metadata.reflection = db_role_show_like_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_like_ack::kProtoidFieldNumber;
const int db_role_show_like_ack::kResultFieldNumber;
const int db_role_show_like_ack::kRoleIdFieldNumber;
const int db_role_show_like_ack::kShowRoleIdFieldNumber;
const int db_role_show_like_ack::kLikesFieldNumber;
#endif  // !_MSC_VER

db_role_show_like_ack::db_role_show_like_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_like_ack::InitAsDefaultInstance() {
}

db_role_show_like_ack::db_role_show_like_ack(const db_role_show_like_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_like_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 237;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  likes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_like_ack::~db_role_show_like_ack() {
  SharedDtor();
}

void db_role_show_like_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_like_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_like_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_like_ack_descriptor_;
}

const db_role_show_like_ack& db_role_show_like_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_like_ack* db_role_show_like_ack::default_instance_ = NULL;

db_role_show_like_ack* db_role_show_like_ack::New() const {
  return new db_role_show_like_ack;
}

void db_role_show_like_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 237;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    likes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_like_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_likes;
        break;
      }

      // optional int32 likes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
          set_has_likes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_like_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional int32 likes = 5;
  if (has_likes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->likes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_like_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional int32 likes = 5;
  if (has_likes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->likes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_like_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional int32 likes = 5;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_like_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_like_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_like_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_like_ack::MergeFrom(const db_role_show_like_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_likes()) {
      set_likes(from.likes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_like_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_like_ack::CopyFrom(const db_role_show_like_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_like_ack::IsInitialized() const {

  return true;
}

void db_role_show_like_ack::Swap(db_role_show_like_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(likes_, other->likes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_like_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_like_ack_descriptor_;
  metadata.reflection = db_role_show_like_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_comment_req::kProtoidFieldNumber;
const int db_role_show_comment_req::kRoleIdFieldNumber;
const int db_role_show_comment_req::kShowRoleIdFieldNumber;
const int db_role_show_comment_req::kCommentFieldNumber;
#endif  // !_MSC_VER

db_role_show_comment_req::db_role_show_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_comment_req::InitAsDefaultInstance() {
  comment_ = const_cast< ::SProtoSpace::comment_info*>(&::SProtoSpace::comment_info::default_instance());
}

db_role_show_comment_req::db_role_show_comment_req(const db_role_show_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 238;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_comment_req::~db_role_show_comment_req() {
  SharedDtor();
}

void db_role_show_comment_req::SharedDtor() {
  if (this != default_instance_) {
    delete comment_;
  }
}

void db_role_show_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_comment_req_descriptor_;
}

const db_role_show_comment_req& db_role_show_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_comment_req* db_role_show_comment_req::default_instance_ = NULL;

db_role_show_comment_req* db_role_show_comment_req::New() const {
  return new db_role_show_comment_req;
}

void db_role_show_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 238;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }

      // optional .SProtoSpace.comment_info comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.comment_info comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.comment_info comment = 4;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.comment_info comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_comment_req::MergeFrom(const db_role_show_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_comment()) {
      mutable_comment()->::SProtoSpace::comment_info::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_comment_req::CopyFrom(const db_role_show_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_comment_req::IsInitialized() const {

  return true;
}

void db_role_show_comment_req::Swap(db_role_show_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_comment_req_descriptor_;
  metadata.reflection = db_role_show_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_comment_ack::kProtoidFieldNumber;
const int db_role_show_comment_ack::kResultFieldNumber;
const int db_role_show_comment_ack::kRoleIdFieldNumber;
const int db_role_show_comment_ack::kShowRoleIdFieldNumber;
const int db_role_show_comment_ack::kCommentFieldNumber;
#endif  // !_MSC_VER

db_role_show_comment_ack::db_role_show_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_comment_ack::InitAsDefaultInstance() {
  comment_ = const_cast< ::SProtoSpace::comment_info*>(&::SProtoSpace::comment_info::default_instance());
}

db_role_show_comment_ack::db_role_show_comment_ack(const db_role_show_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 239;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_comment_ack::~db_role_show_comment_ack() {
  SharedDtor();
}

void db_role_show_comment_ack::SharedDtor() {
  if (this != default_instance_) {
    delete comment_;
  }
}

void db_role_show_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_comment_ack_descriptor_;
}

const db_role_show_comment_ack& db_role_show_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_comment_ack* db_role_show_comment_ack::default_instance_ = NULL;

db_role_show_comment_ack* db_role_show_comment_ack::New() const {
  return new db_role_show_comment_ack;
}

void db_role_show_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 239;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // optional .SProtoSpace.comment_info comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional .SProtoSpace.comment_info comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional .SProtoSpace.comment_info comment = 5;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.comment_info comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_comment_ack::MergeFrom(const db_role_show_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_comment()) {
      mutable_comment()->::SProtoSpace::comment_info::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_comment_ack::CopyFrom(const db_role_show_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_comment_ack::IsInitialized() const {

  return true;
}

void db_role_show_comment_ack::Swap(db_role_show_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_comment_ack_descriptor_;
  metadata.reflection = db_role_show_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_delete_comment_req::kProtoidFieldNumber;
const int db_role_show_delete_comment_req::kShowRoleIdFieldNumber;
const int db_role_show_delete_comment_req::kRoleIdFieldNumber;
const int db_role_show_delete_comment_req::kToRoleIdFieldNumber;
const int db_role_show_delete_comment_req::kTimeFieldNumber;
#endif  // !_MSC_VER

db_role_show_delete_comment_req::db_role_show_delete_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_delete_comment_req::InitAsDefaultInstance() {
}

db_role_show_delete_comment_req::db_role_show_delete_comment_req(const db_role_show_delete_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_delete_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 240;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_delete_comment_req::~db_role_show_delete_comment_req() {
  SharedDtor();
}

void db_role_show_delete_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_delete_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_delete_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_delete_comment_req_descriptor_;
}

const db_role_show_delete_comment_req& db_role_show_delete_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_delete_comment_req* db_role_show_delete_comment_req::default_instance_ = NULL;

db_role_show_delete_comment_req* db_role_show_delete_comment_req::New() const {
  return new db_role_show_delete_comment_req;
}

void db_role_show_delete_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 240;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    to_role_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_delete_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_delete_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_role_id(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_delete_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_role_id(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_delete_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 to_role_id = 4;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_delete_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_delete_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_delete_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_delete_comment_req::MergeFrom(const db_role_show_delete_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_delete_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_delete_comment_req::CopyFrom(const db_role_show_delete_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_delete_comment_req::IsInitialized() const {

  return true;
}

void db_role_show_delete_comment_req::Swap(db_role_show_delete_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_delete_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_delete_comment_req_descriptor_;
  metadata.reflection = db_role_show_delete_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_delete_comment_ack::kProtoidFieldNumber;
const int db_role_show_delete_comment_ack::kResultFieldNumber;
const int db_role_show_delete_comment_ack::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_delete_comment_ack::db_role_show_delete_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_delete_comment_ack::InitAsDefaultInstance() {
}

db_role_show_delete_comment_ack::db_role_show_delete_comment_ack(const db_role_show_delete_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_delete_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 241;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_delete_comment_ack::~db_role_show_delete_comment_ack() {
  SharedDtor();
}

void db_role_show_delete_comment_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_delete_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_delete_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_delete_comment_ack_descriptor_;
}

const db_role_show_delete_comment_ack& db_role_show_delete_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_delete_comment_ack* db_role_show_delete_comment_ack::default_instance_ = NULL;

db_role_show_delete_comment_ack* db_role_show_delete_comment_ack::New() const {
  return new db_role_show_delete_comment_ack;
}

void db_role_show_delete_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 241;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_delete_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_delete_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_delete_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_delete_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_delete_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_delete_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_delete_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_delete_comment_ack::MergeFrom(const db_role_show_delete_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_delete_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_delete_comment_ack::CopyFrom(const db_role_show_delete_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_delete_comment_ack::IsInitialized() const {

  return true;
}

void db_role_show_delete_comment_ack::Swap(db_role_show_delete_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_delete_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_delete_comment_ack_descriptor_;
  metadata.reflection = db_role_show_delete_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_comment_req::kProtoidFieldNumber;
const int db_role_show_get_comment_req::kRoleIdFieldNumber;
const int db_role_show_get_comment_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_comment_req::db_role_show_get_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_comment_req::InitAsDefaultInstance() {
}

db_role_show_get_comment_req::db_role_show_get_comment_req(const db_role_show_get_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 242;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_comment_req::~db_role_show_get_comment_req() {
  SharedDtor();
}

void db_role_show_get_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_get_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_comment_req_descriptor_;
}

const db_role_show_get_comment_req& db_role_show_get_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_comment_req* db_role_show_get_comment_req::default_instance_ = NULL;

db_role_show_get_comment_req* db_role_show_get_comment_req::New() const {
  return new db_role_show_get_comment_req;
}

void db_role_show_get_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 242;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_comment_req::MergeFrom(const db_role_show_get_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_comment_req::CopyFrom(const db_role_show_get_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_comment_req::IsInitialized() const {

  return true;
}

void db_role_show_get_comment_req::Swap(db_role_show_get_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_comment_req_descriptor_;
  metadata.reflection = db_role_show_get_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_comment_ack::kProtoidFieldNumber;
const int db_role_show_get_comment_ack::kResultFieldNumber;
const int db_role_show_get_comment_ack::kRoleIdFieldNumber;
const int db_role_show_get_comment_ack::kShowRoleIdFieldNumber;
const int db_role_show_get_comment_ack::kCommentAllFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_comment_ack::db_role_show_get_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_comment_ack::InitAsDefaultInstance() {
  comment_all_ = const_cast< ::SProtoSpace::comment_all*>(&::SProtoSpace::comment_all::default_instance());
}

db_role_show_get_comment_ack::db_role_show_get_comment_ack(const db_role_show_get_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 243;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  comment_all_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_comment_ack::~db_role_show_get_comment_ack() {
  SharedDtor();
}

void db_role_show_get_comment_ack::SharedDtor() {
  if (this != default_instance_) {
    delete comment_all_;
  }
}

void db_role_show_get_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_comment_ack_descriptor_;
}

const db_role_show_get_comment_ack& db_role_show_get_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_comment_ack* db_role_show_get_comment_ack::default_instance_ = NULL;

db_role_show_get_comment_ack* db_role_show_get_comment_ack::New() const {
  return new db_role_show_get_comment_ack;
}

void db_role_show_get_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 243;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_comment_all()) {
      if (comment_all_ != NULL) comment_all_->::SProtoSpace::comment_all::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment_all;
        break;
      }

      // optional .SProtoSpace.comment_all comment_all = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_all()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional .SProtoSpace.comment_all comment_all = 5;
  if (has_comment_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->comment_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional .SProtoSpace.comment_all comment_all = 5;
  if (has_comment_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->comment_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.comment_all comment_all = 5;
    if (has_comment_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_all());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_comment_ack::MergeFrom(const db_role_show_get_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_comment_all()) {
      mutable_comment_all()->::SProtoSpace::comment_all::MergeFrom(from.comment_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_comment_ack::CopyFrom(const db_role_show_get_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_comment_ack::IsInitialized() const {

  return true;
}

void db_role_show_get_comment_ack::Swap(db_role_show_get_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(comment_all_, other->comment_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_comment_ack_descriptor_;
  metadata.reflection = db_role_show_get_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_change_name_req::kProtoidFieldNumber;
const int db_role_show_change_name_req::kAccountFieldNumber;
const int db_role_show_change_name_req::kRoleIdFieldNumber;
const int db_role_show_change_name_req::kNewNameFieldNumber;
#endif  // !_MSC_VER

db_role_show_change_name_req::db_role_show_change_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_change_name_req::InitAsDefaultInstance() {
}

db_role_show_change_name_req::db_role_show_change_name_req(const db_role_show_change_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_change_name_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 244;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_ULONGLONG(0);
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_change_name_req::~db_role_show_change_name_req() {
  SharedDtor();
}

void db_role_show_change_name_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_change_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_change_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_change_name_req_descriptor_;
}

const db_role_show_change_name_req& db_role_show_change_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_change_name_req* db_role_show_change_name_req::default_instance_ = NULL;

db_role_show_change_name_req* db_role_show_change_name_req::New() const {
  return new db_role_show_change_name_req;
}

void db_role_show_change_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 244;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_change_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_name;
        break;
      }

      // optional string new_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_change_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional string new_name = 4;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_change_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional string new_name = 4;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_change_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string new_name = 4;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_change_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_change_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_change_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_change_name_req::MergeFrom(const db_role_show_change_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_change_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_change_name_req::CopyFrom(const db_role_show_change_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_change_name_req::IsInitialized() const {

  return true;
}

void db_role_show_change_name_req::Swap(db_role_show_change_name_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(role_id_, other->role_id_);
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_change_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_change_name_req_descriptor_;
  metadata.reflection = db_role_show_change_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_change_name_ack::kProtoidFieldNumber;
const int db_role_show_change_name_ack::kResultFieldNumber;
const int db_role_show_change_name_ack::kRoleIdFieldNumber;
const int db_role_show_change_name_ack::kNewNameFieldNumber;
#endif  // !_MSC_VER

db_role_show_change_name_ack::db_role_show_change_name_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_change_name_ack::InitAsDefaultInstance() {
}

db_role_show_change_name_ack::db_role_show_change_name_ack(const db_role_show_change_name_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_change_name_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 245;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_change_name_ack::~db_role_show_change_name_ack() {
  SharedDtor();
}

void db_role_show_change_name_ack::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_change_name_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_change_name_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_change_name_ack_descriptor_;
}

const db_role_show_change_name_ack& db_role_show_change_name_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_change_name_ack* db_role_show_change_name_ack::default_instance_ = NULL;

db_role_show_change_name_ack* db_role_show_change_name_ack::New() const {
  return new db_role_show_change_name_ack;
}

void db_role_show_change_name_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 245;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_change_name_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_name;
        break;
      }

      // optional string new_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_change_name_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional string new_name = 4;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_change_name_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional string new_name = 4;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_change_name_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string new_name = 4;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_change_name_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_change_name_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_change_name_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_change_name_ack::MergeFrom(const db_role_show_change_name_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_change_name_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_change_name_ack::CopyFrom(const db_role_show_change_name_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_change_name_ack::IsInitialized() const {

  return true;
}

void db_role_show_change_name_ack::Swap(db_role_show_change_name_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_change_name_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_change_name_ack_descriptor_;
  metadata.reflection = db_role_show_change_name_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_like_req::kProtoidFieldNumber;
const int db_role_show_get_like_req::kRoleIdFieldNumber;
const int db_role_show_get_like_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_like_req::db_role_show_get_like_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_like_req::InitAsDefaultInstance() {
}

db_role_show_get_like_req::db_role_show_get_like_req(const db_role_show_get_like_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_like_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 246;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_like_req::~db_role_show_get_like_req() {
  SharedDtor();
}

void db_role_show_get_like_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_get_like_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_like_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_like_req_descriptor_;
}

const db_role_show_get_like_req& db_role_show_get_like_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_like_req* db_role_show_get_like_req::default_instance_ = NULL;

db_role_show_get_like_req* db_role_show_get_like_req::New() const {
  return new db_role_show_get_like_req;
}

void db_role_show_get_like_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 246;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_like_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_like_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_like_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_like_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_like_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_like_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_like_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_like_req::MergeFrom(const db_role_show_get_like_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_like_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_like_req::CopyFrom(const db_role_show_get_like_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_like_req::IsInitialized() const {

  return true;
}

void db_role_show_get_like_req::Swap(db_role_show_get_like_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_like_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_like_req_descriptor_;
  metadata.reflection = db_role_show_get_like_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_like_ack::kProtoidFieldNumber;
const int db_role_show_get_like_ack::kResultFieldNumber;
const int db_role_show_get_like_ack::kRoleIdFieldNumber;
const int db_role_show_get_like_ack::kShowRoleIdFieldNumber;
const int db_role_show_get_like_ack::kLikesFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_like_ack::db_role_show_get_like_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_like_ack::InitAsDefaultInstance() {
}

db_role_show_get_like_ack::db_role_show_get_like_ack(const db_role_show_get_like_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_like_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 247;
  result_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  likes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_like_ack::~db_role_show_get_like_ack() {
  SharedDtor();
}

void db_role_show_get_like_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_get_like_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_like_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_like_ack_descriptor_;
}

const db_role_show_get_like_ack& db_role_show_get_like_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_like_ack* db_role_show_get_like_ack::default_instance_ = NULL;

db_role_show_get_like_ack* db_role_show_get_like_ack::New() const {
  return new db_role_show_get_like_ack;
}

void db_role_show_get_like_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 247;
    result_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    likes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_like_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_likes;
        break;
      }

      // optional int32 likes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
          set_has_likes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_like_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional int32 likes = 5;
  if (has_likes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->likes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_like_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional int32 likes = 5;
  if (has_likes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->likes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_like_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional int32 likes = 5;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_like_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_like_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_like_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_like_ack::MergeFrom(const db_role_show_get_like_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_likes()) {
      set_likes(from.likes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_like_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_like_ack::CopyFrom(const db_role_show_get_like_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_like_ack::IsInitialized() const {

  return true;
}

void db_role_show_get_like_ack::Swap(db_role_show_get_like_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(likes_, other->likes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_like_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_like_ack_descriptor_;
  metadata.reflection = db_role_show_get_like_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_emotion_req::kProtoidFieldNumber;
const int db_role_show_get_emotion_req::kRoleIdFieldNumber;
const int db_role_show_get_emotion_req::kShowRoleIdFieldNumber;
const int db_role_show_get_emotion_req::kStartIndexFieldNumber;
const int db_role_show_get_emotion_req::kCountFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_emotion_req::db_role_show_get_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_emotion_req::InitAsDefaultInstance() {
}

db_role_show_get_emotion_req::db_role_show_get_emotion_req(const db_role_show_get_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 234;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  start_index_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_emotion_req::~db_role_show_get_emotion_req() {
  SharedDtor();
}

void db_role_show_get_emotion_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_get_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_emotion_req_descriptor_;
}

const db_role_show_get_emotion_req& db_role_show_get_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_emotion_req* db_role_show_get_emotion_req::default_instance_ = NULL;

db_role_show_get_emotion_req* db_role_show_get_emotion_req::New() const {
  return new db_role_show_get_emotion_req;
}

void db_role_show_get_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 234;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    start_index_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional uint32 start_index = 4;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional uint32 start_index = 4;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_emotion_req::MergeFrom(const db_role_show_get_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_emotion_req::CopyFrom(const db_role_show_get_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_emotion_req::IsInitialized() const {

  return true;
}

void db_role_show_get_emotion_req::Swap(db_role_show_get_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_emotion_req_descriptor_;
  metadata.reflection = db_role_show_get_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_get_emotion_ack::kProtoidFieldNumber;
const int db_role_show_get_emotion_ack::kRoleIdFieldNumber;
const int db_role_show_get_emotion_ack::kShowRoleIdFieldNumber;
const int db_role_show_get_emotion_ack::kEmotionAllFieldNumber;
const int db_role_show_get_emotion_ack::kRetFieldNumber;
#endif  // !_MSC_VER

db_role_show_get_emotion_ack::db_role_show_get_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_get_emotion_ack::InitAsDefaultInstance() {
  emotion_all_ = const_cast< ::SProtoSpace::show_emotion_all_info*>(&::SProtoSpace::show_emotion_all_info::default_instance());
}

db_role_show_get_emotion_ack::db_role_show_get_emotion_ack(const db_role_show_get_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_get_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 235;
  role_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_all_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_get_emotion_ack::~db_role_show_get_emotion_ack() {
  SharedDtor();
}

void db_role_show_get_emotion_ack::SharedDtor() {
  if (this != default_instance_) {
    delete emotion_all_;
  }
}

void db_role_show_get_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_get_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_get_emotion_ack_descriptor_;
}

const db_role_show_get_emotion_ack& db_role_show_get_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_get_emotion_ack* db_role_show_get_emotion_ack::default_instance_ = NULL;

db_role_show_get_emotion_ack* db_role_show_get_emotion_ack::New() const {
  return new db_role_show_get_emotion_ack;
}

void db_role_show_get_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 235;
    role_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_emotion_all()) {
      if (emotion_all_ != NULL) emotion_all_->::SProtoSpace::show_emotion_all_info::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_get_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emotion_all;
        break;
      }

      // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emotion_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emotion_all()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_get_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  if (has_emotion_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->emotion_all(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_get_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  if (has_emotion_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->emotion_all(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_get_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
    if (has_emotion_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emotion_all());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_get_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_get_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_get_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_get_emotion_ack::MergeFrom(const db_role_show_get_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_all()) {
      mutable_emotion_all()->::SProtoSpace::show_emotion_all_info::MergeFrom(from.emotion_all());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_get_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_get_emotion_ack::CopyFrom(const db_role_show_get_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_get_emotion_ack::IsInitialized() const {

  return true;
}

void db_role_show_get_emotion_ack::Swap(db_role_show_get_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_all_, other->emotion_all_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_get_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_get_emotion_ack_descriptor_;
  metadata.reflection = db_role_show_get_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_write_emotion_req::kProtoidFieldNumber;
const int db_role_show_write_emotion_req::kRoleIdFieldNumber;
const int db_role_show_write_emotion_req::kMsgContentFieldNumber;
const int db_role_show_write_emotion_req::kImgUrlsFieldNumber;
const int db_role_show_write_emotion_req::kMsgTypeFieldNumber;
const int db_role_show_write_emotion_req::kIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_write_emotion_req::db_role_show_write_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_write_emotion_req::InitAsDefaultInstance() {
}

db_role_show_write_emotion_req::db_role_show_write_emotion_req(const db_role_show_write_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_write_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 248;
  role_id_ = GOOGLE_ULONGLONG(0);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_write_emotion_req::~db_role_show_write_emotion_req() {
  SharedDtor();
}

void db_role_show_write_emotion_req::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_write_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_write_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_write_emotion_req_descriptor_;
}

const db_role_show_write_emotion_req& db_role_show_write_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_write_emotion_req* db_role_show_write_emotion_req::default_instance_ = NULL;

db_role_show_write_emotion_req* db_role_show_write_emotion_req::New() const {
  return new db_role_show_write_emotion_req;
}

void db_role_show_write_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 248;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    msg_type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  img_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_write_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_img_urls;
        break;
      }

      // repeated string img_urls = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_urls(this->img_urls_size() - 1).data(),
            this->img_urls(this->img_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_img_urls;
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // optional .SProtoSpace.EmotionType msg_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EmotionType_IsValid(value)) {
            set_msg_type(static_cast< ::SProtoSpace::EmotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional uint64 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_write_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_content(), output);
  }

  // repeated string img_urls = 4;
  for (int i = 0; i < this->img_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_urls(i).data(), this->img_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->img_urls(i), output);
  }

  // optional .SProtoSpace.EmotionType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // optional uint64 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_write_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_content(), target);
  }

  // repeated string img_urls = 4;
  for (int i = 0; i < this->img_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_urls(i).data(), this->img_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->img_urls(i), target);
  }

  // optional .SProtoSpace.EmotionType msg_type = 5;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_type(), target);
  }

  // optional uint64 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_write_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string msg_content = 3;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional .SProtoSpace.EmotionType msg_type = 5;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated string img_urls = 4;
  total_size += 1 * this->img_urls_size();
  for (int i = 0; i < this->img_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_write_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_write_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_write_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_write_emotion_req::MergeFrom(const db_role_show_write_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  img_urls_.MergeFrom(from.img_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_write_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_write_emotion_req::CopyFrom(const db_role_show_write_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_write_emotion_req::IsInitialized() const {

  return true;
}

void db_role_show_write_emotion_req::Swap(db_role_show_write_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(msg_content_, other->msg_content_);
    img_urls_.Swap(&other->img_urls_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_write_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_write_emotion_req_descriptor_;
  metadata.reflection = db_role_show_write_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_write_emotion_ack::kProtoidFieldNumber;
const int db_role_show_write_emotion_ack::kRetFieldNumber;
const int db_role_show_write_emotion_ack::kEmotionIdFieldNumber;
const int db_role_show_write_emotion_ack::kRoleIdFieldNumber;
const int db_role_show_write_emotion_ack::kMsgContentFieldNumber;
const int db_role_show_write_emotion_ack::kImgUrlsFieldNumber;
const int db_role_show_write_emotion_ack::kMsgTypeFieldNumber;
const int db_role_show_write_emotion_ack::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

db_role_show_write_emotion_ack::db_role_show_write_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_write_emotion_ack::InitAsDefaultInstance() {
}

db_role_show_write_emotion_ack::db_role_show_write_emotion_ack(const db_role_show_write_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_write_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 249;
  ret_ = 0u;
  emotion_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_type_ = 0;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_write_emotion_ack::~db_role_show_write_emotion_ack() {
  SharedDtor();
}

void db_role_show_write_emotion_ack::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_write_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_write_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_write_emotion_ack_descriptor_;
}

const db_role_show_write_emotion_ack& db_role_show_write_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_write_emotion_ack* db_role_show_write_emotion_ack::default_instance_ = NULL;

db_role_show_write_emotion_ack* db_role_show_write_emotion_ack::New() const {
  return new db_role_show_write_emotion_ack;
}

void db_role_show_write_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 249;
    ret_ = 0u;
    emotion_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    msg_type_ = 0;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  img_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_write_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_img_urls;
        break;
      }

      // repeated string img_urls = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_urls(this->img_urls_size() - 1).data(),
            this->img_urls(this->img_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_img_urls;
        if (input->ExpectTag(64)) goto parse_msg_type;
        break;
      }

      // optional .SProtoSpace.EmotionType msg_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EmotionType_IsValid(value)) {
            set_msg_type(static_cast< ::SProtoSpace::EmotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_write_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->emotion_id(), output);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->role_id(), output);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg_content(), output);
  }

  // repeated string img_urls = 7;
  for (int i = 0; i < this->img_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_urls(i).data(), this->img_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->img_urls(i), output);
  }

  // optional .SProtoSpace.EmotionType msg_type = 8;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->msg_type(), output);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_write_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->emotion_id(), target);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->role_id(), target);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg_content(), target);
  }

  // repeated string img_urls = 7;
  for (int i = 0; i < this->img_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_urls(i).data(), this->img_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->img_urls(i), target);
  }

  // optional .SProtoSpace.EmotionType msg_type = 8;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->msg_type(), target);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_write_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 emotion_id = 3;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string msg_content = 6;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional .SProtoSpace.EmotionType msg_type = 8;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional uint64 create_time = 9;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  // repeated string img_urls = 7;
  total_size += 1 * this->img_urls_size();
  for (int i = 0; i < this->img_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_write_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_write_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_write_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_write_emotion_ack::MergeFrom(const db_role_show_write_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  img_urls_.MergeFrom(from.img_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_write_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_write_emotion_ack::CopyFrom(const db_role_show_write_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_write_emotion_ack::IsInitialized() const {

  return true;
}

void db_role_show_write_emotion_ack::Swap(db_role_show_write_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(msg_content_, other->msg_content_);
    img_urls_.Swap(&other->img_urls_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_write_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_write_emotion_ack_descriptor_;
  metadata.reflection = db_role_show_write_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_like_emotion_req::kProtoidFieldNumber;
const int db_role_show_like_emotion_req::kRoleIdFieldNumber;
const int db_role_show_like_emotion_req::kRoleNameFieldNumber;
const int db_role_show_like_emotion_req::kEmotionIdFieldNumber;
const int db_role_show_like_emotion_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_like_emotion_req::db_role_show_like_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_like_emotion_req::InitAsDefaultInstance() {
}

db_role_show_like_emotion_req::db_role_show_like_emotion_req(const db_role_show_like_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_like_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 250;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_like_emotion_req::~db_role_show_like_emotion_req() {
  SharedDtor();
}

void db_role_show_like_emotion_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_like_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_like_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_like_emotion_req_descriptor_;
}

const db_role_show_like_emotion_req& db_role_show_like_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_like_emotion_req* db_role_show_like_emotion_req::default_instance_ = NULL;

db_role_show_like_emotion_req* db_role_show_like_emotion_req::New() const {
  return new db_role_show_like_emotion_req;
}

void db_role_show_like_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 250;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    emotion_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_like_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_like_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->emotion_id(), output);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_like_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->emotion_id(), target);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_like_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 emotion_id = 4;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 show_role_id = 5;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_like_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_like_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_like_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_like_emotion_req::MergeFrom(const db_role_show_like_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_like_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_like_emotion_req::CopyFrom(const db_role_show_like_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_like_emotion_req::IsInitialized() const {

  return true;
}

void db_role_show_like_emotion_req::Swap(db_role_show_like_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_like_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_like_emotion_req_descriptor_;
  metadata.reflection = db_role_show_like_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_like_emotion_ack::kProtoidFieldNumber;
const int db_role_show_like_emotion_ack::kRetFieldNumber;
const int db_role_show_like_emotion_ack::kRoleIdFieldNumber;
const int db_role_show_like_emotion_ack::kRoleNameFieldNumber;
const int db_role_show_like_emotion_ack::kEmotionIdFieldNumber;
const int db_role_show_like_emotion_ack::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_like_emotion_ack::db_role_show_like_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_like_emotion_ack::InitAsDefaultInstance() {
}

db_role_show_like_emotion_ack::db_role_show_like_emotion_ack(const db_role_show_like_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_like_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 251;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_like_emotion_ack::~db_role_show_like_emotion_ack() {
  SharedDtor();
}

void db_role_show_like_emotion_ack::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_like_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_like_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_like_emotion_ack_descriptor_;
}

const db_role_show_like_emotion_ack& db_role_show_like_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_like_emotion_ack* db_role_show_like_emotion_ack::default_instance_ = NULL;

db_role_show_like_emotion_ack* db_role_show_like_emotion_ack::New() const {
  return new db_role_show_like_emotion_ack;
}

void db_role_show_like_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 251;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    emotion_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_like_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }

      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_like_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_name(), output);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->emotion_id(), output);
  }

  // optional uint64 show_role_id = 6;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_like_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->emotion_id(), target);
  }

  // optional uint64 show_role_id = 6;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_like_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 emotion_id = 5;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 show_role_id = 6;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_like_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_like_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_like_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_like_emotion_ack::MergeFrom(const db_role_show_like_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_like_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_like_emotion_ack::CopyFrom(const db_role_show_like_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_like_emotion_ack::IsInitialized() const {

  return true;
}

void db_role_show_like_emotion_ack::Swap(db_role_show_like_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_like_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_like_emotion_ack_descriptor_;
  metadata.reflection = db_role_show_like_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_comment_emotion_req::kProtoidFieldNumber;
const int db_role_show_comment_emotion_req::kFromIdFieldNumber;
const int db_role_show_comment_emotion_req::kFromNameFieldNumber;
const int db_role_show_comment_emotion_req::kToIdFieldNumber;
const int db_role_show_comment_emotion_req::kToNameFieldNumber;
const int db_role_show_comment_emotion_req::kMsgContentFieldNumber;
const int db_role_show_comment_emotion_req::kShowRoleIdFieldNumber;
const int db_role_show_comment_emotion_req::kEmotionIdFieldNumber;
const int db_role_show_comment_emotion_req::kIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_comment_emotion_req::db_role_show_comment_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_comment_emotion_req::InitAsDefaultInstance() {
}

db_role_show_comment_emotion_req::db_role_show_comment_emotion_req(const db_role_show_comment_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_comment_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 253;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_comment_emotion_req::~db_role_show_comment_emotion_req() {
  SharedDtor();
}

void db_role_show_comment_emotion_req::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_comment_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_comment_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_comment_emotion_req_descriptor_;
}

const db_role_show_comment_emotion_req& db_role_show_comment_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_comment_emotion_req* db_role_show_comment_emotion_req::default_instance_ = NULL;

db_role_show_comment_emotion_req* db_role_show_comment_emotion_req::New() const {
  return new db_role_show_comment_emotion_req;
}

void db_role_show_comment_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 253;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    to_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_comment_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_name;
        break;
      }

      // optional string from_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_name;
        break;
      }

      // optional string to_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_id;
        break;
      }

      // optional uint64 id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_comment_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_name(), output);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_id(), output);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_name(), output);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg_content(), output);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->emotion_id(), output);
  }

  // optional uint64 id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_comment_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_name(), target);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_id(), target);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_name(), target);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg_content(), target);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->emotion_id(), target);
  }

  // optional uint64 id = 9;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_comment_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 3;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 to_id = 4;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional string to_name = 5;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional string msg_content = 6;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional uint64 show_role_id = 7;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 8;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_comment_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_comment_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_comment_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_comment_emotion_req::MergeFrom(const db_role_show_comment_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_comment_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_comment_emotion_req::CopyFrom(const db_role_show_comment_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_comment_emotion_req::IsInitialized() const {

  return true;
}

void db_role_show_comment_emotion_req::Swap(db_role_show_comment_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_comment_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_comment_emotion_req_descriptor_;
  metadata.reflection = db_role_show_comment_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_comment_emotion_ack::kProtoidFieldNumber;
const int db_role_show_comment_emotion_ack::kFromIdFieldNumber;
const int db_role_show_comment_emotion_ack::kFromNameFieldNumber;
const int db_role_show_comment_emotion_ack::kToIdFieldNumber;
const int db_role_show_comment_emotion_ack::kToNameFieldNumber;
const int db_role_show_comment_emotion_ack::kMsgContentFieldNumber;
const int db_role_show_comment_emotion_ack::kShowRoleIdFieldNumber;
const int db_role_show_comment_emotion_ack::kEmotionIdFieldNumber;
const int db_role_show_comment_emotion_ack::kRetFieldNumber;
const int db_role_show_comment_emotion_ack::kIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_comment_emotion_ack::db_role_show_comment_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_comment_emotion_ack::InitAsDefaultInstance() {
}

db_role_show_comment_emotion_ack::db_role_show_comment_emotion_ack(const db_role_show_comment_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_comment_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 252;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_comment_emotion_ack::~db_role_show_comment_emotion_ack() {
  SharedDtor();
}

void db_role_show_comment_emotion_ack::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void db_role_show_comment_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_comment_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_comment_emotion_ack_descriptor_;
}

const db_role_show_comment_emotion_ack& db_role_show_comment_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_comment_emotion_ack* db_role_show_comment_emotion_ack::default_instance_ = NULL;

db_role_show_comment_emotion_ack* db_role_show_comment_emotion_ack::New() const {
  return new db_role_show_comment_emotion_ack;
}

void db_role_show_comment_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 252;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    to_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ret_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_comment_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_name;
        break;
      }

      // optional string from_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_name;
        break;
      }

      // optional string to_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_id;
        break;
      }

      // optional uint64 id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_comment_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_name(), output);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_id(), output);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_name(), output);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg_content(), output);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->emotion_id(), output);
  }

  // optional uint32 ret = 9;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ret(), output);
  }

  // optional uint64 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_comment_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_name(), target);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_id(), target);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_name(), target);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg_content(), target);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->emotion_id(), target);
  }

  // optional uint32 ret = 9;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ret(), target);
  }

  // optional uint64 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_comment_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 3;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 to_id = 4;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional string to_name = 5;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional string msg_content = 6;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional uint64 show_role_id = 7;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 8;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ret = 9;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_comment_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_comment_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_comment_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_comment_emotion_ack::MergeFrom(const db_role_show_comment_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_comment_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_comment_emotion_ack::CopyFrom(const db_role_show_comment_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_comment_emotion_ack::IsInitialized() const {

  return true;
}

void db_role_show_comment_emotion_ack::Swap(db_role_show_comment_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_comment_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_comment_emotion_ack_descriptor_;
  metadata.reflection = db_role_show_comment_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_remove_emotion_req::kProtoidFieldNumber;
const int db_role_show_remove_emotion_req::kRoleIdFieldNumber;
const int db_role_show_remove_emotion_req::kEmotionIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_remove_emotion_req::db_role_show_remove_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_remove_emotion_req::InitAsDefaultInstance() {
}

db_role_show_remove_emotion_req::db_role_show_remove_emotion_req(const db_role_show_remove_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_remove_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 254;
  role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_remove_emotion_req::~db_role_show_remove_emotion_req() {
  SharedDtor();
}

void db_role_show_remove_emotion_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_remove_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_remove_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_remove_emotion_req_descriptor_;
}

const db_role_show_remove_emotion_req& db_role_show_remove_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_remove_emotion_req* db_role_show_remove_emotion_req::default_instance_ = NULL;

db_role_show_remove_emotion_req* db_role_show_remove_emotion_req::New() const {
  return new db_role_show_remove_emotion_req;
}

void db_role_show_remove_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 254;
    role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_remove_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_remove_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->emotion_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_remove_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->emotion_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_remove_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 emotion_id = 3;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_remove_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_remove_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_remove_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_remove_emotion_req::MergeFrom(const db_role_show_remove_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_remove_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_remove_emotion_req::CopyFrom(const db_role_show_remove_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_remove_emotion_req::IsInitialized() const {

  return true;
}

void db_role_show_remove_emotion_req::Swap(db_role_show_remove_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_remove_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_remove_emotion_req_descriptor_;
  metadata.reflection = db_role_show_remove_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_remove_emotion_ack::kProtoidFieldNumber;
const int db_role_show_remove_emotion_ack::kEmotionIdFieldNumber;
const int db_role_show_remove_emotion_ack::kRetFieldNumber;
const int db_role_show_remove_emotion_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_remove_emotion_ack::db_role_show_remove_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_remove_emotion_ack::InitAsDefaultInstance() {
}

db_role_show_remove_emotion_ack::db_role_show_remove_emotion_ack(const db_role_show_remove_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_remove_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 255;
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_remove_emotion_ack::~db_role_show_remove_emotion_ack() {
  SharedDtor();
}

void db_role_show_remove_emotion_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_remove_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_remove_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_remove_emotion_ack_descriptor_;
}

const db_role_show_remove_emotion_ack& db_role_show_remove_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_remove_emotion_ack* db_role_show_remove_emotion_ack::default_instance_ = NULL;

db_role_show_remove_emotion_ack* db_role_show_remove_emotion_ack::New() const {
  return new db_role_show_remove_emotion_ack;
}

void db_role_show_remove_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 255;
    emotion_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_remove_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_remove_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->emotion_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_remove_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->emotion_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_remove_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 emotion_id = 2;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_remove_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_remove_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_remove_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_remove_emotion_ack::MergeFrom(const db_role_show_remove_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_remove_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_remove_emotion_ack::CopyFrom(const db_role_show_remove_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_remove_emotion_ack::IsInitialized() const {

  return true;
}

void db_role_show_remove_emotion_ack::Swap(db_role_show_remove_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_remove_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_remove_emotion_ack_descriptor_;
  metadata.reflection = db_role_show_remove_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_remove_comment_req::kProtoidFieldNumber;
const int db_role_show_remove_comment_req::kFromIdFieldNumber;
const int db_role_show_remove_comment_req::kToIdFieldNumber;
const int db_role_show_remove_comment_req::kShowRoleIdFieldNumber;
const int db_role_show_remove_comment_req::kEmotionIdFieldNumber;
const int db_role_show_remove_comment_req::kCommentIdFieldNumber;
const int db_role_show_remove_comment_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_remove_comment_req::db_role_show_remove_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_remove_comment_req::InitAsDefaultInstance() {
}

db_role_show_remove_comment_req::db_role_show_remove_comment_req(const db_role_show_remove_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_remove_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 256;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  comment_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_remove_comment_req::~db_role_show_remove_comment_req() {
  SharedDtor();
}

void db_role_show_remove_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_remove_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_remove_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_remove_comment_req_descriptor_;
}

const db_role_show_remove_comment_req& db_role_show_remove_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_remove_comment_req* db_role_show_remove_comment_req::default_instance_ = NULL;

db_role_show_remove_comment_req* db_role_show_remove_comment_req::New() const {
  return new db_role_show_remove_comment_req;
}

void db_role_show_remove_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 256;
    from_id_ = GOOGLE_ULONGLONG(0);
    to_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
    comment_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_remove_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_comment_id;
        break;
      }

      // optional uint64 comment_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_remove_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->emotion_id(), output);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->comment_id(), output);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_remove_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->emotion_id(), target);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->comment_id(), target);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_remove_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional uint64 to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 5;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 comment_id = 6;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

    // optional uint64 role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_remove_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_remove_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_remove_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_remove_comment_req::MergeFrom(const db_role_show_remove_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_remove_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_remove_comment_req::CopyFrom(const db_role_show_remove_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_remove_comment_req::IsInitialized() const {

  return true;
}

void db_role_show_remove_comment_req::Swap(db_role_show_remove_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_remove_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_remove_comment_req_descriptor_;
  metadata.reflection = db_role_show_remove_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_show_remove_comment_ack::kProtoidFieldNumber;
const int db_role_show_remove_comment_ack::kFromIdFieldNumber;
const int db_role_show_remove_comment_ack::kToIdFieldNumber;
const int db_role_show_remove_comment_ack::kShowRoleIdFieldNumber;
const int db_role_show_remove_comment_ack::kEmotionIdFieldNumber;
const int db_role_show_remove_comment_ack::kCommentIdFieldNumber;
const int db_role_show_remove_comment_ack::kRetFieldNumber;
const int db_role_show_remove_comment_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_role_show_remove_comment_ack::db_role_show_remove_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_show_remove_comment_ack::InitAsDefaultInstance() {
}

db_role_show_remove_comment_ack::db_role_show_remove_comment_ack(const db_role_show_remove_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_show_remove_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 257;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  comment_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_show_remove_comment_ack::~db_role_show_remove_comment_ack() {
  SharedDtor();
}

void db_role_show_remove_comment_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_show_remove_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_show_remove_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_show_remove_comment_ack_descriptor_;
}

const db_role_show_remove_comment_ack& db_role_show_remove_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_show_remove_comment_ack* db_role_show_remove_comment_ack::default_instance_ = NULL;

db_role_show_remove_comment_ack* db_role_show_remove_comment_ack::New() const {
  return new db_role_show_remove_comment_ack;
}

void db_role_show_remove_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 257;
    from_id_ = GOOGLE_ULONGLONG(0);
    to_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
    comment_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_show_remove_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_comment_id;
        break;
      }

      // optional uint64 comment_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_show_remove_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->emotion_id(), output);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->comment_id(), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_show_remove_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->emotion_id(), target);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->comment_id(), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_show_remove_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional uint64 to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 5;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 comment_id = 6;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 8;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_show_remove_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_show_remove_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_show_remove_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_show_remove_comment_ack::MergeFrom(const db_role_show_remove_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_show_remove_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_show_remove_comment_ack::CopyFrom(const db_role_show_remove_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_show_remove_comment_ack::IsInitialized() const {

  return true;
}

void db_role_show_remove_comment_ack::Swap(db_role_show_remove_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_show_remove_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_show_remove_comment_ack_descriptor_;
  metadata.reflection = db_role_show_remove_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_battle_info_req::kProtoidFieldNumber;
const int db_role_battle_info_req::kTypeFieldNumber;
const int db_role_battle_info_req::kRoleIdFieldNumber;
const int db_role_battle_info_req::kBattleIdFieldNumber;
const int db_role_battle_info_req::kModuleIdFieldNumber;
#endif  // !_MSC_VER

db_role_battle_info_req::db_role_battle_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_battle_info_req::InitAsDefaultInstance() {
}

db_role_battle_info_req::db_role_battle_info_req(const db_role_battle_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_battle_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 260;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  battle_id_ = 0;
  module_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_battle_info_req::~db_role_battle_info_req() {
  SharedDtor();
}

void db_role_battle_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_role_battle_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_battle_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_battle_info_req_descriptor_;
}

const db_role_battle_info_req& db_role_battle_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_battle_info_req* db_role_battle_info_req::default_instance_ = NULL;

db_role_battle_info_req* db_role_battle_info_req::New() const {
  return new db_role_battle_info_req;
}

void db_role_battle_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 260;
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    battle_id_ = 0;
    module_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_battle_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_battle_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_id(), output);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->module_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_battle_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle_id(), target);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->module_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_battle_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 battle_id = 4;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional int32 module_id = 5;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_battle_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_battle_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_battle_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_battle_info_req::MergeFrom(const db_role_battle_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_battle_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_battle_info_req::CopyFrom(const db_role_battle_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_battle_info_req::IsInitialized() const {

  return true;
}

void db_role_battle_info_req::Swap(db_role_battle_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_battle_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_battle_info_req_descriptor_;
  metadata.reflection = db_role_battle_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_role_battle_info_ack::kProtoidFieldNumber;
const int db_role_battle_info_ack::kResultFieldNumber;
const int db_role_battle_info_ack::kTypeFieldNumber;
const int db_role_battle_info_ack::kRoleIdFieldNumber;
const int db_role_battle_info_ack::kInfoFieldNumber;
const int db_role_battle_info_ack::kBattleIdFieldNumber;
const int db_role_battle_info_ack::kModuleIdFieldNumber;
#endif  // !_MSC_VER

db_role_battle_info_ack::db_role_battle_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_role_battle_info_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

db_role_battle_info_ack::db_role_battle_info_ack(const db_role_battle_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_role_battle_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 261;
  result_ = 0;
  type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  battle_id_ = 0;
  module_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_role_battle_info_ack::~db_role_battle_info_ack() {
  SharedDtor();
}

void db_role_battle_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void db_role_battle_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_role_battle_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_role_battle_info_ack_descriptor_;
}

const db_role_battle_info_ack& db_role_battle_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_role_battle_info_ack* db_role_battle_info_ack::default_instance_ = NULL;

db_role_battle_info_ack* db_role_battle_info_ack::New() const {
  return new db_role_battle_info_ack;
}

void db_role_battle_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 261;
    result_ = 0;
    type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::battle_role_info::Clear();
    }
    battle_id_ = 0;
    module_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_role_battle_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.battle_role_info info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_role_battle_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional .SProtoSpace.battle_role_info info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional int32 battle_id = 6;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battle_id(), output);
  }

  // optional int32 module_id = 7;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->module_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_role_battle_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional .SProtoSpace.battle_role_info info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional int32 battle_id = 6;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battle_id(), target);
  }

  // optional int32 module_id = 7;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->module_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_role_battle_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.battle_role_info info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 battle_id = 6;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional int32 module_id = 7;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_role_battle_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_role_battle_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_role_battle_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_role_battle_info_ack::MergeFrom(const db_role_battle_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::battle_role_info::MergeFrom(from.info());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_role_battle_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_battle_info_ack::CopyFrom(const db_role_battle_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_battle_info_ack::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void db_role_battle_info_ack::Swap(db_role_battle_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(info_, other->info_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_role_battle_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_role_battle_info_ack_descriptor_;
  metadata.reflection = db_role_battle_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_account_role_data_req::kProtoidFieldNumber;
const int db_account_role_data_req::kAccountFieldNumber;
const int db_account_role_data_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

db_account_role_data_req::db_account_role_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_account_role_data_req::InitAsDefaultInstance() {
}

db_account_role_data_req::db_account_role_data_req(const db_account_role_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_account_role_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 200;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_account_role_data_req::~db_account_role_data_req() {
  SharedDtor();
}

void db_account_role_data_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void db_account_role_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_account_role_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_account_role_data_req_descriptor_;
}

const db_account_role_data_req& db_account_role_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_account_role_data_req* db_account_role_data_req::default_instance_ = NULL;

db_account_role_data_req* db_account_role_data_req::New() const {
  return new db_account_role_data_req;
}

void db_account_role_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 200;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    area_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_account_role_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_account_role_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_account_role_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_account_role_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_account_role_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_account_role_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_account_role_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_account_role_data_req::MergeFrom(const db_account_role_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_account_role_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_account_role_data_req::CopyFrom(const db_account_role_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_account_role_data_req::IsInitialized() const {

  return true;
}

void db_account_role_data_req::Swap(db_account_role_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_account_role_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_account_role_data_req_descriptor_;
  metadata.reflection = db_account_role_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_account_role_data_ack::kProtoidFieldNumber;
const int db_account_role_data_ack::kAccountFieldNumber;
const int db_account_role_data_ack::kRetCodeFieldNumber;
const int db_account_role_data_ack::kDataFieldNumber;
#endif  // !_MSC_VER

db_account_role_data_ack::db_account_role_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_account_role_data_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::account_role_data*>(&::SProtoSpace::account_role_data::default_instance());
}

db_account_role_data_ack::db_account_role_data_ack(const db_account_role_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_account_role_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 201;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_code_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_account_role_data_ack::~db_account_role_data_ack() {
  SharedDtor();
}

void db_account_role_data_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void db_account_role_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_account_role_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_account_role_data_ack_descriptor_;
}

const db_account_role_data_ack& db_account_role_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_account_role_data_ack* db_account_role_data_ack::default_instance_ = NULL;

db_account_role_data_ack* db_account_role_data_ack::New() const {
  return new db_account_role_data_ack;
}

void db_account_role_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 201;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_code_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_account_role_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_code;
        break;
      }

      // optional uint32 ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.account_role_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_account_role_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret_code(), output);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_account_role_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 ret_code = 3;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret_code(), target);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_account_role_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional .SProtoSpace.account_role_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_account_role_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_account_role_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_account_role_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_account_role_data_ack::MergeFrom(const db_account_role_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::account_role_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_account_role_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_account_role_data_ack::CopyFrom(const db_account_role_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_account_role_data_ack::IsInitialized() const {

  return true;
}

void db_account_role_data_ack::Swap(db_account_role_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_account_role_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_account_role_data_ack_descriptor_;
  metadata.reflection = db_account_role_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_create_role_of_game::kProtoidFieldNumber;
const int db_create_role_of_game::kAccountFieldNumber;
const int db_create_role_of_game::kAreaIdFieldNumber;
const int db_create_role_of_game::kRoleNameFieldNumber;
const int db_create_role_of_game::kRoleSexFieldNumber;
#endif  // !_MSC_VER

db_create_role_of_game::db_create_role_of_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_create_role_of_game::InitAsDefaultInstance() {
}

db_create_role_of_game::db_create_role_of_game(const db_create_role_of_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_create_role_of_game::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 202;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_create_role_of_game::~db_create_role_of_game() {
  SharedDtor();
}

void db_create_role_of_game::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void db_create_role_of_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_create_role_of_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_create_role_of_game_descriptor_;
}

const db_create_role_of_game& db_create_role_of_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_create_role_of_game* db_create_role_of_game::default_instance_ = NULL;

db_create_role_of_game* db_create_role_of_game::New() const {
  return new db_create_role_of_game;
}

void db_create_role_of_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 202;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    area_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_create_role_of_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }

      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_sex;
        break;
      }

      // optional int32 role_sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_create_role_of_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_name(), output);
  }

  // optional int32 role_sex = 5;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_create_role_of_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }

  // optional int32 role_sex = 5;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_create_role_of_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 role_sex = 5;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_create_role_of_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_create_role_of_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_create_role_of_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_create_role_of_game::MergeFrom(const db_create_role_of_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_create_role_of_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_create_role_of_game::CopyFrom(const db_create_role_of_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_create_role_of_game::IsInitialized() const {

  return true;
}

void db_create_role_of_game::Swap(db_create_role_of_game* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(area_id_, other->area_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_create_role_of_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_create_role_of_game_descriptor_;
  metadata.reflection = db_create_role_of_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_create_role_ack::kProtoidFieldNumber;
const int db_create_role_ack::kRetCodeFieldNumber;
const int db_create_role_ack::kAccountFieldNumber;
const int db_create_role_ack::kDataFieldNumber;
#endif  // !_MSC_VER

db_create_role_ack::db_create_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_create_role_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::account_role_data*>(&::SProtoSpace::account_role_data::default_instance());
}

db_create_role_ack::db_create_role_ack(const db_create_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_create_role_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 203;
  ret_code_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_create_role_ack::~db_create_role_ack() {
  SharedDtor();
}

void db_create_role_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void db_create_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_create_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_create_role_ack_descriptor_;
}

const db_create_role_ack& db_create_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_create_role_ack* db_create_role_ack::default_instance_ = NULL;

db_create_role_ack* db_create_role_ack::New() const {
  return new db_create_role_ack;
}

void db_create_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 203;
    ret_code_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_create_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // optional int32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.account_role_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_create_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_create_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_create_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .SProtoSpace.account_role_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_create_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_create_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_create_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_create_role_ack::MergeFrom(const db_create_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::account_role_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_create_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_create_role_ack::CopyFrom(const db_create_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_create_role_ack::IsInitialized() const {

  return true;
}

void db_create_role_ack::Swap(db_create_role_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(account_, other->account_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_create_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_create_role_ack_descriptor_;
  metadata.reflection = db_create_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_role_info_req::kProtoidFieldNumber;
const int game_role_info_req::kClientIdFieldNumber;
const int game_role_info_req::kAccountFieldNumber;
const int game_role_info_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

game_role_info_req::game_role_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_role_info_req::InitAsDefaultInstance() {
}

game_role_info_req::game_role_info_req(const game_role_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_role_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 206;
  client_id_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_role_info_req::~game_role_info_req() {
  SharedDtor();
}

void game_role_info_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void game_role_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_role_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_role_info_req_descriptor_;
}

const game_role_info_req& game_role_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

game_role_info_req* game_role_info_req::default_instance_ = NULL;

game_role_info_req* game_role_info_req::New() const {
  return new game_role_info_req;
}

void game_role_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 206;
    client_id_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_role_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_id;
        break;
      }

      // optional uint32 client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_role_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_id(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_role_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 client_id = 2;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_id(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_role_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_role_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_role_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_role_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_role_info_req::MergeFrom(const game_role_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_role_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_role_info_req::CopyFrom(const game_role_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_role_info_req::IsInitialized() const {

  return true;
}

void game_role_info_req::Swap(game_role_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(client_id_, other->client_id_);
    std::swap(account_, other->account_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_role_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_role_info_req_descriptor_;
  metadata.reflection = game_role_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_role_info_ack::kProtoidFieldNumber;
const int game_role_info_ack::kClientIdFieldNumber;
const int game_role_info_ack::kAccountFieldNumber;
const int game_role_info_ack::kGameIdFieldNumber;
const int game_role_info_ack::kRoleIdFieldNumber;
const int game_role_info_ack::kRoleNameFieldNumber;
const int game_role_info_ack::kCanIgnoreFieldNumber;
#endif  // !_MSC_VER

game_role_info_ack::game_role_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_role_info_ack::InitAsDefaultInstance() {
}

game_role_info_ack::game_role_info_ack(const game_role_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_role_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 207;
  client_id_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_ignore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_role_info_ack::~game_role_info_ack() {
  SharedDtor();
}

void game_role_info_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void game_role_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_role_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_role_info_ack_descriptor_;
}

const game_role_info_ack& game_role_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

game_role_info_ack* game_role_info_ack::default_instance_ = NULL;

game_role_info_ack* game_role_info_ack::New() const {
  return new game_role_info_ack;
}

void game_role_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 207;
    client_id_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    game_id_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    can_ignore_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_role_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_id;
        break;
      }

      // optional uint32 client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_name;
        break;
      }

      // optional string role_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_can_ignore;
        break;
      }

      // optional bool can_ignore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_ignore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_ignore_)));
          set_has_can_ignore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_role_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_id(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_id(), output);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->role_id(), output);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role_name(), output);
  }

  // optional bool can_ignore = 7;
  if (has_can_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_ignore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_role_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 client_id = 2;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_id(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_id(), target);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->role_id(), target);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role_name(), target);
  }

  // optional bool can_ignore = 7;
  if (has_can_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_ignore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_role_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 6;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional bool can_ignore = 7;
    if (has_can_ignore()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_role_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_role_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_role_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_role_info_ack::MergeFrom(const game_role_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_can_ignore()) {
      set_can_ignore(from.can_ignore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_role_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_role_info_ack::CopyFrom(const game_role_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_role_info_ack::IsInitialized() const {

  return true;
}

void game_role_info_ack::Swap(game_role_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(client_id_, other->client_id_);
    std::swap(account_, other->account_);
    std::swap(game_id_, other->game_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(can_ignore_, other->can_ignore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_role_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_role_info_ack_descriptor_;
  metadata.reflection = game_role_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_harem_compete_req::kProtoIdFieldNumber;
const int db_check_harem_compete_req::kUuidFieldNumber;
const int db_check_harem_compete_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

db_check_harem_compete_req::db_check_harem_compete_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_harem_compete_req::InitAsDefaultInstance() {
}

db_check_harem_compete_req::db_check_harem_compete_req(const db_check_harem_compete_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_harem_compete_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 290;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_harem_compete_req::~db_check_harem_compete_req() {
  SharedDtor();
}

void db_check_harem_compete_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_harem_compete_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_harem_compete_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_harem_compete_req_descriptor_;
}

const db_check_harem_compete_req& db_check_harem_compete_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_harem_compete_req* db_check_harem_compete_req::default_instance_ = NULL;

db_check_harem_compete_req* db_check_harem_compete_req::New() const {
  return new db_check_harem_compete_req;
}

void db_check_harem_compete_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 290;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_harem_compete_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_harem_compete_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_harem_compete_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_harem_compete_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_harem_compete_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_harem_compete_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_harem_compete_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_harem_compete_req::MergeFrom(const db_check_harem_compete_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_harem_compete_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_harem_compete_req::CopyFrom(const db_check_harem_compete_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_harem_compete_req::IsInitialized() const {

  return true;
}

void db_check_harem_compete_req::Swap(db_check_harem_compete_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_harem_compete_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_harem_compete_req_descriptor_;
  metadata.reflection = db_check_harem_compete_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_check_harem_compete_ack::kProtoIdFieldNumber;
const int db_check_harem_compete_ack::kUuidFieldNumber;
const int db_check_harem_compete_ack::kEventsFieldNumber;
const int db_check_harem_compete_ack::kProgressFieldNumber;
const int db_check_harem_compete_ack::kEndTimeFieldNumber;
#endif  // !_MSC_VER

db_check_harem_compete_ack::db_check_harem_compete_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_check_harem_compete_ack::InitAsDefaultInstance() {
}

db_check_harem_compete_ack::db_check_harem_compete_ack(const db_check_harem_compete_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_check_harem_compete_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 291;
  uuid_ = GOOGLE_ULONGLONG(0);
  progress_ = 1;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_check_harem_compete_ack::~db_check_harem_compete_ack() {
  SharedDtor();
}

void db_check_harem_compete_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_check_harem_compete_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_check_harem_compete_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_check_harem_compete_ack_descriptor_;
}

const db_check_harem_compete_ack& db_check_harem_compete_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_check_harem_compete_ack* db_check_harem_compete_ack::default_instance_ = NULL;

db_check_harem_compete_ack* db_check_harem_compete_ack::New() const {
  return new db_check_harem_compete_ack;
}

void db_check_harem_compete_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 291;
    uuid_ = GOOGLE_ULONGLONG(0);
    progress_ = 1;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_check_harem_compete_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .SProtoSpace.harem_compete_event events = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_events;
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_check_harem_compete_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated .SProtoSpace.harem_compete_event events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->progress(), output);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_check_harem_compete_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated .SProtoSpace.harem_compete_event events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->events(i), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->progress(), target);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_check_harem_compete_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  // repeated .SProtoSpace.harem_compete_event events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_check_harem_compete_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_check_harem_compete_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_check_harem_compete_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_check_harem_compete_ack::MergeFrom(const db_check_harem_compete_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_check_harem_compete_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_check_harem_compete_ack::CopyFrom(const db_check_harem_compete_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_check_harem_compete_ack::IsInitialized() const {

  return true;
}

void db_check_harem_compete_ack::Swap(db_check_harem_compete_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    events_.Swap(&other->events_);
    std::swap(progress_, other->progress_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_check_harem_compete_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_check_harem_compete_ack_descriptor_;
  metadata.reflection = db_check_harem_compete_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_harem_compete_clear_req::kProtoIdFieldNumber;
const int db_harem_compete_clear_req::kUuidFieldNumber;
const int db_harem_compete_clear_req::kTypeFieldNumber;
#endif  // !_MSC_VER

db_harem_compete_clear_req::db_harem_compete_clear_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_harem_compete_clear_req::InitAsDefaultInstance() {
}

db_harem_compete_clear_req::db_harem_compete_clear_req(const db_harem_compete_clear_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_harem_compete_clear_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 292;
  uuid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_harem_compete_clear_req::~db_harem_compete_clear_req() {
  SharedDtor();
}

void db_harem_compete_clear_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_harem_compete_clear_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_harem_compete_clear_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_harem_compete_clear_req_descriptor_;
}

const db_harem_compete_clear_req& db_harem_compete_clear_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_harem_compete_clear_req* db_harem_compete_clear_req::default_instance_ = NULL;

db_harem_compete_clear_req* db_harem_compete_clear_req::New() const {
  return new db_harem_compete_clear_req;
}

void db_harem_compete_clear_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 292;
    uuid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_harem_compete_clear_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_harem_compete_clear_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_harem_compete_clear_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_harem_compete_clear_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_harem_compete_clear_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_harem_compete_clear_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_harem_compete_clear_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_harem_compete_clear_req::MergeFrom(const db_harem_compete_clear_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_harem_compete_clear_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_harem_compete_clear_req::CopyFrom(const db_harem_compete_clear_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_harem_compete_clear_req::IsInitialized() const {

  return true;
}

void db_harem_compete_clear_req::Swap(db_harem_compete_clear_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_harem_compete_clear_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_harem_compete_clear_req_descriptor_;
  metadata.reflection = db_harem_compete_clear_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_slap_emoji_info::kInfosFieldNumber;
#endif  // !_MSC_VER

db_slap_emoji_info::db_slap_emoji_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_slap_emoji_info::InitAsDefaultInstance() {
}

db_slap_emoji_info::db_slap_emoji_info(const db_slap_emoji_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_slap_emoji_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_slap_emoji_info::~db_slap_emoji_info() {
  SharedDtor();
}

void db_slap_emoji_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_slap_emoji_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_slap_emoji_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_slap_emoji_info_descriptor_;
}

const db_slap_emoji_info& db_slap_emoji_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_slap_emoji_info* db_slap_emoji_info::default_instance_ = NULL;

db_slap_emoji_info* db_slap_emoji_info::New() const {
  return new db_slap_emoji_info;
}

void db_slap_emoji_info::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_slap_emoji_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.slap_emoji_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_slap_emoji_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.slap_emoji_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_slap_emoji_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.slap_emoji_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_slap_emoji_info::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.slap_emoji_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_slap_emoji_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_slap_emoji_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_slap_emoji_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_slap_emoji_info::MergeFrom(const db_slap_emoji_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_slap_emoji_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_slap_emoji_info::CopyFrom(const db_slap_emoji_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_slap_emoji_info::IsInitialized() const {

  return true;
}

void db_slap_emoji_info::Swap(db_slap_emoji_info* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_slap_emoji_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_slap_emoji_info_descriptor_;
  metadata.reflection = db_slap_emoji_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_harem_event_req::kProtoIdFieldNumber;
const int db_get_harem_event_req::kUuidFieldNumber;
const int db_get_harem_event_req::kEventUuidFieldNumber;
#endif  // !_MSC_VER

db_get_harem_event_req::db_get_harem_event_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_harem_event_req::InitAsDefaultInstance() {
}

db_get_harem_event_req::db_get_harem_event_req(const db_get_harem_event_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_harem_event_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 293;
  uuid_ = GOOGLE_ULONGLONG(0);
  event_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_harem_event_req::~db_get_harem_event_req() {
  SharedDtor();
}

void db_get_harem_event_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_harem_event_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_harem_event_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_harem_event_req_descriptor_;
}

const db_get_harem_event_req& db_get_harem_event_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_harem_event_req* db_get_harem_event_req::default_instance_ = NULL;

db_get_harem_event_req* db_get_harem_event_req::New() const {
  return new db_get_harem_event_req;
}

void db_get_harem_event_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 293;
    uuid_ = GOOGLE_ULONGLONG(0);
    event_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_harem_event_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_uuid;
        break;
      }

      // optional uint64 event_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_uuid_)));
          set_has_event_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_harem_event_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint64 event_uuid = 3;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->event_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_harem_event_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint64 event_uuid = 3;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->event_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_harem_event_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 event_uuid = 3;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_harem_event_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_harem_event_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_harem_event_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_harem_event_req::MergeFrom(const db_get_harem_event_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_harem_event_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_harem_event_req::CopyFrom(const db_get_harem_event_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_harem_event_req::IsInitialized() const {

  return true;
}

void db_get_harem_event_req::Swap(db_get_harem_event_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_harem_event_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_harem_event_req_descriptor_;
  metadata.reflection = db_get_harem_event_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_harem_event_ack::kProtoIdFieldNumber;
const int db_get_harem_event_ack::kUuidFieldNumber;
const int db_get_harem_event_ack::kEventFieldNumber;
#endif  // !_MSC_VER

db_get_harem_event_ack::db_get_harem_event_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_harem_event_ack::InitAsDefaultInstance() {
  event_ = const_cast< ::SProtoSpace::harem_compete_event*>(&::SProtoSpace::harem_compete_event::default_instance());
}

db_get_harem_event_ack::db_get_harem_event_ack(const db_get_harem_event_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_harem_event_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 294;
  uuid_ = GOOGLE_ULONGLONG(0);
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_harem_event_ack::~db_get_harem_event_ack() {
  SharedDtor();
}

void db_get_harem_event_ack::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void db_get_harem_event_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_harem_event_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_harem_event_ack_descriptor_;
}

const db_get_harem_event_ack& db_get_harem_event_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_harem_event_ack* db_get_harem_event_ack::default_instance_ = NULL;

db_get_harem_event_ack* db_get_harem_event_ack::New() const {
  return new db_get_harem_event_ack;
}

void db_get_harem_event_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 294;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_event()) {
      if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_harem_event_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }

      // optional .SProtoSpace.harem_compete_event event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_harem_event_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.harem_compete_event event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_harem_event_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.harem_compete_event event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_harem_event_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.harem_compete_event event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_harem_event_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_harem_event_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_harem_event_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_harem_event_ack::MergeFrom(const db_get_harem_event_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_event()) {
      mutable_event()->::SProtoSpace::harem_compete_event::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_harem_event_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_harem_event_ack::CopyFrom(const db_get_harem_event_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_harem_event_ack::IsInitialized() const {

  return true;
}

void db_get_harem_event_ack::Swap(db_get_harem_event_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_harem_event_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_harem_event_ack_descriptor_;
  metadata.reflection = db_get_harem_event_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_share_officer_upgrade_req::kProtoIdFieldNumber;
const int db_share_officer_upgrade_req::kDataFieldNumber;
#endif  // !_MSC_VER

db_share_officer_upgrade_req::db_share_officer_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_share_officer_upgrade_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::share_officer_upgrade*>(&::SProtoSpace::share_officer_upgrade::default_instance());
}

db_share_officer_upgrade_req::db_share_officer_upgrade_req(const db_share_officer_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_share_officer_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1528;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_share_officer_upgrade_req::~db_share_officer_upgrade_req() {
  SharedDtor();
}

void db_share_officer_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_share_officer_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_share_officer_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_share_officer_upgrade_req_descriptor_;
}

const db_share_officer_upgrade_req& db_share_officer_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_share_officer_upgrade_req* db_share_officer_upgrade_req::default_instance_ = NULL;

db_share_officer_upgrade_req* db_share_officer_upgrade_req::New() const {
  return new db_share_officer_upgrade_req;
}

void db_share_officer_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1528;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_share_officer_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.share_officer_upgrade data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_share_officer_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_share_officer_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_share_officer_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.share_officer_upgrade data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_share_officer_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_share_officer_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_share_officer_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_share_officer_upgrade_req::MergeFrom(const db_share_officer_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::share_officer_upgrade::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_share_officer_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_share_officer_upgrade_req::CopyFrom(const db_share_officer_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_share_officer_upgrade_req::IsInitialized() const {

  return true;
}

void db_share_officer_upgrade_req::Swap(db_share_officer_upgrade_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_share_officer_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_share_officer_upgrade_req_descriptor_;
  metadata.reflection = db_share_officer_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_share_officer_upgrade_ack::kProtoIdFieldNumber;
const int db_share_officer_upgrade_ack::kShareIdFieldNumber;
const int db_share_officer_upgrade_ack::kRoleIdFieldNumber;
const int db_share_officer_upgrade_ack::kWorldChannelIdFieldNumber;
const int db_share_officer_upgrade_ack::kGradeFieldNumber;
const int db_share_officer_upgrade_ack::kRetFieldNumber;
#endif  // !_MSC_VER

db_share_officer_upgrade_ack::db_share_officer_upgrade_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_share_officer_upgrade_ack::InitAsDefaultInstance() {
}

db_share_officer_upgrade_ack::db_share_officer_upgrade_ack(const db_share_officer_upgrade_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_share_officer_upgrade_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1529;
  share_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  world_channel_id_ = 0u;
  grade_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_share_officer_upgrade_ack::~db_share_officer_upgrade_ack() {
  SharedDtor();
}

void db_share_officer_upgrade_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_share_officer_upgrade_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_share_officer_upgrade_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_share_officer_upgrade_ack_descriptor_;
}

const db_share_officer_upgrade_ack& db_share_officer_upgrade_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_share_officer_upgrade_ack* db_share_officer_upgrade_ack::default_instance_ = NULL;

db_share_officer_upgrade_ack* db_share_officer_upgrade_ack::New() const {
  return new db_share_officer_upgrade_ack;
}

void db_share_officer_upgrade_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1529;
    share_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    world_channel_id_ = 0u;
    grade_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_share_officer_upgrade_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_share_id;
        break;
      }

      // optional uint64 share_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_id_)));
          set_has_share_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional int32 ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_share_officer_upgrade_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->share_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 world_channel_id = 4;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->world_channel_id(), output);
  }

  // optional uint32 grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->grade(), output);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_share_officer_upgrade_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->share_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 world_channel_id = 4;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->world_channel_id(), target);
  }

  // optional uint32 grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->grade(), target);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_share_officer_upgrade_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 share_id = 2;
    if (has_share_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 world_channel_id = 4;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional uint32 grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional int32 ret = 6;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_share_officer_upgrade_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_share_officer_upgrade_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_share_officer_upgrade_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_share_officer_upgrade_ack::MergeFrom(const db_share_officer_upgrade_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_share_id()) {
      set_share_id(from.share_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_share_officer_upgrade_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_share_officer_upgrade_ack::CopyFrom(const db_share_officer_upgrade_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_share_officer_upgrade_ack::IsInitialized() const {

  return true;
}

void db_share_officer_upgrade_ack::Swap(db_share_officer_upgrade_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(share_id_, other->share_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(grade_, other->grade_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_share_officer_upgrade_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_share_officer_upgrade_ack_descriptor_;
  metadata.reflection = db_share_officer_upgrade_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_share_officer_upgrade_req::kProtoIdFieldNumber;
const int db_get_share_officer_upgrade_req::kShareIdFieldNumber;
const int db_get_share_officer_upgrade_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_get_share_officer_upgrade_req::db_get_share_officer_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_share_officer_upgrade_req::InitAsDefaultInstance() {
}

db_get_share_officer_upgrade_req::db_get_share_officer_upgrade_req(const db_get_share_officer_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_share_officer_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1530;
  share_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_share_officer_upgrade_req::~db_get_share_officer_upgrade_req() {
  SharedDtor();
}

void db_get_share_officer_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_share_officer_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_share_officer_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_share_officer_upgrade_req_descriptor_;
}

const db_get_share_officer_upgrade_req& db_get_share_officer_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_share_officer_upgrade_req* db_get_share_officer_upgrade_req::default_instance_ = NULL;

db_get_share_officer_upgrade_req* db_get_share_officer_upgrade_req::New() const {
  return new db_get_share_officer_upgrade_req;
}

void db_get_share_officer_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1530;
    share_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_share_officer_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_share_id;
        break;
      }

      // optional uint64 share_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_id_)));
          set_has_share_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_share_officer_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->share_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_share_officer_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->share_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_share_officer_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 share_id = 2;
    if (has_share_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_share_officer_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_share_officer_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_share_officer_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_share_officer_upgrade_req::MergeFrom(const db_get_share_officer_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_share_id()) {
      set_share_id(from.share_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_share_officer_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_share_officer_upgrade_req::CopyFrom(const db_get_share_officer_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_share_officer_upgrade_req::IsInitialized() const {

  return true;
}

void db_get_share_officer_upgrade_req::Swap(db_get_share_officer_upgrade_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(share_id_, other->share_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_share_officer_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_share_officer_upgrade_req_descriptor_;
  metadata.reflection = db_get_share_officer_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_share_officer_upgrade_ack::kProtoIdFieldNumber;
const int db_get_share_officer_upgrade_ack::kRetFieldNumber;
const int db_get_share_officer_upgrade_ack::kRoleIdFieldNumber;
const int db_get_share_officer_upgrade_ack::kDataFieldNumber;
#endif  // !_MSC_VER

db_get_share_officer_upgrade_ack::db_get_share_officer_upgrade_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_share_officer_upgrade_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::share_officer_upgrade*>(&::SProtoSpace::share_officer_upgrade::default_instance());
}

db_get_share_officer_upgrade_ack::db_get_share_officer_upgrade_ack(const db_get_share_officer_upgrade_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_share_officer_upgrade_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1531;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_share_officer_upgrade_ack::~db_get_share_officer_upgrade_ack() {
  SharedDtor();
}

void db_get_share_officer_upgrade_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_get_share_officer_upgrade_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_share_officer_upgrade_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_share_officer_upgrade_ack_descriptor_;
}

const db_get_share_officer_upgrade_ack& db_get_share_officer_upgrade_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_get_share_officer_upgrade_ack* db_get_share_officer_upgrade_ack::default_instance_ = NULL;

db_get_share_officer_upgrade_ack* db_get_share_officer_upgrade_ack::New() const {
  return new db_get_share_officer_upgrade_ack;
}

void db_get_share_officer_upgrade_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1531;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_share_officer_upgrade_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.share_officer_upgrade data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_share_officer_upgrade_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_share_officer_upgrade_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_share_officer_upgrade_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.share_officer_upgrade data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_share_officer_upgrade_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_share_officer_upgrade_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_share_officer_upgrade_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_share_officer_upgrade_ack::MergeFrom(const db_get_share_officer_upgrade_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::share_officer_upgrade::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_share_officer_upgrade_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_share_officer_upgrade_ack::CopyFrom(const db_get_share_officer_upgrade_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_share_officer_upgrade_ack::IsInitialized() const {

  return true;
}

void db_get_share_officer_upgrade_ack::Swap(db_get_share_officer_upgrade_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_share_officer_upgrade_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_share_officer_upgrade_ack_descriptor_;
  metadata.reflection = db_get_share_officer_upgrade_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_role_popularity::kProtoIdFieldNumber;
const int db_add_role_popularity::kRoleIdFieldNumber;
const int db_add_role_popularity::kAddNumFieldNumber;
#endif  // !_MSC_VER

db_add_role_popularity::db_add_role_popularity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_role_popularity::InitAsDefaultInstance() {
}

db_add_role_popularity::db_add_role_popularity(const db_add_role_popularity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_role_popularity::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 295;
  role_id_ = GOOGLE_ULONGLONG(0);
  add_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_role_popularity::~db_add_role_popularity() {
  SharedDtor();
}

void db_add_role_popularity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_role_popularity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_role_popularity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_role_popularity_descriptor_;
}

const db_add_role_popularity& db_add_role_popularity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_add_role_popularity* db_add_role_popularity::default_instance_ = NULL;

db_add_role_popularity* db_add_role_popularity::New() const {
  return new db_add_role_popularity;
}

void db_add_role_popularity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 295;
    role_id_ = GOOGLE_ULONGLONG(0);
    add_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_role_popularity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_num;
        break;
      }

      // optional uint32 add_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_num_)));
          set_has_add_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_role_popularity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 add_num = 3;
  if (has_add_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_role_popularity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 add_num = 3;
  if (has_add_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->add_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_role_popularity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 add_num = 3;
    if (has_add_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_role_popularity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_role_popularity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_role_popularity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_role_popularity::MergeFrom(const db_add_role_popularity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_add_num()) {
      set_add_num(from.add_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_role_popularity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_role_popularity::CopyFrom(const db_add_role_popularity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_role_popularity::IsInitialized() const {

  return true;
}

void db_add_role_popularity::Swap(db_add_role_popularity* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(add_num_, other->add_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_role_popularity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_role_popularity_descriptor_;
  metadata.reflection = db_add_role_popularity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kick_role_req::kProtoidFieldNumber;
const int db_kick_role_req::kReasonFieldNumber;
const int db_kick_role_req::kRetFieldNumber;
const int db_kick_role_req::kSceneIdFieldNumber;
const int db_kick_role_req::kSceneTypeFieldNumber;
const int db_kick_role_req::kGameIdFieldNumber;
const int db_kick_role_req::kGtIdFieldNumber;
const int db_kick_role_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_kick_role_req::db_kick_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kick_role_req::InitAsDefaultInstance() {
}

db_kick_role_req::db_kick_role_req(const db_kick_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kick_role_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1712;
  reason_ = 0u;
  ret_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  gt_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kick_role_req::~db_kick_role_req() {
  SharedDtor();
}

void db_kick_role_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kick_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kick_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kick_role_req_descriptor_;
}

const db_kick_role_req& db_kick_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_kick_role_req* db_kick_role_req::default_instance_ = NULL;

db_kick_role_req* db_kick_role_req::New() const {
  return new db_kick_role_req;
}

void db_kick_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1712;
    reason_ = 0u;
    ret_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
    gt_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kick_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gt_id;
        break;
      }

      // optional uint64 gt_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gt_id_)));
          set_has_gt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kick_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_type(), output);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->game_id(), output);
  }

  // optional uint64 gt_id = 7;
  if (has_gt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gt_id(), output);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kick_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_type(), target);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->game_id(), target);
  }

  // optional uint64 gt_id = 7;
  if (has_gt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gt_id(), target);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kick_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 5;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 6;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 gt_id = 7;
    if (has_gt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gt_id());
    }

    // optional uint64 role_id = 8;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kick_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kick_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kick_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kick_role_req::MergeFrom(const db_kick_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_gt_id()) {
      set_gt_id(from.gt_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kick_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kick_role_req::CopyFrom(const db_kick_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kick_role_req::IsInitialized() const {

  return true;
}

void db_kick_role_req::Swap(db_kick_role_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reason_, other->reason_);
    std::swap(ret_, other->ret_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(gt_id_, other->gt_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kick_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kick_role_req_descriptor_;
  metadata.reflection = db_kick_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_kick_role_ack::kProtoidFieldNumber;
const int db_kick_role_ack::kReasonFieldNumber;
const int db_kick_role_ack::kRetFieldNumber;
const int db_kick_role_ack::kSceneIdFieldNumber;
const int db_kick_role_ack::kSceneTypeFieldNumber;
const int db_kick_role_ack::kGameIdFieldNumber;
const int db_kick_role_ack::kGtIdFieldNumber;
const int db_kick_role_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_kick_role_ack::db_kick_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_kick_role_ack::InitAsDefaultInstance() {
}

db_kick_role_ack::db_kick_role_ack(const db_kick_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_kick_role_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1713;
  reason_ = 0u;
  ret_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  gt_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_kick_role_ack::~db_kick_role_ack() {
  SharedDtor();
}

void db_kick_role_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_kick_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_kick_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_kick_role_ack_descriptor_;
}

const db_kick_role_ack& db_kick_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_kick_role_ack* db_kick_role_ack::default_instance_ = NULL;

db_kick_role_ack* db_kick_role_ack::New() const {
  return new db_kick_role_ack;
}

void db_kick_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1713;
    reason_ = 0u;
    ret_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
    gt_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_kick_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gt_id;
        break;
      }

      // optional uint64 gt_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gt_id_)));
          set_has_gt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_kick_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_type(), output);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->game_id(), output);
  }

  // optional uint64 gt_id = 7;
  if (has_gt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gt_id(), output);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_kick_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_type(), target);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->game_id(), target);
  }

  // optional uint64 gt_id = 7;
  if (has_gt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gt_id(), target);
  }

  // optional uint64 role_id = 8;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_kick_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 5;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 6;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 gt_id = 7;
    if (has_gt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gt_id());
    }

    // optional uint64 role_id = 8;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_kick_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_kick_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_kick_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_kick_role_ack::MergeFrom(const db_kick_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_gt_id()) {
      set_gt_id(from.gt_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_kick_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_kick_role_ack::CopyFrom(const db_kick_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_kick_role_ack::IsInitialized() const {

  return true;
}

void db_kick_role_ack::Swap(db_kick_role_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reason_, other->reason_);
    std::swap(ret_, other->ret_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(gt_id_, other->gt_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_kick_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_kick_role_ack_descriptor_;
  metadata.reflection = db_kick_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_load_offical_data_req::kProtoidFieldNumber;
const int db_load_offical_data_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

db_load_offical_data_req::db_load_offical_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_load_offical_data_req::InitAsDefaultInstance() {
}

db_load_offical_data_req::db_load_offical_data_req(const db_load_offical_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_load_offical_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1545;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_load_offical_data_req::~db_load_offical_data_req() {
  SharedDtor();
}

void db_load_offical_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_load_offical_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_load_offical_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_load_offical_data_req_descriptor_;
}

const db_load_offical_data_req& db_load_offical_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_load_offical_data_req* db_load_offical_data_req::default_instance_ = NULL;

db_load_offical_data_req* db_load_offical_data_req::New() const {
  return new db_load_offical_data_req;
}

void db_load_offical_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1545;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_load_offical_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_load_offical_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_load_offical_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_load_offical_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_load_offical_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_load_offical_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_load_offical_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_load_offical_data_req::MergeFrom(const db_load_offical_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_load_offical_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_load_offical_data_req::CopyFrom(const db_load_offical_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_load_offical_data_req::IsInitialized() const {

  return true;
}

void db_load_offical_data_req::Swap(db_load_offical_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_load_offical_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_load_offical_data_req_descriptor_;
  metadata.reflection = db_load_offical_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_load_offical_data_ack::kProtoidFieldNumber;
const int db_load_offical_data_ack::kRetFieldNumber;
const int db_load_offical_data_ack::kRoleIdFieldNumber;
const int db_load_offical_data_ack::kDataFieldNumber;
#endif  // !_MSC_VER

db_load_offical_data_ack::db_load_offical_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_load_offical_data_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::db_offical_data*>(&::SProtoSpace::db_offical_data::default_instance());
}

db_load_offical_data_ack::db_load_offical_data_ack(const db_load_offical_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_load_offical_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1546;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_load_offical_data_ack::~db_load_offical_data_ack() {
  SharedDtor();
}

void db_load_offical_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_load_offical_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_load_offical_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_load_offical_data_ack_descriptor_;
}

const db_load_offical_data_ack& db_load_offical_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_load_offical_data_ack* db_load_offical_data_ack::default_instance_ = NULL;

db_load_offical_data_ack* db_load_offical_data_ack::New() const {
  return new db_load_offical_data_ack;
}

void db_load_offical_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1546;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::db_offical_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_load_offical_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.db_offical_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_load_offical_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional .SProtoSpace.db_offical_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_load_offical_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional .SProtoSpace.db_offical_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_load_offical_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_offical_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_load_offical_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_load_offical_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_load_offical_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_load_offical_data_ack::MergeFrom(const db_load_offical_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::db_offical_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_load_offical_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_load_offical_data_ack::CopyFrom(const db_load_offical_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_load_offical_data_ack::IsInitialized() const {

  return true;
}

void db_load_offical_data_ack::Swap(db_load_offical_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_load_offical_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_load_offical_data_ack_descriptor_;
  metadata.reflection = db_load_offical_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_save_offical_data_req::kProtoidFieldNumber;
const int db_save_offical_data_req::kRoleIdFieldNumber;
const int db_save_offical_data_req::kDataFieldNumber;
#endif  // !_MSC_VER

db_save_offical_data_req::db_save_offical_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_save_offical_data_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::db_offical_data*>(&::SProtoSpace::db_offical_data::default_instance());
}

db_save_offical_data_req::db_save_offical_data_req(const db_save_offical_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_save_offical_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1547;
  role_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_save_offical_data_req::~db_save_offical_data_req() {
  SharedDtor();
}

void db_save_offical_data_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void db_save_offical_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_save_offical_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_save_offical_data_req_descriptor_;
}

const db_save_offical_data_req& db_save_offical_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdb_2eproto();
  return *default_instance_;
}

db_save_offical_data_req* db_save_offical_data_req::default_instance_ = NULL;

db_save_offical_data_req* db_save_offical_data_req::New() const {
  return new db_save_offical_data_req;
}

void db_save_offical_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1547;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::db_offical_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_save_offical_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.db_offical_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_save_offical_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.db_offical_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_save_offical_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.db_offical_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_save_offical_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_offical_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_save_offical_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_save_offical_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_save_offical_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_save_offical_data_req::MergeFrom(const db_save_offical_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::db_offical_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_save_offical_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_save_offical_data_req::CopyFrom(const db_save_offical_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_save_offical_data_req::IsInitialized() const {

  return true;
}

void db_save_offical_data_req::Swap(db_save_offical_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_save_offical_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_save_offical_data_req_descriptor_;
  metadata.reflection = db_save_offical_data_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
